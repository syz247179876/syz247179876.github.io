<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手写感知机算法</title>
    <link href="/2023/04/21/%E6%89%8B%E5%86%99%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%AE%97%E6%B3%95/"/>
    <url>/2023/04/21/%E6%89%8B%E5%86%99%E6%84%9F%E7%9F%A5%E6%9C%BA%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>在阅读了李航的《统计学习方法》第2章后，对自己的学习做个笔记，手写一个感知机算法，练练手。</p><p>感知机是二分类的线性分类模型，对于每一个输入的样本，感知机的原始形式是一个关于w,b的超平面。<br>感知机的学习过程是通过对数据集进行训练，找出最优的参数w,b，形成对应的超平面，将数据集分为无误判的两类。<br>训练过程即求解最优参数的过程，构造基于误分类的函数间距的Loss Function，学习的目标是找到使损失函数极小化的w和b，优化算法采用梯度下降算法，不断迭代更新w和b，直至算法收敛。最终求解出感知机模型。</p><p>感知机算法分为原始形式和对偶形式。下面分别手写两种形式的算法。</p><p><strong>注：本篇笔记侧重实现代码实现算法</strong></p><h3 id="二、原始形式算法实现"><a href="#二、原始形式算法实现" class="headerlink" title="二、原始形式算法实现"></a>二、原始形式算法实现</h3><h4 id="1-学习目标为w和b的感知机算法的原始形式"><a href="#1-学习目标为w和b的感知机算法的原始形式" class="headerlink" title="1.学习目标为w和b的感知机算法的原始形式"></a><strong>1.学习目标为w和b的感知机算法</strong>的原始形式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sklearn <span class="hljs-keyword">import</span> datasets<br><span class="hljs-keyword">from</span> matplotlib <span class="hljs-keyword">import</span> pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Perception</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-comment"># 感知机</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, </span></span><br><span class="hljs-function"><span class="hljs-params">                 n_features: <span class="hljs-built_in">int</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 iter_counts: <span class="hljs-built_in">int</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 n_samples: <span class="hljs-built_in">int</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 category: <span class="hljs-built_in">int</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 </span>):</span><br>        self.iter_counts = iter_counts  <span class="hljs-comment"># 迭代次数</span><br>        self.n_samples = n_samples      <span class="hljs-comment"># 样本数量</span><br>        self.learning_rate = <span class="hljs-number">1</span>  <span class="hljs-comment"># 学习率</span><br>        self.n_features = n_features   <span class="hljs-comment"># 样本特征维度</span><br>        self.category = category      <span class="hljs-comment"># 分类类别</span><br>        self.w = <span class="hljs-number">0</span>            <span class="hljs-comment"># 参数w</span><br>        self.b = <span class="hljs-number">0</span>            <span class="hljs-comment"># 参数b</span><br>        self.x = <span class="hljs-literal">None</span>         <span class="hljs-comment"># 训练集</span><br>        self.y = <span class="hljs-literal">None</span>         <span class="hljs-comment"># 训练集对应的标签</span><br>        self.pot_size = <span class="hljs-number">10</span>    <span class="hljs-comment"># 散点图中点大小</span><br>        self.errors = []      <span class="hljs-comment"># 每次迭代中出现的误分类次数</span><br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_data</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        数据生成</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 生成样本总容量为1500, 样本特征维度x(x1, x2)二维，分类类别两类，横纵轴边界在[-10, 10]范围内的数据集</span><br>        <span class="hljs-comment"># centers:表示分类类别, n_features表示样本特征维度大小, center_box表示横纵轴边界范围</span><br>        my_data = datasets.make_blobs(n_samples=self.n_samples, <br>                                      n_features=self.n_features,<br>                                      centers=self.category,<br>                                      center_box=(-<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)<br>                                      )<br>        self.x, self.y = my_data<br>        <span class="hljs-keyword">for</span> idx, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.y):<br>            <span class="hljs-keyword">if</span> y == <span class="hljs-number">0</span>:<br>                self.y[idx] = -<span class="hljs-number">1</span><br>        <span class="hljs-comment"># 绘制图像, c标识颜色, s表示大小</span><br>        <span class="hljs-comment"># plt.scatter(self.x[:, 0], self.x[:, 1], c=self.y, s=self.pot_size)</span><br>    <br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cal_y</span>(<span class="hljs-params">data: np.ndarray, w: np.ndarray, b: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        计算wx + b</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> np.dot(data, w) + b<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_gram</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">float</span>]]:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        生成gram矩阵</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># gram = [[0 for _ in range(self.n_samples)] for _ in range(self.n_samples)]</span><br>        <span class="hljs-comment"># for i in range(self.n_samples):</span><br>        <span class="hljs-comment">#     for j in range(i, self.n_samples):</span><br>        <span class="hljs-comment">#         gram[j][i] = gram[i][j] = np.dot(self.x[i], self.x[j])</span><br><br>        z = np.transpose(self.x)<br>        gram = np.dot(self.x, z)<br>        <span class="hljs-keyword">return</span> gram<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_origin</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-type">Tuple</span>[np.ndarray, <span class="hljs-built_in">float</span>]:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        原始形式</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 训练模型</span><br>        self.errors = []<br>        w = np.random.rand(self.n_features, <span class="hljs-number">1</span>)<br>        b = <span class="hljs-number">1</span><br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; self.iter_counts:<br>            error = <span class="hljs-number">0</span> <span class="hljs-comment"># 记录误分的次数</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_samples):<br>                xj, yj = self.x[j], self.y[j]<br>                y_value = self.cal_y(xj, w, b)<br>                <span class="hljs-keyword">if</span> yj * y_value &lt;= <span class="hljs-number">0</span>:<br>                    error += <span class="hljs-number">1</span><br>                    <span class="hljs-comment"># 给xj纵上增加一个维度,使之为2行1列</span><br>                    <span class="hljs-comment"># print(xj, yj)</span><br>                    w += self.learning_rate * np.expand_dims(xj, <span class="hljs-number">1</span>) * yj<br>                    b += self.learning_rate * yj<br>            self.errors.append(error)<br>            <span class="hljs-comment"># 无错分停止迭代</span><br>            <span class="hljs-keyword">if</span> error == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            i += <span class="hljs-number">1</span><br>        <br>        <span class="hljs-keyword">if</span> i == self.iter_counts:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在<span class="hljs-subst">&#123;self.iter_counts&#125;</span>有限迭代次数中总存在误分类情况&quot;</span>)<br>        self.w, self.b = w, b<br>        <span class="hljs-keyword">return</span> w, b<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_dual</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-type">Tuple</span>[np.ndarray, <span class="hljs-built_in">float</span>]:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        对偶形式</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.errors = []<br>        gram = self.generate_gram()<br>        a, b, i = np.zeros([self.n_samples, <span class="hljs-number">1</span>]), <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; self.iter_counts:<br>            error = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_samples):<br>                yj = self.y[j]<br>                <span class="hljs-comment"># y_value = b</span><br>                y_value = np.dot(gram[j], a * np.expand_dims(self.y, <span class="hljs-number">1</span>)) + b<br>                <span class="hljs-comment"># for k in range(self.n_samples):</span><br>                <span class="hljs-comment">#     y_value += a[k] * self.y[k] * gram[j][k]</span><br>                <span class="hljs-keyword">if</span> yj * y_value &lt;= <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment"># 出现误分类</span><br>                    error += <span class="hljs-number">1</span><br>                    a[j] += self.learning_rate<br>                    b += self.learning_rate * yj<br>            self.errors.append(error)<br>            <span class="hljs-keyword">if</span> error == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> i == self.iter_counts:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在<span class="hljs-subst">&#123;self.iter_counts&#125;</span>有限迭代次数中总存在误分类情况&quot;</span>)<br>        w = np.zeros([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>]).flatten()<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_samples):<br>            w += a[j] * self.y[j] * self.x[j]<br>        self.w, self.b = w, b<br>        <span class="hljs-keyword">return</span> w, b<br>                <br>        <br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">error_gui</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        每次迭代的误分类次数---折线图</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;参数w: <span class="hljs-subst">&#123;self.w.flatten()&#125;</span>, b： <span class="hljs-subst">&#123;self.b&#125;</span>&quot;</span>, )<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;迭代次数：&quot;</span>, self.iter_counts)<br>        fig = plt.figure()<br>        <span class="hljs-comment"># 创建一行一列一个坐标区</span><br>        ax = fig.subplots(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>        ax.set_title(<span class="hljs-string">&#x27;Misclassification of perceptron&#x27;</span>)<br>        ax.set_xlabel(<span class="hljs-string">&#x27;iteration counts&#x27;</span>)<br>        ax.set_ylabel(<span class="hljs-string">&#x27;misclassifications counts&#x27;</span>)<br>        ax.plot(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(self.errors)), self.errors)<br>        plt.show()<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hyperplane_gui</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        训练出来的超平面</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        fig = plt.figure()<br>        <span class="hljs-comment"># 共享纵横轴</span><br>        ax1, ax2 = fig.subplots(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, sharex=<span class="hljs-literal">True</span>, sharey=<span class="hljs-literal">True</span>)<br>        ax1.set_title(<span class="hljs-string">&#x27;Sample points&#x27;</span>)<br>        ax1.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>        ax1.set_ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>        ax1.scatter(self.x[:, <span class="hljs-number">0</span>], self.x[:, <span class="hljs-number">1</span>], c=self.y, s=self.pot_size)<br><br>        ax2.set_title(<span class="hljs-string">&#x27;Add hyperplane&#x27;</span>)<br>        ax2.set_xlabel(<span class="hljs-string">&#x27;x&#x27;</span>)<br>        ax2.set_ylabel(<span class="hljs-string">&#x27;y&#x27;</span>)<br>        ax2.scatter(self.x[:, <span class="hljs-number">0</span>], self.x[:, <span class="hljs-number">1</span>], c=self.y, s=self.pot_size)<br>        ax2.plot(self.x[:, <span class="hljs-number">0</span>], (-self.b - self.x[:, <span class="hljs-number">0</span>] * self.w[<span class="hljs-number">0</span>]) / self.w[<span class="hljs-number">1</span>], linewidth=<span class="hljs-number">2.0</span>)<br>        plt.show()<br>        <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>(<span class="hljs-params">self, use_dual: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <br>        <span class="hljs-keyword">if</span> use_dual:<br>            self.train_dual()<br>        <span class="hljs-keyword">else</span>:<br>            self.train_origin()<br>        p.error_gui()<br>        p.hyperplane_gui()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">p = Perception(<span class="hljs-number">2</span>, <span class="hljs-number">500</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">2</span>)<br>p()<br></code></pre></td></tr></table></figure><p>运行效果：</p><ul><li><p>例1：对于线性可分数据集：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">finish<br>参数w: [<span class="hljs-string">-32</span>.54612901 <span class="hljs-string">-22</span>.07273347], b： <span class="hljs-string">-30</span><br>迭代次数： 13<br></code></pre></td></tr></table></figure></li></ul><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421204626948.png" alt="image-20230421204626948"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421204649623.png" alt="image-20230421204649623"></p><ul><li><p>例2：对于线性不可分数据集：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">在<span class="hljs-number">100</span>有限迭代次数中总存在误分类情况<br>finish<br>参数w: [ <span class="hljs-number">1.14560324</span> -<span class="hljs-number">0.82259786</span>], b： -<span class="hljs-number">2</span><br>迭代次数： <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure></li></ul><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421204541540.png" alt="image-20230421204541540"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421204551181.png" alt="image-20230421204551181"></p><h4 id="1-学习目标为ni-i-1-2-3-4-5…-的感知机算法的对偶形式"><a href="#1-学习目标为ni-i-1-2-3-4-5…-的感知机算法的对偶形式" class="headerlink" title="1.学习目标为ni, i = 1,2,3,4,5….的感知机算法的对偶形式"></a><strong>1.学习目标为ni, i = 1,2,3,4,5….的感知机算法的对偶形式</strong></h4><p>只需要重写个train_dual算法，其余部分代码不需要动。</p><p>对偶形式，通过将w,b转换成关于ni（每个实例点的误分类次数）的增量，将学习目标转变成求解ni，即求损失函数极小值下的，求解最优参数ni。ni表示实例点更新的次数，即误分类次数，更新次数越多意味着实例点离超平面越近，对学习结果的影响越大。实现代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Perception</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">train_dual</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-type">Tuple</span>[np.ndarray, <span class="hljs-built_in">float</span>]:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        对偶形式</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        gram = self.generate_gram()<br>        a, b, i = np.zeros([self.n_samples, <span class="hljs-number">1</span>]), <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &lt; self.iter_counts:<br>            error = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_samples):<br>                yj = self.y[j]<br>                y_value = b<br>                <span class="hljs-comment"># 更新ai</span><br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_samples):<br>                    y_value += a[k] * self.y[k] * gram[j][k]<br>                <span class="hljs-keyword">if</span> y_value * yj &lt;= <span class="hljs-number">0</span>:<br>                    <span class="hljs-comment"># 出现误分类</span><br>                    error += <span class="hljs-number">1</span><br>                    a[j] += self.learning_rate<br>                    b += self.learning_rate * yj<br>            <span class="hljs-keyword">if</span> error == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> i == self.iter_counts:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;在<span class="hljs-subst">&#123;self.iter_counts&#125;</span>有限迭代次数中总存在误分类情况&quot;</span>)<br>        w = np.zeros([<span class="hljs-number">2</span>, <span class="hljs-number">1</span>]).flatten()<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.n_samples):<br>            w += a[j] * self.y[j] * self.x[j]<br>        self.w, self.b = w, b<br>        <span class="hljs-keyword">return</span> w, b<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">p = Perception(<span class="hljs-number">2</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">2</span>)<br>p.generate_data()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;采用原始形式训练&#x27;</span>)<br>p.run()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;采用对偶形式训练&#x27;</span>)<br>p.run(<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>测试结果：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">采用原始形式训练<br>参数w: [<span class="hljs-number">1.05789363</span> <span class="hljs-number">8.55426604</span>], b： <span class="hljs-number">35</span><br>迭代次数： <span class="hljs-number">100</span><br>采用对偶形式训练<br>参数w: [<span class="hljs-number">2.52959839</span> <span class="hljs-number">7.83869324</span>], b： <span class="hljs-number">29</span><br>迭代次数： <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><ul><li>原始形式：</li></ul><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421221129811.png" alt="image-20230421221129811"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421221151531.png" alt="image-20230421221151531"></p><ul><li>对偶形式</li></ul><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421221202720.png" alt="image-20230421221202720"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20230421221209697.png" alt="image-20230421221209697"></p><h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><ul><li><p>对于线性可分的数据集，如例1，感知机算法能够在有限的迭代次数内通过梯度下降算法找到最优参数，使得损失函数极小化，找到一个线性超平面去拟合所有实例点。</p></li><li><p>对于线性不可分的数据集，如例2，感知机算法无法收敛于最优参数解。</p></li><li><p>感知机算法主要用于二分类问题，其局限性很大，实际场景几乎不用。</p></li><li><p>对偶形式的感知机算法相对于原始形式来说，主要的区别在于，对偶形式下感知机算法学习的目标由对求w,b参数的最优解转变为求 ni的最优解, 通过将w,b转换为ni(每个实例点误分类的次数)。通过预计算Gram矩阵，将参数更新过程中涉及到的内积运算xi 和 xj的内积计算出来，当样本特征过高时，迭代更新变量时计算的内积非常耗时，因此通过预处理，然后直接查Gram矩阵表，可以加速模型训练速度，加速收敛。</p></li><li><p>通过最后4幅图，分别使用原始形式和对偶形式训练过程可以看出，对偶形式的迭代次数要比原始形式要少，因此符合其可以加速模型收敛速度的优势。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>机器学习</category>
      
      <category>人工智能</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>机器学习</tag>
      
      <tag>感知机算法</tag>
      
      <tag>人工智能</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解Python types类型模块</title>
    <link href="/2023/04/18/%E8%AF%A6%E8%A7%A3Python%20types%E7%B1%BB%E5%9E%8B%E6%A8%A1%E5%9D%97/"/>
    <url>/2023/04/18/%E8%AF%A6%E8%A7%A3Python%20types%E7%B1%BB%E5%9E%8B%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>Python是众所周知的动态类型语言， 其动态性主要体现的一方面是类型动态，通常定义变量或函数时无需显示指明其类型，由解释器在解释时去判断变量或函数返回的类型。Python基于鸭子协议和天生泛型的特点使得开发的效率变高了，但同样也带来一些问题，由于自由度变高，不强制使用类型声明，很多开发者都会按照自己编码的特性去编码，导致代码不规范。特别是大型项目中，团队内开发，对于复杂的逻辑，如果不显示指明变量或函数返回的类型，一方面代码Review时变得更加困难，另一方面增加了潜在的BUG。因此Python3.5 Version下推出了types模块，用于实现类型检查和类型自定义等规范化功能，提高安全型。</p><p>既然Python自身由于鸭子协议，没做完整的类型检查，那么就由types来实现变量，形参，函数的类型检查。</p><h3 id="二、常用类型提示"><a href="#二、常用类型提示" class="headerlink" title="二、常用类型提示"></a>二、常用类型提示</h3><ul><li>int，float，bool，str：整形，实型，布尔，字符串</li><li>List，Dict，Tuple，Set: 列表，字典，元组，集合</li><li>Iterable, Iterator，Generator：可迭代对象，迭代器，生成器</li><li>None: 空类型，全局实例唯一</li></ul><p><strong>举例：</strong>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TypesUsing</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test1</span>(<span class="hljs-params">self, name: <span class="hljs-built_in">str</span>, age: <span class="hljs-built_in">int</span>, hobby: <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>], family: <span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">int</span>], friends: <span class="hljs-type">Tuple</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>]</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span>(<span class="hljs-params">self, is_master: <span class="hljs-built_in">bool</span>, salary: <span class="hljs-built_in">float</span></span>):</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test3</span>(<span class="hljs-params">self, hobby: Iterable, dreams: Iterator, plan: Generator</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run</span>():</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">run2</span>():</span><br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><br>t = TypesUsing()<br>t.test1(<span class="hljs-string">&#x27;syz&#x27;</span>, <span class="hljs-number">24</span>, [<span class="hljs-string">&#x27;swim&#x27;</span>, <span class="hljs-string">&#x27;run&#x27;</span>], &#123;<span class="hljs-string">&#x27;father&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;mother&#x27;</span>: <span class="hljs-number">1</span>&#125;, (<span class="hljs-string">&#x27;zjw&#x27;</span>, <span class="hljs-string">&#x27;wm&#x27;</span>))<br>t.test2(<span class="hljs-literal">True</span>, <span class="hljs-number">15000.0</span>)<br>t.test3([<span class="hljs-string">&#x27;swim&#x27;</span>, <span class="hljs-string">&#x27;run&#x27;</span>], <span class="hljs-built_in">iter</span>([<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>]), run2())<br></code></pre></td></tr></table></figure><h3 id="三、Callable类型提示"><a href="#三、Callable类型提示" class="headerlink" title="三、Callable类型提示"></a>三、Callable类型提示</h3><p>Callable类型表示修饰的对象是一个可调用的对象。  </p><p>types模块中Callable用法：  </p><p><code>obj: Callable[[int, int], str]</code>表示obj对象是一个包含两个int类型的参数，返回值为str类型的可回调对象。  </p><p>举一个有点强度的举例：</p><p>先给个没有任何类型提示的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APIRouter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_route</span>(<span class="hljs-params">self, path, methods</span>):</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">func</span>):</span><br>            <span class="hljs-comment"># do other things</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;do other things&#x27;</span>)<br>            <span class="hljs-keyword">return</span> func<br><br>        <span class="hljs-keyword">return</span> decorator<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, path</span>):</span><br>        <span class="hljs-keyword">return</span> self.add_route(path, [<span class="hljs-string">&#x27;GET&#x27;</span>])<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.router = APIRouter()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, path</span>):</span><br>        <span class="hljs-keyword">return</span> self.router.get(path)<br>    <br>    <br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/user-info&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_info</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取个人信息&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述这段代码对于使用装饰器不够熟练的开发者来说，阅读起来比较吃力，需要去仔细分析每个参数以及每个函数的返回值是什么，如果这是业务代码，对于要快速理解这段代码的意思，需要花些时间。所以抛弃掉上述代码，来看下面这段加了类型提示的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APIRouter</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_route</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span>, methods: <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]] = <span class="hljs-literal">None</span></span>) -&gt; <span class="hljs-type">Callable</span>[[<span class="hljs-type">Callable</span>], <span class="hljs-type">Callable</span>]:</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">func: <span class="hljs-type">Callable</span></span>) -&gt; <span class="hljs-type">Callable</span>:</span><br>            <span class="hljs-comment"># do other things</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;do other things&#x27;</span>)<br>            <span class="hljs-keyword">return</span> func<br><br>        <span class="hljs-keyword">return</span> decorator<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Callable</span>[[<span class="hljs-type">Callable</span>], <span class="hljs-type">Callable</span>]:</span><br>        <span class="hljs-keyword">return</span> self.add_route(path, [<span class="hljs-string">&#x27;GET&#x27;</span>])<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.router = APIRouter()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, path: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-type">Callable</span>[[<span class="hljs-type">Callable</span>], <span class="hljs-type">Callable</span>]:</span><br>        <span class="hljs-keyword">return</span> self.router.get(path)<br>   <br><br>app = Application()<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&#x27;/api/user-info&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_info</span>():</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;获取个人信息&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在我们阅读很多框架源码时，往往会发现框架中的源码并不会写太多的注释，有时候甚至往往不写注释，因此快速理解某一段代码的意思，关键点有两个，一个是函数/变量名，另一个时函数返回类型/变量类型，通过这两个关键点可以快速理解该功能轮廓，然后再进一步进入函数体内部深入细节。  </p><p>当遇见<code>Callable[[Callable], Callable]</code>，函数的参数为某一个函数，返回这也为函数，这不就是典型的Python中的装饰器嘛。接着再来分析这段代码, 上述代码其实是装饰器工厂函数的变形体, 主要功能是在执行get_info前 do others things.  </p><p><code>@app.get(&#39;/api/user-info&#39;)</code>返回的类型为<code>Callable[[Callable], Callable]</code>，表明它是一个装饰器decorator，它修饰的函数<code>get_info</code>作为装饰器的参数<code>func</code>。  </p><p>这里稍微提一下一个知识点，装饰器的导入时和运行时，do other things会在真正调用<code>get_info</code>方法前执行。比如添加路由，然后再路由映射执行<code>get_info</code>方法。</p><h3 id="四、Optional类型提示"><a href="#四、Optional类型提示" class="headerlink" title="四、Optional类型提示"></a>四、Optional类型提示</h3><p>在实际开发中，传入函数的参数是可变的，即并不是所有的参数都需要传入，对于List，Dict，Set等可变对象来说，不能将他们设置成默认值，会导致数据出错，需要将其设置成None（可变防御参数），所以为了兼容None类型，使用Optional来包裹其他类型。  </p><p>types模块中Optional用法： <code>hobby: Optional[List[int]]</code></p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">name: <span class="hljs-built_in">str</span>, hobby: <span class="hljs-type">Optional</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:</span><br><span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h3 id="五、任意类型TypeVar"><a href="#五、任意类型TypeVar" class="headerlink" title="五、任意类型TypeVar"></a>五、任意类型TypeVar</h3><p>当不确定某个变量是什么类型时，可以使用<code>TypeVar(&#39;T&#39;)</code>修饰变量类型， T为类型名，如果限定变量为str或bytes，可以使用<code>AnyStr = TypeVar(&#39;AnyStr&#39;, bytes, str)</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TypeVar</span>(<span class="hljs-params">_TypingBase, _root=<span class="hljs-literal">True</span></span>):</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name, *constraints, bound=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 covariant=<span class="hljs-literal">False</span>, contravariant=<span class="hljs-literal">False</span></span>):</span><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">T = TypeVar(<span class="hljs-string">&#x27;T&#x27;</span>)<br>AnyStr = TypeVar(<span class="hljs-string">&#x27;AnyStr&#x27;</span>, <span class="hljs-built_in">bytes</span>, <span class="hljs-built_in">str</span>)  <span class="hljs-comment"># 类型名为AnyStr，只允许为bytes和str类型的变量</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func3</span>(<span class="hljs-params">name: T</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-built_in">print</span>(name)<br><br><br>func3(<span class="hljs-string">&#x27;SSS&#x27;</span>)<br>func3(<span class="hljs-number">111</span>)<br></code></pre></td></tr></table></figure><p>假设代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">T = TypeVar(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;str&#x27;</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func3</span>(<span class="hljs-params">name: T</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-built_in">print</span>(name)<br><br><br>func3(<span class="hljs-string">&#x27;SSS&#x27;</span>)<br>func3(<span class="hljs-number">111</span>) <span class="hljs-comment"># 报错, TypeError: A single constraint is not allowed</span><br></code></pre></td></tr></table></figure><h3 id="六、Union类型"><a href="#六、Union类型" class="headerlink" title="六、Union类型"></a>六、Union类型</h3><p>上述例子中提到了<code>AnyStr = TypeVar(&#39;AnyStr&#39;, bytes, str)  # 类型名为AnyStr，只允许为bytes和str类型的变量</code>，通过<code>Union</code>类型也可以等价的实现，<code>name: Union[bytes, str]</code>。  </p><p><code>Union[X, Y] means either X or Y.</code></p><p>举例：  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func3</span>(<span class="hljs-params">hobby: <span class="hljs-type">Union</span>[<span class="hljs-built_in">str</span>, <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-built_in">print</span>(name)<br></code></pre></td></tr></table></figure><p>未完待续~</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>类型检查</tag>
      
      <tag>规范化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯算法思想解决排列，子集，组合问题汇总</title>
    <link href="/2022/07/11/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3%E8%A7%A3%E5%86%B3%E6%8E%92%E5%88%97%EF%BC%8C%E5%AD%90%E9%9B%86%EF%BC%8C%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <url>/2022/07/11/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95%E6%80%9D%E6%83%B3%E8%A7%A3%E5%86%B3%E6%8E%92%E5%88%97%EF%BC%8C%E5%AD%90%E9%9B%86%EF%BC%8C%E7%BB%84%E5%90%88%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h3 id="回溯算法思想解决排列，组合-子集的九种-3x3-类型。"><a href="#回溯算法思想解决排列，组合-子集的九种-3x3-类型。" class="headerlink" title="回溯算法思想解决排列，组合/子集的九种(3x3)类型。"></a>回溯算法思想解决排列，组合/子集的九种(3x3)类型。</h3><p>类型一：元素不重复，不可复选。</p><p>类型二：元素可重复，不可复选。</p><p>类型三：元素无重复，可复选。</p><p><strong>注：</strong><br>1.涉及到回溯算法, 多画递归树去思考如何遍历和剪枝。</p><p>2.组合实际是在子集的基础上增加了条件。</p><p>3.排列不受序列顺序控制，组合/子集受序列顺序控制。</p><p><strong>剪枝技巧说明：</strong></p><p><strong>类型一：</strong></p><p>1.组合/子集, 使用start参数控制树的高度，避免重复的子集。</p><p>2.排列，使用used数组表示选择列表, used[i] == 1表示元素已被选择, 反之元素未被选择, 可剪枝。</p><p><strong>类型二：</strong></p><p>1.组合/子集, 需剪去相同元素带来的相同子集分支，因此需要先对目标数组排序，使用start参数控制树的高度，避免重复的子集，然后当满足<code>i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]</code>条件时, 剪枝。</p><p>假设存在[1, 2, 2’], 其中2和2’是同一个元素，为了区分，加<code>&#39;</code>进行区分。所以满足<code>i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]</code>条件剪的枝对应[1, 2’]。即如果某节点存在值相同的相邻树枝, 保留遍历第一条, 其余剪枝。</p><p>2.排列, 标准下的排列会产生重复的组合是因为我们把排列相同元素形成的不同排列序列当做了不同的排列组合，所以关键点在于<code>相同元素的不同排列序列</code>,因此为了解决类型二下的排列问题，我们不仅需要满足<code>i &gt; 0 &amp;&amp; nums[i] == nums[i - 1]</code>这个条件, 还需要固定元素的相对位置。</p><p>假设存在[1, 2, 2’, 2’’], 其中要满足 2在2’之前被选择, 2’ 在 2’’之前被选择。因此新的剪枝条件变成<code>i &gt; 0 &amp;&amp; nums[i] == nums[i - 1] &amp;&amp; !nums[i - 1]</code>。</p><p><strong>类型三：</strong></p><p>1.组合/子集, 在前两种类型中，我们使用start变量控制树的高度，避免重复的子集，每次递归时start是加1的。为了满足元素可被多次复选，在向下递归时, 将<code>start + 1</code> 改为 <code>start</code>，相当于为子分支增加一条树枝, 该树枝的值源于父节点，这样就可以无限复用已经选择的元素了。但要注意跳出条件。</p><p>2.排列, 在前两种类型中，我们使用used数组表示选择列表，控制可选的元素节点。因此为了实现元素可复选，只需去掉used数组剪枝即可。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git的cherry-pick合并指定分支</title>
    <link href="/2022/06/08/git%E7%9A%84cherry-pick%E5%90%88%E5%B9%B6%E6%8C%87%E5%AE%9A%E5%88%86%E6%94%AF/"/>
    <url>/2022/06/08/git%E7%9A%84cherry-pick%E5%90%88%E5%B9%B6%E6%8C%87%E5%AE%9A%E5%88%86%E6%94%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>在开发项目中, 将个人分支的代码合并到主分支, 或者将dev分支合并到release分支是常见的需求。</p><p>合并主要分为两种情况，一种是将分支上所有的commit合并到另一分支, 此时使用git merge即可实现。另一种试讲分支上某几个commit合并到另一分支, 此时就需要使用git cherry-pick来实现部分commit的合并。</p><h3 id="二、git-cherry-pick的基本用法"><a href="#二、git-cherry-pick的基本用法" class="headerlink" title="二、git cherry-pick的基本用法"></a>二、git cherry-pick的基本用法</h3><p><code>git cherry-pick &lt;commitHash&gt;</code>命令是将指定的commit合并到当前所在分支。</p><p>举个例子:</p><p>上线的项目中突然发生了问题, 我在个人分支修复了该问题, 此时比较紧急需要立马merge到release分支, 重新发布。假设存在release分支和dev-syz分支。需要将dev-syz分支的g合并到release中。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">release分支的commit历史线：a-&gt;b-&gt;c-&gt;d<br>dev-syz分支的commit历史线: a-&gt;b-&gt;c-&gt;d-&gt;e-&gt;f-&gt;g<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>1.d为release的最新的commit, g为修复改问题后的commit。</p><p>2.由于是修复紧急Bug，因此只想合并g commit。</p><p>现在将g commit合并到release分支，操作如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">git checkout release<br>git cherry-pick g<br></code></pre></td></tr></table></figure><p>完成上述操作后，release分支和dev-syz分支的最新commit历史线如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-function"><span class="hljs-title">release</span>分支的commit历史线：a-&gt;</span><span class="hljs-function"><span class="hljs-title">b</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">c</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span>g<br><span class="hljs-function"><span class="hljs-title">dev</span>-syz分支的commit历史线: a-&gt;</span><span class="hljs-function"><span class="hljs-title">b</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">c</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">d</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">e</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">f</span>-&gt;</span>g<br></code></pre></td></tr></table></figure><p>从上述结果可以看出，使用<code>git cherry-pick &lt;commitHash&gt;</code>转移指定分支实际上是在release上产生一个新的commit，只不过release上的g和dev-syz的g的 commitHash并不相同，但修改的代码内容是相同的。</p><h3 id="三、git-cherry-pick合并多个commit"><a href="#三、git-cherry-pick合并多个commit" class="headerlink" title="三、git cherry-pick合并多个commit"></a>三、git cherry-pick合并多个commit</h3><p>同样，使用<code>git cherry-pick &lt;commitHash1&gt; &lt;commitHash2&gt;</code>可以转移多个指定分支。</p><p>如果要转移一连串的commit，可以使用<code>git cherry-pick a..b</code>,意思是转移从commit a到commit b的一段连续的commit。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于低频的pHash算法 和 汉明距离 实现图像相似度对比算法</title>
    <link href="/2022/03/14/%E5%9F%BA%E4%BA%8E%E4%BD%8E%E9%A2%91%E7%9A%84pHash%E7%AE%97%E6%B3%95%20%E5%92%8C%20%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%AF%B9%E6%AF%94%E7%AE%97%E6%B3%95/"/>
    <url>/2022/03/14/%E5%9F%BA%E4%BA%8E%E4%BD%8E%E9%A2%91%E7%9A%84pHash%E7%AE%97%E6%B3%95%20%E5%92%8C%20%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB%20%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%83%8F%E7%9B%B8%E4%BC%BC%E5%BA%A6%E5%AF%B9%E6%AF%94%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在实现基于图像识别技术的桌面端元素捕获功能后，用户录制时捕获好了某张图像上的某个元素，在机器人回放时，需要重新进行图像识别，构建索引结构信息，然后对目标图像和识别后的各图像主体进行相似度比对，选择相似度最高的主体图像，然后基于该图像搜索索引结构，获取该图像的信息，最后，基于pyautogui进行模拟操作。</p><p>上述逻辑流程中核心点是图像相似度算法的选择和实现，在搜索了资料后，得出几种特征提取的算法,分别是基于低频的aHash/pHash/dHash, HOG, 三直方图和单通道直方图等。因此在学习这些算法后，选择了aHash作为特征提取算法，使用汉明距离计算相似度，并记录下自己学习的心得。</p><h3 id="图像的高频和低频"><a href="#图像的高频和低频" class="headerlink" title="图像的高频和低频"></a>图像的高频和低频</h3><p>低频：图像信号中的低频分量，指的是图像灰度变换平缓的地方，代表着连续渐变的一块区域，对应的是图像边缘以内的内容，即能够表示图像的大部分信息。</p><p>高频：与低频相反，高频即频率变化块的区域，就是相邻区域之间的灰度相差很大。在图像主体和图像背景的边缘部分，通常会有明显的差别，也就是说在变化的边缘处，灰度变化很大，频率高。同样，能被人眼一眼识别出来的图像细节处也是属于高频区域，正是因为灰度的急剧变化，才会出现细节。</p><p>在了解了低频和高频的概念后，接下来进入pHash算法。</p><p><strong>注：在图像处理过程中，通常我们会对图像进行噪点处理，噪点是指该点的像素值和正常点明显不一样，即灰度值不一样，相邻区域灰度值发生明显的变化，因而噪点也位于高频区域。</strong></p><h3 id="pHash算法"><a href="#pHash算法" class="headerlink" title="pHash算法"></a>pHash算法</h3><p>pHash算法的思路是对每个图片生成一个指纹字符串，pHash算法是改进版的aHash算法，aHash算法有两兄弟，pHash, dHash， 它们三个都是基于低频的算法。在前面介绍的低频的概念中，我们可以知道，低频能够表示图像的大部分信息，而高频表示的是图像中的轮廓和边缘部分。所以理论上来说，频度越低，计算出来的相似度越准确。</p><p>先来看下aHash算法的步骤，再看pHash算法的改进：</p><ul><li><p>将图片缩小到8 * 8，总共64个像素，这个步骤的作用是去除图片部分详细信息，去除图像的结构、明暗等细节信息，摒弃图像尺寸、缩放比例带来的差异。</p></li><li><p>将缩放后的图像转为灰度图，这个步骤的作用是减少图像色差所带来的的影响，同时方便转二值化图，进行汉明距离的计算。</p></li><li><p>计算灰度图中各点像素的均值，便于计算二值化。</p></li><li><p>二值化操作，扁平化二维数组, 遍历各点像素值，大于均值的设为1，小于均值的设为0, 这样就得到一个大小为64的一位数组。方便进行异或运算。</p></li><li><p>最后采用异或的方法计算汉明距离，汉明距离越小说明两个图像越相似。</p></li></ul><p>pHash算法采用了DCT(离散余弦变换)进一步降低图像的频率, 步骤如下:</p><ul><li><p>将图片缩小到 32 * 32大小, 便于生成DCT矩阵。</p></li><li><p>将缩放后的图像转为灰度图，步骤作用同aHash。</p></li><li><p>计算DCT，并选取坐上叫8 * 8的矩阵。DCT是一种特殊的傅里叶变换，将图片从像素域变换为频率域，并且DCT矩阵满足从左上角到右下角频率从小到大的系数变换，因此只需取左上角8 * 8的区域。</p></li><li><p>计算8 * 8区域中各点像素的均值。</p></li><li><p>二值化操作，扁平化二维数组, 遍历各点像素值，大于均值的设为1，小于均值的设为0, 这样就得到一个大小为64的一位数组。方便进行异或运算</p></li><li><p>最后采用异或的方法计算汉明距离，汉明距离越小说明两个图像越相似。</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>未完待续~<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>图像识别</category>
      
    </categories>
    
    
    <tags>
      
      <tag>特征提取算法</tag>
      
      <tag>相似度算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Redis数据结构之ZipList</title>
    <link href="/2022/02/11/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BZipList/"/>
    <url>/2022/02/11/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BZipList/</url>
    
    <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><blockquote><p>压缩列表是一个由特殊编码的连续内存块组组成，被设计用于节约内存的数据结构。它存储字节数组和整数两种类型的数据节点。</p></blockquote><p>我在看完了《Redis设计与实现》压缩列表这一节以及阅读完ziplist.c源码中头部的注释，对压缩列表的设计有了较深的体会，Redis的设计者简直是把内存使用节约到了极致。今天写篇笔记，记录下学习心得，进一步加深理解。</p><h3 id="二、ZipList的数据结构"><a href="#二、ZipList的数据结构" class="headerlink" title="二、ZipList的数据结构"></a>二、ZipList的数据结构</h3><p>我将压缩列表的数据结构分两部分介绍。第一部分为ZipList整体的布局，第二部分为ZipList节点的布局。</p><p>ZipList的数据结构不像其他数据结构以struct的形式存在，它只是一块连续的内存块，人为观念上将内存块分为若干固定大小的小内存块，每个小内存块都代表着各自的含义。源码位于<code>/src/ziplist.c</code>中。</p><p>首先先根据数据结构绘制出整体的结构图：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/ziplist%E7%BB%93%E6%9E%84%E4%BD%93.png" alt="ZipList结构图"></p><p><strong>压缩列表的整体结构说明：</strong></p><ul><li><p>zlbytes: 记录了整个压缩列表占用的字节数, 包含了zlbytes字段本身, 在内存重分配的时候无需遍历整个列表计算旧压缩列表的字节数。占4字节大小。</p></li><li><p>zltail: 记录了压缩列表的表尾节点距离起始地址有多少字节, 获取表尾节点无需遍历整个列表。占4字节大小。</p></li><li><p>zllen: 记录了压缩列表中的节点个数, 当节点个数大于2^16-2时, 需要通过遍历整个压缩列表才能得到节点个数。占2字节大小。</p></li><li><p>entry: 表示压缩列表的节点，压缩列表可以包含多个压缩节点。</p></li><li><p>zlend: 特殊值 0xFF (十进制 255 )，用于标识压缩列表的末尾。占1字节大小。</p></li></ul><p><strong>压缩列表节点的结构说明:</strong></p><ul><li>prevlen: 记录前驱节点的长度, 以字节为单位, 便于逆向遍历。</li><li>encoding: 记录了当前编码的形式以及数据长度。</li><li>entry-data: 保存了数据，可以是一个字节数组，也可以是一个整数，他们的大小取决于encoding。</li></ul><p><strong>注：当保存的数据为较小的整数时, 取值在1~12时,可以由encoding的低四位表示数值，这样就可以节省使用entry-data存储数值的内存空间。</strong></p><p>未完待续~</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Redis</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>Redis</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Redis数据结构之SDS</title>
    <link href="/2022/02/08/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BSDS/"/>
    <url>/2022/02/08/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8BSDS/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h3><p>在看了一段时间的《Redis设计与实现》后, 是时候回头仔细阅读下Redis的源码, 写下自己的学习心得, 研究下源码中所体现的数据结构的设计思路。今天, 趁着工作之余, 阅读下SDS相关的源码,学习下SDS设计到的二进制安全、内存的申请分配过程、SDS的空间预分配和惰性空间回收、SDS中为什么采用内存不自动对齐的方式定义多类型的结构体。</p><h3 id="二、-Redis的SDS数据结构"><a href="#二、-Redis的SDS数据结构" class="headerlink" title="二、 Redis的SDS数据结构"></a>二、 Redis的SDS数据结构</h3><p>SDS的数据结构的源码位于/src/sds.h中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">attribute__</span> ((__<span class="hljs-title">packed__</span>)) <span class="hljs-title">sdshdr5</span> &#123;</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flags; <span class="hljs-comment">/* 3 lsb of type, and 5 msb of string length */</span><br>    <span class="hljs-keyword">char</span> buf[];<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">attribute__</span> ((__<span class="hljs-title">packed__</span>)) <span class="hljs-title">sdshdr8</span> &#123;</span><br>    <span class="hljs-comment">// buf已使用的长度</span><br>    <span class="hljs-keyword">uint8_t</span> len;<br>    <span class="hljs-comment">// buf分配的长度,包含used buf和free buf(未使用空间), 排除&#x27;/0&#x27;字符, 因为buf中包含&#x27;/0&#x27;的结束符。</span><br>    <span class="hljs-keyword">uint8_t</span> alloc;<br>    <span class="hljs-comment">// 表示SDS_TYPE的标识, 在宏定义中可以看到, 目前最大64位上的TYPE标识为4, 对应二进制100,只用到3位, 有5位用不到</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flags;<br>    <span class="hljs-comment">// buf字符数组</span><br>    <span class="hljs-keyword">char</span> buf[];<br>&#125;;<br><br><span class="hljs-comment">// len和alloc大小为16位</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">attribute__</span> ((__<span class="hljs-title">packed__</span>)) <span class="hljs-title">sdshdr16</span> &#123;</span><br>    <span class="hljs-keyword">uint16_t</span> len;<br>    <span class="hljs-keyword">uint16_t</span> alloc;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flags;<br>    <span class="hljs-keyword">char</span> buf[];<br>&#125;;<br><br><span class="hljs-comment">// len和alloc大小为32位</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">attribute__</span> ((__<span class="hljs-title">packed__</span>)) <span class="hljs-title">sdshdr32</span> &#123;</span><br>    <span class="hljs-keyword">uint32_t</span> len;<br>    <span class="hljs-keyword">uint32_t</span> alloc;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flags;<br>    <span class="hljs-keyword">char</span> buf[];<br>&#125;;<br><br><span class="hljs-comment">// len和alloc大小为64位</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> __<span class="hljs-title">attribute__</span> ((__<span class="hljs-title">packed__</span>)) <span class="hljs-title">sdshdr64</span> &#123;</span><br>    <span class="hljs-keyword">uint64_t</span> len;<br>    <span class="hljs-keyword">uint64_t</span> alloc;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> flags;<br>    <span class="hljs-keyword">char</span> buf[];<br>&#125;;<br><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_5  0</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_8  1</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_16 2</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_32 3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_64 4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_MASK 7</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_BITS 3</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_HDR_VAR(T,s) struct sdshdr##T *sh = (void*)((s)-(sizeof(struct sdshdr##T)));</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_HDR(T,s) ((struct sdshdr##T *)((s)-(sizeof(struct sdshdr##T))))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SDS_TYPE_5_LEN(f) ((f)&gt;&gt;SDS_TYPE_BITS)</span><br><br></code></pre></td></tr></table></figure><p><strong>字段说明:</strong></p><ul><li>len：buf已使用的长度,长度小于等于alloc</li><li>alloc：buf分配的长度,包含used buf和free buf(未使用空间), 排除’/0’字符, 因为buf字符数组以’/0’的结束符。</li><li>flags：表示SDS_TYPE的标识, 在宏定义中可以看到, 目前最大64位上的TYPE标识为4, 对应二进制100,因此只用到3位, 有5位是用不到的。</li><li>buf：buf字符数组。</li></ul><p>1.Redis中定义了5中类型的SDS, 其中sdshdr5不会被使用到, 其他类型主要依据CPU的位数及字符串的大小。</p><p>2.使用<code>__attribute__ ((__packed__))</code>定义结构体, 告诉编译器取消字节自动对齐, 让结构体按照紧凑的方式进行对齐, 占用内存, 常用于结构体动态发生变化的情景下, 具体的作用会在下面分析SDS初始化过程中详细讲解。</p><p><strong>根据结构体定义, 我大致绘制了如下的数据结构图, 结合分析和代码可以更好的理解:</strong></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/sds%E7%BB%93%E6%9E%84%E4%BD%93.png" alt="SDS结构体"></p><h3 id="三、SDS初始化过程"><a href="#三、SDS初始化过程" class="headerlink" title="三、SDS初始化过程"></a>三、SDS初始化过程</h3><p>SDS初始化函数源码位于/src/sds.c中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c">sds _sdsnewlen(<span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *init, <span class="hljs-keyword">size_t</span> initlen, <span class="hljs-keyword">int</span> trymalloc) &#123;<br>    <span class="hljs-keyword">void</span> *sh;<br>    sds s;<br>    <span class="hljs-comment">// 根据sds初始长度, 计算出sds类型</span><br>    <span class="hljs-keyword">char</span> type = sdsReqType(initlen);<br>    <span class="hljs-comment">/* Empty strings are usually created in order to append. Use type 8</span><br><span class="hljs-comment">     * since type 5 is not good at this. */</span><br><br>    <span class="hljs-comment">// 如果类型是SDS_TYPE_5, 转为SDS_TYPE_8</span><br>    <span class="hljs-keyword">if</span> (type == SDS_TYPE_5 &amp;&amp; initlen == <span class="hljs-number">0</span>) type = SDS_TYPE_8;<br>    <span class="hljs-comment">// 获取结构体的大小</span><br>    <span class="hljs-keyword">int</span> hdrlen = sdsHdrSize(type);<br>    <span class="hljs-comment">// fp为指向flags的指针</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span> *fp; <span class="hljs-comment">/* flags pointer. */</span><br>    <span class="hljs-keyword">size_t</span> usable;<br><br>    assert(initlen + hdrlen + <span class="hljs-number">1</span> &gt; initlen); <span class="hljs-comment">/* Catch size_t overflow */</span><br><br>    <span class="hljs-comment">// 申请空间, sh指向申请的内存块的首地址</span><br>    sh = trymalloc?<br>        s_trymalloc_usable(hdrlen+initlen+<span class="hljs-number">1</span>, &amp;usable) :<br>        s_malloc_usable(hdrlen+initlen+<span class="hljs-number">1</span>, &amp;usable);<br>    <span class="hljs-keyword">if</span> (sh == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">if</span> (init==SDS_NOINIT)<br>        init = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!init)<br>        <span class="hljs-comment">// 如果不是初始化, 则将sh字符数组全部初始化为&#x27;\0&#x27;</span><br>        <span class="hljs-built_in">memset</span>(sh, <span class="hljs-number">0</span>, hdrlen+initlen+<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">// s指向buf的首地址</span><br>    s = (<span class="hljs-keyword">char</span>*)sh+hdrlen;<br>    <span class="hljs-comment">// fp指向flags的内存地址, 由于使用__attribute__ ((__packed__))取消字节自动对齐, 因此后退1字节, 就得到flags的地址</span><br>    fp = ((<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">char</span>*)s)<span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">// buf分配的空间大小, 减去结构体大小, 减去1, 即减去字符串末尾的&#x27;\0&#x27;字符。</span><br>    usable = usable-hdrlen<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (usable &gt; sdsTypeMaxSize(type))<br>        usable = sdsTypeMaxSize(type);<br>    <span class="hljs-comment">// 根据不同类型进行初始化</span><br>    <span class="hljs-keyword">switch</span>(type) &#123;<br>        <span class="hljs-keyword">case</span> SDS_TYPE_5: &#123;<br>            *fp = type | (initlen &lt;&lt; SDS_TYPE_BITS);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> SDS_TYPE_8: &#123;<br>            SDS_HDR_VAR(<span class="hljs-number">8</span>,s);<br>            sh-&gt;len = initlen;<br>            sh-&gt;alloc = usable;<br>            *fp = type;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> SDS_TYPE_16: &#123;<br>            SDS_HDR_VAR(<span class="hljs-number">16</span>,s);<br>            sh-&gt;len = initlen;<br>            sh-&gt;alloc = usable;<br>            *fp = type;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> SDS_TYPE_32: &#123;<br>            SDS_HDR_VAR(<span class="hljs-number">32</span>,s);<br>            sh-&gt;len = initlen;<br>            sh-&gt;alloc = usable;<br>            *fp = type;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">case</span> SDS_TYPE_64: &#123;<br>            SDS_HDR_VAR(<span class="hljs-number">64</span>,s);<br>            sh-&gt;len = initlen;<br>            sh-&gt;alloc = usable;<br>            *fp = type;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (initlen &amp;&amp; init)<br>        <span class="hljs-built_in">memcpy</span>(s, init, initlen);<br>    <span class="hljs-comment">// s末尾添加&#x27;\0&#x27;</span><br>    s[initlen] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>1.首先根据initlen初始长度, 计算出SDS类型编号, 如果类型是SDS_TYPE5, 则转为SDS_TYPE8, 并根据类型计算出结构体的大小hdrlen。</p><p>2.申请一块大小为initlen + hdrlen + 1字节大小的内存空间sh, sh指向内存块的首地址，initlen对应的是buf字符数组的初始长度, 额外加1是因为buf字符数组以’\0’结尾标识字符串的结束。</p><p>3.接着计算得到buf的首地址为sh + hdrlen，并由s指针指向。</p><p>4.得到了buf首地址之后，由于SDS的结构体采用<code>__attribute__ ((__packed__))</code>关键字定义，取消了内存自动对齐, 所以在计算flags内存地址时无需考虑不同类型的字段在内存对齐时带来字节差异。<code>fp = ((unsigned char*)s)-1</code>,只需后移sizeof(char)，即1字节的地址，就可得到flags的内存地址，这便是内存不自动对齐带来的好处之一, 不需要对类型进行多个if判断处理。如果采用内存对齐, 在不知道类型编号的情况下，计算flags内存地址将变得非常复杂，性能开销也许比内存不对齐的方式更大。</p><p>5.最后计算出buf分配的空间大小，由<code>usable-hdrlen-1</code>得到, usable为申请到的内存空间的大小, 减去结构体的大小，再减去一个’\0’字符大小,即得到buf字符数组的大小。其中buf字符数组包含了used buf 和free buf，free buf源于空间预分配和用于惰性空间回收。最终再根据类型编号，对sh的剩余字段进行初始化，返回指向buf首地址的指针s。</p><p><strong>注：结合上面的数据结构图有助于理解。</strong></p><h3 id="四、SDS的空间预分配和惰性回收机制（扩缩容"><a href="#四、SDS的空间预分配和惰性回收机制（扩缩容" class="headerlink" title="四、SDS的空间预分配和惰性回收机制（扩缩容)"></a>四、SDS的空间预分配和惰性回收机制（扩缩容)</h3><p><strong>空间预分配:</strong></p><blockquote><p>空间预分配用于优化SDS的字符串增长过程, 减少修改字符串时带来的内存空间重分配次数。</p></blockquote><p><strong>惰性回收机制:</strong></p><blockquote><p>惰性回收机制用于优化SDS的字符串缩短过程, 将缩短产生的空间归到buf free未使用空间中去, 不立即执行内存重分配，同样减少修改字符串时带来的内存重分配次数。</p></blockquote><p>首先来看空间预分配,由于空间预分配的分配过程发生于SDS的扩容过程, 因此我们可在<code>sdsMakeRoomFor</code>函数中目睹到空间预分配的真容。<br>函数源码位于/src/sds.c中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">sds <span class="hljs-title">sdsMakeRoomFor</span><span class="hljs-params">(sds s, <span class="hljs-keyword">size_t</span> addlen)</span> </span>&#123;<br>    <span class="hljs-comment">// SDS的扩容</span><br>    <span class="hljs-comment">// 定义两个指针, 一个指向旧SDS, 一个指向新SDS</span><br>    <span class="hljs-keyword">void</span> *sh, *newsh;<br>    <span class="hljs-comment">// 计算出free未使用空间, sh-&gt;alloc - sh-&gt;len;</span><br>    <span class="hljs-keyword">size_t</span> avail = sdsavail(s);<br>    <span class="hljs-keyword">size_t</span> len, newlen, reqlen;<br>    <br>    <span class="hljs-keyword">char</span> type, oldtype = s[<span class="hljs-number">-1</span>] &amp; SDS_TYPE_MASK;<br>    <span class="hljs-keyword">int</span> hdrlen;<br>    <span class="hljs-keyword">size_t</span> usable;<br><br>    <span class="hljs-comment">/* Return ASAP if there is enough space left. */</span><br>    <span class="hljs-comment">// 如果free未使用空间较充足, 则不扩容</span><br>    <span class="hljs-keyword">if</span> (avail &gt;= addlen) <span class="hljs-keyword">return</span> s;<br><br>    len = sdslen(s);<br>    <span class="hljs-comment">// sh指向旧SDS的首地址</span><br>    sh = (<span class="hljs-keyword">char</span>*)s-sdsHdrSize(oldtype);<br>    <span class="hljs-comment">// 新buf大小(不包含free未使用空间) = 旧buf大小 + 增量addlen</span><br>    reqlen = newlen = (len+addlen);<br>    assert(newlen &gt; len);   <span class="hljs-comment">/* Catch size_t overflow */</span><br><br>    <span class="hljs-comment">// 如果新buf的大小小于1M, 则newlen变为原来的两倍, 此处便是空间预分配, 在申请buf大小为newlen的内存空间的同时, 额外申请同样newlen大小的free未使用空间, 此时得到的buf总空间大小为2newlen + 1B</span><br>    <span class="hljs-keyword">if</span> (newlen &lt; SDS_MAX_PREALLOC)<br>        newlen *= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">else</span><br>    <span class="hljs-comment">// 如果新buf的大小大于1M, 则额外申请的free空间大小恒为1M, 此时得到的buf总空间大小为newlen + 1M + 1B</span><br>        newlen += SDS_MAX_PREALLOC;<br><br>    <span class="hljs-comment">// 根据newlen大小计算出新的type, 可能存在type变化</span><br>    type = sdsReqType(newlen);<br><br>    <span class="hljs-comment">/* Don&#x27;t use type 5: the user is appending to the string and type 5 is</span><br><span class="hljs-comment">     * not able to remember empty space, so sdsMakeRoomFor() must be called</span><br><span class="hljs-comment">     * at every appending operation. */</span><br>    <span class="hljs-keyword">if</span> (type == SDS_TYPE_5) type = SDS_TYPE_8;<br>    <br><span class="hljs-comment">// 计算出对应type的结构体大小</span><br>    hdrlen = sdsHdrSize(type);<br>    assert(hdrlen + newlen + <span class="hljs-number">1</span> &gt; reqlen);  <span class="hljs-comment">/* Catch size_t overflow */</span><br><br><br>    <span class="hljs-keyword">if</span> (oldtype==type) &#123;<br>        <span class="hljs-comment">// 复用旧SDS的内存空间上,在其基础上重新申请大小为hdrlen+newlen+1的空间</span><br>        newsh = s_realloc_usable(sh, hdrlen+newlen+<span class="hljs-number">1</span>, &amp;usable);<br>        <span class="hljs-keyword">if</span> (newsh == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-comment">// 重新指向buf的首地址</span><br>        s = (<span class="hljs-keyword">char</span>*)newsh+hdrlen;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* Since the header size changes, need to move the string forward,</span><br><span class="hljs-comment">         * and can&#x27;t use realloc */</span><br>        <span class="hljs-comment">// 重新申请大小hdrlen+newlen+1的空间</span><br>        newsh = s_malloc_usable(hdrlen+newlen+<span class="hljs-number">1</span>, &amp;usable);<br>        <span class="hljs-keyword">if</span> (newsh == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-keyword">char</span>*)newsh+hdrlen, s, len+<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 回收旧SDS的内存资源</span><br>        s_free(sh);<br>        <span class="hljs-comment">// 重新指向buf的首地址</span><br>        s = (<span class="hljs-keyword">char</span>*)newsh+hdrlen;<br>        s[<span class="hljs-number">-1</span>] = type;<br>        sdssetlen(s, len);<br>    &#125;<br>    <span class="hljs-comment">// 计算出新buf占用的总空间大小usable</span><br>    usable = usable-hdrlen<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">if</span> (usable &gt; sdsTypeMaxSize(type))<br>        usable = sdsTypeMaxSize(type);<br>    sdssetalloc(s, usable);<br>    <span class="hljs-comment">// 返回指向新buf的指针</span><br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析:</strong></p><p>1.首先会去判断buf free未使用空间是否充足，如果充足, 则无须扩容；否则计算出新的buf大小newlen(不包含free未使用空间)。根据newlen大小, 选择合适的空间预分配机制，存在以下两种：</p><ul><li>当newlen的大小小于1M,  额外申请同样newlen大小的free未使用空间,，此时得到的buf总空间大小为<code>2newlen + 1B</code>。1B为<code>\0</code>的大小。</li><li>当newlen的大小大于等于1M，额外申请1M大小的free未使用空间，此时得到的buf总空间大小为<code>newlen + 1M + 1B</code>。</li></ul><p>2.在计算得到总的buf后, 再根据buf大小计算出新SDS的type类型，当type不改变，复用旧SDS的内存空间上,在其基础上扩充内存大小至hardlen+newlen+1, 反之, 重新申请大小<code>hdrlen+newlen+1</code>的空间，将数据从旧的SDS拷贝到新的SDS, 回收旧SDS的内存资源。</p><p>3.SDS的动态扩容机制根据扩容前后的大小决定是否复用原SDS的内存空间。</p><p>4.由于SDS使用内存不对齐方式定义结构体, 因此对flags及buf地址的计算直接采用的是指针偏移方式。</p><p><strong>SDS的缩容过程如下，目的是重分配内存, 去除free未使用空间</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function">sds <span class="hljs-title">sdsRemoveFreeSpace</span><span class="hljs-params">(sds s)</span> </span>&#123;<br>    <span class="hljs-comment">// SDS的动态缩容, 即重分配内存, 去除free未使用空间</span><br>    <span class="hljs-keyword">void</span> *sh, *newsh;<br>    <span class="hljs-keyword">char</span> type, oldtype = s[<span class="hljs-number">-1</span>] &amp; SDS_TYPE_MASK;<br><br>    <span class="hljs-comment">// 根据旧类型计算出旧的结构体大小</span><br>    <span class="hljs-keyword">int</span> hdrlen, oldhdrlen = sdsHdrSize(oldtype);<br><br>    <span class="hljs-comment">// 计算出used buf和free buf</span><br>    <span class="hljs-keyword">size_t</span> len = sdslen(s);<br>    <span class="hljs-keyword">size_t</span> avail = sdsavail(s);<br><br>    <span class="hljs-comment">// 指针偏移到buf的首地址</span><br>    sh = (<span class="hljs-keyword">char</span>*)s-oldhdrlen;<br><br>    <span class="hljs-comment">/* Return ASAP if there is no space left. */</span><br>    <span class="hljs-keyword">if</span> (avail == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> s;<br><br>    <span class="hljs-comment">/* Check what would be the minimum SDS header that is just good enough to</span><br><span class="hljs-comment">     * fit this string. */</span><br>    type = sdsReqType(len);<br>    hdrlen = sdsHdrSize(type);<br><br>    <span class="hljs-comment">/* If the type is the same, or at least a large enough type is still</span><br><span class="hljs-comment">     * required, we just realloc(), letting the allocator to do the copy</span><br><span class="hljs-comment">     * only if really needed. Otherwise if the change is huge, we manually</span><br><span class="hljs-comment">     * reallocate the string to use the different header type. */</span><br><br>    <span class="hljs-comment">// 根据type,重分配内存, 去除free未使用空间</span><br>    <span class="hljs-keyword">if</span> (oldtype==type || type &gt; SDS_TYPE_8) &#123;<br>        newsh = s_realloc(sh, oldhdrlen+len+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (newsh == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        s = (<span class="hljs-keyword">char</span>*)newsh+oldhdrlen;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        newsh = s_malloc(hdrlen+len+<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (newsh == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">memcpy</span>((<span class="hljs-keyword">char</span>*)newsh+hdrlen, s, len+<span class="hljs-number">1</span>);<br>        s_free(sh);<br>        s = (<span class="hljs-keyword">char</span>*)newsh+hdrlen;<br>        s[<span class="hljs-number">-1</span>] = type;<br>        sdssetlen(s, len);<br>    &#125;<br>    sdssetalloc(s, len);<br>    <span class="hljs-comment">// 返回指向新buf首地址的指针</span><br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="五、SDS与普通的C字符串的区别"><a href="#五、SDS与普通的C字符串的区别" class="headerlink" title="五、SDS与普通的C字符串的区别"></a>五、SDS与普通的C字符串的区别</h3><p>1.<strong>SDS能在O(1)的时间复杂度内得到字符串长度</strong></p><p>​        C字符串往往以char []字符数组的形式表示, 因此要计算字符数组的长度的时间复杂度为O(N)。而SDS具备len字段，可以在O(1)的时间复杂度内得到字符串的长度。</p><p>2.<strong>SDS可以动态扩缩容字符串的长度，避免了C字符串可能引发的缓冲区溢出问题。</strong></p><p>​        缓冲区溢出是指发生在两个内存地址相邻的C动态字符数组上，在执行字符串拼接操作时，前一个字符串地址空间会溢出到后一个字符串的地址空间上，导致后一个字符串数据被修改。</p><p>3.<strong>SDS是二进制安全的</strong></p><p>​        我理解的二进制安全是指对输入的任何字节都能够正确的处理，包含特殊字符,如<code>&#39;\0&#39;</code>，转移字符等。因为SDS中定义了len字段，从而不用担心在字符串中间出现<code>&#39;\0&#39;</code>，会将其判断为字符串的末尾。</p><h3 id="六、SDS采用内存不自动对齐的方式定义结构体"><a href="#六、SDS采用内存不自动对齐的方式定义结构体" class="headerlink" title="六、SDS采用内存不自动对齐的方式定义结构体"></a>六、SDS采用内存不自动对齐的方式定义结构体</h3><p>在上文的分析中，已经谈到了SDS为什么使用<code>__attribute__ ((__packed__))</code>将结构体声明为内存非自动对齐。那么首先简单聊聊内存自动对齐，当访问未对齐的内存时,处理器需要做两次甚至多次内存访问,而对齐的内存访问只需要一次，便于CPU的快速访问。而在Redis的SDS中多类型结构体的场景下, 使用内存不自动对齐, 可以方便、高效地通过指针的偏移, 不用过多关注结构中字段的类型, 计算出flags和buf的内存地址。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Redis</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>Redis</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python项目中Git的hook的使用指南</title>
    <link href="/2022/01/24/Python%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8git%E9%92%A9%E5%AD%90%E7%9A%84%E6%8C%87%E5%8D%97/"/>
    <url>/2022/01/24/Python%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8git%E9%92%A9%E5%AD%90%E7%9A%84%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h3 id="Python项目使用git钩子的指南："><a href="#Python项目使用git钩子的指南：" class="headerlink" title="Python项目使用git钩子的指南："></a>Python项目使用git钩子的指南：</h3><h4 id="一、钩子介绍："><a href="#一、钩子介绍：" class="headerlink" title="一、钩子介绍："></a>一、钩子介绍：</h4><p>目前我已为当前项目增加三个git钩子，以Python + shell形式实现。分别为format_check.py + pre-commit.sh检验代码风格的钩子,inspect_modules + post-commit.sh模块增量检查钩子, message_check + commit-msg.sh commit的message规则校验钩子。</p><ul><li>代码风格校验钩子：通用钩子，目的规整统一项目开发过程中代码风格，遵循标准的pep8风格校验，会在每次git commit 前进行校验，符合规则的将commit成功，反之取消这次commit。</li><li>模块增量检查钩子： 用于Python项目的钩子，专为检测Python依赖包在开发过程中的迭代变化，会在每次git commit 完成后进行依赖包的增量检测，若当前新增包或者包的版本发生改变，则为当前的开发者在根目录下的package生成专门的文件夹，其中包含所有增量依赖包的源码文件，依赖包树形结构JSON文件，依赖包扁平化结构JSON文件。生成之后会自动git add 该文件夹,  而后git commit 和 git push 该文件夹需要自行执行。</li><li>message规则校验钩子： 通用钩子，遵循Angular提交规范，目的是规范项目合作开发中commit提交的信息，书写良好的commit message可以提高代码维护的效率，同时方便的阅读历史提交记录，能够自动生成change Log。</li></ul><h4 id="二、-钩子使用："><a href="#二、-钩子使用：" class="headerlink" title="二、 钩子使用："></a>二、 钩子使用：</h4><p>钩子文件存储位置位于项目根目录下的git_hook文件夹和.git/hooks文件夹下。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20220126110658922.png" alt="钩子实现库"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20220126111022788.png" alt="git钩子存放位置"></p><p>1.使用前需修改几处代码：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20220126112448593.png" alt="代码风格校验钩子"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20220126112514250.png" alt="模块增量检查钩子"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/emobile_2022-01-29_14-29-26.png" alt="message规则校验钩子"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20220126111213057.png" alt="post-commit"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20220126111230619.png" alt="pre-commit"></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/emobile_2022-01-29_14-30-21.png" alt="commit-msg"></p><p>2.修改完成后，将post-commit、pre-commit和commit-msg复制到.git/hooks文件夹下，方可。</p><h4 id="三、注意事项："><a href="#三、注意事项：" class="headerlink" title="三、注意事项："></a>三、注意事项：</h4><p>1.钩子函数的编写默认认为开发者使用的是虚拟环境，若开发者未使用虚拟环境，则需分别将post-commit和pre-commit中<code>source $VIRTUAL_PATH</code>代码注释掉。</p><p>2.对于代码风格校验钩子，如果想要跳过钩子检测，则执行git commit指令 后追加 <code>--no-verify</code>即可。</p><p>3.commit的message信息例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>): <span class="hljs-tag">&lt;<span class="hljs-name">short</span> <span class="hljs-attr">summary</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">feat(<span class="hljs-keyword">function</span> module): <span class="hljs-keyword">add</span> multiple <span class="hljs-built_in">new</span> <span class="hljs-keyword">functions</span> <span class="hljs-keyword">to</span> the <span class="hljs-keyword">function</span> library<br><br><span class="hljs-number">1.</span><span class="hljs-keyword">add</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">of</span> obtaining the specified region according <span class="hljs-keyword">to</span> the specific region.<br><span class="hljs-number">2.</span><span class="hljs-keyword">add</span> <span class="hljs-built_in">new</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">of</span> clearing variable <span class="hljs-keyword">within</span> robot operation.<br><span class="hljs-number">3.</span>optimize code <span class="hljs-keyword">of</span> <span class="hljs-keyword">function</span> <span class="hljs-keyword">of</span> `vague_match`<br><br></code></pre></td></tr></table></figure><p><strong>注：</strong><br>type的类型为以下之一</p><ul><li>feat：一项新功能</li><li>fix：一个错误修复</li><li>docs：仅文档更改</li><li>style：不会影响代码含义的更改（空格，格式，缺少分号等）</li><li>refactor：既不修正错误也不增加功能的代码更改</li><li>perf：代码更改可提高性能</li><li>test：添加缺失的测试或更正现有的测试</li><li>build：影响构建系统，CI 配置或外部依赖项的更改（比如：gulp，npm）</li><li>chore：其他不会修改 src 或测试文件的更改（比如文档修改，构建流程）</li><li>release：发布版本提交</li></ul><p>Angular的message规范文档:<a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit">https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit</a></p><p>GitHub仓库：<a href="https://github.com/syz247179876/git-hooks">https://github.com/syz247179876/git-hooks</a>**</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Redis数据结构之字典</title>
    <link href="/2022/01/21/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%97%E5%85%B8/"/>
    <url>/2022/01/21/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Redis%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h3><p>最近入手了一本书，《Redis的设计与实现》，在工作的闲暇之际，不断学习，持续给自己充能。在阅读前，拉了GitHub上的源码，准备结合这源码进行阅读。在阅读到字典的实现这一章节，回想起之前分析Python字典实现的源码过程，字典的数据结构存在着些许相似和不同。特此做一篇笔记分析下Redis字典涉及的数据结构及使用场景，对比Python的字典，有哪些不同的地方。</p><p>注：<br>1.本篇文章分析的Redis源码基于6.2.6 stable版本<br>2.<a href="https://hexo-syz247179876.vercel.app/2021/11/02/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84Dict%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/">源码分析Python的Dict关联式容器</a></p><h3 id="二、-Redis字典的数据结构"><a href="#二、-Redis字典的数据结构" class="headerlink" title="二、 Redis字典的数据结构"></a>二、 Redis字典的数据结构</h3><p>源码位于/src/dict.h头文件中，从最顶层的数据结构逐层往里分析，涉及有三个重要的数据结构。首先使dict结构体，源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dict</span> &#123;</span><br><br>    <span class="hljs-comment">// 类型特定函数，方便实现多态</span><br>    dictType *type;<br><br>    <span class="hljs-comment">// 私有数据，传递给特定类型的函数可选参数</span><br>    <span class="hljs-keyword">void</span> *privdata;<br><br>    <span class="hljs-comment">// hash表，包含两个项的数组, 一般用ht[0]hash表，ht[1]只会在对ht[0]哈希表进行rehash的时候。</span><br>    dictht ht[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">// rehash索引, 当进行rehash时 &gt; 0</span><br>    <span class="hljs-keyword">long</span> rehashidx; <span class="hljs-comment">/* rehashing not in progress if rehashidx == -1 */</span><br><br>    <span class="hljs-comment">// 暂停rehash</span><br>    <span class="hljs-keyword">int16_t</span> pauserehash; <span class="hljs-comment">/* If &gt;0 rehashing is paused (&lt;0 indicates coding error) */</span><br>&#125; dict;<br><br></code></pre></td></tr></table></figure><p>然后来看下具体hash表的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dictht</span> &#123;</span><br>    <span class="hljs-comment">// hash表是一个数组，里面每个元素为指向dictEntry对象的指针</span><br>    dictEntry **table;<br>    <span class="hljs-comment">// hash表的大小</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> size;<br>    <span class="hljs-comment">// hash表的掩码,用于计算索引值,索引值 = hash &amp; 掩码</span><br>    <span class="hljs-comment">// 总是等于size - 1</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> sizemask;<br>    <span class="hljs-comment">// hash表中已有的节点的数量</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> used;<br>&#125; dictht;<br></code></pre></td></tr></table></figure><p>最后来看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dictEntry</span> &#123;</span><br>    <span class="hljs-comment">// 保存着键</span><br>    <span class="hljs-keyword">void</span> *key;<br>    <span class="hljs-comment">// 保存着值, 支持有无符号的int和double</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>        <span class="hljs-keyword">void</span> *val;<br>        <span class="hljs-keyword">uint64_t</span> u64;<br>        <span class="hljs-keyword">int64_t</span> s64;<br>        <span class="hljs-keyword">double</span> d;<br>    &#125; v;<br>    <span class="hljs-comment">// 指向下一个同槽位的键值对节点，形成链表, 使用链地址法解决hash冲突</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">dictEntry</span> *<span class="hljs-title">next</span>;</span><br>&#125; dictEntry;<br></code></pre></td></tr></table></figure><p>根据如上的数据结构，可绘制如下的数据结构图：</p><p><img src="https://django-e-mall.oss-cn-shanghai.aliyuncs.com/redis_dict.png" alt="redis-dict结构图"></p><h3 id="三、Redis的Rehash操作"><a href="#三、Redis的Rehash操作" class="headerlink" title="三、Redis的Rehash操作"></a>三、Redis的Rehash操作</h3><p>看完了redis基本的数据结构, 接下来解读下redis rehash的源码。<code>dictRehash</code>函数源码位于/src/dict.c中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// rehash过程中如果rehash数量过大会阻塞服务器一段时间</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dictRehash</span><span class="hljs-params">(dict *d, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">// 最大扩容数量</span><br>    <span class="hljs-keyword">int</span> empty_visits = n*<span class="hljs-number">10</span>; <span class="hljs-comment">/* Max number of empty buckets to visit. */</span><br>    <span class="hljs-keyword">if</span> (!dictIsRehashing(d)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 是否正在进行rehash</span><br><br>    <span class="hljs-keyword">while</span>(n-- &amp;&amp; d-&gt;ht[<span class="hljs-number">0</span>].used != <span class="hljs-number">0</span>) &#123;<br>        dictEntry *de, *nextde;<br><br>        <span class="hljs-comment">/* Note that rehashidx can&#x27;t overflow as we are sure there are more</span><br><span class="hljs-comment">         * elements because ht[0].used != 0 */</span><br>        assert(d-&gt;ht[<span class="hljs-number">0</span>].size &gt; (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)d-&gt;rehashidx);<br>        <span class="hljs-comment">// 找到需要进行rehash的槽位</span><br>        <span class="hljs-keyword">while</span>(d-&gt;ht[<span class="hljs-number">0</span>].table[d-&gt;rehashidx] == <span class="hljs-literal">NULL</span>) &#123;<br>            d-&gt;rehashidx++;<br>            <span class="hljs-keyword">if</span> (--empty_visits == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 获取对应的dictEntry</span><br>        de = d-&gt;ht[<span class="hljs-number">0</span>].table[d-&gt;rehashidx];<br><br>        <span class="hljs-comment">// 遍历同槽位的链表,(redis的dict采用链地址法处理hash冲突)</span><br>        <span class="hljs-keyword">while</span>(de) &#123;<br>            <span class="hljs-keyword">uint64_t</span> h;<br>        <br>            nextde = de-&gt;next;<br>            <span class="hljs-comment">// 通过hash地址与第二个hash table项的地址掩码计算索引</span><br>            h = dictHashKey(d, de-&gt;key) &amp; d-&gt;ht[<span class="hljs-number">1</span>].sizemask;<br>            <br>            <span class="hljs-comment">// 采用头插法插入到第二个hash table的对应槽位上</span><br>            de-&gt;next = d-&gt;ht[<span class="hljs-number">1</span>].table[h];<br>            d-&gt;ht[<span class="hljs-number">1</span>].table[h] = de;<br><br>            <span class="hljs-comment">// 修改第一个和第二个hash table的used</span><br>            d-&gt;ht[<span class="hljs-number">0</span>].used--;<br>            d-&gt;ht[<span class="hljs-number">1</span>].used++;<br>            de = nextde;<br>        &#125;<br>        <span class="hljs-comment">// 将ht[0]对应槽位指针置空</span><br>        d-&gt;ht[<span class="hljs-number">0</span>].table[d-&gt;rehashidx] = <span class="hljs-literal">NULL</span>;<br>        d-&gt;rehashidx++;<br>    &#125;<br><br>    <span class="hljs-comment">/* Check if we already rehashed the whole table... */</span><br><br>    <span class="hljs-comment">// 如果hash table已经rehash完, 释放ht[0]的空间</span><br>    <span class="hljs-keyword">if</span> (d-&gt;ht[<span class="hljs-number">0</span>].used == <span class="hljs-number">0</span>) &#123;<br>        zfree(d-&gt;ht[<span class="hljs-number">0</span>].table);<br>        d-&gt;ht[<span class="hljs-number">0</span>] = d-&gt;ht[<span class="hljs-number">1</span>];<br>        _dictReset(&amp;d-&gt;ht[<span class="hljs-number">1</span>]);<br>        d-&gt;rehashidx = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* More to rehash... */</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><p>1.redis rehash的过程发生在ht[0]和ht[1]两个hash表项上,通过<code>rehashidx</code>值确定ht[0]上需要进行rehash的槽位。redis rehash的过程中实际是节点对象的指针迁移的过程。由于redis使用链地址法解决hash冲突,因此需要遍历每个槽位上的单链表, 重新计算节点在ht[1]上的槽位, 并采用头插法的方式重构冲突链。</p><p>2.在rehash完后,需要检查是否所有节点都已经rehash完，如果rehash完毕，则释放ht[0]中的哈希表内存资源。</p><p>3.我在看《Redis的设计与实现》一书中渐进式rehash章节时, 根据源码重新梳理了一下渐进式rehash的过程。</p><p>详细过程如下：</p><ol><li>首先根据<code>dictRehash</code>函数在dict.c中搜索调用者, 在<code>dictAddRaw</code>,<code>dictGenericDelete</code>, <code>dictFind</code>, <code>dictGetRandomKey</code>,<code>dictGetSomeKeys</code>这些函数中会执行渐进式rehash过程,即在对字典执行插入、删除、查找、随机获取等操作方法时, 会进行rehash。</li><li>dict-&gt;rehashidx属性会记录当前ht[0]中正在执行rehash的索引槽位, 并伴随整个rehash始终。当dict-&gt;rehashidx == -1时, 标志rehash完成或未开始。</li><li>redis的渐进式rehash过程中采用分治的思想，每当执行一次字典的相关操作时, 会首先将ht[0]哈希表在rehashidx槽位上的所有键值对rehash到ht[1]上,重新构成冲突链, 然后执行正常操作, 这样避免集中式rehash带来的大量计算以及短暂性阻塞服务器。</li><li>当在未来的某个时间点, ht[0]哈希表上所有的键值对都已经rehash到ht[1], 此时回收ht[0]上哈希表的资源, 将ht[1]作为ht[0], 将rehashidx属性重设置为-1。</li></ol><h3 id="四、Python字典和Redis字典在数据结构上的异同点"><a href="#四、Python字典和Redis字典在数据结构上的异同点" class="headerlink" title="四、Python字典和Redis字典在数据结构上的异同点"></a>四、Python字典和Redis字典在数据结构上的异同点</h3><p>不同点：</p><p>1.键对象和值对象的基本类型：</p><ul><li>在Python中，万物皆对象，每个对象都是基于PyObject结构体上进行实例化，因此键对象和值对象都是PyObject类型。</li><li>在Redis中，大部分对象, 例如dict的key和val都是基于C语言中的数据类型。</li><li>因此字典对象在内存上占用的空间也不同。</li></ul><p>2.处理hash冲突的方式：</p><ul><li>在Python中，采用的是直接定址法，计算下一个槽位的地址采用线性探测+对象的hash值结合计算，使得发生冲突的可能性减小。</li><li>在Redis中，采用拉链法，将同一槽位的键值体对象以链式结构，存储在同一槽位上。相比于直接定址法，hash冲突发生的可能性更小，但由于每个键值对实体之间由指针链接起来，因此需要额外的内存空间存放指针。</li></ul><p>3.扩缩容方式：</p><ul><li>Python中的扩缩容并不会基于原对象实现，而是申请一块合适大小的新对象。并将原对象上的键值对对象依次拷贝过去, 均摊后时间复杂度为O(1),但当发生扩容时,时间复杂度增长到O(N), 因此当扩容容量较大时, 会消耗更多的CPU资源。扩容机制往往是翻倍扩容。</li><li>Redis中的扩缩容基于原对象实现, 发生在ht[0]和ht[1]两个哈希表上, 允许渐进式rehash, 当开始rehash后, 每次dict操作都会触发ht[0]哈希表上指定rehashidx值对应的槽位上的所有键值对进行rehash, 像增加操作会添加到在ht[1]哈希表上。时间复杂度为O(1)。由于渐进式rehash将扩缩容操作均分到每个dict操作上, 因此rehash过程不会明显占用CPU资源, 不会短暂性阻塞服务器。</li></ul><p>4.垃圾回收机制：</p><ul><li>语言的垃圾回收机制往往较复杂, 在Python中存在三种垃圾回收机制, 以引用计数为主, 标记清除和分代回收为辅。</li><li>Redis的垃圾回收机制主要通过引用计数的方式进行资源回收, 当引用计数为0时, 标记对象不被任何其他对象引用, 可安全回收。引用计数字段为<code>refcount</code>, 在<code>redisObject</code>结构体中定义。例如<code>HSET game name Wizard3</code>, <code>game</code>为hash表对象, 其最终会封装为redisObject对象, ptr指向字典对象的地址空间, type和encoding决定dict采用ziplist还是hashtable编码实现, refcount记录着该对象被多少其他对象引用。</li></ul><p>相同点：未完待续~</p><h3 id="五、总结Redis的dict"><a href="#五、总结Redis的dict" class="headerlink" title="五、总结Redis的dict"></a>五、总结Redis的dict</h3><p>1.Redis字典的使用场景很广泛, 在阅读Redis db的数据结构中, 发现Redis的数据库其实是由字典组成, 主要由dict和expires两个字典组成, 前者负责保存存储在某db空间上的所有键值对,后者保存某db空间上所有键的过期时间戳, 因此对数据库的相关操作都是建立在字典操作之上的。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Redis</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>源码分析</tag>
      
      <tag>Redis</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>57.插入区间</title>
    <link href="/2022/01/20/%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4/"/>
    <url>/2022/01/20/%E6%8F%92%E5%85%A5%E5%8C%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>题目：给你一个 无重叠的 ，按照区间起始端点排序的区间列表。在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。</p></blockquote><p>例子</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：intervals = <span class="hljs-comment">[<span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[3,5]</span>,<span class="hljs-comment">[6,7]</span>,<span class="hljs-comment">[8,10]</span>,<span class="hljs-comment">[12,16]</span>]</span>, newInterval = <span class="hljs-comment">[4,8]</span><br>输出：<span class="hljs-comment">[<span class="hljs-comment">[1,2]</span>,<span class="hljs-comment">[3,10]</span>,<span class="hljs-comment">[12,16]</span>]</span><br>解释：这是因为新的区间 <span class="hljs-comment">[4,8]</span> 与 <span class="hljs-comment">[3,5]</span>,<span class="hljs-comment">[6,7]</span>,<span class="hljs-comment">[8,10]</span> 重叠。<br></code></pre></td></tr></table></figure><h4 id="算法思想："><a href="#算法思想：" class="headerlink" title="算法思想："></a>算法思想：</h4><p>1.将newInterval根据第一个数值插入到intervals中的指定位置。<br>2.对于不存在合并的区间，直接插入到新的区间。<br>3.对于存在合并情况，可能是区间单端重合，或者是区间两端都包含，则在数组的迭代过程中，不断更新区间两端, 使其分别取最小值和最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> typing <span class="hljs-keyword">import</span> <span class="hljs-type">List</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert</span>(<span class="hljs-params">self, intervals: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]], newInterval: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        算法思想</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> intervals:<br>            <span class="hljs-keyword">return</span> [newInterval]<br>        res = []<br>        flag = <span class="hljs-literal">False</span><br>        <span class="hljs-comment"># 将newInterval插入到合适的位置</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(intervals)):<br>            <span class="hljs-keyword">if</span> newInterval[<span class="hljs-number">0</span>] &lt; intervals[i][<span class="hljs-number">0</span>]:<br>                intervals.insert(i, newInterval)<br>                flag = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 追加到末尾</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>            intervals.append(newInterval)<br>        <span class="hljs-comment"># 如果当前数组的第二个值比下一个数组的第一个值小, 或者取当前数组的第一个值比下一个数组的第二个值大，则不需要合并</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(intervals) - <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> intervals[i][<span class="hljs-number">1</span>] &lt; intervals[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>] <span class="hljs-keyword">or</span> intervals[i][<span class="hljs-number">0</span>] &gt; intervals[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]:<br>                res.append(intervals[i])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 存在需要合并的情况, 取当前数组的第一个值和下一个数组的第一个值的最小值和当前数组的第二个值和下一个数组的第二个值的最大值</span><br>                <span class="hljs-comment"># 分别作为新数组的第一个值和第二个值</span><br>                intervals[i + <span class="hljs-number">1</span>] = [<span class="hljs-built_in">min</span>(intervals[i][<span class="hljs-number">0</span>], intervals[i + <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]), <span class="hljs-built_in">max</span>(intervals[i][<span class="hljs-number">1</span>], intervals[i + <span class="hljs-number">1</span>][<span class="hljs-number">1</span>])]<br><br>        <span class="hljs-keyword">return</span> res + [intervals[-<span class="hljs-number">1</span>]]<br><br><br>s = Solution()<br>res = s.insert([[<span class="hljs-number">3</span>, <span class="hljs-number">8</span>], [<span class="hljs-number">9</span>, <span class="hljs-number">12</span>], [<span class="hljs-number">14</span>, <span class="hljs-number">18</span>], [<span class="hljs-number">21</span>, <span class="hljs-number">22</span>]], [<span class="hljs-number">16</span>, <span class="hljs-number">21</span>])<br><br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><p><code>[[3, 8], [9, 12], [14, 22]]</code></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>迭代</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Asyncio处理网络IO的练习</title>
    <link href="/2022/01/10/Asyncio%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9CIO%E7%9A%84%E7%BB%83%E4%B9%A0/"/>
    <url>/2022/01/10/Asyncio%E5%A4%84%E7%90%86%E7%BD%91%E7%BB%9CIO%E7%9A%84%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-使用Asyncio处理多协程的网络I-O-请求获取商品信息数据"><a href="#一、-使用Asyncio处理多协程的网络I-O-请求获取商品信息数据" class="headerlink" title="一、 使用Asyncio处理多协程的网络I/O, 请求获取商品信息数据"></a>一、 使用Asyncio处理多协程的网络I/O, 请求获取商品信息数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> aiohttp<br><br><span class="hljs-keyword">from</span> common <span class="hljs-keyword">import</span> CacheProperty<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ManManBuyApi</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    慢慢买平台API</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    MAX_COROUTINE_NUM = <span class="hljs-number">10</span>  <span class="hljs-comment"># 执行的任务数</span><br>    BASE_URL = <span class="hljs-string">&#x27;http://api.manmanbuy.com/searchapi_utf8.aspx?&#x27;</span><br>    SHOPPING_BASE_URL = <span class="hljs-string">&#x27;http://sapi.manmanbuy.com/SiteList.aspx?&#x27;</span><br>    DETAIL_BASE_URL = <span class="hljs-string">&#x27;http://sapi.manmanbuy.com/Search_GetPrice.aspx?&#x27;</span><br>    AppKey = <span class="hljs-string">&#x27;&#x27;</span><br>    ATTR_MAP = &#123;<br>        <span class="hljs-string">&#x27;app_key&#x27;</span>: <span class="hljs-string">&#x27;AppKey&#x27;</span>,<br>        <span class="hljs-string">&#x27;key&#x27;</span>: <span class="hljs-string">&#x27;Key&#x27;</span>,<br>        <span class="hljs-string">&#x27;category&#x27;</span>: <span class="hljs-string">&#x27;Class&#x27;</span>,<br>        <span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;Brand&#x27;</span>,<br>        <span class="hljs-string">&#x27;site&#x27;</span>: <span class="hljs-string">&#x27;Site&#x27;</span>,<br>        <span class="hljs-string">&#x27;price_min&#x27;</span>: <span class="hljs-string">&#x27;PriceMin&#x27;</span>,<br>        <span class="hljs-string">&#x27;price_max&#x27;</span>: <span class="hljs-string">&#x27;PriceMax&#x27;</span>,<br>        <span class="hljs-string">&#x27;page_num&#x27;</span>: <span class="hljs-string">&#x27;PageNum&#x27;</span>,<br>        <span class="hljs-string">&#x27;page_size&#x27;</span>: <span class="hljs-string">&#x27;PageSize&#x27;</span>,<br>        <span class="hljs-string">&#x27;order_by&#x27;</span>: <span class="hljs-string">&#x27;OrderBy&#x27;</span>,<br>        <span class="hljs-string">&#x27;zy&#x27;</span>: <span class="hljs-string">&#x27;ZiYing&#x27;</span>,<br>        <span class="hljs-string">&#x27;zy_status&#x27;</span>: <span class="hljs-string">&#x27;zyStatus&#x27;</span>,<br>        <span class="hljs-string">&#x27;is_need_optimize&#x27;</span>: <span class="hljs-string">&#x27;isNeedOptimize&#x27;</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">            self,</span></span><br><span class="hljs-function"><span class="hljs-params">            key: <span class="hljs-built_in">str</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            category: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;0&quot;</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            brand: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;0&quot;</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            site: <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;0&quot;</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            price_min: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            price_max: <span class="hljs-built_in">int</span> = <span class="hljs-number">0</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            page_num: <span class="hljs-built_in">int</span> = <span class="hljs-number">1</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            page_size: <span class="hljs-built_in">int</span> = <span class="hljs-number">80</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            order_by: <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;score&#x27;</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            zy: <span class="hljs-built_in">bool</span> = <span class="hljs-literal">False</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            app_key: t.<span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    </span>):</span><br>        self.key = key<br>        self.category = category<br>        self.brand = brand<br>        self.site = site<br>        self.price_min = price_min<br>        self.price_max = price_max<br>        self.page_num = page_num<br>        self.page_size = page_size<br>        self.order_by = order_by<br>        self.zy = zy<br>        self.app_key = app_key <span class="hljs-keyword">or</span> self.AppKey<br><br><span class="hljs-meta">    @CacheProperty</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sku_url</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        构建请求url, 并缓存</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        url_params = <span class="hljs-string">&quot;&quot;</span><br>        params = self.__dict__.copy()<br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> params.items():<br>            url_params += <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.ATTR_MAP.get(key)&#125;</span>=<span class="hljs-subst">&#123;value&#125;</span>&amp;&#x27;</span><br>        <span class="hljs-keyword">return</span> self.BASE_URL + url_params + <span class="hljs-string">&#x27;&amp;ExtraParameter=0&#x27;</span><br><br><span class="hljs-meta">    @CacheProperty</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shopping_mall_url</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        辅助API商城名称的URL</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.SHOPPING_BASE_URL&#125;</span>AppKey=<span class="hljs-subst">&#123;self.AppKey&#125;</span>&amp;SiteId=0&#x27;</span><br><br><span class="hljs-meta">    @CacheProperty</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sku_detail_url</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        辅助API(商品详情)的URL</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.DETAIL_BASE_URL&#125;</span>AppKey=<span class="hljs-subst">&#123;self.AppKey&#125;</span>&#x27;</span><br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_goods</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        异步请求</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.request(<span class="hljs-string">&#x27;GET&#x27;</span>, self.sku_url) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.json(content_type=<span class="hljs-string">&#x27;text/html&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_shopping</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        辅助API, 获取商城ID和商城名称对应API</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(self.shopping_mall_url)<br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.request(<span class="hljs-string">&#x27;GET&#x27;</span>, self.shopping_mall_url) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.text()<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_detail</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        辅助API, 根据商品ID获取商品信息</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> aiohttp.request(<span class="hljs-string">&#x27;GET&#x27;</span>, self.sku_detail_url) <span class="hljs-keyword">as</span> response:<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">await</span> response.text()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span>(<span class="hljs-params">self, result</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        将数据添加到数据库</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;回调函数&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        协程执行入口</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        start_time = time.time()<br>        tasks = []<br>        loop = asyncio.get_event_loop()<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.MAX_COROUTINE_NUM):<br>            task = asyncio.ensure_future(man_man_buy.get_shopping())<br>            task.add_done_callback(self.callback)<br>            tasks.append(task)<br>        loop.run_until_complete(asyncio.wait(tasks))<br>        end_time = time.time()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;开<span class="hljs-subst">&#123;self.MAX_COROUTINE_NUM&#125;</span>个任务异步处理,总耗时：<span class="hljs-subst">&#123;end_time - start_time&#125;</span>&#x27;</span>)<br><br><br>man_man_buy = ManManBuyApi(<span class="hljs-string">&quot;phone&quot;</span>)<br>man_man_buy.main() <span class="hljs-comment"># 启动程序</span><br></code></pre></td></tr></table></figure><p>开10个task异步请求,得到的结果：<code>开10个任务异步处理,总耗时：0.3374154567718506</code></p><h3 id="二、-同步处理请求10次"><a href="#二、-同步处理请求10次" class="headerlink" title="二、 同步处理请求10次"></a>二、 同步处理请求10次</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>start_time = time.time()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(man_man_buy.MAX_COROUTINE_NUM):<br>    requests.get(man_man_buy.shopping_mall_url)<br>end_time = time.time()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;同步发送<span class="hljs-subst">&#123;man_man_buy.MAX_COROUTINE_NUM&#125;</span>请求,总耗时：<span class="hljs-subst">&#123;end_time - start_time&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>同步请求10次,得到的结果：<code>同步发送10请求,总耗时：1.6389296054840088</code></p>]]></content>
    
    
    <categories>
      
      <category>Asyncio</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Asyncio</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Python的GIL解释器锁的构造与实现</title>
    <link href="/2022/01/04/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84GIL%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/01/04/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84GIL%E8%A7%A3%E9%87%8A%E5%99%A8%E9%94%81%E7%9A%84%E6%9E%84%E9%80%A0%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h3><p>之前写过一篇笔记，从理论上学了了GIL解释器锁，文章地址:<a href="https://hexo-syz247179876.vercel.app/2020/08/05/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6GIL%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/">深入探究GIL的利与弊</a>。当时使用的Python版本比较旧，可能与当前文章中部分源码说明有出入。</p><p>今天通过深挖源码，学习下Python底层是如何实现GIL解释器锁，分析下GIL    解释器锁的构造与应用, 探寻为什么这把GIL锁锁的是字节码。本篇笔记使用的Python版本为3.11.0 alpha 0。</p><h3 id="二、GIL锁的构造"><a href="#二、GIL锁的构造" class="headerlink" title="二、GIL锁的构造"></a>二、GIL锁的构造</h3><p>1.GIL结构体位于/Include/internal/pycore_gil.h头文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">gil_runtime_state</span> &#123;</span><br>    <span class="hljs-comment">// Python方法占据锁的时间, 单位为微秒</span><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> interval;<br>    <span class="hljs-comment">// 最后拥有锁的持有者</span><br>    _Py_atomic_address last_holder;<br>    <span class="hljs-comment">// 标识GIL解释器锁是否被某个线程拿到, 其他线程可以通过locked字段用于判断是否具备执行权或是阻塞</span><br>    _Py_atomic_int locked;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> switch_number;<br><br>    <span class="hljs-comment">// 条件变量, 用于阻塞其他线程直至GIL解释器锁被释放的条件满足</span><br>    PyCOND_T cond;<br>    <span class="hljs-comment">// 互斥变量, 用于确保对变量的修改同步执行, 也就导致了CPython中多个线程在CPU密集情况下只能互斥执行。</span><br>    PyMUTEX_T mutex;<br>    <br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> FORCE_SWITCHING</span><br>    <span class="hljs-comment">/* This condition variable helps the GIL-releasing thread wait for</span><br><span class="hljs-comment">       a GIL-awaiting thread to be scheduled and take the GIL. */</span><br><br>    <span class="hljs-comment">// 用于阻塞释放锁的进程直到任意等待的线程拿到GIL, 并上处理机执行, 不能在释放锁后, 就不管了。</span><br>    PyCOND_T switch_cond;<br>    PyMUTEX_T switch_mutex;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1). interval: 每一个Python的API所占用锁的时间，单位为微秒。</p><p>(2). last_holder: 用于记录最后持有该锁的线程，这样便于检测锁是否被其他线程拿到，然后重新调度。</p><p>(3). locked: 标识GIL解释器锁是否被某个线程拿到, 其他线程可以通过locked字段用于判断是否具备执行权或是阻塞</p><p>(4). cond: 条件变量，用于阻塞其他线程直至GIL解释器锁被释放的条件满足，常用于和mutex一起使用，实现互斥同步访问。</p><p>(5). mutex: 互斥变量， 用于确保对变量的修改同步执行。</p><p>(6). switch_cond: 等待锁重新被其他线程拿到的条件变量。</p><p>(7). switch_mutex: 用于阻塞释放锁的进程直到任意等待的线程拿到GIL, 并上处理机执行。</p><p>(8). switc_number: 用于记录运行过程中GIL解释器锁切换到不同执行线程的次数。</p><p>2.PyCOND_T结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 条件结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">PyCOND_T</span></span><br><span class="hljs-class">&#123;</span><br>    HANDLE sem;  <span class="hljs-comment">// 内核对象, 能够通知和被通知, 用于一个线程发送锁释放通知，其他线程可接受到通知, 去抢锁。 </span><br>    <span class="hljs-keyword">int</span> waiting; <span class="hljs-comment">/* to allow PyCOND_SIGNAL to be a no-op */</span><br>&#125; PyCOND_T;<br></code></pre></td></tr></table></figure><p>3.<code>typedef CRITICAL_SECTION PyMUTEX_T;</code> PyMUTEX_T是一个线程锁, 用于确保多线程中在临界区的互斥执行。</p><p>4.从上面的数据结构可以看到，Python底层的这把GIL解释器锁通过条件变量+”互斥量”来实现多线程中的同步互斥执行，其中的互斥量不再简单是大学操作系统书上的0或者1，而是使用CRITICAL_SECTION线程锁来充当””互斥量”, 与此同时，操作系统书上的mutex的0/1值在这里也就对应上加锁与解锁了。</p><p>5.条件变量的初始化和释放以及互斥量的初始化，加锁，解锁和释放的源码位于/Python/condvar.h头文件中，具体如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Py_LOCAL_INLINE(<span class="hljs-params">int</span>)</span><br><span class="hljs-constructor">PyMUTEX_INIT(PyMUTEX_T <span class="hljs-operator">*</span><span class="hljs-params">cs</span>)</span><br>&#123;<br>    <span class="hljs-constructor">InitializeCriticalSection(<span class="hljs-params">cs</span>)</span>; <span class="hljs-comment">// 初始化锁</span><br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-constructor">Py_LOCAL_INLINE(<span class="hljs-params">int</span>)</span><br><span class="hljs-constructor">PyMUTEX_FINI(PyMUTEX_T <span class="hljs-operator">*</span><span class="hljs-params">cs</span>)</span><br>&#123;<br>    <span class="hljs-constructor">DeleteCriticalSection(<span class="hljs-params">cs</span>)</span>; <span class="hljs-comment">// 删除锁</span><br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-constructor">Py_LOCAL_INLINE(<span class="hljs-params">int</span>)</span><br><span class="hljs-constructor">PyMUTEX_LOCK(PyMUTEX_T <span class="hljs-operator">*</span><span class="hljs-params">cs</span>)</span><br>&#123;<br>    <span class="hljs-constructor">EnterCriticalSection(<span class="hljs-params">cs</span>)</span>; <span class="hljs-comment">// 加锁</span><br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-constructor">Py_LOCAL_INLINE(<span class="hljs-params">int</span>)</span><br><span class="hljs-constructor">PyMUTEX_UNLOCK(PyMUTEX_T <span class="hljs-operator">*</span><span class="hljs-params">cs</span>)</span><br>&#123;<br>    <span class="hljs-constructor">LeaveCriticalSection(<span class="hljs-params">cs</span>)</span>;  <span class="hljs-comment">// 解锁</span><br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-constructor">Py_LOCAL_INLINE(<span class="hljs-params">int</span>)</span><br><span class="hljs-constructor">PyCOND_INIT(PyCOND_T <span class="hljs-operator">*</span><span class="hljs-params">cv</span>)</span><br>&#123;<br>    <span class="hljs-comment">/* A semaphore with a &quot;large&quot; max value,  The positive value</span><br><span class="hljs-comment">     * is only needed to catch those &quot;lost wakeup&quot; events and</span><br><span class="hljs-comment">     * race conditions when a timed wait elapses.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 初始化条件变量</span><br>    cv-&gt;sem = <span class="hljs-constructor">CreateSemaphore(NULL, 0, 100000, NULL)</span>;<br>    <span class="hljs-keyword">if</span> (cv-&gt;sem==NULL)<br>        return -<span class="hljs-number">1</span>;<br>    cv-&gt;waiting = <span class="hljs-number">0</span>;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-constructor">Py_LOCAL_INLINE(<span class="hljs-params">int</span>)</span><br><span class="hljs-constructor">PyCOND_FINI(PyCOND_T <span class="hljs-operator">*</span><span class="hljs-params">cv</span>)</span><br>&#123;<br>    return <span class="hljs-constructor">CloseHandle(<span class="hljs-params">cv</span>-&gt;<span class="hljs-params">sem</span>)</span> ? <span class="hljs-number">0</span> : -<span class="hljs-number">1</span>;  <span class="hljs-comment">// 关闭内核对象</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、-GIL锁涉及的操作集"><a href="#三、-GIL锁涉及的操作集" class="headerlink" title="三、 GIL锁涉及的操作集"></a>三、 GIL锁涉及的操作集</h3><p>接下来简要分析GIL相关的操作集，其实看到了这里，知道了GIL锁实际上就是由条件变量+互斥变量构造出的一把线程锁，当启动一个Python解释器，会创建一个主线程，当只有一个主线程，加不加锁并不会降太多速度，只是在按行执行每条字节码时增加了加锁和解锁的开销罢了。但是当在一个解释器进程中开辟多个线程，那么由于存在线程锁，在不会主动释放执行权的CPU密集型任务中，只能够通过执行一定量的字节码或者执行一段时间片，被迫释放执行权，由操作系统重新调度其他线程执行，这种情况下，多线程在单核CPU上由于锁的存在，被迫同步互斥执行，执行效率远不及真正的多线程并发执行，执行效率甚至可能还不如单线程，毕竟在Windows上来说线程的上下文切换要在内核完成，因此少不了内核态和用户态的频繁相互切换。</p><p>GIL锁相关的宏定义源码位于:/Python/ceval_gil.h中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MUTEX_INIT(mut) \</span><br>    <span class="hljs-keyword">if</span> (PyMUTEX_INIT(&amp;(mut))) &#123; \<br>        Py_FatalError(<span class="hljs-string">&quot;PyMUTEX_INIT(&quot;</span> <span class="hljs-meta">#mut <span class="hljs-meta-string">&quot;) failed&quot;</span>); &#125;;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MUTEX_FINI(mut) \</span><br>    <span class="hljs-keyword">if</span> (PyMUTEX_FINI(&amp;(mut))) &#123; \<br>        Py_FatalError(<span class="hljs-string">&quot;PyMUTEX_FINI(&quot;</span> <span class="hljs-meta">#mut <span class="hljs-meta-string">&quot;) failed&quot;</span>); &#125;;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MUTEX_LOCK(mut) \</span><br>    <span class="hljs-keyword">if</span> (PyMUTEX_LOCK(&amp;(mut))) &#123; \<br>        Py_FatalError(<span class="hljs-string">&quot;PyMUTEX_LOCK(&quot;</span> <span class="hljs-meta">#mut <span class="hljs-meta-string">&quot;) failed&quot;</span>); &#125;;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MUTEX_UNLOCK(mut) \</span><br>    <span class="hljs-keyword">if</span> (PyMUTEX_UNLOCK(&amp;(mut))) &#123; \<br>        Py_FatalError(<span class="hljs-string">&quot;PyMUTEX_UNLOCK(&quot;</span> <span class="hljs-meta">#mut <span class="hljs-meta-string">&quot;) failed&quot;</span>); &#125;;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COND_INIT(cond) \</span><br>    <span class="hljs-keyword">if</span> (PyCOND_INIT(&amp;(cond))) &#123; \<br>        Py_FatalError(<span class="hljs-string">&quot;PyCOND_INIT(&quot;</span> <span class="hljs-meta">#cond <span class="hljs-meta-string">&quot;) failed&quot;</span>); &#125;;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COND_SIGNAL(cond) \</span><br>    <span class="hljs-keyword">if</span> (PyCOND_SIGNAL(&amp;(cond))) &#123; \<br>        Py_FatalError(<span class="hljs-string">&quot;PyCOND_SIGNAL(&quot;</span> <span class="hljs-meta">#cond <span class="hljs-meta-string">&quot;) failed&quot;</span>); &#125;;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COND_WAIT(cond, mut) \</span><br>    <span class="hljs-keyword">if</span> (PyCOND_WAIT(&amp;(cond), &amp;(mut))) &#123; \<br>        Py_FatalError(<span class="hljs-string">&quot;PyCOND_WAIT(&quot;</span> <span class="hljs-meta">#cond <span class="hljs-meta-string">&quot;) failed&quot;</span>); &#125;;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COND_TIMED_WAIT(cond, mut, microseconds, timeout_result) \</span><br>    &#123; \<br>        <span class="hljs-keyword">int</span> r = PyCOND_TIMEDWAIT(&amp;(cond), &amp;(mut), (microseconds)); \<br>        <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) \<br>            Py_FatalError(<span class="hljs-string">&quot;PyCOND_WAIT(&quot;</span> <span class="hljs-meta">#cond <span class="hljs-meta-string">&quot;) failed&quot;</span>); \</span><br>        <span class="hljs-keyword">if</span> (r) <span class="hljs-comment">/* 1 == timeout, 2 == impl. can&#x27;t say, so assume timeout */</span> \<br>            timeout_result = <span class="hljs-number">1</span>; \<br>        <span class="hljs-keyword">else</span> \<br>            timeout_result = <span class="hljs-number">0</span>; \<br>    &#125; \<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.关于锁的基本操作，C将其设定为宏定义，在一定程度上可以提高运行效率，涉及到的操作位于第二节的第3点。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>1.因为这把GIL锁的存在，Python的多线程无法充分在单核或多核上充分利用CPU资源，不过在遇到I/O事件前，线程会释放GIL锁。当然，我们可以使用多进程或者协程来在某些场景下替代多线程。ceval_gil.h头文件中还包含了一些操作集，这里就不分析了，有兴趣的朋友可以自行阅读源码，毕竟这把GIL设计在今天看来并不是Python的亮点之一。</p><p>2.最后回答下开篇提到的一个问题：为什么这把GIL锁锁的是字节码？，在Python程序执行前，解释器会将代码解释成字节码，然后Python VM将逐行读取字节码指令，获取操作码和操作数，根据操作码执行不同的函数。</p><p>3.在Python3.11.0版本中，每个线程默认占有GIL解释器锁的时间为5ms。涉及代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DEFAULT_INTERVAL 5000</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> _gil_initialize(struct _gil_runtime_state *gil)<br>&#123;<br>    <span class="hljs-comment">// 初始化GIL</span><br>    _Py_atomic_int uninitialized = &#123;<span class="hljs-number">-1</span>&#125;;<br>    gil-&gt;locked = uninitialized;<br>    gil-&gt;interval = DEFAULT_INTERVAL;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">Py_LOCAL_INLINE(<span class="hljs-keyword">int</span>)<br>PyCOND_TIMEDWAIT(PyCOND_T *cv, PyMUTEX_T *cs, <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> us)<br>&#123;<br>    <span class="hljs-comment">// 等待直至条件变量满足</span><br>    <span class="hljs-keyword">return</span> _PyCOND_WAIT_MS(cv, cs, (DWORD)(us/<span class="hljs-number">1000</span>)); <span class="hljs-comment">// 等待5ms</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> COND_TIMED_WAIT(cond, mut, microseconds, timeout_result) \</span><br>    &#123; \<br>        <span class="hljs-keyword">int</span> r = PyCOND_TIMEDWAIT(&amp;(cond), &amp;(mut), (microseconds)); \<br>        <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span>) \<br>            Py_FatalError(<span class="hljs-string">&quot;PyCOND_WAIT(&quot;</span> <span class="hljs-meta">#cond <span class="hljs-meta-string">&quot;) failed&quot;</span>); \</span><br>        <span class="hljs-keyword">if</span> (r) <span class="hljs-comment">/* 1 == timeout, 2 == impl. can&#x27;t say, so assume timeout */</span> \<br>            timeout_result = <span class="hljs-number">1</span>; \<br>        <span class="hljs-keyword">else</span> \<br>            timeout_result = <span class="hljs-number">0</span>; \<br>    &#125; \<br><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c">Py_LOCAL_INLINE(<span class="hljs-keyword">int</span>)<br>_PyCOND_WAIT_MS(PyCOND_T *cv, PyMUTEX_T *cs, DWORD ms)<br>&#123;<br>    DWORD wait;<br>    cv-&gt;waiting++;<br>    PyMUTEX_UNLOCK(cs);<br>    <span class="hljs-comment">// 等待锁释放的信号到来, 等待函数可使线程自愿进入等待队列，直到一个特定的内核对象cv-&gt;sem变为已通知状态为止。</span><br>    <span class="hljs-comment">// WaitForSingleObjectEx函数接受三个参数，第一个为内核对象，第二个为等待多长时间。</span><br>    wait = WaitForSingleObjectEx(cv-&gt;sem, ms, FALSE);<br>    <span class="hljs-comment">// 该线程拿到GIL锁</span><br>    PyMUTEX_LOCK(cs);<br>    <span class="hljs-keyword">if</span> (wait != WAIT_OBJECT_0)<br>        <span class="hljs-comment">// 如果在超时时间前拿到锁, 将cv-&gt;waiting减一</span><br>        --cv-&gt;waiting;<br><br>    <span class="hljs-keyword">if</span> (wait == WAIT_FAILED)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-comment">/* return 0 on success, 1 on timeout */</span><br>    <span class="hljs-keyword">return</span> wait != WAIT_OBJECT_0;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Python的栈帧对象的构造和VM执行字节码的原理</title>
    <link href="/2022/01/04/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84%E6%A0%88%E5%B8%A7%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/01/04/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84%E6%A0%88%E5%B8%A7%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-什么是堆栈？"><a href="#一、-什么是堆栈？" class="headerlink" title="一、 什么是堆栈？"></a>一、 什么是堆栈？</h3><blockquote><p>栈帧也叫过程<a href="https://baike.baidu.com/item/%E6%B4%BB%E5%8A%A8%E8%AE%B0%E5%BD%95">活动记录</a>，是<a href="https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8">编译器</a>用来实现过程/<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8">函数调用</a>的一种数据结构。—–百度百科</p></blockquote><p>栈帧对象其中所使用的数据结构是我们常见的栈，栈是一种受限的线性表，具备后进先出的特性。栈这个数据结构具有记忆效果，常见的使用场景比如浏览器的前进和后退。在几乎所有语言中，栈帧都是实现函数调用功能的标配，栈帧中可以保存某一函数运行过程中的上下文信息，即过程活动记录。今天，通过阅读源码一起探究，在Python中，是如何使用栈帧对象（栈结构）来实现函数的调用和相关上下文信息的保存和获取的, 以及分析Python VM执行字节码的原理。</p><h3 id="二、-栈帧对象的结构体"><a href="#二、-栈帧对象的结构体" class="headerlink" title="二、 栈帧对象的结构体"></a>二、 栈帧对象的结构体</h3><p>搜索Python实现的源码，发现栈帧结构有两部分，一部分是外部栈帧(PyFrameObject)，另外一部分是内部栈帧(InterpreterFrame)。先来看第一部分。</p><p>1.PyFrameObject对象位于/Include/pyframe.h头文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">frame</span> &#123;</span><br>    PyObject_HEAD<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">frame</span> *<span class="hljs-title">f_back</span>;</span>      <span class="hljs-comment">/* 指向前一个栈帧对象 */</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">interpreter_frame</span> *<span class="hljs-title">f_frame</span>;</span> <span class="hljs-comment">/* 指向栈帧数据 */</span><br>    PyObject *f_trace;          <span class="hljs-comment">/* 堆栈异常函数 */</span><br>    <span class="hljs-keyword">int</span> f_lineno;               <span class="hljs-comment">/* 指向与当前字节码指令对应的源码⾏号 */</span><br>    <span class="hljs-keyword">char</span> f_trace_lines;         <span class="hljs-comment">/* Emit per-line trace events? */</span><br>    <span class="hljs-keyword">char</span> f_trace_opcodes;       <span class="hljs-comment">/* Emit per-opcode trace events? */</span><br>    <span class="hljs-keyword">char</span> f_own_locals_memory;   <span class="hljs-comment">/* 栈帧所占有的内存 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>​    </p><p>2.InterpreterFrame对象位于/Include/internal/pycore_frame.h头文件中:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">interpreter_frame</span> &#123;</span><br>    PyFunctionObject *f_func;<br>    PyObject *f_globals;  <span class="hljs-comment">// 全局名字空间</span><br>    PyObject *f_builtins; <span class="hljs-comment">// 内建名字空间</span><br>    PyObject *f_locals;   <span class="hljs-comment">// 局部名字空间</span><br>    PyCodeObject *f_code;   <span class="hljs-comment">// 代码对象，记录该栈帧的上下文信息</span><br>    PyFrameObject *frame_obj;  <span class="hljs-comment">// 基本栈帧对象</span><br>    <span class="hljs-comment">/* Borrowed reference to a generator, or NULL */</span><br>    PyObject *generator;    <span class="hljs-comment">// 生成器对象</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">interpreter_frame</span> *<span class="hljs-title">previous</span>;</span>  <span class="hljs-comment">// 指向前一个栈帧对象</span><br>    <span class="hljs-keyword">int</span> f_lasti;       <span class="hljs-comment">/* 记录最后一条调用的指令 */</span><br>    <span class="hljs-keyword">int</span> stacktop;     <span class="hljs-comment">/*栈顶指针*/</span><br>    PyFrameState f_state;  <span class="hljs-comment">/* 栈帧所处的状态*/</span><br>    PyObject *localsplus[<span class="hljs-number">1</span>]; <span class="hljs-comment">/* 申请的连续的内存地址, 即栈*/</span><br>&#125; InterpreterFrame;<br></code></pre></td></tr></table></figure><p>看完了上述两个数据结构，栈帧对象是通过双向链表的形式组织起来，我大致绘了如下关于栈帧对象的数据结构图。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/frameobject.png" alt="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/frameobject.png"></p><p>通过上述图，我们可以很清楚的看出来栈帧对象是以双向链表的形式组合在一起。那么这个栈帧对象链又是被谁管理的呢？我们进一步分析。</p><p>在Include/internal/pycore_frame.h中，我们可以找到对链栈的一系列的实现，包含判断栈帧的状态、获取栈帧的基地址、获取栈帧的栈顶对象、出栈、入栈，获取栈顶的栈顶地址，获取栈帧的局部变量（局部变量以数组形式存储，在编译时就可确定个数，方便通过偏移量直接定位)等等。首先来看栈帧的初始化函数<code>_PyFrame_InitializeSpecials</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span><br>_PyFrame_InitializeSpecials(<br>    InterpreterFrame *frame, PyFunctionObject *func,<br>    PyObject *locals, <span class="hljs-keyword">int</span> nlocalsplus)<br>&#123;<br>    Py_INCREF(func);<br>    frame-&gt;f_func = func;<br>    frame-&gt;f_code = (PyCodeObject *)Py_NewRef(func-&gt;func_code);<br>    frame-&gt;f_builtins = func-&gt;func_builtins;<br>    frame-&gt;f_globals = func-&gt;func_globals;<br>    frame-&gt;f_locals = Py_XNewRef(locals);<br>    frame-&gt;stacktop = nlocalsplus;<br>    frame-&gt;frame_obj = <span class="hljs-literal">NULL</span>;<br>    frame-&gt;generator = <span class="hljs-literal">NULL</span>;<br>    frame-&gt;f_lasti = <span class="hljs-number">-1</span>;<br>    frame-&gt;f_state = FRAME_CREATED;<br>    frame-&gt;is_entry = <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>继续顺藤摸瓜，看哪些地方调用它。在Python/ceval.c文件中的_PyEvalFramePushAndInit中，ceval.c文件中基本都是与Python VM执行字节码相关的程序有关。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> InterpreterFrame *<br>_PyEvalFramePushAndInit(PyThreadState *tstate, PyFunctionObject *func,<br>                        PyObject *locals, PyObject* <span class="hljs-keyword">const</span>* args,<br>                        <span class="hljs-keyword">size_t</span> argcount, PyObject *kwnames)<br>&#123;<br>    <span class="hljs-comment">// 从函数对象中获取代码对象</span><br>    PyCodeObject * code = (PyCodeObject *)func-&gt;func_code;<br>    <span class="hljs-comment">// 计算栈帧所需占用的大小</span><br>    <span class="hljs-keyword">size_t</span> size = code-&gt;co_nlocalsplus + code-&gt;co_stacksize + FRAME_SPECIALS_SIZE;<br>    <span class="hljs-comment">// 为栈帧对象申请一块内存，然后加入到本地线程的上下文中</span><br>    InterpreterFrame *frame = _PyThreadState_BumpFramePointer(tstate, size);<br>    <span class="hljs-keyword">if</span> (frame == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">goto</span> fail;<br>    &#125;<br>    <span class="hljs-comment">// 对申请到的栈帧对象进行初始化</span><br>    _PyFrame_InitializeSpecials(frame, func, locals, code-&gt;co_nlocalsplus);<br>    PyObject **localsarray = &amp;frame-&gt;localsplus[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; code-&gt;co_nlocalsplus; i++) &#123;<br>        localsarray[i] = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 初始化局部变量</span><br>    <span class="hljs-keyword">if</span> (initialize_locals(tstate, func, localsarray, args, argcount, kwnames)) &#123;<br>        _PyFrame_Clear(frame);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> frame;<br>fail:<br>    <span class="hljs-comment">/* Consume the references */</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> i = <span class="hljs-number">0</span>; i &lt; argcount; i++) &#123;<br>        Py_DECREF(args[i]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (kwnames) &#123;<br>        Py_ssize_t kwcount = PyTuple_GET_SIZE(kwnames);<br>        <span class="hljs-keyword">for</span> (Py_ssize_t i = <span class="hljs-number">0</span>; i &lt; kwcount; i++) &#123;<br>            Py_DECREF(args[i+argcount]);<br>        &#125;<br>    &#125;<br>    PyErr_NoMemory();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.<code>_PyEvalFramePushAndInit</code>该函数会用于call_function等字节码中，因为调用函数，意味着创建新的栈帧对象，并加入到栈帧调用链中，进入子函数后，栈帧也相应的跳到对应的栈帧对象，然后执行栈帧对象中的代码对象，执行完成，将返回结果保存到调用方的栈帧对象中并释放回收当前栈帧。</p><p>2.该函数中有两个比较重要的函数，分别是<code>_PyThreadState_BumpFramePointer</code>, <code>initialize_locals</code>两个函数，前者时在本地线程的上下文中申请size大小的栈帧对象，并添加到栈帧链的末尾(逻辑结构上认为是链式)。后者时初始化栈帧对象中的函数局部变量，包含函数的参数等。接下来就来分析下这两个函数内部的实现。</p><p>3.<code>_PyThreadState_BumpFramePointer</code>函数源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> InterpreterFrame *<br>_PyThreadState_BumpFramePointer(PyThreadState *tstate, <span class="hljs-keyword">size_t</span> size)<br>&#123;<br>    <span class="hljs-comment">// 获取上一个栈帧对象在动态数组中地址</span><br>    PyObject **base = tstate-&gt;datastack_top;<br>    <span class="hljs-keyword">if</span> (base) &#123;<br>        <span class="hljs-comment">// 如果存在栈帧对象</span><br>        <span class="hljs-comment">// 计算新栈帧对象的地址</span><br>        PyObject **top = base + size;<br>        <span class="hljs-comment">// 不能超过数据栈的上限</span><br>        assert(tstate-&gt;datastack_limit);<br>        <span class="hljs-keyword">if</span> (top &lt; tstate-&gt;datastack_limit) &#123;<br>            <span class="hljs-comment">// 将栈帧对象的地址添加到动态数组</span><br>            tstate-&gt;datastack_top = top;<br>            <span class="hljs-keyword">return</span> (InterpreterFrame *)base;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _PyThreadState_BumpFramePointerSlow(tstate, size);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">ts</span> &#123;</span><br>    ...<br>    PyObject **datastack_top; <span class="hljs-comment">// 动态数组, 指向动态数组中的元素地址</span><br>    PyObject **datastack_limit;  <span class="hljs-comment">// 动态数组, 指向动态数组中的元素地址</span><br>    ...<br></code></pre></td></tr></table></figure><p>4.<code>initialize_locals</code>函数源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">未完待续~<br></code></pre></td></tr></table></figure><p>5.<strong>看了上述分析，做一个小的总结：</strong></p><p>栈帧对象在存储结构上是以连续的动态数组的方式组织起来，逻辑结构上，采用双向链表的方式组织起来。使用数组的好处是可以通过偏移量直接定位数据；使用双向链表的好处是插入(分配)，删除(回收)更加高效。所以阅读源码，不仅仅只是阅读，而是学着理解设计者设计和实现的思路并丰富自己。</p><h3 id="三、Python-执行过程及其VM的执行原理"><a href="#三、Python-执行过程及其VM的执行原理" class="headerlink" title="三、Python 执行过程及其VM的执行原理"></a>三、Python 执行过程及其VM的执行原理</h3><p>众所周知，Python是解释型语言，从Python应用层面来看，Python是允许写一部分代码，就执行一部分代码，使用过jupyter notebook的同学应该都深有体会。</p><p>1.一般，所有语言的入口函数基本上都以main函数开头，Python也不例外。Python执行py文件的入口源码位于/Python/pythonrun.c</p><p>​    1).执行Python某py文件时，首先会打开py文件并封装成文件对象：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">PyObject *<br>PyRun_FileExFlags(FILE *fp, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *filename, <span class="hljs-keyword">int</span> start, PyObject *globals,<br>                  PyObject *locals, <span class="hljs-keyword">int</span> closeit, PyCompilerFlags *flags)<br>&#123;<br>    PyObject *filename_obj = PyUnicode_DecodeFSDefault(filename);<br>    <span class="hljs-keyword">if</span> (filename_obj == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    PyObject *res = pyrun_file(fp, filename_obj, start, globals,<br>                               locals, closeit, flags);<br>    Py_DECREF(filename_obj);<br>    <span class="hljs-keyword">return</span> res;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>​    2).根据文件对象，构建AST抽象语法数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> PyObject *<br>pyrun_file(FILE *fp, PyObject *filename, <span class="hljs-keyword">int</span> start, PyObject *globals,<br>           PyObject *locals, <span class="hljs-keyword">int</span> closeit, PyCompilerFlags *flags)<br>&#123;<br><br><span class="hljs-comment">// ...</span><br>    mod_ty mod;<br>    <span class="hljs-comment">// 构建AST语法树</span><br>    mod = _PyParser_ASTFromFile(fp, filename, <span class="hljs-literal">NULL</span>, start, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>,<br>                                flags, <span class="hljs-literal">NULL</span>, arena);<br><br>    <span class="hljs-keyword">if</span> (closeit) &#123;<br>        fclose(fp);<br>    &#125;<br><br>    PyObject *ret;<br>    <span class="hljs-keyword">if</span> (mod != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 将AST转为字节码, 然后执行字节码</span><br>        ret = run_mod(mod, filename, globals, locals, flags, arena);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        ret = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    _PyArena_Free(arena);<br><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    3).将AST抽象语法数转为字节码，并执行字节码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> PyObject *<br>run_mod(mod_ty mod, PyObject *filename, PyObject *globals, PyObject *locals,<br>            PyCompilerFlags *flags, PyArena *arena)<br>&#123;<br>    PyThreadState *tstate = _PyThreadState_GET();<br>    <span class="hljs-comment">// 将AST语法树转为字节码</span><br>    PyCodeObject *co = _PyAST_Compile(mod, filename, flags, <span class="hljs-number">-1</span>, arena);<br>    <span class="hljs-keyword">if</span> (co == <span class="hljs-literal">NULL</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><br>    <span class="hljs-keyword">if</span> (_PySys_Audit(tstate, <span class="hljs-string">&quot;exec&quot;</span>, <span class="hljs-string">&quot;O&quot;</span>, co) &lt; <span class="hljs-number">0</span>) &#123;<br>        Py_DECREF(co);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 执行字节码, 最底层调用_PyEval_EvalFrameDefault方法执行字节码对象。</span><br>    PyObject *v = run_eval_code_obj(tstate, co, globals, locals);<br>    Py_DECREF(co);<br>    <span class="hljs-keyword">return</span> v;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>Python执行某py文件的过程大体上可以分为三部：</p><ul><li><p>执行Python某py文件时，首先会打开py文件并封装成文件对象。</p></li><li><p>根据文件对象，构建AST抽象语法数。</p></li><li><p>将AST抽象语法数转为字节码，并调用_PyEval_EvalFrameDefault方法执行逐行字节码。</p></li></ul><p>2.在了解了Python执行py文件的过程后，可以发现Python VM真正执行的是一行一行的字节码。Python自己定义了一套字节码，</p><p>位于/Include/opcode.h头文件中，在我目前的Python3.11.0 a0版本中，已经增长到155个字节码了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 查看字节码的函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">name, age, *args</span>):</span><br>    <span class="hljs-built_in">print</span>(name, age)<br><br><span class="hljs-built_in">print</span>(dis(test))<br><span class="hljs-comment"># 对应结果</span><br> <span class="hljs-number">56</span>           <span class="hljs-number">0</span> LOAD_GLOBAL              <span class="hljs-number">0</span> (<span class="hljs-built_in">print</span>)<br>              <span class="hljs-number">2</span> LOAD_FAST                <span class="hljs-number">0</span> (name)<br>              <span class="hljs-number">4</span> LOAD_FAST                <span class="hljs-number">1</span> (age)<br>              <span class="hljs-number">6</span> CALL_FUNCTION            <span class="hljs-number">2</span><br>              <span class="hljs-number">8</span> POP_TOP<br>             <span class="hljs-number">10</span> LOAD_CONST               <span class="hljs-number">0</span> (<span class="hljs-literal">None</span>)<br>             <span class="hljs-number">12</span> RETURN_VALUE<br><span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p>3.接下来，分析下<code>_PyEval_EvalFrameDefault</code>函数，它是Python VM 执行字节码的核心函数，并结合<code>_PyEval_EvalFrameDefault</code>函数，分析下上述函数对应的各个字节码的执行逻辑。<code>_PyEval_EvalFrameDefault</code>函数位于/Python/ceval.c文件中。由于该函数代码段过长，我这里截取部分进行分析，其他部分用<code>...</code>代替。    </p><p>首先了解下字节码的结构组成，总共16bit， 根据自己主机的CPU端模式的架构决定，我的电脑上是小端存储。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> WORDS_BIGENDIAN</span><br><span class="hljs-comment">// 字节码大小为16bit, 包含两部分, 操作码和操作数</span><br><span class="hljs-comment">// 字节序列为大端方式正序存储，即高位字节排放在内存的低地址端, 低位字节排列在内存的高地址端</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _Py_OPCODE(word) ((word) &gt;&gt; 8)</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _Py_OPARG(word) ((word) &amp; 255)</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _Py_MAKECODEUNIT(opcode, oparg) (((opcode)&lt;&lt;8)|(oparg))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-comment">// x86的CPU默认是小端</span><br><span class="hljs-comment">// 字节序列为小端方式存储, 即高位字节排放在内存的高地址端, 低位字节排放在内存的低地址端</span><br><span class="hljs-comment">// opcode -------&gt; oparg</span><br><span class="hljs-comment">// 低地址 --------&gt; 高地址</span><br><span class="hljs-comment">//  低位  -------&gt;  高位</span><br><span class="hljs-comment">//  8bit     |     8bit</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _Py_OPCODE(word) ((word) &amp; 255)</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _Py_OPARG(word) ((word) &gt;&gt; 8)</span><br><span class="hljs-meta">#  <span class="hljs-meta-keyword">define</span> _Py_MAKECODEUNIT(opcode, oparg) ((opcode)|((oparg)&lt;&lt;8))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 虚拟机执行字节码的核心代码</span><br>PyObject* _Py_HOT_FUNCTION<br><span class="hljs-constructor">_PyEval_EvalFrameDefault(PyThreadState <span class="hljs-operator">*</span><span class="hljs-params">tstate</span>, InterpreterFrame <span class="hljs-operator">*</span><span class="hljs-params">frame</span>, <span class="hljs-params">int</span> <span class="hljs-params">throwflag</span>)</span><br>&#123;<br><span class="hljs-comment">// ...</span><br><span class="hljs-comment">// 当前指令的操作码</span><br>    <span class="hljs-built_in">int</span> opcode;<br>    <span class="hljs-comment">// 当前指令的操作数</span><br>    <span class="hljs-built_in">int</span> oparg;<br>    <span class="hljs-comment">// 返回结果</span><br>    PyObject *retval = NULL;<br>    <br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 获取栈帧对象中的代码对象</span><br>     PyCodeObject *co = frame-&gt;f_code;<br>     <br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 名字空间</span><br>    PyObject *names = co-&gt;co_names;<br>    <span class="hljs-comment">// 常量空间</span><br>    PyObject *consts = co-&gt;co_consts;<br>    <br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 获取栈顶指针的地址，等于frame-&gt;localsplus+frame-&gt;stacktop, 即栈帧基地址 + 栈顶指针偏移量</span><br>    PyObject **stack_pointer = <span class="hljs-constructor">_PyFrame_GetStackPointer(<span class="hljs-params">frame</span>)</span>;<br>    frame-&gt;stacktop = -<span class="hljs-number">1</span>;<br>    frame-&gt;f_state = FRAME_EXECUTING;<br>    <br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-comment">// 获取指令的操作码</span><br>    opcode = <span class="hljs-constructor">_Py_OPCODE(<span class="hljs-operator">*</span><span class="hljs-params">next_instr</span>)</span>;<br>    <br>    <span class="hljs-comment">// ...</span><br>    dispatch_opcode:<br>        switch (opcode) &#123;<br>            <span class="hljs-constructor">TARGET(NOP)</span>: &#123;<br>                <span class="hljs-constructor">DISPATCH()</span>;<br>            &#125;<br><br>            <span class="hljs-comment">/* We keep LOAD_CLOSURE so that the bytecode stays more readable. */</span><br>            <span class="hljs-comment">// 加载局部变量值或闭包变量值</span><br>            <span class="hljs-constructor">TARGET(LOAD_CLOSURE)</span>:<br>            <span class="hljs-constructor">TARGET(LOAD_FAST)</span>: &#123;<br>                PyObject *value = <span class="hljs-constructor">GETLOCAL(<span class="hljs-params">oparg</span>)</span>;<br>                <span class="hljs-keyword">if</span> (value<span class="hljs-operator"> == </span>NULL) &#123;<br>                    goto unbound_local_error;<br>                &#125;<br>                <span class="hljs-constructor">Py_INCREF(<span class="hljs-params">value</span>)</span>;<br>                <span class="hljs-comment">// 将局部变量推入栈帧</span><br>                <span class="hljs-constructor">PUSH(<span class="hljs-params">value</span>)</span>;<br>                <span class="hljs-constructor">DISPATCH()</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 加载常量值</span><br>            <span class="hljs-constructor">TARGET(LOAD_CONST)</span>: &#123;<br>                <span class="hljs-constructor">PREDICTED(LOAD_CONST)</span>;<br>                PyObject *value = <span class="hljs-constructor">GETITEM(<span class="hljs-params">consts</span>, <span class="hljs-params">oparg</span>)</span>;<br>                <span class="hljs-constructor">Py_INCREF(<span class="hljs-params">value</span>)</span>;<br>                <span class="hljs-comment">// 将常量值推入栈帧</span><br>                <span class="hljs-constructor">PUSH(<span class="hljs-params">value</span>)</span>;<br>                <span class="hljs-constructor">DISPATCH()</span>;<br>            &#125;<br><br>            <span class="hljs-comment">// 保存变量到局部名字空间</span><br>            <span class="hljs-constructor">TARGET(STORE_FAST)</span>: &#123;<br>                <span class="hljs-constructor">PREDICTED(STORE_FAST)</span>;<br>                <span class="hljs-comment">// 从栈帧中弹出局部变量值, 并保存到局部名字空间</span><br>                PyObject *value = <span class="hljs-constructor">POP()</span>;<br>                <span class="hljs-comment">// 保存到栈中指定oparg操作数对应的位置</span><br>                <span class="hljs-constructor">SETLOCAL(<span class="hljs-params">oparg</span>, <span class="hljs-params">value</span>)</span>;<br>                <span class="hljs-constructor">DISPATCH()</span>;<br>            &#125;<br>            <span class="hljs-comment">// 调用bound_method对象</span><br>            <span class="hljs-constructor">TARGET(CALL_METHOD)</span>: &#123;<br>            <span class="hljs-comment">/* Designed to work in tamdem with LOAD_METHOD. */</span><br>            PyObject **sp, *res;<br>            <span class="hljs-built_in">int</span> meth_found;<br><br>            sp = stack_pointer;<br>            <span class="hljs-comment">/* `meth` is NULL when LOAD_METHOD thinks that it&#x27;s not</span><br><span class="hljs-comment">                a method call.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                Stack layout:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                       ... | NULL | callable | arg1 | ... | argN</span><br><span class="hljs-comment">                                                            ^- TOP()</span><br><span class="hljs-comment">                                               ^- (-oparg)</span><br><span class="hljs-comment">                                    ^- (-oparg-1)</span><br><span class="hljs-comment">                             ^- (-oparg-2)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                `callable` will be POPed by call_function.</span><br><span class="hljs-comment">                NULL will will be POPed manually later.</span><br><span class="hljs-comment">                If `meth` isn&#x27;t NULL, it&#x27;s a method call.  Stack layout:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">                     ... | method | self | arg1 | ... | argN</span><br><span class="hljs-comment">                                                        ^- TOP()</span><br><span class="hljs-comment">                                           ^- (-oparg)</span><br><span class="hljs-comment">                                    ^- (-oparg-1)</span><br><span class="hljs-comment">                           ^- (-oparg-2)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">               `self` and `method` will be POPed by call_function.</span><br><span class="hljs-comment">               We&#x27;ll be passing `oparg + 1` to call_function, to</span><br><span class="hljs-comment">               make it accept the `self` as a first argument.</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-comment">// 用于检测回调的对象是否是bound_method函数, 如果是标识1, 否标识0</span><br>            <span class="hljs-comment">// 这里的oparg表示第一个参数在栈中的位置</span><br>            meth_found = (<span class="hljs-constructor">PEEK(<span class="hljs-params">oparg</span> + 2)</span> != NULL);<br>            res = call<span class="hljs-constructor">_function(<span class="hljs-params">tstate</span>, &amp;<span class="hljs-params">sp</span>, <span class="hljs-params">oparg</span> + <span class="hljs-params">meth_found</span>, NULL, <span class="hljs-params">cframe</span>.<span class="hljs-params">use_tracing</span>)</span>;<br>            stack_pointer = sp;<br><br>            <span class="hljs-constructor">STACK_SHRINK(1 - <span class="hljs-params">meth_found</span>)</span>;<br>            <span class="hljs-comment">// 将结果推入栈</span><br>            <span class="hljs-constructor">PUSH(<span class="hljs-params">res</span>)</span>;<br>            <span class="hljs-keyword">if</span> (res<span class="hljs-operator"> == </span>NULL) &#123;<br>                goto error;<br>            &#125;<br>            <span class="hljs-constructor">CHECK_EVAL_BREAKER()</span>;<br>            <span class="hljs-constructor">DISPATCH()</span>;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 回调普通function函数</span><br>        <span class="hljs-constructor">TARGET(CALL_FUNCTION)</span>: &#123;<br>            <span class="hljs-constructor">PREDICTED(CALL_FUNCTION)</span>;<br>            PyObject **sp, *res;<br>            <span class="hljs-comment">// 指向栈顶的指针</span><br>            sp = stack_pointer;<br><br>            <span class="hljs-comment">// 创建新栈帧对象, 获取当前栈中的函数名, 参数并进入新栈帧中回调, 然后将结果res推入当前栈中，并回收新创建的栈帧对象。</span><br>            res = call<span class="hljs-constructor">_function(<span class="hljs-params">tstate</span>, &amp;<span class="hljs-params">sp</span>, <span class="hljs-params">oparg</span>, NULL, <span class="hljs-params">cframe</span>.<span class="hljs-params">use_tracing</span>)</span>;<br>            stack_pointer = sp;<br>            <span class="hljs-constructor">PUSH(<span class="hljs-params">res</span>)</span>;<br>            <span class="hljs-keyword">if</span> (res<span class="hljs-operator"> == </span>NULL) &#123;<br>                goto error;<br>            &#125;<br>            <span class="hljs-constructor">CHECK_EVAL_BREAKER()</span>;<br>            <span class="hljs-constructor">DISPATCH()</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><ul><li>未完待续~</li></ul>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析CPython中的垃圾回收机制</title>
    <link href="/2021/12/22/%E5%88%86%E6%9E%90CPython%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
    <url>/2021/12/22/%E5%88%86%E6%9E%90CPython%E4%B8%AD%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h3><p>之前有幸拜读过《Python源码解析》专栏，学习了CPython的内存管理及GC，对CPython 垃圾回收相关算法有了一定了解。现在尝试去阅读CPython 的GC模块的底层源码，去学习下各个算法的原理和实现逻辑。本文旨在探究原理而仅非GC的概念。</p><h3 id="二、CPython中三种垃圾回收机制算法"><a href="#二、CPython中三种垃圾回收机制算法" class="headerlink" title="二、CPython中三种垃圾回收机制算法"></a>二、CPython中三种垃圾回收机制算法</h3><p>1.引用计数</p><p>2.标记-清除</p><p>3.分代回收</p><p><strong>注：引用计数是实时清理的，标记-清除和分代回收是结合使用的</strong></p><h3 id="三、引用计数"><a href="#三、引用计数" class="headerlink" title="三、引用计数"></a>三、引用计数</h3><p>先来谈谈引用计数，引用计数是CPython中 GC的主要算法。众所周知，Python中任何一个对象都是基于PyObject实现的，PyObject中包含引用计数<code>ob_refcnt</code>字段，记录该对象被引用的个数。影响该字段的因素主要有以下四个：</p><ul><li>构造一个新的对象时, 例如<code>a = &#39;2&#39;</code></li><li>目标对象作为函数的参数传入到函数体中, 例如 <code>def main(a):</code></li><li>对象之间相互引用, 例如 <code>b = a</code></li><li>容器对象的操作, 例如<code>b.append(a)</code></li></ul><p>当某对象<code>ob_refcnt</code>的值到达0时，该对象就会被立即回收，并释放他们的占据的资源。</p><p>正常情况下，基本所有的对象，他们的<code>ob_refcnt</code>的值最终都可以变为0，但是在编码中，由于编码不规范，存在循环引用带来的内存泄漏问题，循环引用会导致多个对象的<code>ob_refcnt</code>的值最终恒为1，而如果仅依赖引用计数算法的话，CPython会认为这些<code>ob_refcnt</code> 为1的对象还不需要清除，但实际这些对象本应被清除，这样就会引发内存泄露。看如下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestList</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__del__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self)<br><br><br>a = TestList([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>b = TestList([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><br>a.append(b)<br>b.append(a)<br><span class="hljs-keyword">del</span> a<br><span class="hljs-keyword">del</span> b<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已清除&#x27;</span>)<br></code></pre></td></tr></table></figure><p>上述为简易的循环引用的例子，在执行<code>del a</code>, <code>del b</code>时会去调用<code>__del__</code>内置方法，执行的结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">已清除<br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [...]]]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [...]]]<br></code></pre></td></tr></table></figure><p>我们可以看到真正实行的时机与预想的顺序不太一样，此时由CPython内部检测到存在循环引用，进而CPython会在程序执行完毕后，采用标记-清除算法回收垃圾。如果对上述代码使用手动gc呢？再来看下结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gc<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestList</span>(<span class="hljs-params"><span class="hljs-built_in">list</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__del__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(self)<br><br><br>a = TestList([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>b = TestList([<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br><br>a.append(b)<br>b.append(a)<br><span class="hljs-keyword">del</span> a<br><span class="hljs-keyword">del</span> b<br>gc.collect()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;已清除&#x27;</span>)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [...]]]<br>[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, [...]]]<br>已清除<br></code></pre></td></tr></table></figure><p>此时，由于我们在<code>del</code>后手动执行了一次gc，会触发标记-清除算法，a和b的资源将被提前回收，最后打印”已清除”, 这样程序实际执行的顺序和预期的顺序就完全符合了。</p><p>所以，当程序内存在变量循环引用的情况下，CPython会自动使用标记-清除算法来解决引用计数算法下无法回收的节点对象。那么CPython是如何标记出这些不可达节点并回收他们的呢？</p><h3 id="四、标记-清除及跟踪的对象"><a href="#四、标记-清除及跟踪的对象" class="headerlink" title="四、标记-清除及跟踪的对象"></a>四、标记-清除及跟踪的对象</h3><p>标记-清除是CPython解决引用计数无法处理 <strong>循环引用</strong> 的问题，在读CPython源码前，因为做了一段的前端的模块，所以特地去了解了下V8的Javascript的GC算法。简单的说，Javascript中的标记-清除算法是遍历堆中所有的节点对象，标记存活的对象，在随后的清除阶段，只清除没有被标记的对象。</p><p>而在CPython中，标记-清除算法只针对满足条件的容器对象，因为这些容器对象是通过<code>_PyObject_GC_Alloc </code>创建的，受到GC的跟踪。同时GC会忽略不可变对象，如int, bool, str, 以及由不可变对象组成的tuple等。在<code>Include/internal/pycore_gc.h</code>源码中有这样一段注释，告诉我们什么样的对象会被GC跟踪，被GC处理，以及对象跟踪状态的切换的时机。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   <span class="hljs-doctag">NOTE:</span> about untracking of mutable objects.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Certain types of container cannot participate in a reference cycle, and</span><br><span class="hljs-comment">   so do not need to be tracked by the garbage collector. Untracking these</span><br><span class="hljs-comment">   objects reduces the cost of garbage collections. However, determining</span><br><span class="hljs-comment">   which objects may be untracked is not free, and the costs must be</span><br><span class="hljs-comment">   weighed against the benefits for garbage collection.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   There are two possible strategies for when to untrack a container:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   i) When the container is created.</span><br><span class="hljs-comment">   ii) When the container is examined by the garbage collector.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Tuples containing only immutable objects (integers, strings etc, and</span><br><span class="hljs-comment">   recursively, tuples of immutable objects) do not need to be tracked.</span><br><span class="hljs-comment">   The interpreter creates a large number of tuples, many of which will</span><br><span class="hljs-comment">   not survive until garbage collection. It is therefore not worthwhile</span><br><span class="hljs-comment">   to untrack eligible tuples at creation time.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Instead, all tuples except the empty tuple are tracked when created.</span><br><span class="hljs-comment">   During garbage collection it is determined whether any surviving tuples</span><br><span class="hljs-comment">   can be untracked. A tuple can be untracked if all of its contents are</span><br><span class="hljs-comment">   already not tracked. Tuples are examined for untracking in all garbage</span><br><span class="hljs-comment">   collection cycles. It may take more than one cycle to untrack a tuple.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Dictionaries containing only immutable objects also do not need to be</span><br><span class="hljs-comment">   tracked. Dictionaries are untracked when created. If a tracked item is</span><br><span class="hljs-comment">   inserted into a dictionary (either as a key or value), the dictionary</span><br><span class="hljs-comment">   becomes tracked. During a full garbage collection (all generations),</span><br><span class="hljs-comment">   the collector will untrack any dictionaries whose contents are not</span><br><span class="hljs-comment">   tracked.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   The module provides the python function is_tracked(obj), which returns</span><br><span class="hljs-comment">   the CURRENT tracking status of the object. Subsequent garbage</span><br><span class="hljs-comment">   collections may change the tracking status of the object.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   Untracking of certain containers was introduced in issue #4688, and</span><br><span class="hljs-comment">   the algorithm was refined in response to issue #14775.</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>从上述注释中简要提取几点：</p><p>1.取消跟踪某一对象遵循两条策略：</p><ul><li>当容器对象创建时，无需跟踪</li><li>当进行垃圾回收时，会去评估容器对象是否需要跟踪。</li></ul><p>2.对于元祖对象来说，在创建时空元祖不用跟踪，在进行垃圾回收时，如果元祖内部的对象都取消跟踪，则元祖也取消跟踪。</p><p>3.对于字典对象来说，字典中的对象全部是不可变对象时，取消跟踪。同样在进行垃圾回收时，如果向字典中增加一个追踪的对象，那么这个字典变为可追踪的，反之当字典中都是不可追踪的对象，该字典变为不可追踪。</p><p>4.在进行垃圾回收时，容器对象的跟踪状态可能因内部对象的跟踪状态发生改变而改变。</p><p>同时CPython会维护两个容器链表，分别为包含所有待scan的结点的链表和只含unreachable结点的链表。每个结点额外增加<code>gc_ref</code>字段,其值初始化为每个结点对象的<code>ob_refcnt</code>。CPython并不像V8会去标记<strong>存活</strong>的对象，而是首先假设所收集的对象都是可达的，在遍历链表过程中，使用不可达链表记录并标识所有<strong>不可达</strong>的对象。</p><h3 id="五、GC源码阅读"><a href="#五、GC源码阅读" class="headerlink" title="五、GC源码阅读"></a>五、GC源码阅读</h3><p>上述简要的介绍了下引用计数和标记-清除的概念，当然还有分代回收，不过值得注意的是，标记-清除算法和分代回收是结合作用于GC的。GC实现的源码位于<code>/Modules/gcmodule.c</code>， GC涉及的结构体定义源码位于<code>/Include/internal/pycore_gc.h</code>。</p><p>由于每一代触发GC时，实际是也执行了标记-清除算法，因此先来看分代的结构体定义，再来看标记-清除算法的实现原理，最后再来看分代回收算法的实现原理。</p><h4 id="1-分代的结构体定义"><a href="#1-分代的结构体定义" class="headerlink" title="1.分代的结构体定义"></a>1.分代的结构体定义</h4><p>先来看下分代的结构，在CPython中，默认分为三代<code>#define NUM_GENERATIONS 3</code>，分别记为新生代，中生代，老生代, 对应<code>generations</code>数组下表的0, 1, 2。分代回收遵循一种规则，即新生代中的结点对象大约占总的80%~90%，存在的时间也最短，也最容易回收，换句话说，对象存活时间越长，越能够常驻内存，那么越不太可能成为垃圾，那么应该越少去收集。这样一来，在每一代的回收中会执行标记-清除算法，而越到老生代，那么在执行<code>Mark-Sweep</code>算法时所需要遍历的跟踪结点对象的个数就会越少，其中体现了用空间换时间的思想。</p><p><strong>每一代的结构体如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-comment">// Pointer to next object in the list.</span><br>    <span class="hljs-comment">// 0 means the object is not tracked</span><br>    <span class="hljs-keyword">uintptr_t</span> _gc_next;<br><br>    <span class="hljs-comment">// Pointer to previous object in the list.</span><br>    <span class="hljs-comment">// Lowest two bits are used for flags documented later.</span><br>    <span class="hljs-keyword">uintptr_t</span> _gc_prev;<br>&#125; PyGC_Head;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gc_generation</span> &#123;</span><br>    PyGC_Head head;  <br>    <span class="hljs-keyword">int</span> threshold; <span class="hljs-comment">/* collection threshold */</span><br>    <span class="hljs-keyword">int</span> count; <span class="hljs-comment">/* count of allocations or collections of younger</span><br><span class="hljs-comment">                  generations */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>说明</strong>：</p><p>(1).head: 双向链表, 表示可收集对象的链表头部，用于维护对应代中的对象结点。</p><p>(2).threadshold: 表示当前代所容纳的结点阈值，当<code>count &gt; threadhold</code>时，触发一次GC。</p><p>(3).count: 表示当前代的结点计数器。</p><p><strong>GC运行时的结构体如下：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">gc_runtime_state</span> &#123;</span><br>    ...<br>    <span class="hljs-comment">// 默认三代, 新生代, 中生代, 老生代</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">gc_generation</span> <span class="hljs-title">generations</span>[<span class="hljs-title">NUM_GENERATIONS</span>];</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每代状态的初始化函数</strong></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="xml">void</span><br><span class="xml">_PyGC_InitState(GCState *gcstate)</span><br><span class="xml">&#123;</span><br><span class="xml">    gcstate-&gt;enabled = 1; /* automatic collection enabled? */</span><br><span class="xml">#define _GEN_HEAD(n) GEN_HEAD(gcstate, n)</span><br><span class="xml">// 默认分三代</span><br><span class="xml">    struct gc_generation generations[NUM_GENERATIONS] = &#123;</span><br><span class="xml">        /* PyGC_Head,                                    threshold,    count */</span><br><span class="xml">        </span><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">0</span>), (<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">0</span>)&#125;,   <span class="hljs-number">700</span>,        <span class="hljs-number">0</span>&#125;,</span><br><span class="hljs-template-variable">        &#123;&#123;(<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">1</span>), (<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">1</span>)&#125;,   <span class="hljs-number">10</span>,         <span class="hljs-number">0</span>&#125;,</span><br><span class="hljs-template-variable">        &#123;&#123;(<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">2</span>), (<span class="hljs-name">uintptr_t</span>)_GEN_HEAD(<span class="hljs-name">2</span>)&#125;,   <span class="hljs-number">10</span>,         <span class="hljs-number">0</span>&#125;,</span><br><span class="hljs-template-variable">    &#125;;</span><br><span class="hljs-template-variable">    for (<span class="hljs-name">int</span> i = <span class="hljs-number">0</span>; i &lt; NUM_GENERATIONS; i++) &#123;</span><br><span class="hljs-template-variable">        gcstate-&gt;generations[i] = generations[i];</span><br><span class="hljs-template-variable">    &#125;;</span><br><span class="hljs-template-variable">    gcstate-&gt;generation0 = GEN_HEAD(<span class="hljs-name">gcstate</span>, <span class="hljs-number">0</span>);</span><br><span class="hljs-template-variable">    struct gc_generation permanent_generation = &#123;</span><br><span class="hljs-template-variable">          &#123;(<span class="hljs-name">uintptr_t</span>)&amp;gcstate-&gt;permanent_generation.head,</span><br><span class="hljs-template-variable">           (<span class="hljs-name">uintptr_t</span>)&amp;gcstate-&gt;permanent_generation.head&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">0</span></span><br><span class="hljs-template-variable">    &#125;;</span><br><span class="hljs-template-variable">    gcstate-&gt;permanent_generation = permanent_generation;</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>(1).默认分为三代，分为新生代，中生代，老生代，对应的阈值分别为700, 10, 10, 新生代的阈值相比于中生代和老生代更大，因为所有新创建的被GC跟踪的对象都会使得新生代的<code>count++</code>, 且新生代中的对象存活时间不会太长，执行GC的次数相比要更频繁，所以为了减少新生代执行GC的频率，提高其对应的<code>threshold</code>。</p><p>(2).每代的默认<code>count</code>设置为0。</p><h4 id="2-标记-清除算法原理"><a href="#2-标记-清除算法原理" class="headerlink" title="2.标记-清除算法原理"></a>2.标记-清除算法原理</h4><p><code>Mark-Sweep</code>算法的执行原理框架位于<code>/Modules/gcmodule.c</code>中的<code>deduce_unreachable</code>函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span><br>deduce_unreachable(PyGC_Head *base, PyGC_Head *unreachable) &#123;<br>    validate_list(base, collecting_clear_unreachable_clear);<br> <br>    update_refs(base);  <span class="hljs-comment">// gc_prev is used for gc_refs</span><br>    subtract_refs(base);<br><br>    gc_list_init(unreachable);<br>    move_unreachable(base, unreachable);  <span class="hljs-comment">// gc_prev is pointer again</span><br>    validate_list(base, collecting_clear_unreachable_clear);<br>    validate_list(unreachable, collecting_set_unreachable_set);<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历可收集的链表, 标识出不可达节点和推断出不可达链表的步骤主要有以下三步：</p><p>(1).首先调用遍历一遍可收集链表, 将每个结点的真实<code>ob_refcnt</code>引用计数值赋值到<code>_gc_prev</code>字段中，而不是开辟一个新的字段存储(网上很多资料都说是<code>gc_refs</code>字段，在我阅读的这个Python10版本并没有所谓的<code>gc_refs</code>字段, 只是概念上叫做<code>gc_refs</code>),这里<code>_gc_prev</code>字段既做结点(含有标识flag)又做引用计数的承载体。</p><p>(2).第二遍遍历每个结点对象，将他们的<code>_gc_prev</code>字段值减一, 这样做是为了   <strong>解内部引用</strong>,内部引用是指某结点被链表内的其他结点所引用。在遍历完成后,所有可达对象(<code>_gc_prev</code>值为正数)一定是存在外部引用,而那些不可达对象的<code>_gc_prev</code>值一定为0。这样一来，初步筛选并标记出不可达对象(此时并不移入不可达链表)</p><p>(3).此时虽然所有结点概念上被分为两个链表（可达和不可达)，但是他们之间的引用关系(指针)并未真正解除，意思仍可能存在可达链表中的结点指向不可达链表中某结点的现象, <strong>而这些被可达结点所引用的不可达结点也是不能被回收的</strong>(这里可以仔细思考下，可以将引用关系理解为需求，就好理解了)。因此接下来所要做的就是将被可达结点所引用的不可达结点的<code>gc_refs</code>重设置为1，标识为可达，而将真正不可达对象设置标识为<code>NEXT_MASK_UNREACHABLE</code>，并将他们移动到不可达链表中。</p><p>(4).最终，所有对象都经过scan后，所有位于不可达链表的结点才会被GC真正回收。</p><p><strong>源码分析具体算法步骤：</strong></p><p> <strong>第一步：</strong>在开始收集结点时**, CPython首先会遍历收集的链表中所有结点，拷贝他们的<code>ob_refcnt</code>到<code>_gc_prev(gc_refs)</code>,此时<code>_gc_prev</code>用于表示<code>gc_refs</code>。对应源码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// /Modules/gcmodule.c</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span><br>update_refs(PyGC_Head *containers)<br>&#123;<br>    PyGC_Head *gc = GC_NEXT(containers);<br>    <span class="hljs-comment">// 循环遍历双向链表</span><br>    <span class="hljs-keyword">for</span> (; gc != containers; gc = GC_NEXT(gc)) &#123;<br>        gc_reset_refs(gc, Py_REFCNT(FROM_GC(gc)));<br>        _PyObject_ASSERT(FROM_GC(gc), gc_get_refs(gc) != <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span><br>gc_reset_refs(PyGC_Head *g, Py_ssize_t refs)<br>&#123;<br>    g-&gt;_gc_prev = (g-&gt;_gc_prev &amp; _PyGC_PREV_MASK_FINALIZED)<br>        | PREV_MASK_COLLECTING<br>        | ((<span class="hljs-keyword">uintptr_t</span>)(refs) &lt;&lt; _PyGC_PREV_SHIFT);<br>&#125;<br><br><span class="hljs-comment">// /Include/object.h</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> _PyVarObject_CAST_CONST(op) ((const PyVarObject*)(op))</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> Py_ssize_t _Py_REFCNT(<span class="hljs-keyword">const</span> PyObject *ob) &#123;<br>    <span class="hljs-keyword">return</span> ob-&gt;ob_refcnt;<br>&#125;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Py_REFCNT(ob) _Py_REFCNT(_PyObject_CAST_CONST(ob))</span><br></code></pre></td></tr></table></figure><p><strong>第二步：</strong>遍历链表，将每个结点的<code>gc_prev</code>减一。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span><br>subtract_refs(PyGC_Head *containers)<br>&#123;<br>    traverseproc traverse;<br>    PyGC_Head *gc = GC_NEXT(containers);<br>    <span class="hljs-keyword">for</span> (; gc != containers; gc = GC_NEXT(gc)) &#123;<br>        PyObject *op = FROM_GC(gc);<br>        traverse = Py_TYPE(op)-&gt;tp_traverse;<br>        (<span class="hljs-keyword">void</span>) traverse(op,<br>                        (visitproc)visit_decref,<br>                        op);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>visit_decref(PyObject *op, <span class="hljs-keyword">void</span> *parent)<br>&#123;<br>    _PyObject_ASSERT(_PyObject_CAST(parent), !_PyObject_IsFreed(op));<br><br>    <span class="hljs-keyword">if</span> (_PyObject_IS_GC(op)) &#123;<br>        PyGC_Head *gc = AS_GC(op);<br>        <span class="hljs-comment">/* We&#x27;re only interested in gc_refs for objects in the</span><br><span class="hljs-comment">         * generation being collected, which can be recognized</span><br><span class="hljs-comment">         * because only they have positive gc_refs.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (gc_is_collecting(gc)) &#123;<br>            <span class="hljs-comment">// 将该对象结点的引用计数减一</span><br>            gc_decref(gc);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span><br>gc_decref(PyGC_Head *g)<br>&#123;<br>    _PyObject_ASSERT_WITH_MSG(FROM_GC(g),<br>                              gc_get_refs(g) &gt; <span class="hljs-number">0</span>,<br>                              <span class="hljs-string">&quot;refcount is too small&quot;</span>);<br>    g-&gt;_gc_prev -= <span class="hljs-number">1</span> &lt;&lt; _PyGC_PREV_SHIFT;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>第三步：</strong>使用<code>gc_list_init(unreachable);</code>初始化一个空的不可达链表。</p><p><strong>第四步：</strong>调用该<code>move_unreachable</code>，该函数是找出真正不可达的结点。主要包含两个作用：</p><p>(1).若结点对象的<code>gc_refs</code>大于0，调用<code>visit_reachable</code>函数，遍历待收集链表中从该结点起始的引用链，若位于该引用链上结点的<code>gc_refs</code>为0，将其<code>gc_refs</code>值重设置为1，或者在此之前已经被标记为<code>NEXT_MASK_UNREACHABLE</code>且移入不可达链表的结点对象，则将其<code>gc_refs</code>值重设置为1并且移入待收集链表，即表示被可达对象引用的对象也是可达的，同时以便后序再次访问该结点时，因该结点的<code>gc_refs</code>已经是1了，而不会将其归为不可达结点。</p><p>(2).若结点对象的<code>gc_refs</code>等于0，表明该结点确实不可达，则将其移入不可达链表，并给予<code>NEXT_MASK_UNREACHABLE</code>不可达的标识(该结点后序可能会变为可达结点)。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span><br>move_unreachable(PyGC_Head *young, PyGC_Head *unreachable)<br>&#123;<br>    <span class="hljs-comment">// previous elem in the young list, used for restore gc_prev.</span><br>    PyGC_Head *prev = young;<br>    PyGC_Head *gc = GC_NEXT(young);<br><br>    <span class="hljs-keyword">while</span> (gc != young) &#123;<br>        <span class="hljs-comment">// 遍历gc_refs大于0的结点对象及其引用的对象, 将其引用的对象中gc_refs为0的对象的gc_refs重设为1, 或者将其引用的对象中标识为NEXT_MASK_UNREACHABLE的结点对象的gc_refs重设为1，并将其移入待收集链表。</span><br>        <span class="hljs-keyword">if</span> (gc_get_refs(gc)) &#123;<br>            PyObject *op = FROM_GC(gc);<br>            traverseproc traverse = Py_TYPE(op)-&gt;tp_traverse;<br>            _PyObject_ASSERT_WITH_MSG(op, gc_get_refs(gc) &gt; <span class="hljs-number">0</span>,<br>                                      <span class="hljs-string">&quot;refcount is too small&quot;</span>);<br>            (<span class="hljs-keyword">void</span>) traverse(op,<br>                    (visitproc)visit_reachable,<br>                    (<span class="hljs-keyword">void</span> *)young);<br>            <span class="hljs-comment">// relink gc_prev to prev element.</span><br>            _PyGCHead_SET_PREV(gc, prev);<br>            gc_clear_collecting(gc);<br>            prev = gc;<br>        &#125;<br>        <span class="hljs-comment">// 对真正gc_refs为0的对象，将其移入unreachable不可达链表,并标识为NEXT_MASK_UNREACHABLE，以便在未来遍历到该对象结点时，发现器是被可达对象引用的，还需将其移回待收集链表，去除其标识。</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            prev-&gt;_gc_next = gc-&gt;_gc_next;<br><br>            PyGC_Head *last = GC_PREV(unreachable);<br>            last-&gt;_gc_next = (NEXT_MASK_UNREACHABLE | (<span class="hljs-keyword">uintptr_t</span>)gc);<br>            _PyGCHead_SET_PREV(gc, last);<br>            gc-&gt;_gc_next = (NEXT_MASK_UNREACHABLE | (<span class="hljs-keyword">uintptr_t</span>)unreachable);<br>            unreachable-&gt;_gc_prev = (<span class="hljs-keyword">uintptr_t</span>)gc;<br>        &#125;<br>        gc = (PyGC_Head*)prev-&gt;_gc_next;<br>    &#125;<br>    <span class="hljs-comment">// young-&gt;_gc_prev must be last element remained in the list.</span><br>    young-&gt;_gc_prev = (<span class="hljs-keyword">uintptr_t</span>)prev;<br>    <span class="hljs-comment">// don&#x27;t let the pollution of the list head&#x27;s next pointer leak</span><br>    unreachable-&gt;_gc_next &amp;= ~NEXT_MASK_UNREACHABLE;<br>&#125;<br><br><br><span class="hljs-comment">/* A traversal callback for move_unreachable. */</span><br><span class="hljs-comment">// 重设被可达对象引用的对象的gc_refs为1</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>visit_reachable(PyObject *op, PyGC_Head *reachable)<br>&#123;<br>    <span class="hljs-comment">// 忽略gc_refs值&lt;=0的结点对象</span><br>    <span class="hljs-keyword">if</span> (!_PyObject_IS_GC(op)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    PyGC_Head *gc = AS_GC(op);<br>    <span class="hljs-keyword">const</span> Py_ssize_t gc_refs = gc_get_refs(gc);<br><br>    <span class="hljs-keyword">if</span> (! gc_is_collecting(gc)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    assert(gc-&gt;_gc_next != <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">if</span> (gc-&gt;_gc_next &amp; NEXT_MASK_UNREACHABLE) &#123;<br>        PyGC_Head *prev = GC_PREV(gc);<br>        PyGC_Head *next = (PyGC_Head*)(gc-&gt;_gc_next &amp; ~NEXT_MASK_UNREACHABLE);<br>        _PyObject_ASSERT(FROM_GC(prev),<br>                         prev-&gt;_gc_next &amp; NEXT_MASK_UNREACHABLE);<br>        _PyObject_ASSERT(FROM_GC(next),<br>                         next-&gt;_gc_next &amp; NEXT_MASK_UNREACHABLE);<br>        prev-&gt;_gc_next = gc-&gt;_gc_next;  <span class="hljs-comment">// copy NEXT_MASK_UNREACHABLE</span><br>        _PyGCHead_SET_PREV(next, prev);<br><br>        gc_list_append(gc, reachable);<br>        gc_set_refs(gc, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (gc_refs == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 重设被可达对象引用的对象的gc_refs为1</span><br>        gc_set_refs(gc, <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        _PyObject_ASSERT_WITH_MSG(op, gc_refs &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;refcount is too small&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>第五步：</strong>在分代回收算法基础上，调用<code>delete_garbage</code>，清理不可达链表中的结点对象。</p><h4 id="3-分代算法原理"><a href="#3-分代算法原理" class="headerlink" title="3.分代算法原理"></a>3.分代算法原理</h4><p>最后，我们来看下分代回收算法，事实上，在执行分代回收算法时，会基于不同的分代策略执行标记-清除算法将可收集链表拆分成可达和不可达链表，然后调用<code>delete_garbage</code>回收不可达链表中的结点，最终会调用该结点对象的<code>tp-&gt;clear</code>函数指针指向的函数，清理结点对象。分代算法核心源码同样位于<code>gcmodules.c</code>中。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    回收的核心算法</span><br><span class="hljs-comment">*/</span><br>static Py_ssize_t<br>gc_collect_main(PyThreadState *tstate, int generation,<br>                Py_ssize_t *n_collected, Py_ssize_t *n_uncollectable,<br>                int nofail)<br>&#123;<br>int i;<br>    Py_ssize_t m = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 待收集的对象个数 */</span><br>    Py_ssize_t n = <span class="hljs-number">0</span>; <span class="hljs-comment">/* 不能被收集的不可达对象个数 */</span><br>    PyGC_Head *young; <span class="hljs-comment">/* 正在处理的这一代 */</span><br>    PyGC_Head *old; <span class="hljs-comment">/* young的下一代 */</span><br>    PyGC_Head unreachable; <span class="hljs-comment">/* 不可达链表 */</span><br>    PyGC_Head finalizers;  <span class="hljs-comment">/* 实现__del__的对象 */</span><br>    PyGC_Head *gc;<br>    _PyTime_t t1 = <span class="hljs-number">0</span>;   <span class="hljs-comment">/* initialize to prevent a compiler warning */</span><br><br>    <span class="hljs-comment">// GC状态体</span><br>    GCS<span class="hljs-function"><span class="hljs-title">tate</span> *gcstate = &amp;tstate-&gt;</span><span class="hljs-function"><span class="hljs-title">interp</span>-&gt;</span>gc;<br><br>    <span class="hljs-comment">// gc_collect_main() must not be called before _PyGC_Init</span><br>    <span class="hljs-comment">// or after _PyGC_Fini()</span><br>    <span class="hljs-function"><span class="hljs-title">assert</span>(gcstate-&gt;</span>garbage != NULL);<br>    assert(!_PyErr_Occurred(tstate));<br><br>#ifdef EXPERIMENTAL_ISOLATED_SUBINTERPRETERS<br>    <span class="hljs-function"><span class="hljs-title">if</span> (tstate-&gt;</span><span class="hljs-function"><span class="hljs-title">interp</span>-&gt;</span>config._isolated_interpreter) &#123;<br>        <span class="hljs-comment">// bpo-40533: The garbage collector must not be run on parallel on</span><br>        <span class="hljs-comment">// Python objects shared by multiple interpreters.</span><br>        return <span class="hljs-number">0</span>;<br>    &#125;<br>#endif<br><br>    <span class="hljs-function"><span class="hljs-title">if</span> (gcstate-&gt;</span>debug &amp; DEBUG_STATS) &#123;<br>        PySys_WriteStderr(<span class="hljs-string">&quot;gc: collecting generation %d...\n&quot;</span>, generation);<br>        show_stats_each_generations(gcstate);<br>        t1 = _PyTime_GetMonotonicClock();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (PyDTrace_GC_START_ENABLED())<br>        PyDTrace_GC_START(generation);<br><br>    <span class="hljs-comment">/* update collection and allocation counters */</span><br>    <span class="hljs-comment">// 将当前代的后一代的GC计数值 + 1</span><br>    <span class="hljs-comment">// 将当前代及其以前的GC计数值重置为0, 因为回收某一代时, 会一起回收该代之前的所有代的不可达结点</span><br>    <span class="hljs-keyword">if</span> (generation+<span class="hljs-number">1</span> &lt; NUM_GENERATIONS)<br>        <span class="hljs-function"><span class="hljs-title">gcstate</span>-&gt;</span>generations[generation+<span class="hljs-number">1</span>].count += <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt;= generation; i++)<br>        <span class="hljs-function"><span class="hljs-title">gcstate</span>-&gt;</span>generations[i].count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">/* merge younger generations with one we are currently collecting */</span><br>    <span class="hljs-comment">// 将当前代与其之前的所有代的可收集结点的链表合并起来</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; generation; i++) &#123;<br>        gc_list_merge(GEN_HEAD(gcstate, i), GEN_HEAD(gcstate, generation));<br>    &#125;<br><br>    <span class="hljs-comment">/* handy references */</span><br>    <span class="hljs-comment">// young: 当前代可收集链表的头部节点, old: 当前代的下一代可收集链表的头部结点</span><br>    young = GEN_HEAD(gcstate, generation);<br>    <span class="hljs-keyword">if</span> (generation &lt; NUM_GENERATIONS-<span class="hljs-number">1</span>)<br>        old = GEN_HEAD(gcstate, generation+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">else</span><br>        old = young;<br>    validate_list(old, collecting_clear_unreachable_clear);<br><br>    <span class="hljs-comment">// 执行标记-清除算法, 将可收集对象链表拆分成可达链表和不可达链表</span><br>    deduce_unreachable(young, &amp;unreachable);<br><br>    untrack_tuples(young);<br>    <span class="hljs-comment">/* Move reachable objects to next generation. */</span><br>    <span class="hljs-comment">// 将当前代的可达对象移入下一代中, 并将当前代的链表置空。</span><br>    <span class="hljs-keyword">if</span> (young != old) &#123;<br>        <span class="hljs-keyword">if</span> (generation == NUM_GENERATIONS - <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-function"><span class="hljs-title">gcstate</span>-&gt;</span>long_lived_pending += gc_list_size(young);<br>        &#125;<br>        gc_list_merge(young, old);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/* We only un-track dicts in full collections, to avoid quadratic</span><br><span class="hljs-comment">           dict build-up. See issue #14775. */</span><br>        untrack_dicts(young);<br>        <span class="hljs-function"><span class="hljs-title">gcstate</span>-&gt;</span>long_lived_pending = <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-title">gcstate</span>-&gt;</span>long_lived_total = gc_list_size(young);<br>    &#125;<br><br>    <span class="hljs-comment">/* All objects in unreachable are trash, but objects reachable from</span><br><span class="hljs-comment">     * legacy finalizers (e.g. tp_del) can&#x27;t safely be deleted.</span><br><span class="hljs-comment">     */</span><br>    gc_list_init(&amp;finalizers);<br>    <span class="hljs-comment">// NEXT_MASK_UNREACHABLE is cleared here.</span><br>    <span class="hljs-comment">// After move_legacy_finalizers(), unreachable is normal list.</span><br><br>    <span class="hljs-comment">// 去除不可达结点的标识, 最终移入finalizers链表</span><br>    move_legacy_finalizers(&amp;unreachable, &amp;finalizers);<br>    <span class="hljs-comment">/* finalizers contains the unreachable objects with a legacy finalizer;</span><br><span class="hljs-comment">     * unreachable objects reachable *from* those are also uncollectable,</span><br><span class="hljs-comment">     * and we move those into the finalizers list too.</span><br><span class="hljs-comment">     */</span><br>    move_legacy_finalizer_reachable(&amp;finalizers);<br><br>    validate_list(&amp;finalizers, collecting_clear_unreachable_clear);<br>    validate_list(&amp;unreachable, collecting_set_unreachable_clear);<br><br>    <span class="hljs-comment">/* Print debugging information. */</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (gcstate-&gt;</span>debug &amp; DEBUG_COLLECTABLE) &#123;<br>        <span class="hljs-keyword">for</span> (gc = GC_NEXT(&amp;unreachable); gc != &amp;unreachable; gc = GC_NEXT(gc)) &#123;<br>            debug_cycle(<span class="hljs-string">&quot;collectable&quot;</span>, FROM_GC(gc));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* Clear weakrefs and invoke callbacks as necessary. */</span><br>    <span class="hljs-comment">// 清除不可达对象自身绑定的弱引用，并执行弱引用绑定的回调函数。</span><br>    m += handle_weakrefs(&amp;unreachable, old);<br><br>    validate_list(old, collecting_clear_unreachable_clear);<br>    validate_list(&amp;unreachable, collecting_set_unreachable_clear);<br><br>    <span class="hljs-comment">/* Call tp_finalize on objects which have one. */</span><br>    finalize_garbage(tstate, &amp;unreachable);<br><br>    <span class="hljs-comment">/* Handle any objects that may have resurrected after the call</span><br><span class="hljs-comment">     * to &#x27;finalize_garbage&#x27; and continue the collection with the</span><br><span class="hljs-comment">     * objects that are still unreachable */</span><br>    PyGC_Head final_unreachable;<br>    handle_resurrected_objects(&amp;unreachable, &amp;final_unreachable, old);<br><br>    <span class="hljs-comment">/* Call tp_clear on objects in the final_unreachable set.  This will cause</span><br><span class="hljs-comment">    * the reference cycles to be broken.  It may also cause some objects</span><br><span class="hljs-comment">    * in finalizers to be freed.</span><br><span class="hljs-comment">    */</span><br>    m += gc_list_size(&amp;final_unreachable);<br><br>    <span class="hljs-comment">// 动态清除垃圾</span><br>    delete_garbage(tstate, gcstate, &amp;final_unreachable, old);<br><br>    <span class="hljs-comment">/* Collect statistics on uncollectable objects found and print</span><br><span class="hljs-comment">     * debugging information. */</span><br>    <span class="hljs-keyword">for</span> (gc = GC_NEXT(&amp;finalizers); gc != &amp;finalizers; gc = GC_NEXT(gc)) &#123;<br>        n++;<br>        <span class="hljs-function"><span class="hljs-title">if</span> (gcstate-&gt;</span>debug &amp; DEBUG_UNCOLLECTABLE)<br>            debug_cycle(<span class="hljs-string">&quot;uncollectable&quot;</span>, FROM_GC(gc));<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span> (gcstate-&gt;</span>debug &amp; DEBUG_STATS) &#123;<br>        double d = _PyTime_AsSecondsDouble(_PyTime_GetMonotonicClock() - t1);<br>        PySys_WriteStderr(<br>            <span class="hljs-string">&quot;gc: done, %zd unreachable, %zd uncollectable, %.4fs elapsed\n&quot;</span>,<br>            n+m, n, d);<br>    &#125;<br><br>    <span class="hljs-comment">/* Append instances in the uncollectable set to a Python</span><br><span class="hljs-comment">     * reachable list of garbage.  The programmer has to deal with</span><br><span class="hljs-comment">     * this if they insist on creating this type of structure.</span><br><span class="hljs-comment">     */</span><br>    handle_legacy_finalizers(tstate, gcstate, &amp;finalizers, old);<br>    validate_list(old, collecting_clear_unreachable_clear);<br><br>    <span class="hljs-comment">/* Clear free list only during the collection of the highest</span><br><span class="hljs-comment">     * generation */</span><br>    <span class="hljs-keyword">if</span> (generation == NUM_GENERATIONS-<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-function"><span class="hljs-title">clear_freelists</span>(tstate-&gt;</span>interp);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (_PyErr_Occurred(tstate)) &#123;<br>        <span class="hljs-keyword">if</span> (nofail) &#123;<br>            _PyErr_Clear(tstate);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            _PyErr_WriteUnraisableMsg(<span class="hljs-string">&quot;in garbage collection&quot;</span>, NULL);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/* Update stats */</span><br>    <span class="hljs-comment">// 更新</span><br>    <span class="hljs-keyword">if</span> (n_collected) &#123;<br>        *n_collected = m;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n_uncollectable) &#123;<br>        *n_uncollectable = n;<br>    &#125;<br><br>    <span class="hljs-comment">// 维护GC状态体</span><br>    <span class="hljs-function"><span class="hljs-title">struct</span> gc_generation_stats *stats = &amp;gcstate-&gt;</span>generation_stats[generation];<br>    <span class="hljs-function"><span class="hljs-title">stats</span>-&gt;</span>collections++;<br>    <span class="hljs-function"><span class="hljs-title">stats</span>-&gt;</span>collected += m;<br>    <span class="hljs-function"><span class="hljs-title">stats</span>-&gt;</span>uncollectable += n;<br><br>    <span class="hljs-keyword">if</span> (PyDTrace_GC_DONE_ENABLED()) &#123;<br>        PyDTrace_GC_DONE(n + m);<br>    &#125;<br><br>    assert(!_PyErr_Occurred(tstate));<br>    return n + m;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span><br>delete_garbage(PyThreadState *tstate, GCState *gcstate,<br>               PyGC_Head *collectable, PyGC_Head *old)<br>&#123;<br>    assert(!_PyErr_Occurred(tstate));<br><br>    <span class="hljs-keyword">while</span> (!gc_list_is_empty(collectable)) &#123;<br>        PyGC_Head *gc = GC_NEXT(collectable);<br>        PyObject *op = FROM_GC(gc);<br><br>        _PyObject_ASSERT_WITH_MSG(op, Py_REFCNT(op) &gt; <span class="hljs-number">0</span>,<br>                                  <span class="hljs-string">&quot;refcount is too small&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (gcstate-&gt;debug &amp; DEBUG_SAVEALL) &#123;<br>            assert(gcstate-&gt;garbage != <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-keyword">if</span> (PyList_Append(gcstate-&gt;garbage, op) &lt; <span class="hljs-number">0</span>) &#123;<br>                _PyErr_Clear(tstate);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            inquiry clear;<br>            <span class="hljs-comment">// 执行tp_clear函数指针指向的函数, 像list列表, dict字典对应的应该是clear方法</span><br>            <span class="hljs-keyword">if</span> ((clear = Py_TYPE(op)-&gt;tp_clear) != <span class="hljs-literal">NULL</span>) &#123;<br>                Py_INCREF(op);<br>                (<span class="hljs-keyword">void</span>) clear(op);<br>                <span class="hljs-keyword">if</span> (_PyErr_Occurred(tstate)) &#123;<br>                    _PyErr_WriteUnraisableMsg(<span class="hljs-string">&quot;in tp_clear of&quot;</span>,<br>                                              (PyObject*)Py_TYPE(op));<br>                &#125;<br>                Py_DECREF(op);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 由于程序运行, collectable链表在程序运行时是动态变化的, </span><br>        <span class="hljs-comment">// 如果该对象又回到了可收集链表中，那么表明它可能还活着, 将其移入下一代中，后序再回收。</span><br>        <span class="hljs-keyword">if</span> (GC_NEXT(collectable) == gc) &#123;<br>            <span class="hljs-comment">/* object is still alive, move it, it may die later */</span><br>            gc_clear_collecting(gc);<br>            gc_list_move(gc, old);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>(1).上文提到CPython默认分为三代，新生代，中生代，老生代，三代的计数器阈值分别为700, 20, 10。每触发一次GC，会导致后一代的计数器值加1。同时会将当前代及其前面所有代的计数器重置为0，因为后序操作会将当前代及其前面所有代的可收集链表合并，然后走标记-清除算法<code>deduce_unreachable</code>，具体实现原理前文已经分析过。</p><p>(2).执行完<code>Mark-Sweep</code>算法后，已经区分出可达链表和<strong>不可达链表</strong>，接下来要将可达链表中的所有结点对象移入到下一代的可收集对象链表中。</p><p>(3).对<strong>不可达链表</strong>进行垃圾回收，遍历不可达链表，对每个对象调用其<code>tp_clear</code>函数指针指向的函数，因此像list，dict，在Python层面来说，与<code>tp_clear</code>指向的函数等效的是<code>clear()</code>。</p><p><strong>注</strong>：</p><p>在<code>delete_garbage</code>中有这样一段代码，我觉得开发者考虑的确实挺严谨的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (GC_NEXT(collectable) == gc) &#123;<br>    <span class="hljs-comment">/* object is still alive, move it, it may die later */</span><br>    gc_clear_collecting(gc);<br>    gc_list_move(gc, old);<br>&#125;<br></code></pre></td></tr></table></figure><p>程序在运行中, collectable链表在程序运行时是动态变化的, 如果该对象又出现在了可收集链表中，那么表明它可能还活着, 所以需要将其移入下一代中，后序再回收。这样虽然会额外增加判断、移动操作，但解决了再极偶然情况下，对象被误判回收的问题。</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="https://pythoninternal.wordpress.com/2014/08/04/the-garbage-collector/">https://pythoninternal.wordpress.com/2014/08/04/the-garbage-collector/</a></p><p><a href="https://github.com/python/cpython">https://github.com/python/cpython</a></p>]]></content>
    
    
    <categories>
      
      <category>GC</category>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
      <tag>GC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Python的List的列表容器</title>
    <link href="/2021/12/13/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84List%E5%88%97%E8%A1%A8%E5%AE%B9%E5%99%A8/"/>
    <url>/2021/12/13/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84List%E5%88%97%E8%A1%A8%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="一-、背景"><a href="#一-、背景" class="headerlink" title="一 、背景"></a>一 、背景</h3><p>列表list是Python开发中常用的数据结构之一，同样，其他语言中也有类似的数据结构，例如C++中的vector，Golang中的list, Java中的ArrayList等。list在Python底层是基于动态数组，给个通俗的名字—指针数组实现的，但实现的方式在每个语言中可能不完全相同。接下来，就来探究下list底层的数据结构，来学习一下Python的list相关操作集，动态扩容机制以及如何在内存的使用上进行优化的。本篇文章所使用的的Python版本为3.10。</p><h3 id="二-、list所设计的数据结构"><a href="#二-、list所设计的数据结构" class="headerlink" title="二 、list所设计的数据结构"></a>二 、list所设计的数据结构</h3><p>list结构体对应的代码位于/cpython/listobject.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    PyObject_VAR_HEAD<br>    PyObject **ob_item;  <span class="hljs-comment">/* 动态数组中存放的是真实对象的指针，即指针数组*/</span><br>    Py_ssize_t allocated;<br>&#125; PyListObject;<br></code></pre></td></tr></table></figure><p>list对象，是可变对象，相比于不可变对象的数据结构来说，增加了ob_size字段。因此PyObject_VAR_HEAD如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    PyObject ob_base;<br>    Py_ssize_t ob_size; <span class="hljs-comment">/* 数组中的长度 */</span><br>&#125; PyVarObject;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">object</span> &#123;</span><br>    _PyObject_HEAD_EXTRA<br>    Py_ssize_t ob_refcnt;<br>    PyTypeObject *ob_type;<br>&#125; PyObject;<br></code></pre></td></tr></table></figure><p>说明:</p><ol><li>ob_refcnt：对象的引用计数值。</li><li>ob_type：对象的类型。</li><li>ob_size：数组中已使用的元素的个数。</li><li>ob_item：指针指向存放指针的数组，即指针数组。</li><li>allocated：数组中的总容量。</li><li><strong>list中包含的是每个指向ob_item对应位置的指针，所以使用<code>**ob_item</code>等价于<code>*ob_item[]</code></strong></li></ol><h3 id="三-、-list相关的操作集"><a href="#三-、-list相关的操作集" class="headerlink" title="三 、 list相关的操作集"></a>三 、 list相关的操作集</h3><p>list相关的部分操作集位于/Include/listobject.h，还有一部分位于/Objects/listobject.c中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">PyAPI_FUNC(PyObject *) PyList_New(Py_ssize_t size);<br>PyAPI_FUNC(Py_ssize_t) PyList_Size(PyObject *);<br><br>PyAPI_FUNC(PyObject *) PyList_GetItem(PyObject *, Py_ssize_t);<br>PyAPI_FUNC(<span class="hljs-keyword">int</span>) PyList_SetItem(PyObject *, Py_ssize_t, PyObject *);<br>PyAPI_FUNC(<span class="hljs-keyword">int</span>) PyList_Insert(PyObject *, Py_ssize_t, PyObject *);<br>PyAPI_FUNC(<span class="hljs-keyword">int</span>) PyList_Append(PyObject *, PyObject *);<br><br>PyAPI_FUNC(PyObject *) PyList_GetSlice(PyObject *, Py_ssize_t, Py_ssize_t);<br>PyAPI_FUNC(<span class="hljs-keyword">int</span>) PyList_SetSlice(PyObject *, Py_ssize_t, Py_ssize_t, PyObject *);<br><br>PyAPI_FUNC(<span class="hljs-keyword">int</span>) PyList_Sort(PyObject *);<br>PyAPI_FUNC(<span class="hljs-keyword">int</span>) PyList_Reverse(PyObject *);<br>PyAPI_FUNC(PyObject *) PyList_AsTuple(PyObject *);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> PySequenceMethods list_as_sequence = &#123;<br>    (lenfunc)list_length,                       <span class="hljs-comment">/* sq_length */</span><br>    (binaryfunc)list_concat,                    <span class="hljs-comment">/* sq_concat */</span><br>    (ssizeargfunc)list_repeat,                  <span class="hljs-comment">/* sq_repeat */</span><br>    (ssizeargfunc)list_item,                    <span class="hljs-comment">/* sq_item */</span><br>    <span class="hljs-number">0</span>,                                          <span class="hljs-comment">/* sq_slice */</span><br>    (ssizeobjargproc)list_ass_item,             <span class="hljs-comment">/* sq_ass_item */</span><br>    <span class="hljs-number">0</span>,                                          <span class="hljs-comment">/* sq_ass_slice */</span><br>    (objobjproc)list_contains,                  <span class="hljs-comment">/* sq_contains */</span><br>    (binaryfunc)list_inplace_concat,            <span class="hljs-comment">/* sq_inplace_concat */</span><br>    (ssizeargfunc)list_inplace_repeat,          <span class="hljs-comment">/* sq_inplace_repeat */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>1.首先，来看下<code>PyList_GetItem</code>函数和<code>PyList_SetItem</code>函数。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c">PyObject *<br>PyList_GetItem(PyObject *op, Py_ssize_t i)<br>&#123;<br>    <span class="hljs-comment">// 检查对象的类型</span><br>    <span class="hljs-keyword">if</span> (!PyList_Check(op)) &#123;<br>        PyErr_BadInternalCall();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 检查索引是否超过数组长度</span><br>    <span class="hljs-keyword">if</span> (!valid_index(i, Py_SIZE(op))) &#123;<br>        <span class="hljs-keyword">if</span> (indexerr == <span class="hljs-literal">NULL</span>) &#123;<br>            indexerr = PyUnicode_FromString(<br>                <span class="hljs-string">&quot;list index out of range&quot;</span>);<br>            <span class="hljs-keyword">if</span> (indexerr == <span class="hljs-literal">NULL</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>        PyErr_SetObject(PyExc_IndexError, indexerr);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 返回动态数组中的指针</span><br>    <span class="hljs-keyword">return</span> ((PyListObject *)op) -&gt; ob_item[i]; <br>&#125;<br><br><br><span class="hljs-keyword">int</span><br>PyList_SetItem(PyObject *op, Py_ssize_t i,<br>               PyObject *newitem)<br>&#123;<br>    PyObject **p;<br>    <span class="hljs-keyword">if</span> (!PyList_Check(op)) &#123;<br>        Py_XDECREF(newitem);<br>        PyErr_BadInternalCall();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 检查索引是否超过数组长度</span><br>    <span class="hljs-keyword">if</span> (!valid_index(i, Py_SIZE(op))) &#123;<br>        Py_XDECREF(newitem);<br>        PyErr_SetString(PyExc_IndexError,<br>                        <span class="hljs-string">&quot;list assignment index out of range&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 指针赋值, 地址偏移i个元素，在64位机器上指针大小为8字节，因此总偏移量为i*8字节</span><br>    p = ((PyListObject *)op) -&gt; ob_item + i;<br>    Py_XSETREF(*p, newitem);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1).PyList_GetItem函数和PyList_SetItem函数前两步都是判断对象类型以及检查索引是否超过数组的长度。</p><p>(2).由于Python中处处皆对象，因此容器中存放的是对象的指针，a = list[0], a即指向ob_items[0]的指针。</p><p>(3).PyList_SetItem中的赋值操作是对指针进行赋值，因此首先需要计算第i个元素指针的位置，这里采用了地址偏移的集散方式，地址偏移i个元素，因为每个元素为指针，在64位机器上占8个字节，因此总偏移量为i*8字节，然后将newitem指针覆盖p指针。</p><p><strong>2.在指定位置插入元素的PyList_Insert函数和追加元素的PyList_Append函数。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 带了动态扩容的数组的插入, 平均时间复杂度为0(N) */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>ins1(PyListObject *self, Py_ssize_t where, PyObject *v)<br>&#123;<br>    <span class="hljs-comment">// 获取数组大小</span><br>    Py_ssize_t i, n = Py_SIZE(self);<br>    PyObject **items;<br>    <br>    <span class="hljs-keyword">if</span> (v == <span class="hljs-literal">NULL</span>) &#123;<br>        PyErr_BadInternalCall();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 数组长度是否小于最大限度, 小于size_t = 0 ~ 2^64, (size_t)-1)&gt;&gt;1</span><br>    assert((<span class="hljs-keyword">size_t</span>)n + <span class="hljs-number">1</span> &lt; PY_SSIZE_T_MAX);<br>    <span class="hljs-comment">// 动态扩容</span><br>    <span class="hljs-keyword">if</span> (list_resize(self, n+<span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <br>    <span class="hljs-comment">// 负索引 =&gt; 正索引</span><br>    <span class="hljs-keyword">if</span> (where &lt; <span class="hljs-number">0</span>) &#123;<br>        where += n;<br>        <span class="hljs-keyword">if</span> (where &lt; <span class="hljs-number">0</span>)<br>            where = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">// 如果超过数组长度, 默认插入到最后一个位置</span><br>    <span class="hljs-keyword">if</span> (where &gt; n)<br>        where = n;<br>    items = self-&gt;ob_item;<br>    <span class="hljs-comment">// 向后移动元素, 然后插入指定元素</span><br>    <span class="hljs-keyword">for</span> (i = n; --i &gt;= where; )<br>        items[i+<span class="hljs-number">1</span>] = items[i];<br>    <span class="hljs-comment">// 增加引用计数</span><br>    Py_INCREF(v);<br>    items[where] = v;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 追加元素, 时间复杂度为O(1) */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>app1(PyListObject *self, PyObject *v)<br>&#123;<br>    Py_ssize_t n = PyList_GET_SIZE(self);<br><br>    assert (v != <span class="hljs-literal">NULL</span>);<br>    assert((<span class="hljs-keyword">size_t</span>)n + <span class="hljs-number">1</span> &lt; PY_SSIZE_T_MAX);<br>    <span class="hljs-keyword">if</span> (list_resize(self, n+<span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    Py_INCREF(v);<br>    PyList_SET_ITEM(self, n, v);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四、-list的动态扩-缩-容机制"><a href="#四、-list的动态扩-缩-容机制" class="headerlink" title="四、 list的动态扩(缩)容机制"></a>四、 list的动态扩(缩)容机制</h3><p>list动态扩(缩)容对应的函数为list_resize, 位置位于/Objects/listobject.c中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>list_resize(PyListObject *self, Py_ssize_t newsize)<br>&#123;<br>    PyObject **items;<br>    <span class="hljs-keyword">size_t</span> new_allocated, num_allocated_bytes;<br>    Py_ssize_t allocated = self-&gt;allocated;<br><br>    <span class="hljs-comment">/* Bypass realloc() when a previous overallocation is large enough</span><br><span class="hljs-comment">       to accommodate the newsize.  If the newsize falls lower than half</span><br><span class="hljs-comment">       the allocated size, then proceed with the realloc() to shrink the list.</span><br><span class="hljs-comment">    */</span><br>    <br>    <span class="hljs-comment">/* 如果newsize小于allocated并且newsize大于总容量的一半，小于总容量，无需扩缩容 */</span><br>    <span class="hljs-keyword">if</span> (allocated &gt;= newsize &amp;&amp; newsize &gt;= (allocated &gt;&gt; <span class="hljs-number">1</span>)) &#123;<br>        assert(self-&gt;ob_item != <span class="hljs-literal">NULL</span> || newsize == <span class="hljs-number">0</span>);<br>        Py_SET_SIZE(self, newsize);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/* This over-allocates proportional to the list size, making room</span><br><span class="hljs-comment">     * for additional growth.  The over-allocation is mild, but is</span><br><span class="hljs-comment">     * enough to give linear-time amortized behavior over a long</span><br><span class="hljs-comment">     * sequence of appends() in the presence of a poorly-performing</span><br><span class="hljs-comment">     * system realloc().</span><br><span class="hljs-comment">     * Add padding to make the allocated size multiple of 4.</span><br><span class="hljs-comment">     * 数组容量大小始终为4的倍数</span><br><span class="hljs-comment">     * The growth pattern is:  0, 4, 8, 16, 24, 32, 40, 52, 64, 76, ...</span><br><span class="hljs-comment">     * Note: new_allocated won&#x27;t overflow because the largest possible value</span><br><span class="hljs-comment">     *       is PY_SSIZE_T_MAX * (9 / 8) + 6 which always fits in a size_t.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-comment">// 使得数组容量大小始终为4的倍数</span><br>    new_allocated = ((<span class="hljs-keyword">size_t</span>)newsize + (newsize &gt;&gt; <span class="hljs-number">3</span>) + <span class="hljs-number">6</span>) &amp; ~(<span class="hljs-keyword">size_t</span>)<span class="hljs-number">3</span>;<br>    <span class="hljs-comment">/* Do not overallocate if the new size is closer to overallocated size</span><br><span class="hljs-comment">     * than to the old size.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (newsize - Py_SIZE(self) &gt; (Py_ssize_t)(new_allocated - newsize))<br>        new_allocated = ((<span class="hljs-keyword">size_t</span>)newsize + <span class="hljs-number">3</span>) &amp; ~(<span class="hljs-keyword">size_t</span>)<span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">if</span> (newsize == <span class="hljs-number">0</span>)<br>        new_allocated = <span class="hljs-number">0</span>;<br>    num_allocated_bytes = new_allocated * <span class="hljs-keyword">sizeof</span>(PyObject *);<br>    <span class="hljs-comment">// 为申请新的大小的数组空间并拷贝数组</span><br>    items = (PyObject **)PyMem_Realloc(self-&gt;ob_item, num_allocated_bytes);<br>    <span class="hljs-keyword">if</span> (items == <span class="hljs-literal">NULL</span>) &#123;<br>        PyErr_NoMemory();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// 替换掉items和allocated</span><br>    self-&gt;ob_item = items;<br>    Py_SET_SIZE(self, newsize);<br>    self-&gt;allocated = new_allocated;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1).动态扩(缩)容机制的核心在于计算new_allocated大小。</p><p>(2).在python3.6左右的版本中，new_allocated的大小为`new_allocated = (size_t)newsize + (newsize &gt;&gt; 3) + (newsize &lt; 9 ? 3 : 6);</p><ul><li><p>新容量大小在之前容量的基础上加1/8的容量,再加上3或6的容量。</p></li><li><p>加上3或6的容量为了避免频繁扩容。</p></li><li><p>当newsize &lt; 9时，加上3的容量，当newsize &gt; 9 时，加上6的容量，减小当处理扩容小数据集的时候，减少内存的浪费。</p></li></ul><p>(3).在python3.9左右的版本中，也就是上述对应代码段中，相比于之前的版本，做了优化。</p><ul><li>新容量大小在之前容量的基础上添加1/8的容量，再加上6的容量，然后<code>&amp; ~(size_t)3</code>，这样得到的心容量大小恒为4的整数倍。</li></ul><p>(4).PyMem_Realloc函数的功能主要分为三步：</p><ul><li>首先分配一个大小为num_allocated_bytes字节的内存块</li><li>将旧内存块中的ptr(ob_items), 拷贝到新申请的内存空间。</li><li>释放旧内存块，并返回新的内存块。</li></ul><h3 id="五-、-list对象申请和释放的内存管理"><a href="#五-、-list对象申请和释放的内存管理" class="headerlink" title="五 、 list对象申请和释放的内存管理"></a>五 、 list对象申请和释放的内存管理</h3><p>1.首先，来看下list对象的申请过程对应的函数PyList_New，源码位于/Objects/listobjects.py中</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/* 在BUILD_LIST字节码中被调用 */</span><br>PyObject *<br><span class="hljs-built_in">PyList_New</span>(Py_ssize_t size)<br>&#123;<br>    <span class="hljs-keyword">if</span> (size &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">PyErr_BadInternalCall</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取执行程序所处的解释器中本地线程中的状态, state是个双向链表, 从状态集中获取list缓存数组。</span><br>    <span class="hljs-comment">// state对象存在于local thread的上下文中</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">Py_list_state</span> *<span class="hljs-title">state</span> =</span> <span class="hljs-built_in">get_list_state</span>();<br>    <span class="hljs-comment">// 定义指针</span><br>    PyListObject *op;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Py_DEBUG</span><br>    <span class="hljs-comment">// PyList_New() must not be called after _PyList_Fini()</span><br>    <span class="hljs-built_in">assert</span>(state-&gt;numfree != <span class="hljs-number">-1</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-comment">// 检查这个list缓存池中是否还有剩余空间, 如果存在, 从缓存池中取出list对象</span><br>    <span class="hljs-keyword">if</span> (state-&gt;numfree) &#123;<br>        state-&gt;numfree--;<br>        op = state-&gt;free_list[state-&gt;numfree];<br>        _Py_NewReference((PyObject *)op);<br>    &#125;<br>    <span class="hljs-comment">// 开辟新的空间, 创建PyListObject对象</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        op = <span class="hljs-built_in">PyObject_GC_New</span>(PyListObject, &amp;PyList_Type);<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (size &lt;= <span class="hljs-number">0</span>) &#123;<br>        op-&gt;ob_item = <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 为数组开辟空间</span><br>        op-&gt;ob_item = (PyObject **) <span class="hljs-built_in">PyMem_Calloc</span>(size, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(PyObject *));<br>        <span class="hljs-keyword">if</span> (op-&gt;ob_item == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">Py_DECREF</span>(op);<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">PyErr_NoMemory</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 设定op-&gt;size和op-&gt;allocated</span><br>    <span class="hljs-built_in">Py_SET_SIZE</span>(op, size);<br>    op-&gt;allocated = size;<br>    _PyObject_GC_TRACK(op);<br>    <span class="hljs-keyword">return</span> (PyObject *) op;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="六-、总结："><a href="#六-、总结：" class="headerlink" title="六 、总结："></a>六 、总结：</h3><p>未完待续~</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多进程通信之基于mmap的共享内存和文件锁</title>
    <link href="/2021/12/08/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B9%8B%E5%9F%BA%E4%BA%8Emmap%E7%9A%84%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%92%8C%E6%96%87%E4%BB%B6%E9%94%81/"/>
    <url>/2021/12/08/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E4%B9%8B%E5%9F%BA%E4%BA%8Emmap%E7%9A%84%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%92%8C%E6%96%87%E4%BB%B6%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h3><p>在公司项目开发中存在多机器人并行运行的场景，每个机器人都是一个进程， 每个进程都是无亲缘关系的。每个机器人根据指令的不同都可能会在运行过程中下去访问临界资源。众所周知，临界资源是指一次仅能使一个进程访问的资源，而访问临界资源对应的那段代码端即临界区，就必须互斥访问，因此加锁成了处理并发、并行的常用手段。要实现无亲缘的多进程之间的通信，就需要借助于中间件的锁，我一开始想到两种方法，一种是基于分布式锁+消息队列，第二种是基于文件锁。由于产品是位于客户端的，而Python处理的程序也在客户端处理，所以第一种方案目前行不通，只能采用第二种方法，当然还有更好的方法。采用文件锁来实现多进程互斥访问临界资源是非常简单易行的，但是开发软件，光解决是不够的，还需要考虑有没有更优化的方案，如果有，优化多少，该怎么优化。因此这篇笔记记录基于mmap的内存映射的方法+文件排他锁的方法实现无亲缘多进程之间的通信的解决方案。</p><p><strong>注：可能很多人会疑惑，使用语言本身自带的库也是可以实现多进程通信的，这里我说明一下，本篇笔记是基于无亲缘关系的进程之间通信，而非父子进程之间的通信，所以前者无法使用例如multiprocessing一类的进程锁。</strong></p><h3 id="二-、基于mmap的内存映射的概念和原理"><a href="#二-、基于mmap的内存映射的概念和原理" class="headerlink" title="二 、基于mmap的内存映射的概念和原理"></a>二 、基于mmap的内存映射的概念和原理</h3><p>1、mmap内存映射的概念</p><p>mmap是内存映射文件的一种方式，即将一个文件或者其他对象映射到内存空间上的某一块，实现文件物理地址和进程虚拟空间中的某一块的虚拟地址之间的映射关系，进程可以通过文件指针直接读写目标内存块，而操作系统会自动回写数据到磁盘上，这样就可以无需使用read，write等系统调用。同样，内核空间中的修改也可以反应到用户空间，被其他进程访问，从而实现多进程之间的数据通信。</p><p>2.mmap内存映射的原理</p><p>mmap内存映射的实现过程可以分为三个阶段：</p><p><strong>第一阶段：在虚拟地址空间中为映射创建虚拟映射区域</strong></p><p>(1).进程在用户态下调用mmap库函数，在其进程虚拟地址空间申请一段连续的虚拟地址空间(虚拟地址是可以连续的, 但物理地址是随机分配的)。</p><p>(2).在申请的连续的虚拟地址空间构造vm_area_struct结构，并对结构体进行初始化操作。</p><p>(3).初始化完成后，将该结构以加入到进程虚拟地址链表或者树中。</p><p><strong>第二阶段：调用内核态下的mmap函数，实现文件物理地址和进程虚拟地址空间的映射</strong></p><p>(1).为映射分配完虚拟映射区域后，根据待映射的文件指针在文件描述符表中找到对应的文件描述符，通过文件描述符，链接到内核中已打开文件集中文件结构体。文件结构体中包含了该文件的相关信息。</p><p>(2).内核函数mmap通过文件结构体里相关信息定位到文件的物理地址。</p><p>(3).建立页表，实现文件物理地址和进程虚拟地址空间的映射关系。</p><p><strong>第三阶段：进程访问文件时，产生缺页异常，从磁盘拷贝数据到内存</strong></p><p>(1).在完成文件物理地址和进程虚拟地址空间的映射后，数据此时还并没有发生拷贝。</p><p>(2).当进程读写虚拟地址空间中的页表时，通过搜索页表发现数据并不在映射的物理内存上，因此会产生缺页异常。</p><p>(3).操作系统通过一系列的检测，发现内存页确实不在，则内核请求调页过程。</p><p>(4).请求调页过程首先回去访问swap交换区，如果内存页存在交换区，则直接从交换区拿内存页到内存，swap没有的话，再去将所缺少的页从磁盘拷贝到内存。</p><p>(5).这样第一次拷贝完成后，其他进程访问的时候，可以直接读写内存上的文件数据。如果写操作改变了内存空间上的内容，则一段时间后，操作系统会将脏页面回写到磁盘上，当然也可以调用相关函数立即写回。</p><h3 id="三-、-mmap内存映射和普通读写文件的优势"><a href="#三-、-mmap内存映射和普通读写文件的优势" class="headerlink" title="三 、 mmap内存映射和普通读写文件的优势"></a>三 、 mmap内存映射和普通读写文件的优势</h3><p>在学习了mmap的概念和原理后，归根到底mmap是实现了虚拟地址空间、内存地址空间、文件物理地址三者之间的映射关系，进程映射关系直接通过读写内存地址，将脏页写回磁盘，来实现多进程之间的通信。那么相比于普通读写文件又有哪些优势呢？在查阅了相关资料Linux下读写文件的原理后，得到以下的比较。至于Linux下读写文件的原理，我这里就不做额外说明，附上链接，前去学习：<a href="https://www.cnblogs.com/huxiao-tee/p/4657851.html">https://www.cnblogs.com/huxiao-tee/p/4657851.html</a></p><p>mmap的优势：</p><p>(1).对文件的读写操作跨过了页缓存，减少了内存的拷贝次数，用内存读写替代I/O读写，提高文件的读写效率。</p><p>(2).基于mmap内存共享读写文件只需要一次从磁盘–&gt;内存，内存–&gt;磁盘的数据拷贝,而普通的读写文件因为存在页缓存需要两次数据拷贝。</p><p>(3).能够满足父子进程和无亲缘进程之间的通信，每个进程可以将自身虚拟地址空间映射到同一块内存空间及文件地址上。通过读写内存空间，实现多进程之间的通信。</p><p>(4).当文件数据量很大的时候，内存撑不起多次读写大数据的文件时，面临用磁盘空间替代内存空间时，可以考虑使用mmap机制。</p><h3 id="四-、文件锁"><a href="#四-、文件锁" class="headerlink" title="四 、文件锁"></a>四 、文件锁</h3><p>在使用了基于mmap的内存共享后，将不同进程的虚拟地址空间映射到同一内存块上，此时被映射到的内存空间变成了临界资源，当涉及到多个进程写内存块时，为了保证数据的同步不出错，要对写操作加锁，即当某个进程写内存时，其他进程要等待，直至释放锁。</p><p>由于项目中多个进程共享内存后，不仅仅是写操作，还涉及到访问其他的临界资源，例如鼠标的移动，窗口切换以及需要涉及原子性的操作等等。因此文件锁更多的是承担多进程访问临界资源时的同步处理角色。</p><p><strong>注: Python的文件锁在Linux和windows下基于不同的库实现，在Linux下采用fcntl。在windows下基于微软提供的msvcrt.dll库函数。网上很多博客中都是默认在Linux下使用fcntl，但都没说清楚。windows下Python可以使用msvcrt库，如果为了更方便跨平台，基于其他人的肩膀上开发，我推荐filelock这个库，通过<code>pip install filelock </code> 安装</strong></p><p>以下是我基于filelock+mmap内存共享实现的多进程通信类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">实现基于mmap的内存共享机制的锁机制</span><br><span class="hljs-string">file -&gt; memory</span><br><span class="hljs-string"></span><br><span class="hljs-string">example:</span><br><span class="hljs-string">    instance = MemoryShareLock()</span><br><span class="hljs-string">    with instance as f:</span><br><span class="hljs-string">        doing something</span><br><span class="hljs-string"></span><br><span class="hljs-string">上下文中操作都是原子性的, 因此勿将大段代码放到上下文环境中, 只考虑并发过程可能会导致数据不一致的情况下。</span><br><span class="hljs-string"></span><br><span class="hljs-string">***注意:</span><br><span class="hljs-string">1.开发中, 尽量不要让一个进程同时拥有多把锁, 如果非要同时具备多把锁, 请自行处理好解锁时机, 以防出现死锁!</span><br><span class="hljs-string">2.加锁和解锁过程请务必在同一个指令中完成!</span><br><span class="hljs-string">***</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> mmap<br><span class="hljs-keyword">from</span> util.fileimp <span class="hljs-keyword">import</span> mmap_path<br><span class="hljs-keyword">from</span> filelock <span class="hljs-keyword">import</span> FileLock<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file_lock</span>(<span class="hljs-params">func: t.<span class="hljs-type">Callable</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    基于共享内存的文件锁装饰器, 锁函数体, 增加加锁后统一预处理, 解锁前统一后处理。</span><br><span class="hljs-string">        1.如果能某进程拿到针对指定文件描述符的锁, 则往下执行; 没拿到排它锁的进程将阻塞, 直到拿到锁, 向下执行。</span><br><span class="hljs-string">        2.锁住被修饰的函数整体。</span><br><span class="hljs-string">        3.基于共享内存实现文件读写, 因此定义prefix和suffix的函数中第一个参数必须看做一个mmap对象。</span><br><span class="hljs-string">            对文件的操作基于mmap进行，而不是普通的文件对象。</span><br><span class="hljs-string"></span><br><span class="hljs-string">        用法:</span><br><span class="hljs-string">        share_lock = MemoryShareLock(filename=&#x27;test.txt&#x27;, length=10, tag_name=&#x27;共享内存涉及的说明&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        1.first example:</span><br><span class="hljs-string">        @file_lock</span><br><span class="hljs-string">        def func(instance):</span><br><span class="hljs-string">            doing something...</span><br><span class="hljs-string"></span><br><span class="hljs-string">        func(share_lock)</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">        2.second example:</span><br><span class="hljs-string">        def prefix(mmap, *args, **kwargs):</span><br><span class="hljs-string">            print(&#x27;加锁后, 预处理函数&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        def suffix(mmap, *args, **kwargs):</span><br><span class="hljs-string">            print(&#x27;解锁前, 后处理函数&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        @file_lock</span><br><span class="hljs-string">        def func(instance):</span><br><span class="hljs-string">            doing something...</span><br><span class="hljs-string"></span><br><span class="hljs-string">        func(share_lock, prefix=prefix, suffix=prefix, prefix_args=(&#x27;name&#x27;, &#x27;age&#x27;),</span><br><span class="hljs-string">             suffix_args=(&#x27;name&#x27;, &#x27;age&#x27;), prefix_kwargs=&#123;&quot;hobby&quot;:&quot;swim&quot;&#125;,</span><br><span class="hljs-string">             suffix_kwargs=&#123;&quot;love&quot;:&quot;person&quot;&#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">            instance: t.<span class="hljs-type">Any</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            prefix: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Callable</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            suffix: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Callable</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            prefix_args: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Tuple</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            suffix_args: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Tuple</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            prefix_kwargs: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Dict</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            suffix_kwargs: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Dict</span>] = <span class="hljs-literal">None</span></span></span><br><span class="hljs-function"><span class="hljs-params">    </span>):</span><br>        file_obj = <span class="hljs-built_in">open</span>(instance.filename, <span class="hljs-string">&#x27;r+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        mmap_obj = mmap.mmap(file_obj.fileno(), instance.length, tagname=instance.tag_name)<br>        lock = FileLock(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;instance.filename&#125;</span>.lock&#x27;</span>, timeout=instance.timeout)<br>        <span class="hljs-keyword">with</span> lock.acquire():<br>            <span class="hljs-keyword">if</span> prefix:<br>                prefix(mmap_obj, *prefix_args, **prefix_kwargs)<br>            func(instance)<br>            <span class="hljs-keyword">if</span> suffix:<br>                suffix(mmap_obj, *suffix_args, **suffix_kwargs)<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inject_dependence</span>(<span class="hljs-params">func</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    依赖注入装饰器</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @functools.wraps(<span class="hljs-params">func</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">instance, *args, **kwargs</span>):</span><br>        dependence: <span class="hljs-built_in">str</span> = func.__name__<br>        func_name = dependence.split(<span class="hljs-string">&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">if</span> dependence.split(<span class="hljs-string">&#x27;_&#x27;</span>)[<span class="hljs-number">0</span>]:<br>            _func = <span class="hljs-built_in">getattr</span>(instance, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func_name&#125;</span>&#x27;</span>)<br>            _args = <span class="hljs-built_in">getattr</span>(instance, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func_name&#125;</span>_args&#x27;</span>) <span class="hljs-keyword">or</span> ()<br>            _kwargs = <span class="hljs-built_in">getattr</span>(instance, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;func_name&#125;</span>_kwargs&#x27;</span>) <span class="hljs-keyword">or</span> &#123;&#125;<br>            <span class="hljs-keyword">if</span> _func:<br>                _func(*_args, **_kwargs)<br>        func(instance, *args, **kwargs)<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MemoryShareLock</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    内存共享类</span><br><span class="hljs-string">        1.使用__slots__减少因多次读取共享内存而带来过多额外实例对象的属性空间的内存靠小。</span><br><span class="hljs-string">        2.不能仅仅对打开文件加锁, 而应该对内存读写 + 刷到磁盘的这一过程加锁,</span><br><span class="hljs-string">        确保内存中的数据不被多个进程同时污染。</span><br><span class="hljs-string">        3.操作同一块 (文件-&gt; 内存的映射) 确保为单例。</span><br><span class="hljs-string">        4.生成锁请在此文件末尾生成。</span><br><span class="hljs-string">        5.继承MemoryShareLock的锁类, 应当提供自定义的pre_treatment, after_treatment函数, 并使用</span><br><span class="hljs-string">          依赖注入装饰器装饰。</span><br><span class="hljs-string">        6.实现加锁后预处理和解锁前后处理的依赖注入。</span><br><span class="hljs-string">        7.允许手动添加依赖, *注意: 由于实例全局唯一, 因此属于该实例的依赖也全局唯一。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    技术说明:</span><br><span class="hljs-string">        相比于直接采用文件的排斥锁来说, 使用基于mmap的内存共享 + 排斥锁, 读写文件只需一次数据拷贝,</span><br><span class="hljs-string">    磁盘 -&gt; 内存 and 内存 -&gt; 磁盘。而普通的读写文件时会加入提高读写效率, 保护磁盘的页缓存机制, 缺点会</span><br><span class="hljs-string">    导致读写文件各两次数据拷贝。</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    __slots__ = (<br>        <span class="hljs-string">&#x27;filename&#x27;</span>,<br>        <span class="hljs-string">&#x27;length&#x27;</span>,<br>        <span class="hljs-string">&#x27;tag_name&#x27;</span>,<br>        <span class="hljs-string">&#x27;mmap_obj&#x27;</span>,<br>        <span class="hljs-string">&#x27;file_obj&#x27;</span>,<br>        <span class="hljs-string">&#x27;timeout&#x27;</span>,<br>        <span class="hljs-string">&#x27;lock&#x27;</span>,<br>        <span class="hljs-string">&#x27;prefix&#x27;</span>,<br>        <span class="hljs-string">&#x27;suffix&#x27;</span>,<br>        <span class="hljs-string">&#x27;prefix_args&#x27;</span>,<br>        <span class="hljs-string">&#x27;suffix_args&#x27;</span>,<br>        <span class="hljs-string">&#x27;prefix_kwargs&#x27;</span>,<br>        <span class="hljs-string">&#x27;suffix_kwargs&#x27;</span>,<br>    )<br><br>    map_instance = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span>(<span class="hljs-params">self</span>):</span><br>        file_obj = <span class="hljs-built_in">open</span>(self.filename, <span class="hljs-string">&#x27;w+&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        mmap_obj = mmap.mmap(file_obj.fileno(), self.length, tagname=self.tag_name)<br>        lock = FileLock(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;self.filename&#125;</span>.lock&#x27;</span>, timeout=self.timeout)<br>        <span class="hljs-built_in">setattr</span>(self, <span class="hljs-string">&#x27;mmap_obj&#x27;</span>, mmap_obj)<br>        <span class="hljs-built_in">setattr</span>(self, <span class="hljs-string">&#x27;lock&#x27;</span>, lock)<br>        lock.acquire()<br>        self.prefix_treatment()<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span>(<span class="hljs-params">self, exc_type, exc_val, exc_tb</span>):</span><br>        mmap_obj = <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;mmap_obj&#x27;</span>)<br>        lock = <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;lock&#x27;</span>)<br>        self.suffix_treatment()<br>        mmap_obj.flush()<br>        mmap_obj.close()<br>        lock.release()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">            cls,</span></span><br><span class="hljs-function"><span class="hljs-params">            filename: <span class="hljs-built_in">str</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            *args,</span></span><br><span class="hljs-function"><span class="hljs-params">            **kwargs</span></span><br><span class="hljs-function"><span class="hljs-params">    </span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cls.map_instance.setdefault(filename, <span class="hljs-literal">None</span>):<br>            instance = <span class="hljs-built_in">super</span>().__new__(cls)<br>            cls.map_instance[filename] = instance<br>        <span class="hljs-keyword">return</span> cls.map_instance.get(filename)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">            self,</span></span><br><span class="hljs-function"><span class="hljs-params">            filename: <span class="hljs-built_in">str</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            length: <span class="hljs-built_in">int</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            tag_name: <span class="hljs-built_in">str</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            timeout: <span class="hljs-built_in">int</span> = -<span class="hljs-number">1</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            prefix: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Callable</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            suffix: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Callable</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            prefix_args: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Tuple</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            suffix_args: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Tuple</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            prefix_kwargs: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Dict</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">            suffix_kwargs: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Dict</span>] = <span class="hljs-literal">None</span></span></span><br><span class="hljs-function"><span class="hljs-params">    </span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        初始化对象</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.filename = os.path.join(mmap_path, filename)<br>        self.length = length<br>        self.tag_name = tag_name<br>        self.timeout = timeout<br>        self.prefix = prefix<br>        self.suffix = suffix<br>        self.prefix_args = prefix_args<br>        self.suffix_args = suffix_args<br>        self.prefix_kwargs = prefix_kwargs<br>        self.suffix_kwargs = suffix_kwargs<br><br><span class="hljs-meta">    @inject_dependence</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">prefix_treatment</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        预处理</span><br><span class="hljs-string">        读写 多进程共享的内存块, 进/线程安全的操作</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        mmap_obj: mmap.mmap = <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;mmap_obj&#x27;</span>)<br>        mmap_obj.seek(<span class="hljs-number">0</span>)<br>        mmap_obj.write(<span class="hljs-string">&quot;1&quot;</span>.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br><span class="hljs-meta">    @inject_dependence</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">suffix_treatment</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        后处理</span><br><span class="hljs-string">        读写 多进程共享的内存块, 进/线程安全的操作</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        mmap_obj: mmap.mmap = <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;mmap_obj&#x27;</span>)<br>        mmap_obj.seek(<span class="hljs-number">0</span>)<br>        mmap_obj.write(<span class="hljs-string">&quot;0&quot;</span>.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_suffix_dependence</span>(<span class="hljs-params">self, suffix, *args, **kwargs</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        增加后处理依赖</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.suffix = suffix<br>        self.suffix_args = args<br>        self.suffix_kwargs = kwargs<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_prefix_dependence</span>(<span class="hljs-params">self, prefix, *args, **kwargs</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        增加预处理依赖</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.prefix = prefix<br>        self.prefix_args = args<br>        self.prefix_kwargs = kwargs<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileWriteLock</span>(<span class="hljs-params">MemoryShareLock</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    自定义文件锁</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @inject_dependence</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pre_treatment</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @inject_dependence</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">after_treatment</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><br>switch_window_lock = MemoryShareLock(<span class="hljs-string">&#x27;switch_window.txt&#x27;</span>, <span class="hljs-number">10</span>, tag_name=<span class="hljs-string">&#x27;切换窗口锁&#x27;</span>)<br>auto_gui_lock = MemoryShareLock(<span class="hljs-string">&#x27;mouse_move.txt&#x27;</span>, <span class="hljs-number">10</span>, tag_name=<span class="hljs-string">&#x27;鼠标移动锁&#x27;</span>)<br>file_write_lock = FileWriteLock(<span class="hljs-string">&#x27;test_write.json&#x27;</span>, <span class="hljs-number">1000</span>, tag_name=<span class="hljs-string">&#x27;文件写锁&#x27;</span>)<br>input_lock = MemoryShareLock(<span class="hljs-string">&#x27;input.txt&#x27;</span>, <span class="hljs-number">100</span>, tag_name=<span class="hljs-string">&#x27;输入框锁&#x27;</span>)<br>js_execute_lock = MemoryShareLock(<span class="hljs-string">&#x27;js.txt&#x27;</span>, <span class="hljs-number">100</span>, tag_name=<span class="hljs-string">&#x27;js执行锁&#x27;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>操作系统</category>
      
      <category>锁</category>
      
      <category>多进程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
      <tag>锁</tag>
      
      <tag>多进程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python性能调优方法</title>
    <link href="/2021/11/16/Python%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%96%B9%E6%B3%95/"/>
    <url>/2021/11/16/Python%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一-、背景"><a href="#一-、背景" class="headerlink" title="一 、背景"></a>一 、背景</h3><p>在开发中，执行某程序时遇见一种现象，随着时间执行越久，执行某个方法的时间在不断变长。为了有效定位是哪个方法，特此去学习了下Python性能分析的方法。</p><h3 id="二-、cProfile模块"><a href="#二-、cProfile模块" class="headerlink" title="二 、cProfile模块"></a>二 、cProfile模块</h3><p>cProfile是Python的默认的性能分析器，主要用于测量CPU的耗时，不关注内存的消耗。通过cProfile可以分析每一个函数的执行时间和执行次数，进而对函数进行时间上的优化。话不多说，先上代码，如下是基于cProfile写的性能分析装饰器。</p><p>定义分析结果的存储路径：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">file_dir = os.path.dirname(os.path.abspath(__file__))<br>file_base = os.path.join(file_dir, <span class="hljs-string">&#x27;analysis&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">time_analysis</span>(<span class="hljs-params">filename: t.<span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>) -&gt; t.<span class="hljs-type">Any</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    代码执行过程性能分析</span><br><span class="hljs-string">    将分析结果保存到指定文件</span><br><span class="hljs-string">    如未指定文件名，则使用原始函数名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    sort_by = <span class="hljs-string">&#x27;tottime&#x27;</span><br>    time_base = os.path.join(file_base, <span class="hljs-string">&#x27;time_analysis&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">func</span>):</span><br>        create_dir(time_base)<br><br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>            open_profile = os.environ.get(<span class="hljs-string">&#x27;PROFILE&#x27;</span>)<br>            true_filename = filename <span class="hljs-keyword">or</span> func.__name__<br>            file_path = os.path.join(time_base, true_filename)<br>            <span class="hljs-keyword">if</span> open_profile:<br>                profile = cProfile.Profile()<br>                <span class="hljs-comment"># 启动分析</span><br>                profile.enable()<br>                res = func(*args, **kwargs)<br>                <span class="hljs-comment"># 关闭分析</span><br>                profile.disable()<br>                <span class="hljs-comment"># 保存二进制格式到文件中</span><br>                ps = pstats.Stats(profile).sort_stats(sort_by)<br>                ps.dump_stats(file_path)<br>            <span class="hljs-keyword">else</span>:<br>                res = func(*args, **kwargs)<br>            <span class="hljs-keyword">return</span> res<br><br>        <span class="hljs-keyword">return</span> inner<br><br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><p><strong>函数说明：</strong></p><p>​        上述程序中使用的profile.print_stats()将分析结果打印到控制台，ps.dump_stats(file_path)将分析结果以二进制的形式持久化到文件中。这里我是将每个函数的分析结果都保存对应的文件夹下，当装饰器工厂函数不带参数，则保存的文件名默认为函数名，反之保存的为文件名为传进来的参数filename。</p><p><strong>测试用例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@performance_analysis()</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;my name is syz&#x27;</span><br><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.environ.get(<span class="hljs-string">&#x27;PROFILE&#x27;</span>):<br>        os.environ[<span class="hljs-string">&#x27;PROFILE&#x27;</span>] = <span class="hljs-string">&#x27;True&#x27;</span><br>        res = test()<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">finally</span>:<br>    os.environ.pop(<span class="hljs-string">&#x27;PROFILE&#x27;</span>, <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight profile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs profile">      <span class="hljs-number">2</span> function calls in <span class="hljs-number">0.000</span> seconds<br><br>Ordered by: standard name<br><br><span class="hljs-keyword">ncalls</span>  <span class="hljs-keyword">tottime</span>  percall  <span class="hljs-keyword">cumtime</span>  percall <span class="hljs-keyword">filename</span>:lineno(function)<br>     <span class="hljs-number">1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span> performance_analysis.py:<span class="hljs-number">64</span>(<span class="hljs-string">test</span>)<br>     <span class="hljs-number">1</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span>    <span class="hljs-number">0.000</span> &#123;method <span class="hljs-string">&#x27;disable&#x27;</span> of <span class="hljs-string">&#x27;_lsprof.Profiler&#x27;</span> objects&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.ncalls: 函数调用的次数<br>2.tottime: 函数的总的运行时间,除掉函数中调用子函数的运行时间<br>3.percall: (第一个 percall)等于tottime/ncalls<br>4.cumtime: 函数及其所有子函数的调用运行的时间,即函数开始调用到返回的时间<br>5.percall: (第二个 percall)即函数运行一次的平均时间,等于 cumtime/ncalls<br>6.filename: lineno(function):每个函数调用的具体信息</p><p>因此要分析哪一个函数耗时，应该关注tottime产生的时间。这样便可以容易地定位到耗时的函数，进行优化。</p><h3 id="三-、-memory-profiler"><a href="#三-、-memory-profiler" class="headerlink" title="三 、 memory_profiler"></a>三 、 memory_profiler</h3><p>memory_profiler模块用于按行分析python程序执行过程中所增减的内存量，适用于分析出导致内存溢出的源头。</p><p>安装模块：<code>pip install memory_profile</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@profile</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_func</span>():</span><br>    a = [<span class="hljs-string">&#x27;a&#x27;</span>] * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">100</span><br>    b = <span class="hljs-built_in">list</span>([<span class="hljs-string">&#x27;nihao&#x27;</span>])<br>    a = <span class="hljs-string">&#x27;a&#x27;</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span><br>    <span class="hljs-keyword">del</span> a<br>test_func()<br></code></pre></td></tr></table></figure><p>分析结果:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs tap">Line <span class="hljs-comment">#    Mem usage    Increment  Occurences   Line Contents</span><br>============================================================<br>   <span class="hljs-number"> 33 </span>    65.8 MiB     65.8 MiB          <span class="hljs-number"> 1 </span>  @profile<br>   <span class="hljs-number"> 34 </span>                                        def test_func():<br>   <span class="hljs-number"> 35 </span>   865.8 MiB    800.0 MiB          <span class="hljs-number"> 1 </span>      a = [&#x27;a&#x27;] *<span class="hljs-number"> 1024 </span>* 1024* 100<br>   <span class="hljs-number"> 36 </span>   865.8 MiB      0.0 MiB          <span class="hljs-number"> 1 </span>      b = list([&#x27;nihao&#x27;])<br>   <span class="hljs-number"> 37 </span>    66.8 MiB   -799.0 MiB          <span class="hljs-number"> 1 </span>      a = &#x27;a&#x27; * 1024*1024<br>   <span class="hljs-number"> 38 </span>    65.8 MiB     -1.0 MiB          <span class="hljs-number"> 1 </span>      del a<br></code></pre></td></tr></table></figure><p>通过结果可以看到，对于同名变量的赋值，不会产生新的内存，而新值会替代旧值，在a指针指向的原内存块上进行覆盖，但是对不同变量，则会在内存中开辟其他内存块。</p><p>接下来，对profile装饰器再封装下，提供性能分析开启开关，通过设置环境变量开启，以及分析结果文件归档。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">memory_analysis</span>(<span class="hljs-params">filename: t.<span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>) -&gt; t.<span class="hljs-type">Any</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    每行代码的内存消耗分析</span><br><span class="hljs-string">    将分析结果保存到指定文件</span><br><span class="hljs-string">    如未指定文件名，则使用原始函数名</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    memory_base = os.path.join(file_base, <span class="hljs-string">&#x27;memory_analysis&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span>(<span class="hljs-params">func</span>):</span><br>        create_dir(memory_base)<br><br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>            open_profile = os.environ.get(<span class="hljs-string">&#x27;PROFILE&#x27;</span>)<br>            true_filename = filename <span class="hljs-keyword">or</span> func.__name__<br>            file_path = os.path.join(memory_base, true_filename)<br>            <span class="hljs-keyword">if</span> open_profile:<br>                <span class="hljs-comment"># 将分析结果写入文件</span><br>                <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;w&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                    res = memory_profiler.profile(func, stream=f)(*args, **kwargs)<br>            <span class="hljs-keyword">else</span>:<br>                res = func(*args, **kwargs)<br>            <span class="hljs-keyword">return</span> res<br><br>        <span class="hljs-keyword">return</span> inner<br><br>    <span class="hljs-keyword">return</span> wrapper<br></code></pre></td></tr></table></figure><h3 id="四-、读取分析结果"><a href="#四-、读取分析结果" class="headerlink" title="四 、读取分析结果"></a>四 、读取分析结果</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_analysis_res</span>(<span class="hljs-params">filename: <span class="hljs-built_in">str</span>, mode: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    读取分析结果</span><br><span class="hljs-string">    mode: time or memory</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> mode <span class="hljs-keyword">in</span> [<span class="hljs-string">&#x27;time&#x27;</span>, <span class="hljs-string">&#x27;memory&#x27;</span>], <span class="hljs-string">&quot;请在time|memory中选择模式&quot;</span><br><br>    file_path = os.path.join(os.path.join(file_base, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;mode&#125;</span>_analysis&#x27;</span>, filename))<br>    <span class="hljs-keyword">if</span> mode == <span class="hljs-string">&#x27;time&#x27;</span>:<br>        ps = pstats.Stats(file_path)<br>        ps.strip_dirs().sort_stats(-<span class="hljs-number">1</span>).print_stats()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_path, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            sys.stdout.write(f.read())<br></code></pre></td></tr></table></figure><p>说明：传入文件名以及分析模式(时间性能or内存开销), 将结果显示在控制台。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>性能调优</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>性能调优</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中获取函数的参数信息</title>
    <link href="/2021/11/15/Python%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BF%A1%E6%81%AF/"/>
    <url>/2021/11/15/Python%E4%B8%AD%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<p>有一个需求是构造简易的函数库的函数文档，供前端读取json文件显示到看板上。</p><p>Python中获取函数参数的参数都是从函数的__code__代码对象中获取到，因此可以使用以下方式：</p><p>使用inspect检查模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">name, age, sex=<span class="hljs-string">&#x27;male&#x27;</span>, *args, **kwargs</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">import</span> inspect<br>res = inspect.getargs(func.__code__)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-built_in">print</span>(res.args)<br></code></pre></td></tr></table></figure><p>执行结果:<br><code>Arguments(args=[&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;], varargs=&#39;args&#39;, varkw=&#39;kwargs&#39;)</code><br><code>[&#39;name&#39;, &#39;age&#39;, &#39;sex&#39;]</code></p><p><strong>说明：</strong><br>通过getargs传入函数的代码对象，可以获取函数的基本信息<br>(1)args:是参数名字的列表形式<br>(2)varargs: 是<code>*</code>后面的参数名字<br>(3)varkw: 是<code>**</code>后面的参数的名字</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Python的Dict关联式容器</title>
    <link href="/2021/11/02/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84Dict%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/"/>
    <url>/2021/11/02/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84Dict%E5%85%B3%E8%81%94%E5%BC%8F%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="一-、-背景"><a href="#一-、-背景" class="headerlink" title="一 、 背景"></a>一 、 背景</h3><p>字典dict是Python开发中常用的数据结构之一，同样，其他语言中也有类似的数据结构，例如C++中的map，Golang中的map, Java中的HashMap等。dict是基于哈希表实现的，但实现的方式在每个语言中都不完全相同。接下来，就来探究下dict底层的数据结构，来学习一下Python的dict相关操作集，动态扩容机制以及如何在内存的使用上进行优化的。本篇文章所使用的的Python版本为3.10。</p><h3 id="二-、dict所涉及的数据结构"><a href="#二-、dict所涉及的数据结构" class="headerlink" title="二 、dict所涉及的数据结构"></a>二 、dict所涉及的数据结构</h3><p><strong>PyDictKeyEntry键值对结构体</strong>，代码位于/Include/internal/pycore_dict.h头文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    Py_hash_t me_hash;<br>    PyObject *me_key; <br>    PyObject *me_value;<br>&#125; PyDictKeyEntry;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1).me_hash：缓存me_key键的hash值</p><p>(2).me_key： 键对象</p><p>(3).me_value: 值对象， 只在combined tables中有意义, 而在splited tables中无意义，如果是splited tables， 值对象存储在PyDictObject的ma_values中，不存于PyDictKeyEntry结构体中。</p><p><strong>PyDictKeysObject结构体</strong>，代码位于/Include/internal/pycore_dict.h头文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">dictkeysobject</span> &#123;</span><br>    Py_ssize_t dk_refcnt;<br><br>    <span class="hljs-comment">/* Size of the hash table (dk_indices). It must be a power of 2. */</span><br>    <span class="hljs-comment">/* hash表大小，必须是2的次幂方 */</span><br>    <span class="hljs-keyword">uint8_t</span> dk_log2_size;<br><br>    <span class="hljs-comment">/* Kind of keys*/</span><br>    <span class="hljs-comment">/* 键的类型*/</span><br>    <span class="hljs-keyword">uint8_t</span> dk_kind;<br><br>    <span class="hljs-comment">/* Version number -- Reset to 0 by any modification to keys */</span><br>    <span class="hljs-keyword">uint32_t</span> dk_version;<br><br>    <span class="hljs-comment">/* Number of usable entries in dk_entries. */</span><br>    <span class="hljs-comment">/* 键值对可用个数 */</span><br>    Py_ssize_t dk_usable;<br><br>    <span class="hljs-comment">/* Number of used entries in dk_entries. */</span><br>    <span class="hljs-comment">/* 键值对已用个数 */</span><br>    Py_ssize_t dk_nentries;<br><br>    <span class="hljs-comment">/* Actual hash table of dk_size entries. It holds indices in dk_entries,</span><br><span class="hljs-comment">       or DKIX_EMPTY(-1) or DKIX_DUMMY(-2).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       Indices must be: 0 &lt;= indice &lt; USABLE_FRACTION(dk_size).</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       The size in bytes of an indice depends on dk_size:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       - 1 byte if dk_size &lt;= 0xff (char*)</span><br><span class="hljs-comment">       - 2 bytes if dk_size &lt;= 0xffff (int16_t*)</span><br><span class="hljs-comment">       - 4 bytes if dk_size &lt;= 0xffffffff (int32_t*)</span><br><span class="hljs-comment">       - 8 bytes otherwise (int64_t*)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       Dynamically sized, SIZEOF_VOID_P is minimum. */</span><br>    <span class="hljs-comment">/* 索引数组, 存放dk_entries中的索引值 */</span><br>    <span class="hljs-keyword">char</span> dk_indices[];  <span class="hljs-comment">/* char is required to avoid strict aliasing. */</span><br><br>    <span class="hljs-comment">/* &quot;PyDictKeyEntry dk_entries[dk_usable];&quot; array follows:</span><br><span class="hljs-comment">       see the DK_ENTRIES() macro */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><pre><code>1. dk_refcnt： 字典对象的引用计数2. dk_log2_size： 哈希表(dk_indices)的大小所占的位数，为2的次幂方，便于使用位运算。3. dk_kind： 键的类型4. dk_version：版本号，任何对键的修改都会重置为05. dk_usable: 键值对可用个数，占hash表总容量的2/3, 用于判断是否需要动态扩容6. dk_nentries: 键值对已用个数7. dk_indices: 索引数组（真正的hash表)，存放hash值</code></pre><p>文件下方同时还分别针对32位和64位的机器上提供了一些宏定义。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 哈希表的中大小所占的位数</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DK_LOG_SIZE(dk)  ((dk)-&gt;dk_log2_size)</span><br><span class="hljs-comment">// 如果是64位机器</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> SIZEOF_VOID_P &gt; 4</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DK_SIZE(dk)      (((int64_t)1)&lt;&lt;DK_LOG_SIZE(dk))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DK_IXSIZE(dk)                     \</span><br>    (DK_LOG_SIZE(dk) &lt;= <span class="hljs-number">7</span> ?               \<br>        <span class="hljs-number">1</span> : DK_LOG_SIZE(dk) &lt;= <span class="hljs-number">15</span> ?       \<br>            <span class="hljs-number">2</span> : DK_LOG_SIZE(dk) &lt;= <span class="hljs-number">31</span> ?   \<br>                <span class="hljs-number">4</span> : <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int64_t</span>))<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br><span class="hljs-comment">// 32位机器</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DK_SIZE(dk)      (1&lt;&lt;DK_LOG_SIZE(dk))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DK_IXSIZE(dk)                     \</span><br>    (DK_LOG_SIZE(dk) &lt;= <span class="hljs-number">7</span> ?               \<br>        <span class="hljs-number">1</span> : DK_LOG_SIZE(dk) &lt;= <span class="hljs-number">15</span> ?       \<br>            <span class="hljs-number">2</span> : <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int32_t</span>))<br><span class="hljs-comment">// 指针，指向哈希表中的键值对实体数组</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DK_ENTRIES(dk) \</span><br>    ((PyDictKeyEntry*)(&amp;((<span class="hljs-keyword">int8_t</span>*)((dk)-&gt;dk_indices))[DK_SIZE(dk) * DK_IXSIZE(dk)]))<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1).<strong>DK_IXSIZE</strong>宏定义：dk_log2_size位数不断增大，其值也在不断增大，目的是在hash表扩容时，能够扩容出更大的hash表，减少当hash表小的时候频繁扩容的现象。</p><p>(2).<strong>DK_ENTRIES</strong>宏定义: 指针类型，用于指向哈希表中的键值对数组的首地址。</p><h3 id="三-、-阅读源码前的开胃小菜"><a href="#三-、-阅读源码前的开胃小菜" class="headerlink" title="三 、 阅读源码前的开胃小菜"></a>三 、 阅读源码前的开胃小菜</h3><p>在了解到了dict的真面目之后，接下来进入到/Objects/dictobject.c文件中，进一步学习下dict的各个操作集以及dict如何实现动态扩容。</p><p>在文件的开头有很多的注释，耐心看完会对下面函数源码的阅读有很大的帮助。</p><p>由于注释太多，我选取了部分注释说明：</p><h4 id="1-PyDictKeysObject结构体"><a href="#1-PyDictKeysObject结构体" class="headerlink" title="1.PyDictKeysObject结构体"></a>1.PyDictKeysObject结构体</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">+---------------+<br>|<span class="hljs-string"> dk_refcnt     </span>|<br>|<span class="hljs-string"> dk_log2_size  </span>|<br>|<span class="hljs-string"> dk_kind       </span>|<br>|<span class="hljs-string"> dk_usable     </span>|<br>|<span class="hljs-string"> dk_nentries   </span>|<br>+---------------+<br>|<span class="hljs-string"> dk_indices    </span>|<br>|<span class="hljs-string">               </span>|<br>+---------------+<br>|<span class="hljs-string"> dk_entries    </span>|<br>|<span class="hljs-string">               </span>|<br>+---------------+<br><br>这里比较重要的两个字段分别是dk_indices(哈希索引数组), dk_entries(键值对实体数组)<br></code></pre></td></tr></table></figure><h4 id="2-字典容量的说明"><a href="#2-字典容量的说明" class="headerlink" title="2. 字典容量的说明"></a>2. 字典容量的说明</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">* PyDict_MINSIZE is the starting size for any new dict.</span><br><span class="hljs-comment">* 8 allows dicts with no more than 5 active entries; experiments suggested</span><br><span class="hljs-comment">* this suffices for the majority of dicts (consisting mostly of usually-small</span><br><span class="hljs-comment">* dicts created to pass keyword arguments).</span><br><span class="hljs-comment">* Making this 8, rather than 4 reduces the number of resizes for most</span><br><span class="hljs-comment">* dictionaries, without any significant extra memory use.</span><br><span class="hljs-comment">* USABLE_FRACTION should be quick to calculate.</span><br><span class="hljs-comment">* Fractions around 1/2 to 2/3 seem to work well in practice.</span><br><span class="hljs-comment">* Increasing this ratio makes dictionaries more dense resulting in more collisions.  Decreasing it improves sparseness at the expense of spreading indices over more cache lines and at the cost of total memory consumed.</span><br><br></code></pre></td></tr></table></figure><p>稍微解释一下，提取出以下三点：</p><p>(1).PyDict_MINSIZE是字典初始化的大小。</p><p>(2).根据实验得出，在总容量为8的字典中，键值对实体所占的容量不超过5，意味着键值对实体所占的hash表最大容量的2/3。</p><p>(3).将字典初始大小设定为8，而不是4，减少了字典的频繁扩容带来的内存的开销。</p><p>(4).<code>#define USABLE_FRACTION(n) (((n) &lt;&lt; 1)/3)</code>宏定义规定了负载因子要&lt;=2/3,负载因子过高将导致更多的冲突，过低的话，hash槽位会变得过于分散，带来更多的内存开销。</p><h4 id="3-巧妙设定int类型的hash值"><a href="#3-巧妙设定int类型的hash值" class="headerlink" title="3.巧妙设定int类型的hash值"></a>3.巧妙设定int类型的hash值</h4><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs tp"># python对int类型数据的hash函数做了额外的说明，是为了引出解决hash冲突的方法。<br><br>Major subtleties ahead:  Most hash schemes depend on having a <span class="hljs-string">&quot;good&quot;</span> hash<br>function, in the sense of simulating randomness.  Python doesn<span class="hljs-string">&#x27;t:  its most</span><br><span class="hljs-string">important hash functions (for ints) are very regular in common</span><br><span class="hljs-string">cases:</span><br><span class="hljs-string"></span><br><span class="hljs-string">  &gt;&gt;&gt;[hash(i) for i in range(4)]</span><br><span class="hljs-string">  [0, 1, 2, 3]</span><br><span class="hljs-string"></span><br><span class="hljs-string">This isn&#x27;</span>t necessarily bad<span class="hljs-comment">!  To the contrary, in a table of size 2**i, taking</span><br><span class="hljs-comment">the low-order i bits as the initial table index is extremely fast, and there</span><br><span class="hljs-comment">are no collisions at all for dicts indexed by a contiguous range of ints. So</span><br><span class="hljs-comment">this gives better-than-random behavior in common cases, and that&#x27;s very</span><br><span class="hljs-comment">desirable.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">OTOH, when collisions occur, the tendency to fill contiguous slices of the</span><br><span class="hljs-comment">hash table makes a good collision resolution strategy crucial.  Taking only</span><br><span class="hljs-comment">the last i bits of the hash code is also vulnerable:  for example, consider</span><br><span class="hljs-comment">the list [i &lt;&lt; 16 for i in range(20000)] as a set of keys.  Since ints are</span><br><span class="hljs-comment">their own hash codes, and this fits in a dict of size 2**15, the last 15 bits</span><br><span class="hljs-comment"> of every hash code are all 0:  they *all* map to the same table index.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">But catering to unusual cases should not slow the usual ones, so we just take</span><br><span class="hljs-comment">the last i bits anyway.  It&#x27;s up to collision resolution to do the rest.  If</span><br><span class="hljs-comment">we *usually* find the key we&#x27;re looking for on the first try (and, it turns</span><br><span class="hljs-comment">out, we usually do -- the table load factor is kept under 2/3, so the odds</span><br><span class="hljs-comment">are solidly in our favor), then it makes best sense to keep the initial index</span><br><span class="hljs-comment">computation dirt cheap.</span><br></code></pre></td></tr></table></figure><p><strong>稍微解释一下：</strong></p><p>很多语言中的hash函数设计的理念是基于随机数提供一个冲突性很小的hash函数，但是Python中并没有这样做，对于int类型来说，python直接将int本身的值作为哈希索引值。这产生的效果并不糟糕，相反，在2**i的哈希表中，选取低阶i位的数值作为哈希表的索引相比于通过随机性的hash函数计算得到的索引值来说是非常快的。而且在一定连续范围的int类型的数据中并不会产生冲突，通常情况下，这是一种比随机性hash行为更好的索引值选取方式。</p><p>当产生冲突时，hash冲突解决的方法显得至关重要。但是只采用低阶i位来说会带来冲突。</p><p>举个例子</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[i &lt;&lt; <span class="hljs-number">16</span> for i in range(<span class="hljs-number">20000</span>)]<br></code></pre></td></tr></table></figure><p> <strong>注: i &lt;&lt; 16表示i左移16位。</strong></p><p>上述代码得到的每个数值转为二进制格式。如果按照之前选取低阶i位，由于左移16位后，低阶16位都是0，就会映射到同一个槽位上，从而产生冲突。为了兼容这种不寻常的例子，同时不降低正常情况下hash计算的速度。依然选用低阶i为作为hash值，而处理不寻常情况则交给hash冲突解决方案。</p><p>hash冲突解决方案的核心是如何高效的确定下一个槽位的位置，而Python中关于hash冲突的解决方案，我打算之后新开一个笔记专门学习，这里就暂且跳过。</p><h3 id="四-、-源码分析dict的操作集和动态扩（缩）容等机制"><a href="#四-、-源码分析dict的操作集和动态扩（缩）容等机制" class="headerlink" title="四 、 源码分析dict的操作集和动态扩（缩）容等机制"></a>四 、 源码分析dict的操作集和动态扩（缩）容等机制</h3><p>接下来就开始阅读源码，学习下常见的dict的操作集和动态扩容。</p><p>源码位于/Objects/dictobject.c文件下。</p><h4 id="1-字典对象引用计数加减操作"><a href="#1-字典对象引用计数加减操作" class="headerlink" title="1.字典对象引用计数加减操作"></a>1.字典对象引用计数加减操作</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">// 字典本身就是一个对象，可以被其他对象所引用，因而字典的引用计数用dk_refcnt表示，如下是队引用计数的加减操作，没什么好说的。</span><br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span><br><span class="hljs-built_in">dictkeys_incref</span>(PyDictKeysObject *dk)<br>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Py_REF_DEBUG</span><br>    _Py_RefTotal++;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    dk-&gt;dk_refcnt++;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span><br><span class="hljs-built_in">dictkeys_decref</span>(PyDictKeysObject *dk)<br>&#123;<br>    <span class="hljs-built_in">assert</span>(dk-&gt;dk_refcnt &gt; <span class="hljs-number">0</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Py_REF_DEBUG</span><br>    _Py_RefTotal--;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>    <span class="hljs-keyword">if</span> (--dk-&gt;dk_refcnt == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">free_keys_object</span>(dk);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>(1).static关键字：用于控制变量的存储方式即可见性，对于全局变量来说，已经是静态存储，因此仅用作只在当前文件内访问，外部无法访问。对于局部变量来说，改变变量的存储方式，常见的在递归程序中，使用static声明，可以将变量的值保存到下一次调用的时候。</p><p>(2).inline关键字：将函数声明为内联函数，其类似于宏定义，无需将参数压入栈，调用一系列操作，相比于宏定义，可以在类中使用。在编译时，编译器会将inline修饰的函数代码段插入到调用者的代码段中，这样在执行时，就无须跳转到目标函数去执行，相比于调用普通函数，效率更高，但同样会带来空间上的开销。</p><h4 id="2-new和free一个PyDictKeyObject对象"><a href="#2-new和free一个PyDictKeyObject对象" class="headerlink" title="2.new和free一个PyDictKeyObject对象"></a>2.new和free一个PyDictKeyObject对象</h4><p>由于代码量太多，我不全部贴出来了，只说下其中对字典对象的复用机制。Python中的复用机制很多都是基于链表或者数组。对于字典复用的数据结构位于/include/internal/pycore_interp.h头文件中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-meta-keyword">define</span> PyDict_MAXFREELIST 80</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">Py_dict_state</span> &#123;</span><br>    <span class="hljs-comment">/* Dictionary reuse scheme to save calls to malloc and free */</span><br>    PyDictObject *free_list[PyDict_MAXFREELIST];<br>    <span class="hljs-keyword">int</span> numfree;<br>    PyDictKeysObject *keys_free_list[PyDict_MAXFREELIST];<br>    <span class="hljs-keyword">int</span> keys_numfree;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1).free_list：指针数组，数组中每个元素都是指向PyDictObject对象的指针。存储split类型的hash表。</p><p>(2).keys_free_list：指针数组，元素指向PyDictKeyObject对象的指针。存储combined类型的hash表。</p><p>(3).numfree: free_list中空闲的个数</p><p>(4).keys_numfree: keys_free_list中空闲的个数</p><p>(5).空闲数组的最大长度不能超过80，一旦空闲数组满了，将调用PyObject_Malloc申请内存块。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// new_keys_object函数中代码段</span><br><span class="hljs-keyword">static</span> PyDictKeysObject*<br>new_keys_object(<span class="hljs-keyword">uint8_t</span> log2_size)<br>&#123;<br>    ...<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">Py_dict_state</span> *<span class="hljs-title">state</span> =</span> get_dict_state();<br>    <span class="hljs-comment">// 如果有空闲数组的长度未到最大上限，则从空闲数组中取出一个空的PyDictKeysObject对象</span><br>    <span class="hljs-keyword">if</span> (log2_size == PyDict_LOG_MINSIZE &amp;&amp; state-&gt;keys_numfree &gt; <span class="hljs-number">0</span>) &#123;<br>        dk = state-&gt;keys_free_list[--state-&gt;keys_numfree];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 新开辟的空间大小由PyDictKeysObject结构体大小, 键值对实体结构体*已用个数大小和es&lt;&lt;log2_size大小组成。</span><br>        dk = PyObject_Malloc(<span class="hljs-keyword">sizeof</span>(PyDictKeysObject)<br>                             + (es&lt;&lt;log2_size大小组成,)<br>                             + <span class="hljs-keyword">sizeof</span>(PyDictKeyEntry) * usable);<br>        <span class="hljs-keyword">if</span> (dk == <span class="hljs-literal">NULL</span>) &#123;<br>            PyErr_NoMemory();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br><br><span class="hljs-comment">// free_keys_object函数</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span><br>free_keys_object(PyDictKeysObject *keys)<br>&#123;<br>    ...<br>    <span class="hljs-keyword">if</span> (DK_SIZE(keys) == PyDict_MINSIZE &amp;&amp; state-&gt;keys_numfree &lt; PyDict_MAXFREELIST) &#123;<br>        state-&gt;keys_free_list[state-&gt;keys_numfree++] = keys;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    PyObject_Free(keys);<br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>(1).在new一个PyDictKeyObject对象前，首先会去检测下空闲数组中是否还有空闲位置，如果有，取出空的字典对象，否则调用PyObject_Malloc，为字典对象申请新的内存空间。</p><p>(2).在free一个PyDictKeyObject对象前，首先会去检查空闲数组是否满，如果不满，将其存储keys_free_list数组中; 反之，调用PyObject_Free, 释放掉字典对象。</p><p>(3).新开辟的空间大小由PyDictKeysObject结构体大小, 键值对实体结构体*已用个数大小和es&lt;&lt;log2_size大小组成。其中es大小取决于log2_size位数，当字典中包含大量元素时，发生扩容，将会申请更大的内存空间。所以，Python中新开辟的字典空间大小并不是线性的，一定程度上取决于log2_size大小。</p><h4 id="3-字典的get-涉及的底层函数-Py-dict-lookup"><a href="#3-字典的get-涉及的底层函数-Py-dict-lookup" class="headerlink" title="3. 字典的get()涉及的底层函数_Py_dict_lookup()"></a>3. 字典的get()涉及的底层函数_Py_dict_lookup()</h4><p>在阅读_Py_dict_lookup源码前，先说明下<code>dk_indices</code>中可能存在的几种标识,</p><p>代码位于/Include/internal/pycore_dict.h头文件中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DKIX_EMPTY (-1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DKIX_DUMMY (-2)  <span class="hljs-comment">/* Used internally */</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> DKIX_ERROR (-3)</span><br></code></pre></td></tr></table></figure><p><strong>注：只要dk_indices数组槽位中的数值能够对应上dk_entries数组中的槽位，就说明键对象找到能够被找到。</strong></p><p>在/Include/dictobject.h头文件中可以找到dict容器暴露出来的接口。以下是get()方法对应的接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c">PyObject *<br>PyDict_GetItem(PyObject *op, PyObject *key)<br>&#123;<br>    <span class="hljs-keyword">if</span> (!PyDict_Check(op)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 类型强转</span><br>    PyDictObject *mp = (PyDictObject *)op;<br><br>    Py_hash_t hash;<br>    <br>    <span class="hljs-comment">// 如果对于非unicode编码的对象, 获取该对象的hash值, 规定了键对象必须是可哈希的</span><br>    <span class="hljs-keyword">if</span> (!PyUnicode_CheckExact(key) ||<br>        (hash = ((PyASCIIObject *) key)-&gt;hash) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        hash = PyObject_Hash(key);<br>        <span class="hljs-keyword">if</span> (hash == <span class="hljs-number">-1</span>) &#123;<br>            PyErr_Clear();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br><br>    PyThreadState *tstate = _PyThreadState_GET();<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Py_DEBUG</span><br>    <span class="hljs-comment">// bpo-40839: Before Python 3.10, it was possible to call PyDict_GetItem()</span><br>    <span class="hljs-comment">// with the GIL released.</span><br>    _Py_EnsureTstateNotNULL(tstate);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>    <span class="hljs-comment">/* Preserve the existing exception */</span><br>    PyObject *exc_type, *exc_value, *exc_tb;<br>    PyObject *value;<br>    Py_ssize_t ix; (<span class="hljs-keyword">void</span>)ix;<br><br>    _PyErr_Fetch(tstate, &amp;exc_type, &amp;exc_value, &amp;exc_tb);<br><br>    <span class="hljs-comment">// 真正查找值对象的函数</span><br>    ix = _Py_dict_lookup(mp, key, hash, &amp;value);<br><br>    <span class="hljs-comment">/* Ignore any exception raised by the lookup */</span><br>    _PyErr_Restore(tstate, exc_type, exc_value, exc_tb);<br><br><br>    assert(ix &gt;= <span class="hljs-number">0</span> || value == <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">// 返回值对象</span><br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.阅读PyDict_GetItem函数，我们可以发现真正实现查找功能的函数是_Py_dict_lookup函数。</p><p>2.字典中的键必须是可哈希的对象。</p><p>3.Python 3.10版本之前调用PyDict_GetItem()方法,可能会释放掉GIL解释器锁。</p><p>4.该函数默认会压制异常，所有的可能出现的错误都会被压制，甚至是当键值对存在，但可能由于堆栈溢出的错误也会被压制。</p><p>字典查询对应的主要源码位于/Objects/dictobject.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs c"><br>Py_ssize_t _Py_HOT_FUNCTION<br>_Py_dict_lookup(PyDictObject *mp, PyObject *key, Py_hash_t hash, PyObject **value_addr)<br>&#123;<br>    PyDictKeysObject *dk;<br>start:<br>    dk = mp-&gt;ma_keys;                     <span class="hljs-comment">// PyDictKeysObject对象</span><br>    DictKeysKind kind = dk-&gt;dk_kind;      <span class="hljs-comment">// 键的类型</span><br>    PyDictKeyEntry *ep0 = DK_ENTRIES(dk); <span class="hljs-comment">// 找到与dk-&gt;dk_indices对应的dk_entries</span><br>    <span class="hljs-keyword">size_t</span> mask = DK_MASK(dk);            <br>    <span class="hljs-keyword">size_t</span> perturb = hash;<br>    <span class="hljs-keyword">size_t</span> i = (<span class="hljs-keyword">size_t</span>)hash &amp; mask;       <span class="hljs-comment">// 计算查找的值位于dk-&gt;dk_indices中的索引</span><br>    Py_ssize_t ix;<br>    <span class="hljs-comment">// 检查标识以及键的类型,如果是unicode编码的键</span><br>    <span class="hljs-keyword">if</span> (PyUnicode_CheckExact(key) &amp;&amp; kind != DICT_KEYS_GENERAL) &#123;<br>        <span class="hljs-comment">/* Strings only */</span><br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-comment">// 获取dk-&gt;dk_indices数组中索引i对应的数值（该数值作为dk_entries的索引值)</span><br>            ix = dictkeys_get_index(mp-&gt;ma_keys, i);<br>            <span class="hljs-keyword">if</span> (ix &gt;= <span class="hljs-number">0</span>) &#123;<br>                 <span class="hljs-comment">// 如果ix&gt;=0,标志ix值匹配到dk_entries的索引项</span><br>                PyDictKeyEntry *ep = &amp;ep0[ix];<br>                assert(ep-&gt;me_key != <span class="hljs-literal">NULL</span>);<br>                assert(PyUnicode_CheckExact(ep-&gt;me_key));<br>                <span class="hljs-comment">// 比较key或者hash，然后根据hash表是split类型还是combined类型，返回对应的值</span><br>                <span class="hljs-keyword">if</span> (ep-&gt;me_key == key ||<br>                        (ep-&gt;me_hash == hash &amp;&amp; unicode_eq(ep-&gt;me_key, key))) &#123;<br>                    <span class="hljs-keyword">goto</span> found;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ix == DKIX_EMPTY) &#123;<br>                <span class="hljs-comment">// 如果ix等于DKIX_EMPTY，标识查找不到该键，结束查找</span><br>                *value_addr = <span class="hljs-literal">NULL</span>;<br>                <span class="hljs-keyword">return</span> DKIX_EMPTY;<br>            &#125;<br>            <span class="hljs-comment">// 重新计算下一个槽位，然后再次在dk_indices数组中搜索，反复计算，直到遇见值为-1的槽位。</span><br>            perturb &gt;&gt;= PERTURB_SHIFT;<br>            i = mask &amp; (i*<span class="hljs-number">5</span> + perturb + <span class="hljs-number">1</span>);<br>            ix = dictkeys_get_index(mp-&gt;ma_keys, i);<br>            <span class="hljs-keyword">if</span> (ix &gt;= <span class="hljs-number">0</span>) &#123;<br>                PyDictKeyEntry *ep = &amp;ep0[ix];<br>                assert(ep-&gt;me_key != <span class="hljs-literal">NULL</span>);<br>                assert(PyUnicode_CheckExact(ep-&gt;me_key));<br>                <span class="hljs-keyword">if</span> (ep-&gt;me_key == key ||<br>                        (ep-&gt;me_hash == hash &amp;&amp; unicode_eq(ep-&gt;me_key, key))) &#123;<br>                    <span class="hljs-keyword">goto</span> found;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ix == DKIX_EMPTY) &#123;<br>                *value_addr = <span class="hljs-literal">NULL</span>;<br>                <span class="hljs-keyword">return</span> DKIX_EMPTY;<br>            &#125;<br>            perturb &gt;&gt;= PERTURB_SHIFT;<br>            i = mask &amp; (i*<span class="hljs-number">5</span> + perturb + <span class="hljs-number">1</span>);<br>        &#125;<br>        Py_UNREACHABLE();<br>    &#125;<br>    <span class="hljs-comment">// 键为其他类型</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        ix = dictkeys_get_index(dk, i);<br>        <span class="hljs-keyword">if</span> (ix == DKIX_EMPTY) &#123;<br>            *value_addr = <span class="hljs-literal">NULL</span>;<br>            <span class="hljs-keyword">return</span> ix;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (ix &gt;= <span class="hljs-number">0</span>) &#123;<br>            PyDictKeyEntry *ep = &amp;ep0[ix];<br>            assert(ep-&gt;me_key != <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-keyword">if</span> (ep-&gt;me_key == key) &#123;<br>                <span class="hljs-keyword">goto</span> found;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (ep-&gt;me_hash == hash) &#123;<br>                PyObject *startkey = ep-&gt;me_key;<br>                Py_INCREF(startkey);<br>                <span class="hljs-keyword">int</span> cmp = PyObject_RichCompareBool(startkey, key, Py_EQ);<br>                Py_DECREF(startkey);<br>                <span class="hljs-keyword">if</span> (cmp &lt; <span class="hljs-number">0</span>) &#123;<br>                    *value_addr = <span class="hljs-literal">NULL</span>;<br>                    <span class="hljs-keyword">return</span> DKIX_ERROR;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (dk == mp-&gt;ma_keys &amp;&amp; ep-&gt;me_key == startkey) &#123;<br>                    <span class="hljs-keyword">if</span> (cmp &gt; <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">goto</span> found;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">/* The dict was mutated, restart */</span><br>                    <span class="hljs-keyword">goto</span> start;<br>                &#125;<br>            &#125;<br>        &#125;<br>        perturb &gt;&gt;= PERTURB_SHIFT;<br>        i = (i*<span class="hljs-number">5</span> + perturb + <span class="hljs-number">1</span>) &amp; mask;<br>    &#125;<br>    Py_UNREACHABLE();<br>found:<br>    <span class="hljs-comment">// split类型</span><br>    <span class="hljs-keyword">if</span> (dk-&gt;dk_kind == DICT_KEYS_SPLIT) &#123;<br>        *value_addr = mp-&gt;ma_values[ix];<br>    &#125;<br>    <span class="hljs-comment">// combined类型</span><br>    <span class="hljs-keyword">else</span> &#123;<br>        *value_addr = ep0[ix].me_value;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ix;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：</strong>Python3中，str对象默认是unicode编码的，所以对于以str对象作为键的字典，调用get()方法通常会进入第一个if分支。</p><p><strong>说明：</strong></p><p>具体的注释在源码中已经写了，下面主要总结一下查找键的过程。</p><p>(1).执行宏定义DK_ENTRIES，找到与dk-&gt;dk_indices对应的dk_entries，通过(size_t)hash &amp; mask与运算计算出dk-&gt;dk_indices中的目标索引。</p><p>(2).检查键key的类型，如果是unicode编码的对象，如str，进入if分支。进入步骤(2)。</p><p>(3).通过调用dictkeys_get_index()方法，获取dk-&gt;dk_indices数组中索引i对应的数值ix（该数值作为dk_entries的索引值)。</p><p>(4).如果数值ix &gt;= 0, 匹配到dk_entries的索引项，获取到对应的键值对实体对象ep，进入步骤(5)；如果数值ix == -1,表示遇到断链，无法继续查找，标识该键不存在，查找结束。其余情况，如ix==-2，可能槽位被其他键占用了，因此继续计算下一槽位，然后再次在dk_indices数组中搜索，反复执行步骤(4)，直到ix值 &gt;=0 ，找到键，或者 ix值==-1退出。</p><p>(5).比较键值对实体对象ep-&gt;me_key对象与给定的key对象，或者比较他们的hash值是否相等</p><p>(6)如果相等，判断hash表的类型是split还是combined的，如果是spilt，从PyDictObject对象的ma_values获取对应值；如果是combined，从键值对实体PyDictKeyEntry对象中的me_value获取对应值。</p><h4 id="4-字典的-setitem-涉及的底层函数PyDict-SetItem"><a href="#4-字典的-setitem-涉及的底层函数PyDict-SetItem" class="headerlink" title="4.字典的__setitem__涉及的底层函数PyDict_SetItem()"></a>4.字典的<code>__setitem__</code>涉及的底层函数PyDict_SetItem()</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">int</span><br>PyDict_SetItem(PyObject *op, PyObject *key, PyObject *value)<br>&#123;<br>    PyDictObject *mp;<br>    Py_hash_t hash;<br>    <span class="hljs-keyword">if</span> (!PyDict_Check(op)) &#123;<br>        PyErr_BadInternalCall();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    assert(key);<br>    assert(value);<br>    mp = (PyDictObject *)op;<br>    <span class="hljs-comment">// 键对象同样必须是可哈希的</span><br>    <span class="hljs-keyword">if</span> (!PyUnicode_CheckExact(key) ||<br>        (hash = ((PyASCIIObject *) key)-&gt;hash) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        hash = PyObject_Hash(key);<br>        <span class="hljs-keyword">if</span> (hash == <span class="hljs-number">-1</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果mp-&gt;ma_keys对象的地址等于全局唯一的空对象的地址, 向空字典中插入</span><br>    <span class="hljs-keyword">if</span> (mp-&gt;ma_keys == Py_EMPTY_KEYS) &#123;<br>        <span class="hljs-keyword">return</span> insert_to_emptydict(mp, key, hash, value);<br>    &#125;<br>    <span class="hljs-comment">/* insertdict() handles any resizing that might be necessary */</span><br>    <span class="hljs-comment">// 包含动态扩容机制</span><br>    <span class="hljs-keyword">return</span> insertdict(mp, key, hash, value);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.键对象同样必须是可哈希的</p><p>2.插入键值对分两个函数, 当字典为空，等于全局唯一空对象时,调用insert_to_emptydict函数,不为空，调用insertdict函数,其中包含动态扩容机制。</p><p>字典插入的源码主要位于/Objects/dictobject.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>insertdict(PyDictObject *mp, PyObject *key, Py_hash_t hash, PyObject *value)<br>&#123;<br>    PyObject *old_value;<br>    PyDictKeyEntry *ep;<br><br>    <span class="hljs-comment">// 键对象, 值对象的引用计数+1</span><br>    Py_INCREF(key);<br>    Py_INCREF(value);<br>    <br>    <span class="hljs-keyword">if</span> (mp-&gt;ma_values != <span class="hljs-literal">NULL</span> &amp;&amp; !PyUnicode_CheckExact(key)) &#123;<br>        <span class="hljs-comment">// 动态扩容失败</span><br>        <span class="hljs-keyword">if</span> (insertion_resize(mp) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> Fail;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断键是否存在</span><br>    Py_ssize_t ix = _Py_dict_lookup(mp, key, hash, &amp;old_value);<br>    <span class="hljs-comment">// 键比较过程出错</span><br>    <span class="hljs-keyword">if</span> (ix == DKIX_ERROR)<br>        <span class="hljs-keyword">goto</span> Fail;<br><br>    MAINTAIN_TRACKING(mp, key, value);<br><br>    <span class="hljs-comment">/* When insertion order is different from shared key, we can&#x27;t share</span><br><span class="hljs-comment">     * the key anymore.  Convert this instance to combine table.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (_PyDict_HasSplitTable(mp) &amp;&amp;<br>        ((ix &gt;= <span class="hljs-number">0</span> &amp;&amp; old_value == <span class="hljs-literal">NULL</span> &amp;&amp; mp-&gt;ma_used != ix) ||<br>         (ix == DKIX_EMPTY &amp;&amp; mp-&gt;ma_used != mp-&gt;ma_keys-&gt;dk_nentries))) &#123;<br>        <span class="hljs-keyword">if</span> (insertion_resize(mp) &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">goto</span> Fail;<br>        ix = DKIX_EMPTY;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果字典中不存在该键</span><br>    <span class="hljs-keyword">if</span> (ix == DKIX_EMPTY) &#123;<br>        <span class="hljs-comment">/* Insert into new slot. */</span><br>        mp-&gt;ma_keys-&gt;dk_version = <span class="hljs-number">0</span>;<br>        assert(old_value == <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-comment">// 如果容器可用空间&lt;=0, 则需要进行扩容</span><br>        <span class="hljs-keyword">if</span> (mp-&gt;ma_keys-&gt;dk_usable &lt;= <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">/* Need to resize. */</span><br>            <span class="hljs-keyword">if</span> (insertion_resize(mp) &lt; <span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">goto</span> Fail;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!PyUnicode_CheckExact(key) &amp;&amp; mp-&gt;ma_keys-&gt;dk_kind != DICT_KEYS_GENERAL) &#123;<br>            mp-&gt;ma_keys-&gt;dk_kind = DICT_KEYS_GENERAL;<br>        &#125;<br>        <span class="hljs-comment">// 查找空槽位</span><br>        Py_ssize_t hashpos = find_empty_slot(mp-&gt;ma_keys, hash);<br>        <span class="hljs-comment">// 获取到键值对实体数组中的空位置，dk_nentries表示已用的键值对个数</span><br>        ep = &amp;DK_ENTRIES(mp-&gt;ma_keys)[mp-&gt;ma_keys-&gt;dk_nentries];<br>        <span class="hljs-comment">// 将键值对实体数组中待插入键值对的索引映射到哈希索引数组中索引为hashpos的槽位上</span><br>        dictkeys_set_index(mp-&gt;ma_keys, hashpos, mp-&gt;ma_keys-&gt;dk_nentries);<br>        <span class="hljs-comment">// 赋值</span><br>        ep-&gt;me_key = key;<br>        ep-&gt;me_hash = hash;<br>        <span class="hljs-comment">// 针对split/combined将值添加到指定值</span><br>        <span class="hljs-keyword">if</span> (mp-&gt;ma_values) &#123;<br>            assert (mp-&gt;ma_values[mp-&gt;ma_keys-&gt;dk_nentries] == <span class="hljs-literal">NULL</span>);<br>            mp-&gt;ma_values[mp-&gt;ma_keys-&gt;dk_nentries] = value;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            ep-&gt;me_value = value;<br>        &#125;<br>        <span class="hljs-comment">// 修改结构体数据</span><br>        mp-&gt;ma_used++;<br>        mp-&gt;ma_version_tag = DICT_NEXT_VERSION();<br>        mp-&gt;ma_keys-&gt;dk_usable--;<br>        mp-&gt;ma_keys-&gt;dk_nentries++;<br>        assert(mp-&gt;ma_keys-&gt;dk_usable &gt;= <span class="hljs-number">0</span>);<br>        ASSERT_CONSISTENT(mp);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 如果字典中存在该键, 判断是否覆盖。</span><br><br>    <span class="hljs-comment">// 字典键对应的值变了, 根据hash表不同类型进行覆盖</span><br>    <span class="hljs-keyword">if</span> (old_value != value) &#123;<br>        <span class="hljs-keyword">if</span> (_PyDict_HasSplitTable(mp)) &#123;<br>            mp-&gt;ma_values[ix] = value;<br>            <span class="hljs-keyword">if</span> (old_value == <span class="hljs-literal">NULL</span>) &#123;<br>                <span class="hljs-comment">/* pending state */</span><br>                assert(ix == mp-&gt;ma_used);<br>                mp-&gt;ma_used++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            assert(old_value != <span class="hljs-literal">NULL</span>);<br>            DK_ENTRIES(mp-&gt;ma_keys)[ix].me_value = value;<br>        &#125;<br>        mp-&gt;ma_version_tag = DICT_NEXT_VERSION();<br>    &#125;<br>    <span class="hljs-comment">// 将旧值对象的引用计数减1</span><br>    <span class="hljs-comment">// 因为值也是个对象</span><br>    <span class="hljs-comment">// 如果重复执行dicts[&quot;name&quot;] = obj1, 那么old_value的地址 == value, 因此Py_XDECREF(old_value) ==&gt; Py_XDECREF(value)</span><br>    Py_XDECREF(old_value); <span class="hljs-comment">/* which **CAN** re-enter (see issue #22653) */</span><br>    ASSERT_CONSISTENT(mp);<br>    <span class="hljs-comment">// 由于键本身存在, 因此将key的引用计数减1</span><br>    Py_DECREF(key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>Fail:<br>    Py_DECREF(value);<br>    Py_DECREF(key);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>源码的面容我们已经目睹，接下来就庖丁解牛，分析各个步骤：</strong></p><p>(1).因为涉及到容器的操作，所以需要将键对象和值对象的引用计数分别+1。</p><p>(2).执行_Py_dict_lookup函数，判断键是否存在于字典中，如果不存在返回-1, 进入步骤(3); 如果存在, 进入步骤(8)。</p><p>(3).如果字典中不存在该键，需要将键添加进去，接下来判断字典容器是否还有可用空间, 如果没有，需要进行动态扩容，调用insertion_resize函数,函数体如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 动态扩容的分析在下方</span><br></code></pre></td></tr></table></figure><p>(4).查找哈希索引数组中的槽位值为-1的空槽位, 函数体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> Py_ssize_t<br>find_empty_slot(PyDictKeysObject *keys, Py_hash_t hash)<br>&#123;<br>    assert(keys != <span class="hljs-literal">NULL</span>);<br><br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">size_t</span> mask = DK_MASK(keys);<br>    <span class="hljs-comment">// hash与字典容量-1进行与运算</span><br>    <span class="hljs-keyword">size_t</span> i = hash &amp; mask;<br>    <span class="hljs-comment">// 获取hash索引数组中的索引为i的值</span><br>    Py_ssize_t ix = dictkeys_get_index(keys, i);<br>    <span class="hljs-comment">// 反复查找下一个槽位, 直到对应的槽位的值匹配不到键值对实体对象中的索引项，即ix == -1 的空槽位。</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">size_t</span> perturb = hash; ix &gt;= <span class="hljs-number">0</span>;) &#123;<br>        perturb &gt;&gt;= PERTURB_SHIFT;<br>        i = (i*<span class="hljs-number">5</span> + perturb + <span class="hljs-number">1</span>) &amp; mask;<br>        ix = dictkeys_get_index(keys, i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> i;<br>&#125;<br></code></pre></td></tr></table></figure><p>(5).执行宏定义<code>ep = &amp;DK_ENTRIES(mp-&gt;ma_keys)[mp-&gt;ma_keys-&gt;dk_nentries]</code>获取到键值对实体数组dk_entries中的空位置，dk_nentries表示已用的键值对个数。由此，我们可以了解，Python中的键值对对象是顺序添加到数组中的。</p><p>(6).将键值对实体数组中待插入键值对的索引映射到哈希索引数组中索引为hashpos的槽位上。等价于<code>mp-&gt;ma_keys-&gt;dk_indices[hashpos] = mp-&gt;ma_keys-&gt;dk_nentries</code></p><p>(7).对键值对结构体字段进行赋值,针对split/combined将值添加到指定字段上；修改mp的字段的数据，修改字典中的总键值对个数, 可用个数, 已用个数。最后返回0。</p><p>(8).如果字典中存在改键，判断是否需要覆盖，如果字典键对应的值改变，根据hash表不同类型进行覆盖。</p><p>(9).最后，将旧的值对象和键对象的引用计数减一，这里有一个注意点，如果<code>old_value == value</code>，两个对象地址相同，不需要进行覆盖，其引用计数在<code>insertdict</code>函数中不发生变化, 因此<code>Py_XDECREF(old_value) &lt;==&gt; Py_XDECREF(value)</code>，是不是非常的妙呢~</p><p><strong>注:</strong></p><p>通过阅读源码，不仅了解前辈们实现算法的思路，同时也能感受到逻辑的严密性。对于键对象来说，添加到容器中并不会增加引用计数, 而对于值对象来说，会增加引用计数。</p><p><strong>特别是下面操作引用计数的这一代码段，我直呼妙哉！</strong></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> <span class="hljs-constructor">Py_INCREF(<span class="hljs-params">value</span>)</span>;<br> ...<br> <span class="hljs-keyword">if</span> (old_value != value) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-constructor">_PyDict_HasSplitTable(<span class="hljs-params">mp</span>)</span>) &#123;<br>            mp-&gt;ma_values<span class="hljs-literal">[<span class="hljs-identifier">ix</span>]</span> = value;<br>            <span class="hljs-keyword">if</span> (old_value<span class="hljs-operator"> == </span>NULL) &#123;<br>                <span class="hljs-comment">/* pending state */</span><br>                <span class="hljs-keyword">assert</span>(ix<span class="hljs-operator"> == </span>mp-&gt;ma_used);<br>                mp-&gt;ma_used++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">assert</span>(old_value != NULL);<br>            <span class="hljs-constructor">DK_ENTRIES(<span class="hljs-params">mp</span>-&gt;<span class="hljs-params">ma_keys</span>)</span><span class="hljs-literal">[<span class="hljs-identifier">ix</span>]</span>.me_value = value;<br>        &#125;<br>        mp-&gt;ma_version_tag = <span class="hljs-constructor">DICT_NEXT_VERSION()</span>;<br>    &#125;<br>    <span class="hljs-comment">// 将旧值对象的引用计数减1</span><br>    <span class="hljs-comment">// 因为值也是个对象</span><br>    <span class="hljs-comment">// 如果重复执行dicts[&quot;name&quot;] = obj1, 那么old_value的地址 == value, 因此Py_XDECREF(old_value) ==&gt; Py_XDECREF(value)</span><br><span class="hljs-constructor">Py_XDECREF(<span class="hljs-params">old_value</span>)</span>;<br>    ...<br></code></pre></td></tr></table></figure><h4 id="5-字典的动态扩-缩-容机制"><a href="#5-字典的动态扩-缩-容机制" class="headerlink" title="5.字典的动态扩(缩)容机制"></a>5.字典的动态扩(缩)容机制</h4><p>Python中字典的动态扩(缩)容和其他语言中不一样，有些语言中字典的扩(缩)容是在原数据上进行，而有些语言会开辟一个更大(小)的容器，并将数据从原容器依次移到新容器中，接下来就学习下Python字典的动态扩(缩)容机制。</p><p>源码位于/Objects/dictobject.c中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>insertion_resize(PyDictObject *mp)<br><span class="hljs-comment">// 动态扩容</span><br>&#123;<br>    <span class="hljs-keyword">return</span> dictresize(mp, calculate_log2_keysize(GROWTH_RATE(mp)));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>dictresize接受两个参数，第一个为带扩(缩)容的字典对象，第二个为预计扩(缩)容后的最小位数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span><br>dictresize(PyDictObject *mp, <span class="hljs-keyword">uint8_t</span> log2_newsize)<br>&#123;<br>    Py_ssize_t numentries;<br>    PyDictKeysObject *oldkeys;  <span class="hljs-comment">// combined的字典</span><br>    PyObject **oldvalues;       <br>    PyDictKeyEntry *oldentries, *newentries;  <span class="hljs-comment">// 新旧键值对实体</span><br><br>    <span class="hljs-keyword">if</span> (log2_newsize &gt;= SIZEOF_SIZE_T*<span class="hljs-number">8</span>) &#123;<br>        PyErr_NoMemory();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    assert(log2_newsize &gt;= PyDict_LOG_MINSIZE);<br><br>    oldkeys = mp-&gt;ma_keys;<br><br>    <span class="hljs-comment">/* <span class="hljs-doctag">NOTE:</span> Current odict checks mp-&gt;ma_keys to detect resize happen.</span><br><span class="hljs-comment">     * So we can&#x27;t reuse oldkeys even if oldkeys-&gt;dk_size == newsize.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">TODO:</span> Try reusing oldkeys when reimplement odict.</span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-comment">/* Allocate a new table. */</span><br>    mp-&gt;ma_keys = new_keys_object(log2_newsize);<br>    <span class="hljs-keyword">if</span> (mp-&gt;ma_keys == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">// 申请内存失败, 扩(缩)容失败</span><br>        mp-&gt;ma_keys = oldkeys;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-comment">// New table must be large enough.</span><br>    assert(mp-&gt;ma_keys-&gt;dk_usable &gt;= mp-&gt;ma_used);<br>    <span class="hljs-keyword">if</span> (oldkeys-&gt;dk_kind == DICT_KEYS_GENERAL)<br>        mp-&gt;ma_keys-&gt;dk_kind = DICT_KEYS_GENERAL;<br><br>    numentries = mp-&gt;ma_used;<br>    oldentries = DK_ENTRIES(oldkeys);<br>    newentries = DK_ENTRIES(mp-&gt;ma_keys);<br>    oldvalues = mp-&gt;ma_values;<br>    <span class="hljs-comment">// split -&gt; combined</span><br>    <span class="hljs-keyword">if</span> (oldvalues != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-comment">/* Convert split table into new combined table.</span><br><span class="hljs-comment">         * We must incref keys; we can transfer values.</span><br><span class="hljs-comment">         * Note that values of split table is always dense.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (Py_ssize_t i = <span class="hljs-number">0</span>; i &lt; numentries; i++) &#123;<br>            assert(oldvalues[i] != <span class="hljs-literal">NULL</span>);<br>            PyDictKeyEntry *ep = &amp;oldentries[i];<br>            PyObject *key = ep-&gt;me_key;<br>            Py_INCREF(key);<br>            newentries[i].me_key = key;<br>            newentries[i].me_hash = ep-&gt;me_hash;<br>            newentries[i].me_value = oldvalues[i];<br>        &#125;<br><br>        dictkeys_decref(oldkeys);<br>        mp-&gt;ma_values = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">if</span> (oldvalues != empty_values) &#123;<br>            free_values(oldvalues);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">// combined table.</span><br>        <span class="hljs-comment">// 如果扩(缩)容后的大小和原数组大小一直, 采用memcpy拷贝过去, 意味着扩(缩)容前后,大小相等,不会对原数组进行复用</span><br>        <span class="hljs-keyword">if</span> (oldkeys-&gt;dk_nentries == numentries) &#123;<br>            <span class="hljs-built_in">memcpy</span>(newentries, oldentries, numentries * <span class="hljs-keyword">sizeof</span>(PyDictKeyEntry));<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// ep指向旧键值对实体数组的首地址, 索引次序相对于原数组可能会发生变化</span><br>            PyDictKeyEntry *ep = oldentries;<br>            <span class="hljs-keyword">for</span> (Py_ssize_t i = <span class="hljs-number">0</span>; i &lt; numentries; i++) &#123;<br>                <span class="hljs-comment">// 忽略掉为值对象为NULL的键值对实体</span><br>                <span class="hljs-keyword">while</span> (ep-&gt;me_value == <span class="hljs-literal">NULL</span>)<br>                    ep++;<br>                <span class="hljs-comment">// 将地址指向的数据添加到新数组中的位置上</span><br>                newentries[i] = *ep++;<br>            &#125;<br>        &#125;<br><br>        assert(oldkeys-&gt;dk_kind != DICT_KEYS_SPLIT);<br>        assert(oldkeys-&gt;dk_refcnt == <span class="hljs-number">1</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Py_REF_DEBUG</span><br>        _Py_RefTotal--;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>        <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">Py_dict_state</span> *<span class="hljs-title">state</span> =</span> get_dict_state();<br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifdef</span> Py_DEBUG</span><br>        <span class="hljs-comment">// dictresize() must not be called after _PyDict_Fini()</span><br>        assert(state-&gt;keys_numfree != <span class="hljs-number">-1</span>);<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span>  </span><br><br>        <span class="hljs-comment">// 如果缩容后的大小为初始大小8,在空闲数组有余量的情况下,会缓存到空闲数组中, 反之直接回收内存资源。</span><br>        <span class="hljs-keyword">if</span> (DK_SIZE(oldkeys) == PyDict_MINSIZE &amp;&amp;<br>            state-&gt;keys_numfree &lt; PyDict_MAXFREELIST)<br>        &#123;<br>            state-&gt;keys_free_list[state-&gt;keys_numfree++] = oldkeys;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            PyObject_Free(oldkeys);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 针对新的键值对实体数组, 重新构建hash索引数组, 即重新计算每个对象的hash值, 匹配对应的槽位, 形成映射关系。</span><br>    build_indices(mp-&gt;ma_keys, newentries, numentries);<br>    mp-&gt;ma_keys-&gt;dk_usable -= numentries;<br>    mp-&gt;ma_keys-&gt;dk_nentries = numentries;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>(1).计算预计扩(缩)容后的最小位数，根据最小位数，申请一个更大的字典结构体。如果申请内存失败，将导致扩(缩)容失败。</p><p>(2).将split类型的hash表转为combined的hash表，如果旧的hash表是split类型，不仅需要将键值对实体拷贝过去，同时也要将旧hash表中的键对象的引用计数都减1。</p><p>(3).如果旧的hash表是combined类型，又分两种情况。如果扩(缩)容后的大小和原数组大小一致, 采用memcpy拷贝过去, 意味着扩容前后,大小相等,不会对原数组进行复用；反之，遍历新的键值对实体数组，将旧的动态数组中对象依次赋值过去。</p><p>(4).扩(缩)容完成，需要考虑到内存空间的复用，如果缩容后的大小为初始大小8,在空闲数组有余量的情况下,会缓存到空闲数组中state-&gt;keys_free_list, 实现状态管理, 反之直接回收内存资源。</p><p>(5).由于是申请了新的内存空间，因此需要针对新的键值对实体数组,和新的hash索引数组, 调用build_indices函数重新构建映射关系。</p><p>(6).修改字典可用空间和键值对实体数组大小，至此，动态扩(缩)容的全貌已经展现。</p><p><strong>总结：</strong></p><p>1.字典是否需要扩缩容，在于字典中可用的个数是否大于等于0，即_dictkeysobject中的dk_usable 是否 &gt;=0。</p><p>2.Python中的扩缩容并不会基于原对象实现，而是申请一块合适大小的新对象。并将原对象上的键值对对象依次拷贝过去。</p><p>3.扩缩容完成，如果缩容后变成了空字典，即容量为8，则需要加入到空闲数组中，减少频繁申请内存空间，实现字典复用。</p><p>4.字典的查询速度非常快，Python中并没有采用类似C++的map的红黑树结构，采用的是更为简单的两个数组—–hash索引数组，键值对实体数组，形成一种映射关系，两者都是动态数组。</p><p>5.Python字典的查找是首先根据hash &amp; mask(掩码,mask是随着字典容量变化而变化的)，计算出在hash索引数组中的下标，然后得到下标对应的值，即键值对实体数组中的下标，最终得到键值对实体数组中对应槽位的键值对实体指针。根据指针找到具体的结构体对象。因此动态扩(缩)容后, mask发生变化，如果按照之前的映射关系，将无法正确定位到键，所以需要重新构建新hash索引数组和新键值对实体数组之间的映射关系。</p>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>selenium接管chrome，并增加自定义的参数</title>
    <link href="/2021/11/01/selenium%E6%8E%A5%E7%AE%A1chrome%EF%BC%8C%E5%B9%B6%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0/"/>
    <url>/2021/11/01/selenium%E6%8E%A5%E7%AE%A1chrome%EF%BC%8C%E5%B9%B6%E5%A2%9E%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="一-、-背景"><a href="#一-、-背景" class="headerlink" title="一 、 背景"></a>一 、 背景</h3><p>在使用selenium模拟人的操作时候，程序会启动一个进程，会调用一系列的Webdriver 库、API和各个常见的浏览器驱动进程进行交互通信，浏览器驱动进程处理命令，执行相应的操作或返回结果。</p><p>但是，有些网站是可以识别出通过Webdriver启动的浏览器。js通过执行window.webdriver.navigator可以判断当前的浏览器是否使用的是webdriver。如果是的，会返回true（见图1）， 如果不是，会返回false(见图2)</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20211101171657132.png" alt="图1"></p><p>​    </p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20211101171925272.png" alt="图2"></p><p>像有些网站，会采用这种反爬方式来阻挡使用selenium进行访问，会检测到是否存在webdriver以及相关的一些属性，一旦检测到，尽管当前正在执行正常的操作，同样会被拒绝访问。</p><h3 id="二-、-selenium接管chrome浏览器"><a href="#二-、-selenium接管chrome浏览器" class="headerlink" title="二 、 selenium接管chrome浏览器"></a>二 、 selenium接管chrome浏览器</h3><p>为了越过这种检测webdriver的反爬手段，selenium是可以接管正常的浏览器来执行相关操作，通过window.navigator.webdriver得到的结果就为false，从而不会被网站检测出来。</p><p>既然我们道了解决方案，接下来我们顺腾摸瓜，思考如何接管？</p><p>计算机上打开每个浏览器，都会创建相应的进程，占用一个端口号。Chrome开发者工具提供了很多参数来对浏览器自定义化，包括指定调试的端口</p><p><code>--remote-debugging-port</code>。</p><p>通过命令行启动一个浏览器，并指定调试使用的端口号(启动后先不要关)</p><p><code>.\chrome.exe --remote-debugging-port=9222  --user-data-dir=&quot;D:\no\test&quot;</code>  </p><p>会打开一个浏览器，如下：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20211101180710928.png" alt="image-20211101180710928"></p><p>接下来，简单写一个脚本，尝试使用selenium接管端口号为9222的Chrome浏览器进程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>chrome_options = webdriver.ChromeOptions()<br>chrome_options.add_experimental_option(<span class="hljs-string">&quot;debuggerAddress&quot;</span>, <span class="hljs-string">&#x27;127.0.0.1:9222&#x27;</span>)<br>driver = webdriver.Chrome(executable_path=<span class="hljs-string">r&#x27;D:\bug666\chromedriver.exe&#x27;</span>, chrome_options=chrome_options)<br>driver.get(<span class="hljs-string">&#x27;https://hexo-syz247179876.vercel.app/&#x27;</span>)<br><span class="hljs-built_in">print</span>(driver.title)<br></code></pre></td></tr></table></figure><p>打印结果为：云中小站</p><p>浏览器如下：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20211101180753956.png" alt="image-20211101180753956"></p><p>由此可以看到，页面跳转。控制台打印一下window.navigator.webdriver，为false。至此，selenium成功接管chrome浏览器。之后仍然可以像操作webdriver一样，操作被接管的浏览器。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/image-20211101180844781.png" alt="image-20211101180844781"></p>]]></content>
    
    
    <categories>
      
      <category>Selenium</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决js动态刷新，导致dom树重新渲染，旧dom树上的ele过期的问题</title>
    <link href="/2021/10/25/%E8%A7%A3%E5%86%B3js%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%EF%BC%8C%E5%AF%BC%E8%87%B4dom%E6%A0%91%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93%EF%BC%8C%E6%97%A7dom%E6%A0%91%E4%B8%8A%E7%9A%84ele%E8%BF%87%E6%9C%9F%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/25/%E8%A7%A3%E5%86%B3js%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0%EF%BC%8C%E5%AF%BC%E8%87%B4dom%E6%A0%91%E9%87%8D%E6%96%B0%E6%B8%B2%E6%9F%93%EF%BC%8C%E6%97%A7dom%E6%A0%91%E4%B8%8A%E7%9A%84ele%E8%BF%87%E6%9C%9F%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="一-、-问题"><a href="#一-、-问题" class="headerlink" title="一 、 问题"></a>一 、 问题</h3><p>在项目中使用selenium驱动js执行点击事件时，产生如下错误：</p><p><code>selenium.StaleElementReferenceException: stale element reference: element is not attached to the page document</code></p><p>通过字面意思，我们可以知道元素不再附属于页面。官方文档中关于这个异常给了两个常见的原因。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">1.元素在当前页面被永久的删除了。<br><br>2.元素不再附着于当前页面的dom树上。<br></code></pre></td></tr></table></figure><p>结合项目中遇到的场景，在上一个点击指令执行完毕后，页面局部刷新，此时dom也位于局部区域内。然后执行当前指令，首先会根据计算出的xpath获取dom元素对象，然后模拟人为操作，最后驱动js执行click。</p><p>上述场景出现该问题的时机满足，根据xpath获取dom元素是在dom数重新渲染前执行的，这里记作旧dom树，而在一段拟人操作后，可能刷新完毕，dom树重新渲染了，这里记作新dom树，因此此时如果用旧dom树上的元素去新dom树上查找，就会出现上述问题。</p><h3 id="二、-解决方案"><a href="#二、-解决方案" class="headerlink" title="二、 解决方案"></a>二、 解决方案</h3><p>在驱动js对dom元素进行操作前，重新定位元素对象。这种解决方法可以解决很大一部分场景，但不能做到百分百，因为两条语句不是原子性的，dom树完全是有可能在两条语句中间渲染完毕，这样的话仍会报错，但是概率发生非常非常小，同时不涉及高并发，可以忽略不计。部分代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    driver.execute_script(<span class="hljs-string">&quot;arguments[0].click();&quot;</span>, ele)<br><span class="hljs-keyword">except</span> StaleElementReferenceException:<br><span class="hljs-comment"># 处理js动态刷新，导致dom树重新渲染，旧dom树上的ele过期了的问题</span><br>    ele = driver.find_element_by_xpath(kwargs.get(<span class="hljs-string">&#x27;real_xpath&#x27;</span>))<br>    driver.execute_script(<span class="hljs-string">&quot;arguments[0].click();&quot;</span>, ele)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Selenium</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>源码分析Python的deque双端队列</title>
    <link href="/2021/10/25/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84Deque%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/"/>
    <url>/2021/10/25/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84Deque%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-背景"><a href="#一、-背景" class="headerlink" title="一、 背景"></a>一、 背景</h3><p>我们都知道Python内置的列表list, 它可以模拟栈的操作，可以在O(1)的时间复杂度内在尾部增加和删除元素，它底层实现了动态扩容机制。但是在项目中，设计到BFS相关算法时，使用list, 从头部弹出元素, 将会导致后续的元素依次向前移动，时间复杂度变为O(N)，性能变得很差。</p><p>Python标准库提供了deque模块—-双端队列，实现在头部删除和插入元素的时间复杂度为O(1)，在尾部删除和插入的时间复杂度也为O(1),既可以当队列使用又可以当栈使用，接下来就从底层来研究它的数据结构和相关操作的算法思路。</p><h3 id="二-、deque的数据结构"><a href="#二-、deque的数据结构" class="headerlink" title="二 、deque的数据结构"></a>二 、deque的数据结构</h3><p>结构体定义为/Modules/_collectionsmodule.c中第82行。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BLOCKLEN 64</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> CENTER ((BLOCKLEN - 1) / 2)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXFREEBLOCKS 16</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BLOCK</span> &#123;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BLOCK</span> *<span class="hljs-title">leftlink</span>;</span> <span class="hljs-comment">// 指向左边的内存块</span><br>    PyObject *data[BLOCKLEN];  <span class="hljs-comment">// 内存块的空间</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BLOCK</span> *<span class="hljs-title">rightlink</span>;</span> <span class="hljs-comment">// 指向右边的内存块</span><br>&#125; block;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    PyObject_VAR_HEAD           <span class="hljs-comment">// 可变类型头部标识</span><br>    block *leftblock;           <span class="hljs-comment">// 指向双向链表最左边的节点</span><br>    block *rightblock;          <span class="hljs-comment">// 指向双向链表最右边的节点</span><br>    Py_ssize_t leftindex;       <span class="hljs-comment">/* 0 &lt;= leftindex &lt; BLOCKLEN  第一个元素在leftblock中数组的下表 */</span><br>    Py_ssize_t rightindex;      <span class="hljs-comment">/* 0 &lt;= rightindex &lt; BLOCKLEN  最后一个元素在rightblock中数组的下表 */</span><br>    <span class="hljs-keyword">size_t</span> state;               <span class="hljs-comment">/* incremented whenever the indices move */</span><br>    Py_ssize_t maxlen;          <span class="hljs-comment">/* maxlen is -1 for unbounded deques 队列所允许的最大长度 */</span><br>    Py_ssize_t numfreeblocks;   <span class="hljs-comment">// freeblocks中第一个空闲块的下标</span><br>    block *freeblocks[MAXFREEBLOCKS];  <span class="hljs-comment">// 指向空闲的freeblocks数组</span><br>    PyObject *weakreflist;     <span class="hljs-comment">// 弱引用链表的头指针</span><br>&#125; dequeobject;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>deque的底层是由双向链表实现，因此头部和尾部的操作都能在O(1)内完成。但是deque的双向链表和不同的双向链表不同。数据结构中我们学习的双向链表，每个节点表示的是一个元素，而这里每个节点中能够保存64个元素，这样可以有效的节省内存空间的浪费，因为原来一个元素关联两个指针，而现在64个元素才关联两个指针，大大降低了指针相对于数据本身对内存空间的占用率。</p><p>根据如上的结构，我粗略的画了一下结构图：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/QQ%E5%9B%BE%E7%89%8720211025133700.jpg" alt="QQ图片20211025133700"></p><p>图中不仅包含了deque的数据结构，同时我也将weakref的结构体也画进去了。</p><h3 id="三-、-deque的操作运算集"><a href="#三-、-deque的操作运算集" class="headerlink" title="三 、 deque的操作运算集"></a>三 、 deque的操作运算集</h3><h4 id="1-为block结构体申请空间，源码如下："><a href="#1-为block结构体申请空间，源码如下：" class="headerlink" title="1.为block结构体申请空间，源码如下："></a>1.为block结构体申请空间，源码如下：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> block *<br><span class="hljs-built_in">newblock</span>(dequeobject *deque) &#123;<br>    <span class="hljs-comment">// 构造链表节点</span><br>    block *b;<br>    <span class="hljs-comment">// 分配空间时, 优先从空闲链表中复用空闲节点</span><br>    <span class="hljs-keyword">if</span> (deque-&gt;numfreeblocks) &#123;<br>        deque-&gt;numfreeblocks--;<br>        <span class="hljs-keyword">return</span> deque-&gt;freeblocks[deque-&gt;numfreeblocks];<br>    &#125;<br>    <span class="hljs-comment">// 空闲链表为空, 申请内存空间</span><br>    b = <span class="hljs-built_in">PyMem_Malloc</span>(<span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(block));<br>    <span class="hljs-keyword">if</span> (b != <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br>    <span class="hljs-built_in">PyErr_NoMemory</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>底层在内存空间使用上的优化还是蛮不错的，在我看到的很多源码中，像基本类型，可变序列的类型等，都会使用缓存来避免内存的多次分配和回收。这里的deque-&gt;freeblocks指向空闲数组，在申请一块新空间时，首先尝试复用空闲数组中的节点块，如果空闲数组为空，那么就向操作系统申请新的内存空间，大大减少了频繁申请内存的开销。</p><h4 id="2-回收block对象，源码如下："><a href="#2-回收block对象，源码如下：" class="headerlink" title="2.回收block对象，源码如下："></a>2.回收block对象，源码如下：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span><br><span class="hljs-built_in">freeblock</span>(dequeobject *deque, block *b)<br><span class="hljs-comment">// 释放链表节点</span><br>&#123;<br>    <span class="hljs-comment">// 若空闲链表中的空闲块个数小于允许的最大值, 则将b对象添加到空闲链表，否则由操作系统回收内存</span><br>    <span class="hljs-keyword">if</span> (deque-&gt;numfreeblocks &lt; MAXFREEBLOCKS) &#123;<br>        deque-&gt;freeblocks[deque-&gt;numfreeblocks] = b;<br>        deque-&gt;numfreeblocks++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">PyMem_Free</span>(b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>同样，释放链表节点时，会判断空闲链表中空闲块个数是否小于允许的最大值，如果小于，则将b对象添加到空闲数组的指定位置，否则由操作系统回收资源。</p><h4 id="3-从右出队deque-pop方法-源码如下："><a href="#3-从右出队deque-pop方法-源码如下：" class="headerlink" title="3.从右出队deque_pop方法,源码如下："></a>3.从右出队deque_pop方法,源码如下：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> PyObject *<br>deque_pop(dequeobject *<span class="hljs-built_in">deque</span>, PyObject *unused)<br><span class="hljs-comment">// 从右出队</span><br>&#123;<br>    PyObject *item;<br>    block *prevblock;<br><span class="hljs-comment">// 判断队列是否为空</span><br>    <span class="hljs-keyword">if</span> (Py_SIZE(<span class="hljs-built_in">deque</span>) == <span class="hljs-number">0</span>) &#123;<br>        PyErr_SetString(PyExc_IndexError, <span class="hljs-string">&quot;pop from an empty deque&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-comment">// 找到最右边节点中的数组的最后一个元素</span><br>    item = <span class="hljs-built_in">deque</span>-&gt;rightblock-&gt;data[<span class="hljs-built_in">deque</span>-&gt;rightindex];<br>    <span class="hljs-built_in">deque</span>-&gt;rightindex--;<br>    <span class="hljs-comment">// 强转, 修改deque对象的元素个数减一</span><br>    Py_SET_SIZE(<span class="hljs-built_in">deque</span>, Py_SIZE(<span class="hljs-built_in">deque</span>) - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">deque</span>-&gt;state++;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">deque</span>-&gt;rightindex &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// deque对象中还有元素， 如果rightindex应该指向前一块的末尾位置，设置rightindex为前驱节点中数组的首位置，回收该块资源(加入到空闲链表中or操作系统回收)</span><br>        <span class="hljs-keyword">if</span> (Py_SIZE(<span class="hljs-built_in">deque</span>)) &#123;<br>            prevblock = <span class="hljs-built_in">deque</span>-&gt;rightblock-&gt;leftlink; <span class="hljs-comment">// 前一个节点</span><br>            assert(<span class="hljs-built_in">deque</span>-&gt;leftblock != <span class="hljs-built_in">deque</span>-&gt;rightblock);<br>            freeblock(<span class="hljs-built_in">deque</span>, <span class="hljs-built_in">deque</span>-&gt;rightblock);<br>            CHECK_NOT_END(prevblock);<br>            MARK_END(prevblock-&gt;rightlink);<br>            <span class="hljs-built_in">deque</span>-&gt;rightblock = prevblock;   <span class="hljs-comment">// 将前一个节点块作为队列中最后一个block块</span><br>            <span class="hljs-built_in">deque</span>-&gt;rightindex = BLOCKLEN - <span class="hljs-number">1</span>; <span class="hljs-comment">// 重新设置最后一个元素的下表位置</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 删除元素后，deque中没有任何元素，重新定位元素位置，而不是回收节点块</span><br>            assert(<span class="hljs-built_in">deque</span>-&gt;leftblock == <span class="hljs-built_in">deque</span>-&gt;rightblock);<br>            assert(<span class="hljs-built_in">deque</span>-&gt;leftindex == <span class="hljs-built_in">deque</span>-&gt;rightindex+<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">/* re-center instead of freeing a block */</span><br>            <span class="hljs-built_in">deque</span>-&gt;leftindex = CENTER + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">deque</span>-&gt;rightindex = CENTER;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> item;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析</strong>：</p><p>该函数的功能是从队列右侧弹出数据。</p><p>算法思想：</p><p>​    (1).判断队列是否为空,不为空往下走，为空返回NULL。</p><p>​    (2).找到队列最后一块block节点中的数组中的最右端元素，赋值给item, rightindex减1, 强转类型，修改deque对象的元素个数减一。</p><p>​    (3). 在元素获取后，deque对象中还有元素， 如果rightindex &lt; 0, 应该重定位到前一块的末尾，则回收该块资源(加入到空闲链表中or操作系统回收)，同时，修正deque中rightblock指向的前一个节点块， rightindex对应前一块中数组最后一个元素的下标位置。如果此时deque中的大小为0(即deque中只剩一个空的block块)，则不再回收该内存块，重新定位leftindex和rightindex为<strong>中间位置</strong>。</p><h4 id="4-从左出队deque-popleft函数，源码如下："><a href="#4-从左出队deque-popleft函数，源码如下：" class="headerlink" title="4.从左出队deque_popleft函数，源码如下："></a>4.从左出队deque_popleft函数，源码如下：</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">static</span> PyObject *<br>deque_popleft(dequeobject *<span class="hljs-built_in">deque</span>, PyObject *unused)<br><span class="hljs-comment">// 从头部弹出元素</span><br>&#123;<br>    PyObject *item;<br>    block *prevblock;<br>    <span class="hljs-comment">// 队列为空</span><br>    <span class="hljs-keyword">if</span> (Py_SIZE(<span class="hljs-built_in">deque</span>) == <span class="hljs-number">0</span>) &#123;<br>        PyErr_SetString(PyExc_IndexError, <span class="hljs-string">&quot;pop from an empty deque&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    assert(<span class="hljs-built_in">deque</span>-&gt;leftblock != <span class="hljs-literal">NULL</span>);<br>    item = <span class="hljs-built_in">deque</span>-&gt;leftblock-&gt;data[<span class="hljs-built_in">deque</span>-&gt;leftindex];<br>    <span class="hljs-built_in">deque</span>-&gt;leftindex++;<br>    Py_SET_SIZE(<span class="hljs-built_in">deque</span>, Py_SIZE(<span class="hljs-built_in">deque</span>) - <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">deque</span>-&gt;state++;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">deque</span>-&gt;leftindex == BLOCKLEN) &#123;<br>        <span class="hljs-comment">// deque对象中还有元素，如果leftindex==BLOCKEN,应指向后继节点个节点中数组首位置，设置leftindex为后继节点中数组的首位置，回收该块资源。</span><br>        <span class="hljs-keyword">if</span> (Py_SIZE(<span class="hljs-built_in">deque</span>)) &#123;<br>            assert(<span class="hljs-built_in">deque</span>-&gt;leftblock != <span class="hljs-built_in">deque</span>-&gt;rightblock);<br>            prevblock = <span class="hljs-built_in">deque</span>-&gt;leftblock-&gt;rightlink;<br>            freeblock(<span class="hljs-built_in">deque</span>, <span class="hljs-built_in">deque</span>-&gt;leftblock);<br>            CHECK_NOT_END(prevblock);<br>            MARK_END(prevblock-&gt;leftlink);<br>            <span class="hljs-built_in">deque</span>-&gt;leftblock = prevblock;<br>            <span class="hljs-built_in">deque</span>-&gt;leftindex = <span class="hljs-number">0</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            assert(<span class="hljs-built_in">deque</span>-&gt;leftblock == <span class="hljs-built_in">deque</span>-&gt;rightblock);<br>            assert(<span class="hljs-built_in">deque</span>-&gt;leftindex == <span class="hljs-built_in">deque</span>-&gt;rightindex+<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">/* re-center instead of freeing a block */</span><br>            <span class="hljs-built_in">deque</span>-&gt;leftindex = CENTER + <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">deque</span>-&gt;rightindex = CENTER;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> item;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>该函数的功能是从队列左侧弹出数据。</p><p>算法思想：</p><p>​    (1).判断队列是否为空,不为空往下走，为空返回NULL。</p><p>​    (2).找到队列第一块block节点中的数组中的最左端元素，赋值个item,  强转类型， leftindex加1，修改deque对象的元素个数减一。</p><p>​    (3). 在元素获取后，如果leftindex==BLOCKEN且deque对象中还有元素, 应指向后继节点中数组首位置，设置leftindex为后继节点中数组的首位置，回收该块资。同时，修正deque中rightblock指向的最后一个节点块即rightindex对应最后一个元素的下标位置。如果此时是deque中的大小为0(即deque中只剩一个空的block块)，则不再回收该内存块，重新定位leftindex和rightindex为<strong>中间位置</strong>。</p><ol start="5"><li><h4 id="向右追加元素，deque-append-internal函数，源码如下："><a href="#向右追加元素，deque-append-internal函数，源码如下：" class="headerlink" title="向右追加元素，deque_append_internal函数，源码如下："></a>向右追加元素，deque_append_internal函数，源码如下：</h4></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 先分配空间，然后加入元素</span><br><span class="hljs-comment"> * 向右追加元素，deque-&gt;rightindex在一块block中是递增的</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span><br>deque_append_internal(dequeobject *<span class="hljs-built_in">deque</span>, PyObject *item, Py_ssize_t maxlen)<br>&#123;<br>    <span class="hljs-comment">// 如果元素位于数组中的最后一个位置，则从空闲链表或内存中申请一块空间</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">deque</span>-&gt;rightindex == BLOCKLEN - <span class="hljs-number">1</span>) &#123;<br>        block *b = newblock(<span class="hljs-built_in">deque</span>);<br>        <span class="hljs-keyword">if</span> (b == <span class="hljs-literal">NULL</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        <span class="hljs-comment">// 双向链表的尾插法，并设置rightindex为最右块的第一个位置，即0，然后赋值</span><br>        b-&gt;leftlink = <span class="hljs-built_in">deque</span>-&gt;rightblock;<br>        CHECK_END(<span class="hljs-built_in">deque</span>-&gt;rightblock-&gt;rightlink);<br>        <span class="hljs-built_in">deque</span>-&gt;rightblock-&gt;rightlink = b;<br>        <span class="hljs-built_in">deque</span>-&gt;rightblock = b;<br>        MARK_END(b-&gt;rightlink);<br>        <span class="hljs-built_in">deque</span>-&gt;rightindex = <span class="hljs-number">-1</span>;<br>    &#125;<br>    Py_SET_SIZE(<span class="hljs-built_in">deque</span>, Py_SIZE(<span class="hljs-built_in">deque</span>) + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">deque</span>-&gt;rightindex++;<br>    <span class="hljs-built_in">deque</span>-&gt;rightblock-&gt;data[<span class="hljs-built_in">deque</span>-&gt;rightindex] = item;<br>    <span class="hljs-comment">// 如果超过队列限定的最大长度，则会从左侧弹出数据</span><br>    <span class="hljs-keyword">if</span> (NEEDS_TRIM(<span class="hljs-built_in">deque</span>, maxlen)) &#123;<br>        PyObject *olditem = deque_popleft(<span class="hljs-built_in">deque</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-comment">// 针对该对象，减少其引用计数值</span><br>        Py_DECREF(olditem);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">deque</span>-&gt;state++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>算法思想:</p><p>​    (1). 如果元素位于数组中的最后一个位置，则从空闲链表或内存中申请一块空间, 使用双向链表的尾插法，并设置rightindex为最右块的第一个位置，即0，然后赋值。</p><p>​    (2).如果超过队列限定的最大长度，则会从左侧弹出数据, 针对该对象，减少其引用计数值</p><p>6.向左追加元素,deque_appendleft_internal函数，源码如下:</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 先分配空间，然后加入元素</span><br><span class="hljs-comment"> * 向左追加元素，deque-&gt;leftindex在一块block中是递减的</span><br><span class="hljs-comment"> */</span><br>static inline int<br>deque_appendleft_internal(dequeobject *deque, PyObject *item, Py_ssize_t maxlen)<br>&#123;<br>    <span class="hljs-comment">// 如果元素处于数组的第一个位置，则从空闲链表或内存中申请一块空间</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (deque-&gt;</span>leftindex == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">block</span> *b = newblock(deque);<br>        <span class="hljs-keyword">if</span> (b == NULL)<br>            return -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">// 头插法，并设定leftindex为数组的最后一个位置，然后赋值</span><br>        <span class="hljs-function"><span class="hljs-title">b</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">rightlink</span> = deque-&gt;</span>leftblock;<br>        CHECK_END(<span class="hljs-function"><span class="hljs-title">deque</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">leftblock</span>-&gt;</span>leftlink);<br>        <span class="hljs-function"><span class="hljs-title">deque</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">leftblock</span>-&gt;</span>leftlink = b;<br>        <span class="hljs-function"><span class="hljs-title">deque</span>-&gt;</span>leftblock = b;<br>        MARK_END(<span class="hljs-function"><span class="hljs-title">b</span>-&gt;</span>leftlink);<br>        <span class="hljs-function"><span class="hljs-title">deque</span>-&gt;</span>leftindex = BLOCKLEN;<br>    &#125;<br>    Py_SET_SIZE(deque, Py_SIZE(deque) + <span class="hljs-number">1</span>);<br>    <span class="hljs-function"><span class="hljs-title">deque</span>-&gt;</span>leftindex--;<br>    <span class="hljs-function"><span class="hljs-title">deque</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">leftblock</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[deque-&gt;</span>leftindex] = item;<br>    <span class="hljs-comment">// 如果超过队列限定的最大长度，则会从右侧弹出数据</span><br>    <span class="hljs-function"><span class="hljs-title">if</span> (NEEDS_TRIM(deque, deque-&gt;</span>maxlen)) &#123;<br>        PyObject *olditem = deque_pop(deque, NULL);<br>        Py_DECREF(olditem);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-function"><span class="hljs-title">deque</span>-&gt;</span>state++;<br>    &#125;<br>    return <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>算法思想:</p><p>​    (1). 如果元素处于数组的第一个位置，则从空闲链表或内存中申请一块空间, 使用双向链表的头插法，并设定leftindex为数组的最后一个位置，即blocklen-1，然后赋值。</p><p>​    (2).如果超过队列限定的最大长度，则会从右侧弹出数据, 针对该对象，减少其引用计数值</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><ol><li>通过源码分析，deque的数据结构也很明了了，双向链表在底层中用的地方蛮多的，不止这里，向垃圾回收机制，缓存中也是用的双向链表</li></ol><p>来存储数据。</p><ol start="2"><li>deque中在初始化队列时，设定leftindex和rightindex为数组的中间位置，使得数据均匀分布，使得从左插入和从右插入带来内存块的分配的频度尽可能趋于相同。</li><li>deque中每个节点中存储64个元素，减少了指针大小对内存空间的消耗，更加节省空间。</li></ol>]]></content>
    
    
    <categories>
      
      <category>C</category>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
      <tag>数据结构</tag>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决selenium的sends_key发送文本的执行缓慢和卡顿的问题</title>
    <link href="/2021/10/14/%E8%A7%A3%E5%86%B3selenium%E7%9A%84sends_key%E5%8F%91%E9%80%81%E6%96%87%E6%9C%AC%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BC%93%E6%85%A2%E5%92%8C%E5%8D%A1%E9%A1%BF%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/10/14/%E8%A7%A3%E5%86%B3selenium%E7%9A%84sends_key%E5%8F%91%E9%80%81%E6%96%87%E6%9C%AC%E7%9A%84%E6%89%A7%E8%A1%8C%E7%BC%93%E6%85%A2%E5%92%8C%E5%8D%A1%E9%A1%BF%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="在项目中使用selenium的send-keys中向body中添加大文本的数据时，会出现页面卡顿的现象。"><a href="#在项目中使用selenium的send-keys中向body中添加大文本的数据时，会出现页面卡顿的现象。" class="headerlink" title="在项目中使用selenium的send_keys中向body中添加大文本的数据时，会出现页面卡顿的现象。"></a>在项目中使用selenium的send_keys中向body中添加大文本的数据时，会出现页面卡顿的现象。</h3><h4 id="源码解析-问题原因"><a href="#源码解析-问题原因" class="headerlink" title="源码解析, 问题原因"></a>源码解析, 问题原因</h4><p>为此, 特地看了下send_keys的源码。先上源码, 再做分析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_keys</span>(<span class="hljs-params">self, *value</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Simulates typing into the element.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :Args:</span><br><span class="hljs-string">        - value - A string for typing, or setting form fields.  For setting</span><br><span class="hljs-string">          file inputs, this could be a local file path.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Use this to send simple key events or to fill out form fields::</span><br><span class="hljs-string"></span><br><span class="hljs-string">        form_textfield = driver.find_element_by_name(&#x27;username&#x27;)</span><br><span class="hljs-string">        form_textfield.send_keys(&quot;admin&quot;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    This can also be used to set file inputs.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    ::</span><br><span class="hljs-string"></span><br><span class="hljs-string">        file_input = driver.find_element_by_name(&#x27;profilePic&#x27;)</span><br><span class="hljs-string">        file_input.send_keys(&quot;path/to/profilepic.gif&quot;)</span><br><span class="hljs-string">        # Generally it&#x27;s better to wrap the file path in one of the methods</span><br><span class="hljs-string">        # in os.path to return the actual path to support cross OS testing.</span><br><span class="hljs-string">        # file_input.send_keys(os.path.abspath(&quot;path/to/profilepic.gif&quot;))</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># transfer file to another machine only if remote driver is used</span><br>    <span class="hljs-comment"># the same behaviour as for java binding</span><br>    <span class="hljs-keyword">if</span> self.parent._is_remote:<br>        local_file = self.parent.file_detector.is_local_file(*value)<br>        <span class="hljs-keyword">if</span> local_file <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            value = self._upload(local_file)<br><br>    self._execute(Command.SEND_KEYS_TO_ELEMENT,<br>                  &#123;<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot;&quot;</span>.join(keys_to_typing(value)),<br>                   <span class="hljs-string">&#x27;value&#x27;</span>: keys_to_typing(value)&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">keys_to_typing</span>(<span class="hljs-params">value</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Processes the values that will be typed in the element.&quot;&quot;&quot;</span><br>    typing = []<br>    <span class="hljs-keyword">for</span> val <span class="hljs-keyword">in</span> value:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(val, Keys):<br>            typing.append(val)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(val, <span class="hljs-built_in">int</span>):<br>            val = <span class="hljs-built_in">str</span>(val)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(val)):<br>                typing.append(val[i])<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(val)):<br>                typing.append(val[i])<br>    <span class="hljs-keyword">return</span> typing<br></code></pre></td></tr></table></figure><p>如果你在程序中善于调试的话，应该会想看看_execute函数中传递进去的数据长什么样子，如果你没看过，没关系，通过分析keys_to_typing函数，一样可以知道为什么出现页面卡顿现象了。</p><p>keys_to_typing函数是执行的CPU密集行操作, 在数据量小的时候, 遍历的次数少, 可能体会不到明显的页面卡顿现象。但是如果数据量很大，例如解析后的带有多个iframe的页面源码, 想要将它输入到文本框时就会出现长时间的页面卡顿现象。</p><p>细看keys_to_typing，首先会创建一个列表, 然后将数据切片，切成单个字符，再调用append方法添加到typing中。这样会导致短暂性CPU飙升100%, 也会额外开辟更多的内存空间。导致出现卡顿现象。</p><p><strong>注：</strong><br>Python中的列表是具备动态扩容机制的,每次扩容所需要的时间复杂度为O(N), 每次都会在原来列表长度的所占用的内存的基础上申请额外的1/8数组长度+ <code>newsize &lt; 9 ? 3:6 </code>的内存余量。因此频繁扩容带来不断的拷贝数据，导致CPU飙升。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>有两种解决方案。<br>1.不使用send_keys, 编写javascript代码，通过selenium驱动执行js。<br>2.重写send_keys源码, 不切分字符串为单个字符。</p><p>这里我使用第二种方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_keys</span>(<span class="hljs-params">web_element: WebElement, *value</span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    优化selenium的send_keys传输文本的性能</span><br><span class="hljs-string">    支持str, int, List, Tuple, Dict, Set X数据类型sa</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> web_element.parent._is_remote:<br>        local_file = web_element.parent.file_detector.is_local_file(*value)<br>        <span class="hljs-keyword">if</span> local_file <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            value = web_element._upload(local_file)<br><br>    web_element._execute(Command.SEND_KEYS_TO_ELEMENT,<br>                         &#123;<span class="hljs-string">&#x27;text&#x27;</span>: <span class="hljs-string">&quot; &quot;</span>.join(keys_to_typing(value)),<br>                          <span class="hljs-string">&#x27;value&#x27;</span>: keys_to_typing(value)&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">keys_to_typing</span>(<span class="hljs-params">values: t.<span class="hljs-type">Tuple</span></span>) -&gt; t.<span class="hljs-type">List</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    类型转化</span><br><span class="hljs-string">    对非内置类型的可迭代对象，需实现__iter__内置方法，且返回可迭代类型</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    res = []<br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> values:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">str</span>):<br>            res.append(value)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">list</span>):<br>            res.extend(value)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, (<span class="hljs-built_in">set</span>, <span class="hljs-built_in">tuple</span>)):<br>            res.extend(<span class="hljs-built_in">list</span>(value))<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, <span class="hljs-built_in">dict</span>):<br>            res.extend([<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;key&#125;</span>:<span class="hljs-subst">&#123;value&#125;</span>&#x27;</span> <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> value.items()])<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, Keys):<br>            res.append(value)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, t.Iterable):<br>            res.extend(<span class="hljs-built_in">iter</span>(value))<br>    <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p>调用方式：</p><p><code>send_keys(input_box, text1, text2)</code></p><p>input_box为WebElement对象, text1、text2可以为int, str, 非嵌套的list, 非嵌套的tuple, 非嵌套的set, 非嵌套的dict以及非嵌套的自定义可迭代对象</p><p>这样一来，执行速度就提升很多了。</p>]]></content>
    
    
    <categories>
      
      <category>selenium</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>selenium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符串匹配算法之BF算法和RK算法</title>
    <link href="/2021/09/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E4%B9%8BBF%E7%AE%97%E6%B3%95%E5%92%8CRK%E7%AE%97%E6%B3%95/"/>
    <url>/2021/09/22/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95%E4%B9%8BBF%E7%AE%97%E6%B3%95%E5%92%8CRK%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="BF算法"><a href="#BF算法" class="headerlink" title="BF算法"></a>BF算法</h3><p>俗称暴力破解法，假设有长度为m的子串，长度为n的主串, n&gt;=m， 那么BF算法的思想就是每轮遍历m个字符，遍历n-m+1次，最坏的时间复杂度为O(n*m)。</p><h3 id="RK算法"><a href="#RK算法" class="headerlink" title="RK算法"></a>RK算法</h3><p>比较子串的hash值与带比较串的hash是否相等，一直则说明存在。时间复杂度O(n)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># RK算法</span><br><br>HEX = <span class="hljs-number">61</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute_hash</span>(<span class="hljs-params">child: <span class="hljs-built_in">str</span>, lens: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    计算子串hash</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(child)-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        res += <span class="hljs-built_in">ord</span>(child[i]) * (HEX**(lens-i-<span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rk</span>(<span class="hljs-params">main: <span class="hljs-built_in">str</span>,  child: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot; </span><br><span class="hljs-string">    RK算法</span><br><span class="hljs-string">    假设要比较的字符只在大写/小写字母、数字中</span><br><span class="hljs-string">    时间复杂度O(n)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    n = <span class="hljs-built_in">len</span>(main)<br>    m = <span class="hljs-built_in">len</span>(child)<br>    first = compute_hash(child, m)<br>    <span class="hljs-comment"># 边计算边存储</span><br>    h = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-m+<span class="hljs-number">1</span>)]<br>    h[<span class="hljs-number">0</span>] = compute_hash(main[<span class="hljs-number">0</span>:m], m)<br>    <span class="hljs-keyword">if</span> h[<span class="hljs-number">0</span>] == first:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 遍历一轮，动态根据h[i-1]计算h[i]的hash值</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n-m+<span class="hljs-number">1</span>):<br>        h[i] = (h[i-<span class="hljs-number">1</span>] - (HEX**(m-<span class="hljs-number">1</span>))*<span class="hljs-built_in">ord</span>(main[i-<span class="hljs-number">1</span>]))*HEX + <span class="hljs-built_in">ord</span>(main[i+m-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">if</span> first == h[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br>res = rk(<span class="hljs-string">&#x27;abcd&#x27;</span>, <span class="hljs-string">&#x27;bcd&#x27;</span>)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Trie树 --- 具有相同前缀的字符串匹配</title>
    <link href="/2021/09/20/Trie%E6%A0%91---%E5%85%B7%E6%9C%89%E7%9B%B8%E5%90%8C%E5%89%8D%E7%BC%80%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/"/>
    <url>/2021/09/20/Trie%E6%A0%91---%E5%85%B7%E6%9C%89%E7%9B%B8%E5%90%8C%E5%89%8D%E7%BC%80%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<p><strong>Trie树，实现简易的搜索引擎的搜索关键词功能，用于具有相同前缀的字符串匹配</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>MAX_NUM = <span class="hljs-number">26</span><br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TrieNode</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    构造前缀</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, char</span>):</span><br>        self.char = char<br>        self.children: t.<span class="hljs-type">Any</span> = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(MAX_NUM)]<br>        self.is_end = <span class="hljs-literal">False</span><br><br><br>root = TrieNode(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trie_insert</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    向trie树中插入字符串,形成一条字符串链</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 头节点特殊处理</span><br>    asc_a: <span class="hljs-built_in">int</span> = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    p: TrieNode = root<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> text:<br>        index: <span class="hljs-built_in">int</span> = <span class="hljs-built_in">ord</span>(s) - asc_a<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p.children[index]:<br>            child: TrieNode = TrieNode(s)<br>            p.children[index] = child<br>        p = p.children[index]<br>    p.is_end = <span class="hljs-literal">True</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trie_find</span>(<span class="hljs-params">text: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    在trie树种查找字符串</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 头节点特殊处理</span><br>    asc_a: <span class="hljs-built_in">int</span> = <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br>    p: TrieNode = root<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> text:<br>        index: <span class="hljs-built_in">int</span> = <span class="hljs-built_in">ord</span>(s) - asc_a<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p.children[index]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        p = p.children[index]<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> p.is_end <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br><br><br>str_one = <span class="hljs-string">&#x27;ilove&#x27;</span><br>str_one1 = <span class="hljs-string">&#x27;ilo&#x27;</span><br>trie_insert(str_one)<br>trie_insert(str_one1)<br>str_sec = <span class="hljs-string">&#x27;ilo&#x27;</span><br>res = trie_find(str_sec)<br><span class="hljs-built_in">print</span>(res)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Kahn、DFS --- 拓扑排序</title>
    <link href="/2021/09/12/Kahn%E3%80%81DFS%20---%20%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/09/12/Kahn%E3%80%81DFS%20---%20%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p><strong>拓扑排序算法</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 构造邻接表</span><br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Graph</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, vex: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        构造基本邻接表</span><br><span class="hljs-string">        :param vex: 顶点个数</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.vex = vex<br>        self.adj = [[] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(vex)]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_vex</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        构造边 s-&gt;t</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.adj[s].append(m)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">topological_sorting_kahn</span>(<span class="hljs-params">self</span>) -&gt; t.<span class="hljs-type">List</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Kahn (卡恩) 算法, 根据入度是否为0去排序</span><br><span class="hljs-string">        时间复杂度为O(V+E), 空间复杂度为O(V)</span><br><span class="hljs-string">        算法思路:</span><br><span class="hljs-string">            1.遍历整个邻接表，根据逆链接表思维，构造入度集</span><br><span class="hljs-string">            2.利用双向队列，将当前轮满足入度为0的结点入队。</span><br><span class="hljs-string">            3.依次从队中出一个结点，将该结点指向的所有结点的入度边 - 1，若此时满足入度边==0, 则将对应结点入队。</span><br><span class="hljs-string">            4.重复执行2-3步骤，直到队空。得到拓扑排序结果，并且图中不存在环路。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        res = []<br>        penetration = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(self.vex)]<br>        <span class="hljs-keyword">for</span> i_r, r <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.adj):<br>            r: t.<span class="hljs-type">List</span><br>            <span class="hljs-keyword">for</span> i_c, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(r):<br>                penetration[c] += <span class="hljs-number">1</span><br><br>        q = deque()<br>        <span class="hljs-comment"># 第一轮，将入度为0的值入队</span><br>        <span class="hljs-keyword">for</span> i_j, j <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(penetration):<br>            <span class="hljs-keyword">if</span> j == <span class="hljs-number">0</span>:<br>                q.append(i_j)<br>        <span class="hljs-keyword">while</span> q:<br>            node: <span class="hljs-built_in">int</span> = q.popleft()<br>            <span class="hljs-comment"># 添加结点到排序结果集</span><br>            res.append(node)<br>            <span class="hljs-comment"># 删除该结点及其所有的出度边 &lt;==&gt; (将该结点指向的所有结点的入度边 - 1)</span><br>            <span class="hljs-keyword">for</span> i_c, c <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(self.adj[node]):<br>                penetration[c] -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> penetration[c] == <span class="hljs-number">0</span>:<br>                    q.append(c)<br>        <span class="hljs-keyword">return</span> res<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">topological_sorting_dfs</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        TODO: DFS实现拓扑排序</span><br><span class="hljs-string">        算法思想：</span><br><span class="hljs-string">            1.根据邻接表构建出逆邻接表</span><br><span class="hljs-string">            2.DFS遍历逆邻接表中的顶点和对应的入度边结点，当某个结点没有入度结点，则将自身状态设置为-1,添加到拓扑排序数组中。</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br><br>graph = Graph(<span class="hljs-number">6</span>)<br>graph.add_vex(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br>graph.add_vex(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>graph.add_vex(<span class="hljs-number">1</span>, <span class="hljs-number">4</span>)<br>graph.add_vex(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br>graph.add_vex(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br>graph.add_vex(<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br><span class="hljs-comment"># Kahn算法</span><br>res_kahn = graph.topological_sorting_kahn()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Kahn算法&#x27;</span>, res_kahn)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>DFS</tag>
      
      <tag>Kahn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯、动态规划 -- 最短的路径</title>
    <link href="/2021/09/10/%E5%9B%9E%E6%BA%AF%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20--%20%E6%9C%80%E7%9F%AD%E7%9A%84%E8%B7%AF%E5%BE%84/"/>
    <url>/2021/09/10/%E5%9B%9E%E6%BA%AF%E3%80%81%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%20--%20%E6%9C%80%E7%9F%AD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h3 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h3><h4 id="1-回溯算法求解"><a href="#1-回溯算法求解" class="headerlink" title="1.回溯算法求解"></a>1.回溯算法求解</h4><h4 id="2-动态规划求解"><a href="#2-动态规划求解" class="headerlink" title="2.动态规划求解"></a>2.动态规划求解</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><br><br><span class="hljs-comment"># 使用备忘录备忘录</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shortest_path_recall</span>(<span class="hljs-params">data: t.<span class="hljs-type">List</span>[t.<span class="hljs-type">List</span>]</span>) -&gt; t.<span class="hljs-type">Union</span>[<span class="hljs-built_in">float</span>, <span class="hljs-built_in">int</span>]:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    回溯算法, 时间复杂度为0(n*m), 空间复杂度为0(n*m)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    TODO: 1.优化方法剪枝(备忘录), 记录某一结点vi之后的最优路径，得到从初始结点v0 -&gt; vk,经过vi的最短路径。</span><br><span class="hljs-string">    TODO: 2.比较当前最短路径和全局最短路径的大小，是否进行更新。</span><br><span class="hljs-string">    TODO: 3.向右继续前进走。</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    max_dist = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>    n = <span class="hljs-built_in">len</span>(data)<br>    m = <span class="hljs-built_in">len</span>(data[<span class="hljs-number">0</span>])<br>    data.append([<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)])<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>):<br>        data[row].append(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">recall</span>(<span class="hljs-params">i: <span class="hljs-built_in">int</span>, j: <span class="hljs-built_in">int</span>, dist: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-keyword">nonlocal</span> max_dist<br>        <span class="hljs-keyword">nonlocal</span> n<br><br>        <span class="hljs-keyword">if</span> i == n <span class="hljs-keyword">and</span> j == n - <span class="hljs-number">1</span>:<br>            max_dist = <span class="hljs-built_in">min</span>(max_dist, dist)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">elif</span> i == n <span class="hljs-keyword">or</span> j == n:<br>            <span class="hljs-keyword">return</span><br><br>        <span class="hljs-keyword">if</span> i &lt; n:<br>            <span class="hljs-comment"># 往下走, 判断是否已经走过</span><br>            recall(i + <span class="hljs-number">1</span>, j, dist + data[i][j])<br>        <span class="hljs-keyword">if</span> j &lt; n:<br>            <span class="hljs-comment"># 往右走</span><br>            recall(i, j + <span class="hljs-number">1</span>, dist + data[i][j])<br><br>    recall(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> max_dist<br><br><br>data = [<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>    [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>],<br>    [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>]<br>res = shortest_path_recall(data)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;回溯结果:&#x27;</span>, res)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shortest_path_dp</span>(<span class="hljs-params">mutex: t.<span class="hljs-type">List</span>[t.<span class="hljs-type">List</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    动态规划</span><br><span class="hljs-string">    时间复杂度为O(n*m), 空间复杂度为O(1)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> mutex:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    n = <span class="hljs-built_in">len</span>(mutex)<br>    m = <span class="hljs-built_in">len</span>(mutex[<span class="hljs-number">0</span>])<br><br>    <span class="hljs-comment"># 加边界</span><br>    mutex.append([<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)])<br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>):<br>        mutex[row].append(<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>))<br><br>    <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-comment"># 跳过第一个位置</span><br>            <span class="hljs-keyword">if</span> row == col == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">continue</span><br>            mutex[row][col] += <span class="hljs-built_in">min</span>(mutex[row - <span class="hljs-number">1</span>][col], mutex[row][col - <span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">return</span> mutex[-<span class="hljs-number">2</span>][-<span class="hljs-number">2</span>]<br><br>data1 = [<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">9</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>],<br>    [<span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>],<br>    [<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>]<br><br>res_dp = shortest_path_dp(data1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;动态规划结果&#x27;</span>, res_dp)<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OS模块常用函数汇总</title>
    <link href="/2021/09/09/OS%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB/"/>
    <url>/2021/09/09/OS%E6%A8%A1%E5%9D%97%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p>1.os.path.join(path, name)：路径拼接。  </p><p>2.os.walk(path)：递归遍历目录， 返回三个值，root, dirs, files, root的第一个路径是os.walk的参数。  </p><p>3.os.path.exists(path): 判断路径是否存在</p><p>4.os.makedirs(path): 递归创建指定目录</p><p>5.os.popen(cmd): 执行cmd指令</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>回溯--八皇后</title>
    <link href="/2021/09/09/%E5%9B%9E%E6%BA%AF--%E5%85%AB%E7%9A%87%E5%90%8E/"/>
    <url>/2021/09/09/%E5%9B%9E%E6%BA%AF--%E5%85%AB%E7%9A%87%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<p><strong>回溯算法处理八皇后问题</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">eight_queen</span>():</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    八皇后</span><br><span class="hljs-string">    因为只需存储八个位置的数, 压缩数组, 下标存储行, 值存储列</span><br><span class="hljs-string">    回溯换路</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    place = [-<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">judge_place</span>(<span class="hljs-params">row: <span class="hljs-built_in">int</span>, column: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        判断对应row, column是否该放置一个皇后</span><br><span class="hljs-string">        只需考虑垂直，左斜，右斜</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        left, right = column - <span class="hljs-number">1</span>, column + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(row - <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            <span class="hljs-comment"># 逐层往上判断每一行</span><br>            <span class="hljs-keyword">if</span> place[r] == column:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> left &gt; -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> left == place[r]:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">if</span> right &lt; <span class="hljs-number">8</span> <span class="hljs-keyword">and</span> right == place[r]:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            left -= <span class="hljs-number">1</span><br>            right += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lay</span>(<span class="hljs-params">row: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        递归计算放置的正确问题</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> row == <span class="hljs-number">8</span>:<br>            <span class="hljs-comment"># 打印所有解法</span><br>            <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>                <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>                    <span class="hljs-keyword">if</span> place[r] == c:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\tQ\t&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>                    <span class="hljs-keyword">else</span>:<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t*\t&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">for</span> column <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>            <span class="hljs-keyword">if</span> judge_place(row, column):<br>                place[row] = column<br>                lay(row + <span class="hljs-number">1</span>)<br><br>    lay(<span class="hljs-number">0</span>)<br>res = eight_queen()<br><br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>回溯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>四次挥手要点</title>
    <link href="/2021/09/05/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%A6%81%E7%82%B9/"/>
    <url>/2021/09/05/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%A6%81%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="一、-四次挥手时，FIN-WAIT1状态的连接出现很多的原因。"><a href="#一、-四次挥手时，FIN-WAIT1状态的连接出现很多的原因。" class="headerlink" title="一、 四次挥手时，FIN_WAIT1状态的连接出现很多的原因。"></a>一、 四次挥手时，FIN_WAIT1状态的连接出现很多的原因。</h4><p>被动方的FIN报文段一直没有发送出去，导致主动方处于FIN_WAIT1状态的连接产生大量的积压。  </p><p>如果存在攻击者恶意攻击，就可能导致被动方的FIN报文段一直发不出去。  </p><p><strong>原因：</strong></p><p>1.TCP必须保证报文是有序发送的，如果发送方的发送缓存区中还有数据没有发送完，那么FIN报文也不能提前发送。  </p><p>2.TCP存在流量控制，当接受方的窗口大小设为0时，发送方就无法发送数据。所以当攻击者下载大文件时，就可以将接受窗口大小设为0时，导致FIN报文一直发送不出去，进而导致连接一直处于FIN_WAIT1状态。  </p><h4 id="二、-四次挥手时，CLOSE-WAIT状态的连接出现很多的原因。"><a href="#二、-四次挥手时，CLOSE-WAIT状态的连接出现很多的原因。" class="headerlink" title="二、 四次挥手时，CLOSE_WAIT状态的连接出现很多的原因。"></a>二、 四次挥手时，CLOSE_WAIT状态的连接出现很多的原因。</h4><p>1.程序本身出现BUG，read函数（读事件) 返回0时并没有调用close函数关闭连接。</p><p>2.当前服务的负载过高，导致close函数所在的回调函数延迟执行。</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中sys.path的用法</title>
    <link href="/2021/09/03/Python%E4%B8%ADsys.path%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2021/09/03/Python%E4%B8%ADsys.path%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h4 id="一-、-背景"><a href="#一-、-背景" class="headerlink" title="一 、 背景"></a>一 、 背景</h4><p>在一个比较大的工程项目中，开发设计到的编程语言往往不止一个，每个语言负责项目中的某一块。在开发到了一定阶段，需要进行测试，需要将这些由各个语言负责的子模块合并到一起，然后统一测试，发版，上线。<br>目前我所做的项目中设计多门语言结合，所属的模块是用Python进行开发。因此其他语言开发的模块要调用py文件时，要从sys.path找到正确的模块目录，解释器才能正确调用。<br>因此今天就来聊一聊sys.path是什么？Python解释器是如何通过它来查找模块的？sys.path如何解决模块导入失败的问题？  </p><hr><h4 id="二-、sys-path是什么？"><a href="#二-、sys-path是什么？" class="headerlink" title="二 、sys.path是什么？"></a>二 、sys.path是什么？</h4><p>sys.path变量指定了Python解释器能够搜索到的模块所有路径列表。在变量初始化时，默认包含了执行py的当前目录，PYTHONPATH环境变量，Python安装目录。当然，在程序中我们也可以动态的修改sys.path中的路径列表，解决无法导入模块的问题。</p><hr><h4 id="三-、-Python解释器是如何通过它来查找模块的？"><a href="#三-、-Python解释器是如何通过它来查找模块的？" class="headerlink" title="三 、 Python解释器是如何通过它来查找模块的？"></a>三 、 Python解释器是如何通过它来查找模块的？</h4><p>这里先浅层的谈一下，，一般说来sys.path和sys.modules是搭配的，使用import …或是 from … import …, 编译程字节码，底层C语言执行函数时，会首先从sys.modules中查找模块是否已经被导入，如果存在则直接取，避免二次导入。如果不存在，依次搜索sys.path中的路径列表，去搜索目标模块，然后导入，导入之后，将对应的模块名和模块对象的映射添加到sys.modules中。</p><hr><h4 id="四-、-sys-path如何解决模块导入失败的问题？"><a href="#四-、-sys-path如何解决模块导入失败的问题？" class="headerlink" title="四 、 sys.path如何解决模块导入失败的问题？"></a>四 、 sys.path如何解决模块导入失败的问题？</h4><p><strong>注：该问题是基于通过命令行执行py产生。</strong>   </p><p>假设目前，我们有一个项目，名为top， 项目下有两个模块，分别是sec和thr。  </p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ada">top<br><span class="hljs-comment">--sec</span><br><span class="hljs-comment">-----__init__.py</span><br><span class="hljs-comment">-----base.py</span><br><br><span class="hljs-comment">--thr</span><br><span class="hljs-comment">-----__init__.py</span><br><span class="hljs-comment">-----base.py</span><br></code></pre></td></tr></table></figure><p>现在我想在模块下的base.py中导入thr模块下base.py。因此我这样写<code>from thr import base</code>,在程序中这样导入，编译器不会报错。但是通过命令行<code>python ./sec/base.py</code>来运行，就会产生错误<code>ModuleNotFoundError: No module named &#39;thr&#39;</code>,显示找不到包。<br>上述第二点中谈到的查找模块的过程是需要依赖sys.path和sys.modules。由于程序第一次运行，包并未被导入过，因此sys.modules中是找不到的，所以问题的原因就很明显了—–sys.path中找不到模块的路径，导致无法导包。<br>我们来看下通过命令行运行程序时的sys.path路径列表。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;D:\\PythonProjects\\grpc\\top\\sec&#x27;</span>, <span class="hljs-string">&#x27;D:\\python3.6.8\\python36.zip&#x27;</span>, <span class="hljs-string">&#x27;D:\\python3.6.8\\DLLs&#x27;</span>, <span class="hljs-string">&#x27;D:\\python3.6.8\\lib&#x27;</span>, <span class="hljs-string">&#x27;D:\\python3.6.8&#x27;</span>, <span class="hljs-string">&#x27;D:\\python3.6.8\\lib\\site-packages&#x27;</span>]<br></code></pre></td></tr></table></figure><p>可以看出来第一个路径时当前正在执行的py的模块路径，其他路径是python安装路径。并没有thr模块的绝对路径以及top模块的绝对路径。  </p><h4 id="五-、解决方法："><a href="#五-、解决方法：" class="headerlink" title="五 、解决方法："></a>五 、解决方法：</h4><p>为了解决这个问题，我们可以在程序中动态向sys.path添加总项目根目录的模块路径,使得thr可以被搜索到。<br>一般不同语言之间交互，会调用入口文件，我们也可以在入口文件中，向sys.path中总项目根目录的绝对路径。例如如下这样。<br>在项目根目录中添加一个main.py,在main.py添加如下代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-comment"># 构造总项目目录</span><br>project_path = sys.path.append(os.path.join(sys.path[<span class="hljs-number">0</span>], <span class="hljs-string">&#x27;project_dir&#x27;</span>))<br></code></pre></td></tr></table></figure><hr><h4 id="六-、总结"><a href="#六-、总结" class="headerlink" title="六 、总结"></a>六 、总结</h4><p>要使得模块正常导入，要保证模块自身或上层所属的路径要存在与sys.path中，这样解释器根据sys.path就能够搜索到对应的模块，然后导入。<br>如果要调用的模块并不在sys.path中，应该手动向sys.path中追加模块路径。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 获取环境变量</title>
    <link href="/2021/09/02/Python%20%E8%8E%B7%E5%8F%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2021/09/02/Python%20%E8%8E%B7%E5%8F%96%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<p>使用os模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br>res:t.<span class="hljs-type">Dict</span>[<span class="hljs-built_in">str</span>, <span class="hljs-built_in">str</span>] = os.environ<br></code></pre></td></tr></table></figure><p>os.environ返回的是dict类型对象，之后可以使用dict相关方法操作环境变量。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>开放地址法和链表法的优缺点比较：</title>
    <link href="/2021/08/26/%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80%E6%B3%95%E5%92%8C%E9%93%BE%E8%A1%A8%E6%B3%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83/"/>
    <url>/2021/08/26/%E5%BC%80%E6%94%BE%E5%9C%B0%E5%9D%80%E6%B3%95%E5%92%8C%E9%93%BE%E8%A1%A8%E6%B3%95%E7%9A%84%E4%BC%98%E7%BC%BA%E7%82%B9%E6%AF%94%E8%BE%83/</url>
    
    <content type="html"><![CDATA[<h4 id="一-、开放寻址法"><a href="#一-、开放寻址法" class="headerlink" title="一 、开放寻址法"></a><strong>一 、开放寻址法</strong></h4><p><strong>开放寻址法优点：</strong></p><p>1.开放寻址法基于数组实现，可以利用CPU的cache_line,一次性缓存64字节，可以加快查询的速度。  </p><p>2.数组进行序列化比较简单。  </p><p><strong>开放寻址法缺点：</strong>  </p><p>1.数组相对于链表来说，不能动态申请内存，所以在面对数据量不确定的情况下，会更加浪费内存空间。  </p><p>2.在开发寻址法中，需要逻辑假删数据，否则会导致其他的数据无法散列到对应的槽位上。  </p><p>3.装填因子不能过大，因为数组相对于链表法来说，冲突的可能性更大。  </p><p><strong>因此开放寻址法适合数据量不大，装填因子小的时候。</strong></p><h4 id="二、-链表法："><a href="#二、-链表法：" class="headerlink" title="二、 链表法："></a><strong>二、 链表法：</strong></h4><p><strong>链表法优点：</strong></p><p>1.链表法中装填因子可以大于1，只要元素均匀地散列到不同的桶中。冲突的可能性要比开放寻址法要小。   </p><p>2.链表可以动态的申请内存空间，无需像数组在一开始就要申请足够的内存空间。  </p><p><strong>链表法缺点：</strong></p><p>1.链表的内存地址在内存中是随机分布的，不一定是连续分配，因此无法像数组可以利用CPU缓存加快查找速度，对CPU缓存不友好。  </p><p>2.链表中每个结点存在指针，指针大小一般为4B或者8B，如果单个节点的数据域小于等于指针大小，那么内存将会翻倍增长。但如果数据域本身远大于指针大小，那么指针大小整个内存使用空间来说旧不那么重要了。  </p><p><strong>因此链表法适合处理大数据量，存储大对象的散列表。</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中类型检查汇总</title>
    <link href="/2021/08/05/Python%E4%B8%AD%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E6%B1%87%E6%80%BB/"/>
    <url>/2021/08/05/Python%E4%B8%AD%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<p><code>import typing as t</code></p><p>1.<code>t.Callable[[arg1, arg2], return_value]</code>，用于标注该参数是可回调的。</p><p>2.<code>t.Union[type1, type2, type3]</code>，作为联合类型，用于标注该参数允许接受的类型</p><p>3.<code>t.Union[arg1, None] 和 t.Optional[arg1]</code>等价。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LocalProxy代理对象的源码分析</title>
    <link href="/2021/08/04/LocalProxy%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2021/08/04/LocalProxy%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="一、-源码分析"><a href="#一、-源码分析" class="headerlink" title="一、 源码分析"></a>一、 源码分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LocalProxy</span>:</span><br>    __slots__ = (<span class="hljs-string">&quot;__local&quot;</span>, <span class="hljs-string">&quot;__name&quot;</span>, <span class="hljs-string">&quot;__wrapped__&quot;</span>)<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">        self,</span></span><br><span class="hljs-function"><span class="hljs-params">        local: t.<span class="hljs-type">Union</span>[<span class="hljs-string">&quot;Local&quot;</span>, t.<span class="hljs-type">Callable</span>[[], t.<span class="hljs-type">Any</span>]],</span></span><br><span class="hljs-function"><span class="hljs-params">        name: t.<span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    </span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-built_in">object</span>.__setattr__(self, <span class="hljs-string">&quot;_LocalProxy__local&quot;</span>, local)<br>        <span class="hljs-built_in">object</span>.__setattr__(self, <span class="hljs-string">&quot;_LocalProxy__name&quot;</span>, name)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">callable</span>(local) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(local, <span class="hljs-string">&quot;__release_local__&quot;</span>):<br><br>            <span class="hljs-built_in">object</span>.__setattr__(self, <span class="hljs-string">&quot;__wrapped__&quot;</span>, local)<br>            <br> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_current_object</span>(<span class="hljs-params">self</span>) -&gt; t.<span class="hljs-type">Any</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        获取在代理背后的真实属性，同样从对应线程id处进行获取</span><br><span class="hljs-string">        可以通过</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self.__local, <span class="hljs-string">&quot;__release_local__&quot;</span>):  <br>            <span class="hljs-keyword">return</span> self.__local() <br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self.__local, self.__name) <br>        <span class="hljs-keyword">except</span> AttributeError:<br>            <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">f&quot;no object bound to <span class="hljs-subst">&#123;self.__name&#125;</span>&quot;</span>) <br>            <br>            <br>            <br>    __doc__ = _ProxyLookup(  <span class="hljs-comment"># type: ignore</span><br>        class_value=__doc__, fallback=<span class="hljs-keyword">lambda</span> self: <span class="hljs-built_in">type</span>(self).__doc__<br>    )<br>    <span class="hljs-comment"># __del__ should only delete the proxy</span><br>    __repr__ = _ProxyLookup(  <span class="hljs-comment"># type: ignore</span><br>        <span class="hljs-built_in">repr</span>, fallback=<span class="hljs-keyword">lambda</span> self: <span class="hljs-string">f&quot;&lt;<span class="hljs-subst">&#123;<span class="hljs-built_in">type</span>(self).__name__&#125;</span> unbound&gt;&quot;</span><br>    )<br>    __str__ = _ProxyLookup(<span class="hljs-built_in">str</span>)  <span class="hljs-comment"># type: ignore</span><br>    __bytes__ = _ProxyLookup(<span class="hljs-built_in">bytes</span>)<br>    __format__ = _ProxyLookup()  <span class="hljs-comment"># type: ignore</span><br>    __lt__ = _ProxyLookup(operator.lt)<br>    __le__ = _ProxyLookup(operator.le)<br>    __eq__ = _ProxyLookup(operator.eq)  <span class="hljs-comment"># type: ignore</span><br>    __ne__ = _ProxyLookup(operator.ne)  <span class="hljs-comment"># type: ignore</span><br>    __gt__ = _ProxyLookup(operator.gt)<br></code></pre></td></tr></table></figure><p>1.使用<code>__slots__</code>机制，实例化对象时，不为对象生成<code>__dict__</code>的属性空间，将<code>__slots__</code>中指定的元素构建成一个元组。减少创建对象产生的内存空间，固定对象中的属性值，使之在运行过程中不能被修改，不能添加新的属性。</p><p>2.<code>__init__</code>函数中可以接受local和name，local可以Local的实例，也可以是函数；作为函数，例如在globals.py中定义的partial”冰冻”函数（其目的是从stack获取栈顶元素—AppContext或RequestContext，返回Local实例中的某个属性)。</p><p>3.Python中的双前导下划线是为了避免与子类定义的名称冲突。</p><p>4._get_current_object方法，通过反射读取<code>__local</code>中是否有释放Local实例中资源的属性或方法，如果没有，则说明<code>__local</code>并不是Local实例，而是一个可回调的对象；反之，从<code>__local</code>中获取对应当前线程属性空间下的属性值。</p><p>5._ProxyLookup类是一个描述器，根据类名，可以大致推测用于搜寻被代理对象中的属性的，接下来通过源码来学习它是如何搜寻被代理对象中的属性的。源码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">_ProxyLookup</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;Descriptor that handles proxied attribute lookup for</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    __slots__ = (<span class="hljs-string">&quot;bind_f&quot;</span>, <span class="hljs-string">&quot;fallback&quot;</span>, <span class="hljs-string">&quot;class_value&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">        self,</span></span><br><span class="hljs-function"><span class="hljs-params">        f: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Callable</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        fallback: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Callable</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        class_value: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Any</span>] = <span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    </span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        bind_f: t.<span class="hljs-type">Optional</span>[t.<span class="hljs-type">Callable</span>[[<span class="hljs-string">&quot;LocalProxy&quot;</span>, t.<span class="hljs-type">Any</span>], t.<span class="hljs-type">Callable</span>]]<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(f, <span class="hljs-string">&quot;__get__&quot;</span>):<br>            <span class="hljs-comment"># A Python function, can be turned into a bound method.</span><br><br>            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bind_f</span>(<span class="hljs-params">instance: <span class="hljs-string">&quot;LocalProxy&quot;</span>, obj: t.<span class="hljs-type">Any</span></span>) -&gt; t.<span class="hljs-type">Callable</span>:</span><br>                <span class="hljs-keyword">return</span> f.__get__(obj, <span class="hljs-built_in">type</span>(obj))  <span class="hljs-comment"># type: ignore</span><br><br>        <span class="hljs-keyword">elif</span> f <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-comment"># A C function, use partial to bind the first argument.</span><br><br>            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bind_f</span>(<span class="hljs-params">instance: <span class="hljs-string">&quot;LocalProxy&quot;</span>, obj: t.<span class="hljs-type">Any</span></span>) -&gt; t.<span class="hljs-type">Callable</span>:</span><br>                <span class="hljs-keyword">return</span> partial(f, obj)  <span class="hljs-comment"># type: ignore</span><br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># Use getattr, which will produce a bound method.</span><br>            bind_f = <span class="hljs-literal">None</span><br><br>        self.bind_f = bind_f<br>        self.fallback = fallback<br>        self.class_value = class_value<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__set_name__</span>(<span class="hljs-params">self, owner: <span class="hljs-string">&quot;LocalProxy&quot;</span>, name: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        self.name = name<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get__</span>(<span class="hljs-params">self, instance: <span class="hljs-string">&quot;LocalProxy&quot;</span>, owner: t.<span class="hljs-type">Optional</span>[<span class="hljs-built_in">type</span>] = <span class="hljs-literal">None</span></span>) -&gt; t.<span class="hljs-type">Any</span>:</span><br>        <span class="hljs-keyword">if</span> instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> self.class_value <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> self.class_value<br><br>            <span class="hljs-keyword">return</span> self<br><br>        <span class="hljs-keyword">try</span>:<br>            obj = instance._get_current_object()<br>        <span class="hljs-keyword">except</span> RuntimeError:<br>            <span class="hljs-keyword">if</span> self.fallback <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">raise</span><br><br>            <span class="hljs-keyword">return</span> self.fallback.__get__(instance, owner)  <span class="hljs-comment"># type: ignore</span><br><br>        <span class="hljs-keyword">if</span> self.bind_f <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self.bind_f(instance, obj)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(obj, self.name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;proxy <span class="hljs-subst">&#123;self.name&#125;</span>&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, instance: <span class="hljs-string">&quot;LocalProxy&quot;</span>, *args: t.<span class="hljs-type">Any</span>, **kwargs: t.<span class="hljs-type">Any</span></span>) -&gt; t.<span class="hljs-type">Any</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;Support calling unbound methods from the class. For example,</span><br><span class="hljs-string">        this happens with ``copy.copy``, which does</span><br><span class="hljs-string">        ``type(x).__copy__(x)``. ``type(x)`` can&#x27;t be proxied, so it</span><br><span class="hljs-string">        returns the proxy type and descriptor.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.__get__(instance, <span class="hljs-built_in">type</span>(instance))(*args, **kwargs)<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>由于类中存在<code>__get__</code>和<code>__set_name</code>方法，我们可以很快推断出这是一个描述器，描述器所要做的事情是控制我们访问方法和实例的属性。而这个类的作用为我们提供了访问被代理对象Local实例中当前线程属性字典中的相关属性。</p><hr><p>以<code>__str__ = _ProxyLookup(str) </code>为例具体说明下执行逻辑。</p><p>当我们要打印一个属性值时<code>print(attribute)</code>,如果定义了<code>__str__</code>方法时，会先调用该方法，然后就会调用<code>_ProxyLookup</code>中的<code>__call__</code>方法。在<code>__call__</code>方法中会调用了<code>__get__</code>方法，其中传入<code>__get__</code>方法的instance为<code>self</code>，即<code>LocalProxy</code>的实例对象。进而进入<code>__get__</code>代码段中，通过<code>instance._get_current_object()</code>获取到对象，然后利用反射机制，获取Local实例中当前线程属性字典中相对应(self.name)的属性。</p><hr><h3 id="二、-总结"><a href="#二、-总结" class="headerlink" title="二、 总结"></a>二、 总结</h3><p>1.从LocalProxy角度来看，代理模式带来的好处是简化属性访问的复杂性，原本Local对象的数据结构很复杂，包含了多层字典嵌套。使用了代理模式提供了统一的数据访问接口去访问底层的复杂数据。<br>2.之前跟女朋友一起学习时，看过Vue3.0的响应式原理，以computed为例，computed的函数中就使用了代理对象做了一层拦截，实现依赖收集和派发通知操作，实现函数延迟调用和访问缓存旧数据，当新数据更新了，重新执行runner方法并派发通知，通知watcher去触发组件的重新渲染。<br>3.代理模式总的来说在调用和被调用方之间做了一层拦截，拦截到后做额外的操作，是不是非常的方便呢？</p>]]></content>
    
    
    <categories>
      
      <category>Flask</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git命令的使用</title>
    <link href="/2021/07/12/Git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/07/12/Git%E5%91%BD%E4%BB%A4%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="Git命令大全"><a href="#Git命令大全" class="headerlink" title="Git命令大全"></a>Git命令大全</h3><h4 id="一-git-log相关"><a href="#一-git-log相关" class="headerlink" title="一   git log相关"></a>一   git log相关</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -n4 --oneline <span class="hljs-comment"># 列表方式前4个查看版本</span><br>git <span class="hljs-built_in">log</span> --all  <span class="hljs-comment"># 查看所有log</span><br>git <span class="hljs-built_in">log</span> --graph  <span class="hljs-comment"># 树形展示分支关系</span><br></code></pre></td></tr></table></figure><p>​    </p><hr><h4 id="二-git-文件中相关内容"><a href="#二-git-文件中相关内容" class="headerlink" title="二  .git 文件中相关内容"></a>二  .git 文件中相关内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># refs文件夹中存放标签和分支信息</span><br>[syz@syz-x542un refs]$ <span class="hljs-built_in">cd</span> heads/<br>[syz@syz-x542un heads]$ <span class="hljs-built_in">pwd</span><br>/home/syz/TestGit/firstProject/.git/refs/heads<br>[syz@syz-x542un heads]$ ls -l<br>总用量 12<br>-rw-r--r-- 1 syz syz 41  6月 21 17:05 master<br>-rw-r--r-- 1 syz syz 41  6月 21 17:08 temp<br>-rw-r--r-- 1 syz syz 41  6月 21 17:11 temp2<br>[syz@syz-x542un heads]$ cat master<br>068a96580597b8fff9395a1a46448f700da14fa4  <span class="hljs-comment"># 存放的对象，commit 类型</span><br>[syz@syz-x542un heads]$ git cat-file -t 068a96580597b8<br>commit<br>[syz@syz-x542un heads]$ git branch -v<br>* master 068a965 mv test2.java test2.py<br>  temp   068a965 mv test2.java test2.py<br>  temp2  93eeff6 temp2<br><br><br><span class="hljs-comment"># objects文件夹存放存储的tree对象</span><br>[syz@syz-x542un objects]$ ls -l<br>总用量 44<br>drwxr-xr-x 2 syz syz 4096  6月 21 17:05 06<br>drwxr-xr-x 2 syz syz 4096  6月 21 16:59 27<br>drwxr-xr-x 2 syz syz 4096  6月 21 17:11 2a<br>drwxr-xr-x 2 syz syz 4096  6月 21 17:00 49<br>drwxr-xr-x 2 syz syz 4096  6月 21 16:59 53<br>drwxr-xr-x 2 syz syz 4096  6月 21 16:50 69<br>drwxr-xr-x 2 syz syz 4096  6月 21 17:11 93<br>drwxr-xr-x 2 syz syz 4096  6月 21 16:50 d4<br>drwxr-xr-x 2 syz syz 4096  6月 21 17:00 e6<br>drwxr-xr-x 2 syz syz 4096  6月 21 16:47 info<br>drwxr-xr-x 2 syz syz 4096  6月 21 16:47 pack<br>[syz@syz-x542un 53]$ git cat-file -t 538d130e0f677391965a8b90b5b11284756af6ef<br>tree<br>[syz@syz-x542un 53]$ git cat-file -p 538d130e0f677391965a8b90b5b11284756af6ef<br>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    test1.txt<br>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    test2.py<br><br><br><span class="hljs-comment"># blob文件对象</span><br>[syz@syz-x542un 53]$ git cat-file -t e69de29bb2d1d6434b<br>blob<br></code></pre></td></tr></table></figure><hr><h4 id="三-Commit，-Tree，-Blog之间的关系"><a href="#三-Commit，-Tree，-Blog之间的关系" class="headerlink" title="三  Commit， Tree， Blog之间的关系"></a>三  Commit， Tree， Blog之间的关系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash">[syz@syz-x542un firstProject]$ git <span class="hljs-built_in">log</span><br>commit 068a96580597b8fff9395a1a46448f700da14fa4 (HEAD -&gt; master, temp)<br>Author: test-zjw &lt;test-zjw@163.com&gt;<br>Date:   Mon Jun 21 17:05:04 2021 +0800<br><br>    mv test2.java test2.py<br><br>commit 4916b3b59f291596afaa62ce02f089f86cc77699<br>Author: test-zjw &lt;test-zjw@163.com&gt;<br>Date:   Mon Jun 21 17:00:36 2021 +0800<br><br>    modify<br><br>commit 270c9942257de016045c690b0b42b9bbe79a3403<br>Author: test-zjw &lt;test-zjw@163.com&gt;<br>Date:   Mon Jun 21 16:59:41 2021 +0800<br><br>    upload-sec<br><br>commit d429c42c9c0973e353e4717d9dc9cbcd98c43fab<br>Author: test-zjw &lt;test-zjw@163.com&gt;<br>Date:   Mon Jun 21 16:50:33 2021 +0800<br><br>    first-upload<br>[syz@syz-x542un firstProject]$ git cat-file -t 068a96580597b8fff<br>commit<br>[syz@syz-x542un firstProject]$ git cat-file -p 068a96580597b8fff<br>tree 538d130e0f677391965a8b90b5b11284756af6ef<br>parent 4916b3b59f291596afaa62ce02f089f86cc77699<br>author test-zjw &lt;test-zjw@163.com&gt; 1624266304 +0800<br>committer test-zjw &lt;test-zjw@163.com&gt; 1624266304 +0800<br><br>mv test2.java test2.py<br>[syz@syz-x542un firstProject]$ git cat-file -p 538d130e0f677391965a8b90b5b11284756af6ef<br>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    test1.txt<br>100644 blob e69de29bb2d1d6434b8b29ae775ad8c2e48c5391    test2.py<br>[syz@syz-x542un firstProject]$ git cat-file -p e69de29bb2d1d6434b8b29ae775ad8c2e48c5391<br><br></code></pre></td></tr></table></figure><hr><h4 id="四-分离头指针"><a href="#四-分离头指针" class="headerlink" title="四  分离头指针"></a>四  分离头指针</h4><p><strong>分离头指针</strong>：使用git branch + commit对象id 来创建产生，表示没有绑定任何分支，一旦切换到其他分支进行操作，那么在分离头指针分支上的一切操作将会被丢失。如果分离头指针上的操作不重要，可以使用;如果重要，则需要将分离头指针分支绑定分支，使用git branch <branch_name> 525e14a。</p><hr><h4 id="五-HEAD-用法"><a href="#五-HEAD-用法" class="headerlink" title="五  HEAD 用法"></a>五  HEAD 用法</h4><p>当前分支可以通过 <code>cat .git/HEAD</code>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 比较任意两次commit之间的文件内容差异</span><br>git diff HEAD HEAD~1  <span class="hljs-comment"># 当前版本与前一个版本比较</span><br>git diff HEAD HEAD~2  <span class="hljs-comment"># 当前版本与前两个版本比较</span><br>git dif  HEAD HEAD^   <span class="hljs-comment"># 当前版本与前一个版本比较</span><br></code></pre></td></tr></table></figure><hr><h4 id="六-删除分支"><a href="#六-删除分支" class="headerlink" title="六  删除分支"></a>六  删除分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -d &lt;branch_name&gt;<br>git branch -D &lt;branch_name&gt;  <span class="hljs-comment"># 如果分支存在待merge问题</span><br></code></pre></td></tr></table></figure><hr><h4 id="七-修改新旧commit的comment"><a href="#七-修改新旧commit的comment" class="headerlink" title="七  修改新旧commit的comment"></a>七  修改新旧commit的comment</h4><p>1.直接修改最新的commit的提交说明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit --amend  <br></code></pre></td></tr></table></figure><p>2.修改之前的commit提交声明</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs bash">[syz@syz-x542un firstProject]$ git <span class="hljs-built_in">log</span><br>commit e7209e40de9b50335999e2cbbcc9bf6cdc5f8f5e (HEAD -&gt; ReadMe)<br>Author: test-zjw &lt;test-zjw@163.com&gt;<br>Date:   Mon Jun 21 18:08:11 2021 +0800<br><br>    你好<br><br>commit 270c9942257de016045c690b0b42b9bbe79a3403<br>Author: test-zjw &lt;test-zjw@163.com&gt;<br>Date:   Mon Jun 21 16:59:41 2021 +0800<br><br>    upload-sec<br><br>commit d429c42c9c0973e353e4717d9dc9cbcd98c43fab<br>Author: test-zjw &lt;test-zjw@163.com&gt;<br>Date:   Mon Jun 21 16:50:33 2021 +0800<br><br>    first-upload<br><br><span class="hljs-comment"># 变基操作， 现在要变更第二次提交的comment</span><br>git rebase -i d429c42c9c0973e353e4717d9dc9cbcd98c43fab <span class="hljs-comment"># commit的id为父commit的id</span><br><br>----<br>r f7583c6 upload-sec  <span class="hljs-comment"># 表示要修改提交说明</span><br>pick 366ce80 你好<br><br><span class="hljs-comment"># 变基 d429c42..366ce80 到 d429c42（2 个提交）</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 命令:</span><br><span class="hljs-comment"># p, pick &lt;提交&gt; = 使用提交</span><br><span class="hljs-comment"># r, reword &lt;提交&gt; = 使用提交，但修改提交说明</span><br><span class="hljs-comment"># e, edit &lt;提交&gt; = 使用提交，进入 shell 以便进行提交修补</span><br><span class="hljs-comment"># s, squash &lt;提交&gt; = 使用提交，但融合到前一个提交</span><br><span class="hljs-comment"># f, fixup &lt;提交&gt; = 类似于 &quot;squash&quot;，但丢弃提交说明日志</span><br><span class="hljs-comment"># x, exec &lt;命令&gt; = 使用 shell 运行命令（此行剩余部分）</span><br><span class="hljs-comment"># b, break = 在此处停止（使用 &#x27;git rebase --continue&#x27; 继续变基）</span><br><span class="hljs-comment"># d, drop &lt;提交&gt; = 删除提交</span><br><span class="hljs-comment"># l, label &lt;label&gt; = 为当前 HEAD 打上标记</span><br><span class="hljs-comment"># t, reset &lt;label&gt; = 重置 HEAD 到该标记</span><br><span class="hljs-comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span><br><span class="hljs-comment"># .       创建一个合并提交，并使用原始的合并提交说明（如果没有指定</span><br><span class="hljs-comment"># .       原始提交，使用注释部分的 oneline 作为提交说明）。使用</span><br><span class="hljs-comment"># .       -c &lt;提交&gt; 可以编辑提交说明。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 可以对这些行重新排序，将从上至下执行。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 如果您在这里删除一行，对应的提交将会丢失。</span><br><br>---<br>upload-sec修改后  <span class="hljs-comment"># 变更提交说明</span><br><br><span class="hljs-comment"># 请为您的变更输入提交说明。以 &#x27;#&#x27; 开始的行将被忽略，而一个空的提交</span><br><span class="hljs-comment"># 说明将会终止提交。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 日期：  Mon Jun 21 16:59:41 2021 +0800</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 交互式变基操作正在进行中；至 d429c42</span><br><span class="hljs-comment"># 最后一条命令已完成（1 条命令被执行）：</span><br><span class="hljs-comment">#    reword 2e3fd8e upload-sec</span><br><span class="hljs-comment"># 接下来要执行的命令（剩余 1 条命令）：</span><br><span class="hljs-comment">#    pick 17be3e4 你好</span><br><span class="hljs-comment"># 您在执行将分支 &#x27;ReadMe&#x27; 变基到 &#x27;d429c42&#x27; 的操作时编辑提交。</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 要提交的变更：</span><br><span class="hljs-comment">#       新文件：   test2.py</span><br><br>---<br>[syz@syz-x542un firstProject]$ git rebase -i d429c42c9c0973e353e4717d9dc9cbcd98c43fab<br>[分离头指针 2e3fd8e] upload-sec修改后<br> Date: Mon Jun 21 16:59:41 2021 +0800<br> 1 file changed, 0 insertions(+), 0 deletions(-)<br> create mode 100644 test2.py<br>成功变基并更新 refs/heads/ReadMe。<br><br></code></pre></td></tr></table></figure><p><strong>注意：变基之后对应commit的对象变了</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 之前的</span><br>[syz@syz-x542un firstProject]$ git <span class="hljs-built_in">log</span> --graph<br>* commit f557ca2e46bbd4b17d4b7a88074ca8f37242a902 (HEAD -&gt; ReadMe)<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:08:11 2021 +0800<br>| <br>|     你好<br>| <br>* commit 986dec82560734e808df9c87ade6eac009064280<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 16:59:41 2021 +0800<br>| <br>|     upload-sec修改后<br>| <br><br><br><span class="hljs-comment"># 现在的</span><br>[syz@syz-x542un firstProject]$ git <span class="hljs-built_in">log</span> -n3 --graph<br>* commit 366ce80788b55b99b9f4d6cbc7b2756cb5df9588 (HEAD -&gt; ReadMe)<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:08:11 2021 +0800<br>| <br>|     你好<br>| <br>* commit f7583c6e32840aebb0026aea5054c68913fd99fd<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 16:59:41 2021 +0800<br>| <br>|     upload-sec666<br><br></code></pre></td></tr></table></figure><hr><h4 id="八-多个连续的commit合成1个commit"><a href="#八-多个连续的commit合成1个commit" class="headerlink" title="八  多个连续的commit合成1个commit"></a>八  多个连续的commit合成1个commit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">* commit 9a7846963d226bbc60f75bc162ad04009951264c (HEAD -&gt; ReadMe)<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:58:27 2021 +0800<br>| <br>|     commit 4.txt<br>| <br>* commit 30308d21324fc6c286768f4e8a01304eac6aadac<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:58:16 2021 +0800<br>| <br>|     commit 3.txt<br>| <br>* commit a309f87da9c4315e6911f621cca6192fd775b975<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:58:05 2021 +0800<br>| <br>|     commit 2.txt<br>| <br>* commit cff9ea3c76588c81b3bda0997d33f57c140efb1d<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:57:52 2021 +0800<br>| <br>|     commit 1.txt<br>| <br>* commit e70b5f67e9f759e7edfaa0edbd5105c7c689f843<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:08:11 2021 +0800<br>| <br>|     你好<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong>假设我要合并最近的四个commit，所以使用<code>git rebase -i e70b5f67e9f759e7edfaa0edbd5105c7c689f843</code>，保留第一个commit，选择pick，其他的需要合并的使用squash融合为前一个提交。保存后，进入交互界面，再添加融合后的注释，保存退出即可。</p><p><strong>结果如下：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">[syz@syz-x542un firstProject]$ git rebase -i e70b5f67e9f759e7edfaa0edbd5105c7c689f843<br>[分离头指针 c4d4020] 四和一 commit 1.txt commit 2.txt commit 3.txt<br> Date: Mon Jun 21 18:57:52 2021 +0800<br> 4 files changed, 0 insertions(+), 0 deletions(-)<br> create mode 100644 1.txt<br> create mode 100644 2.txt<br> create mode 100644 3.txt<br> create mode 100644 4.txt<br>成功变基并更新 refs/heads/ReadMe。<br>[syz@syz-x542un firstProject]$ git <span class="hljs-built_in">log</span> --graph<br>* commit c4d4020f9fb2e69d190874c7ed6aa8f874e563b1 (HEAD -&gt; ReadMe)<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:57:52 2021 +0800<br>| <br>|     四和一<br>|     commit 1.txt<br>|     commit 2.txt<br>|     commit 3.txt<br>|     <br>|     commit 4.txt<br>| <br>* commit e70b5f67e9f759e7edfaa0edbd5105c7c689f843<br>| Author: test-zjw &lt;test-zjw@163.com&gt;<br>| Date:   Mon Jun 21 18:08:11 2021 +0800<br>| <br>|     你好<br><br></code></pre></td></tr></table></figure><hr><h4 id="九-比较暂存区和HEAD的文件内容的差异"><a href="#九-比较暂存区和HEAD的文件内容的差异" class="headerlink" title="九  比较暂存区和HEAD的文件内容的差异"></a>九  比较暂存区和HEAD的文件内容的差异</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff --cached  <span class="hljs-comment"># 比较暂存区和HEAD的差别</span><br>git diff [file]  <span class="hljs-comment"># 比较指定文件工作区和暂存区的区别</span><br></code></pre></td></tr></table></figure><hr><h4 id="十-撤销暂存区，使之修改的内容处于工作区"><a href="#十-撤销暂存区，使之修改的内容处于工作区" class="headerlink" title="十  撤销暂存区，使之修改的内容处于工作区"></a>十  撤销暂存区，使之修改的内容处于工作区</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD<br>git diff --cached  <span class="hljs-comment"># 如果为空，则表示恢复成功</span><br>git diff <span class="hljs-comment"># 可以看到工作区和暂存区的区别</span><br></code></pre></td></tr></table></figure><hr><h4 id="十一-取消工作区，恢复和暂存区一样的内容"><a href="#十一-取消工作区，恢复和暂存区一样的内容" class="headerlink" title="十一  取消工作区，恢复和暂存区一样的内容"></a>十一  取消工作区，恢复和暂存区一样的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout [file_name]  <span class="hljs-comment"># 利用checkout命令</span><br></code></pre></td></tr></table></figure><hr><h4 id="十二-丢失最近的几次提交"><a href="#十二-丢失最近的几次提交" class="headerlink" title="十二  丢失最近的几次提交"></a>十二  丢失最近的几次提交</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset --hard 2c67af04f8 <br></code></pre></td></tr></table></figure><hr><h4 id="十三-紧急修复bug，git-stash暂存当前工作区"><a href="#十三-紧急修复bug，git-stash暂存当前工作区" class="headerlink" title="十三  紧急修复bug，git stash暂存当前工作区"></a>十三  紧急修复bug，git stash暂存当前工作区</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[syz@syz-x542un firstProject]</span>$ git stash<br>保存工作目录和索引状态 WIP on ReadMe: <span class="hljs-number">3488691</span> upload<br><br><span class="hljs-selector-attr">[syz@syz-x542un firstProject]</span>$ git stash pop<br>删除 <span class="hljs-number">2</span>.txt<br>位于分支 ReadMe<br>尚未暂存以备提交的变更：<br>  （使用 <span class="hljs-string">&quot;git add/rm &lt;文件&gt;...&quot;</span> 更新要提交的内容）<br>  （使用 <span class="hljs-string">&quot;git restore &lt;文件&gt;...&quot;</span> 丢弃工作区的改动）<br>        修改：     <span class="hljs-number">1</span>.txt<br>        删除：     <span class="hljs-number">2</span>.txt<br><br>修改尚未加入提交（使用 <span class="hljs-string">&quot;git add&quot;</span> 和/或 <span class="hljs-string">&quot;git commit -a&quot;</span>）<br>丢弃了 refs/stash@&#123;<span class="hljs-number">0</span>&#125;（<span class="hljs-number">640843</span>f47be8b1e7eb8db9b7f8741dd3eb68f57d）<br></code></pre></td></tr></table></figure><p><strong><code>git stash apply</code> 和 <code>git stash pop</code> 的区别是：</strong></p><p>使用<code>git stash apply</code>恢复工作区并且stash 栈中还存在stash 记录， 而使用<code>git stash pop</code> 恢复工作区后stash栈中不再有stash记录了。</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用axios时，添加自定义的headers字段，出现跨域的解决方案</title>
    <link href="/2021/05/03/%E4%BD%BF%E7%94%A8axios%E6%97%B6%EF%BC%8C%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84headers%E5%AD%97%E6%AE%B5%EF%BC%8C%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/05/03/%E4%BD%BF%E7%94%A8axios%E6%97%B6%EF%BC%8C%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84headers%E5%AD%97%E6%AE%B5%EF%BC%8C%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一.  背景"></a><strong>一.  背景</strong></h3><p>在做毕设时，总会遇到新的问题，这不，它又来了，这次的需求是在发送GET请求时，为了确保用户具有发送该API的权限，需要在headers头部中增加一个permission字段便于后端校验。</p><p>如下是vue中使用axios发送请求，并在headers中添加permission字段。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> res = <span class="hljs-keyword">await</span> <span class="hljs-built_in">this</span>.$http.get(<span class="hljs-string">&#x27;/seller/chsc/apis/commodity/&#x27;</span>, &#123;<br>        headers: &#123; <span class="hljs-attr">Permission</span>: <span class="hljs-built_in">this</span>.permission &#125;,<br>      &#125;)<br></code></pre></td></tr></table></figure><hr><h3 id="二-问题"><a href="#二-问题" class="headerlink" title="二  问题"></a><strong>二  问题</strong></h3><p>刷新浏览器，芜湖～，飘了3条红，仔细一看，发现是跨域处出现了问题, 错误原因是因为permissions不被Access-Control-Allow-Headers所允许，由于Access-Control-Allow-Headers出现在响应体中，所以由后端来定义。故而，只需要修改后端的代码即可。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/headers%E4%B8%AD%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%97%E6%AE%B5%E5%87%BA%E7%8E%B0%E8%B7%A8%E5%9F%9F%E9%94%99%E8%AF%AF.png">{width=90%}</p><hr><h3 id="三-解决方法"><a href="#三-解决方法" class="headerlink" title="三  解决方法"></a><strong>三  解决方法</strong></h3><p>我后端开发采用Django，使用了CorsMiddleware中间件，进入CorsMiddleware源码，在<code>process_response</code>函数中可以看到响应的响应头部字段的设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_response</span>(<span class="hljs-params">self, request, response</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Add the respective CORS headers</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    enabled = <span class="hljs-built_in">getattr</span>(request, <span class="hljs-string">&quot;_cors_enabled&quot;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">if</span> enabled <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        enabled = self.is_enabled(request)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> enabled:<br>        <span class="hljs-keyword">return</span> response<br><br>    patch_vary_headers(response, [<span class="hljs-string">&quot;Origin&quot;</span>])<br><br>    origin = request.META.get(<span class="hljs-string">&quot;HTTP_ORIGIN&quot;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> origin:<br>        <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-comment"># todo: check hostname from db instead</span><br>    url = urlparse(origin)<br><br>    <span class="hljs-keyword">if</span> conf.CORS_ALLOW_CREDENTIALS:<br>        response[ACCESS_CONTROL_ALLOW_CREDENTIALS] = <span class="hljs-string">&quot;true&quot;</span><br><br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-keyword">not</span> conf.CORS_ALLOW_ALL_ORIGINS<br>        <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.origin_found_in_white_lists(origin, url)<br>        <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.check_signal(request)<br>    ):<br>        <span class="hljs-keyword">return</span> response<br><br>    <span class="hljs-keyword">if</span> conf.CORS_ALLOW_ALL_ORIGINS <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> conf.CORS_ALLOW_CREDENTIALS:<br>        response[ACCESS_CONTROL_ALLOW_ORIGIN] = <span class="hljs-string">&quot;*&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        response[ACCESS_CONTROL_ALLOW_ORIGIN] = origin<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(conf.CORS_EXPOSE_HEADERS):<br>        response[ACCESS_CONTROL_EXPOSE_HEADERS] = <span class="hljs-string">&quot;, &quot;</span>.join(<br>            conf.CORS_EXPOSE_HEADERS<br>        )<br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;OPTIONS&quot;</span>:<br>        response[ACCESS_CONTROL_ALLOW_HEADERS] = <span class="hljs-string">&quot;, &quot;</span>.join(conf.CORS_ALLOW_HEADERS)<br>        response[ACCESS_CONTROL_ALLOW_METHODS] = <span class="hljs-string">&quot;, &quot;</span>.join(conf.CORS_ALLOW_METHODS)<br>        <span class="hljs-keyword">if</span> conf.CORS_PREFLIGHT_MAX_AGE:<br>            response[ACCESS_CONTROL_MAX_AGE] = conf.CORS_PREFLIGHT_MAX_AGE<br><br>    <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>由于我们使用axios+跨域，通常无论GET或者POST请求会发送两次。第一次请求是OPTIONS请求，表示询问是否允许跨域，如果允许则发送第二次请求（GET或者POST），其中第一次请求返回的响应体中包含了允许跨域的请求头，请求方法和请求源，请求最大生存时间等，第二次请求只有都满足第一次请求响应体中的条件，才会成功发送，否则会产生跨域错误问题。</p><p>我们可以在源码找到这行代码response[ACCESS_CONTROL_ALLOW_HEADERS] = “, “.join(conf.CORS_ALLOW_HEADERS)，我们可以去找到CORS所允许的头部，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">CORS_ALLOW_HEADERS</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(settings, <span class="hljs-string">&quot;CORS_ALLOW_HEADERS&quot;</span>, default_headers)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">default_headers = (<br>    <span class="hljs-string">&quot;accept&quot;</span>,<br>    <span class="hljs-string">&quot;accept-encoding&quot;</span>,<br>    <span class="hljs-string">&quot;authorization&quot;</span>,<br>    <span class="hljs-string">&quot;content-type&quot;</span>,<br>    <span class="hljs-string">&quot;dnt&quot;</span>,<br>    <span class="hljs-string">&quot;origin&quot;</span>,<br>    <span class="hljs-string">&quot;user-agent&quot;</span>,<br>    <span class="hljs-string">&quot;x-csrftoken&quot;</span>,<br>    <span class="hljs-string">&quot;x-requested-with&quot;</span>,<br>)<br></code></pre></td></tr></table></figure><p>如果我们在settings.py文件中没有自己定义<code>CORS_ALLOW_HEADERS</code>元祖，则使用默认的<code>default_headers</code>，为了避免修改框架源码，我们可以自己定义，在<code>CORS_ALLOW_HEADERS</code>元祖中添加<code>permission</code>即可。添加之后，请求可以正常发送。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决Vue修改数组/字典中的元素，却无法检测到数据变化的问题</title>
    <link href="/2021/04/19/%E8%A7%A3%E5%86%B3Vue%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84,%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%8C%E5%8D%B4%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E5%88%B0%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2021/04/19/%E8%A7%A3%E5%86%B3Vue%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84,%E5%AD%97%E5%85%B8%E4%B8%AD%E7%9A%84%E5%85%83%E7%B4%A0%EF%BC%8C%E5%8D%B4%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E5%88%B0%E6%95%B0%E6%8D%AE%E5%8F%98%E5%8C%96%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a>一  背景</h3><p>我在做毕设的项目中，写前端逻辑代码时遇到了一个问题：通过用户click触发一个函数，在函数中根据选中的index，动态修改Map容器中的对应下标的值，以此用不同的class来凸显用户的选择项。实现目标效果图如下图（解决了本篇所要解决的问题后）：</p><p><img src="https://django-e-mall.oss-cn-shanghai.aliyuncs.com/sku-select-problem.png">{width=”50%”}</p><hr><h3 id="二-实现思路"><a href="#二-实现思路" class="headerlink" title="二  实现思路"></a><strong>二  实现思路</strong></h3><p>先说下实现这种样子的思路，首先我在设计后端API的时候，要注意返回的Json数据格式,每一个商品都会有多个sku属性，每个sku属性都会对应多个sku属性值，因此这样关系很清晰，通过1：N外键关系就可以表示。格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><code class="hljs json">...<br>&quot;sku_props&quot;: [<br>        &#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">8</span>,<br>            <span class="hljs-attr">&quot;sku_values&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">19</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;黄色&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">8</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">20</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;白色&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">8</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">21</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;黑色&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">8</span><br>                &#125;<br>            ],<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;颜色&quot;</span>,<br>            <span class="hljs-attr">&quot;commodity&quot;</span>: <span class="hljs-number">32</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">10</span>,<br>            <span class="hljs-attr">&quot;sku_values&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">26</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;小型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">10</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">27</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;中型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">10</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">28</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;大型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">10</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">29</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;特大型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">10</span><br>                &#125;<br>            ],<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;大小&quot;</span>,<br>            <span class="hljs-attr">&quot;commodity&quot;</span>: <span class="hljs-number">32</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">12</span>,<br>            <span class="hljs-attr">&quot;sku_values&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">36</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;小型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">12</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">37</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;中型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">12</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">38</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;大型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">12</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">39</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;特大型&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">12</span><br>                &#125;<br>            ],<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;大小&quot;</span>,<br>            <span class="hljs-attr">&quot;commodity&quot;</span>: <span class="hljs-number">32</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">13</span>,<br>            <span class="hljs-attr">&quot;sku_values&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">40</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;微辣&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">13</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">41</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;中辣&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">13</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">42</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;特辣&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">13</span><br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">43</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;变态辣&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">13</span><br>                &#125;<br>            ],<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;辣度&quot;</span>,<br>            <span class="hljs-attr">&quot;commodity&quot;</span>: <span class="hljs-number">32</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">14</span>,<br>            <span class="hljs-attr">&quot;sku_values&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-number">48</span>,<br>                    <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-string">&quot;12GB&quot;</span>,<br>                    <span class="hljs-attr">&quot;prop&quot;</span>: <span class="hljs-number">14</span><br>                &#125;<br>            ],<br>            <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;内存&quot;</span>,<br>            <span class="hljs-attr">&quot;commodity&quot;</span>: <span class="hljs-number">32</span><br>        &#125;<br>    ],<br>...<br></code></pre></td></tr></table></figure><p>这样，我在vue中通过v-for两次循环遍历即可表示出多个sku属性，每个属性下对应多个sku属性值。</p><hr><p>那么接下来的需求就是用户选择每个sku属性下的属性值，我需要记录下来并高亮标注显示给用户，因此我是采用字典，姑且取个名字，choiceMap，其中key为每个属性的名字，value为选中的值的下标。当用户选择了某项时，choiceMap中对应key的value的下标变化成选中的属性值的下标，然后在template中使用,:class，通过表达式（判断choiceMap[key] === index)是否为真，来增加/消除颜色高亮风格的class。对应代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;div v-for&#x3D;&quot;(values, index) in propsValues&quot; :key&#x3D;&quot;index&quot;&gt;<br>     &lt;div class&#x3D;&quot;prop-name&quot;&gt;&#123;&#123; values.name &#125;&#125;&lt;&#x2F;div&gt;<br>     &lt;van-button<br>       v-for&#x3D;&quot;(value, index) in values.sku_values&quot;<br>       :key&#x3D;&quot;index&quot;<br>       :class&#x3D;&quot;[<br>         &#39;value-btn&#39;,<br>         &#123; &#39;value-btn-choice&#39;: index &#x3D;&#x3D;&#x3D; choiceMap[values.name] &#125;,<br>       ]&quot;<br>       @click&#x3D;&quot;choiceValue(index, values)&quot;&gt;<br>       &#123;&#123; value.value &#125;&#125;<br>     &lt;&#x2F;van-button&gt;<br>     &lt;van-divider&gt;&lt;&#x2F;van-divider&gt;<br>&lt;&#x2F;div&gt;<br><br></code></pre></td></tr></table></figure><p>说明：点击某个属性值，调用<code>choiceValue(index, values)</code>来实现高亮显示。我一开始使用的方式是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">choiceValue</span>(<span class="hljs-params">index, values</span>)</span> &#123;<br>      <span class="hljs-built_in">this</span>.choiceMap[values.name] = index;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.choiceMap)<br>&#125;,<br></code></pre></td></tr></table></figure><p>通过控制台打印发现，数据确实更新了，但是view视图却没有更新，后来我测试了一下数组，发现同样的问题。由于鄙人前端没有深入，因此只得百度搜索解决方案，幸运的是很快找到了解决方法，在仔细阅读别人的博客后，发现了问题所在—–<strong>Vue不能检测到对象的添加或者删除。然而Vue在初始化实例时就对属性执行了setter/getter转化过程，所以属性必须开始就在对象上，这样才能让Vue转化它。</strong> 这句话什么意思呢？别急，我用几个解释以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F; 假设我在实例初始化时在data域中设置元素并进行初始化<br>data() &#123;<br>    return &#123;<br>      testMap:&#123;<br>        &#39;name&#39;:&#39;syz&#39;,<br>        &#39;age&#39;:22<br>      &#125;<br>    &#125;;<br>&#x2F;&#x2F; 测试Dom<br> &lt;van-button @click&#x3D;&quot;test&quot;&gt;&lt;&#x2F;van-button&gt;<br><br>&#x2F;&#x2F; 测试方法<br>    test()&#123;<br>      this.testMap[&#39;name&#39;] &#x3D; &#39;zjw&#39;;      &#x2F;&#x2F; 修改已经存在的键<br>      this.testMap[&#39;hobby&#39;] &#x3D; &#39;coding&#39;;  &#x2F;&#x2F; 对不存在的键设置值 <br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>结果：view视图随着test方法的调用会发生变化，name属性会改变，同时hobby属性也会添加进来,dom元素能够及时响应并更新。</strong></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vue">&#x2F;&#x2F; 将testMap中的name去掉会怎么样呢？<br>data() &#123;<br>    return &#123;<br>      testMap:&#123;<br>        &#39;age&#39;:22<br>      &#125;<br>    &#125;;<br>&#x2F;&#x2F; 测试Dom<br> &lt;van-button @click&#x3D;&quot;test&quot;&gt;&lt;&#x2F;van-button&gt;<br><br>&#x2F;&#x2F; 测试方法<br>    test()&#123;<br>      this.testMap[&#39;name&#39;] &#x3D; &#39;zjw&#39;;      &#x2F;&#x2F; 修改已经存在的键<br>      this.testMap[&#39;hobby&#39;] &#x3D; &#39;coding&#39;;  &#x2F;&#x2F; 创建属性，对不存在的键设置值 <br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>结果：view视图随着test方法的调用不会发生变化，数据会发生变化，但是dom元素并未更新，没有得到响应</strong>。</p><hr><p><strong>分析</strong>：根据上面两个例子，再结合 **”Vue不能检测到对象的添加或者删除。然而Vue在初始化实例时就对属性执行了setter/getter转化过程，所以属性必须开始就在对象上，这样才能让Vue转化它”**这句话来看，由于第一个例子中name属性在vue实例化时就已经执行转化过程，那么后续对访问器的属性进行操作时，会调用响应的方法，例如读取属性值，会调用getter方法，在修改属性值时会调用setter的方法，这样这些方法就会在底层来决定如何更新数据，包括更新DOM。以此来实现单向绑定及双向绑定。</p><hr><h3 id="三-解决方案"><a href="#三-解决方案" class="headerlink" title="三   解决方案"></a><strong>三   解决方案</strong></h3><p>为了能够对未经初始化，为执行setter/getter转化过程的属性修改，同时确保这些属性被创建后是响应式的，触发视图view的更新，可以使用Vue.set(Object, String, Any)方法，它的用法是设置对象的属性，如果该对象在data中定义为响应对象，那么该方法确保该对象的属性被创建后也是响应式的，同时触发视图更新。这个方法就可以避开Vue不能检测属性被添加的限制。</p><p><img src="https://django-e-mall.oss-cn-shanghai.aliyuncs.com/vue-set.png">{width=”100%”}</p><p>所以代码更正为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 选择合适的map项</span><br> <span class="hljs-function"><span class="hljs-title">choiceValue</span>(<span class="hljs-params">index, values</span>)</span> &#123;<br>   <span class="hljs-built_in">this</span>.$set(<span class="hljs-built_in">this</span>.choiceMap, values.name, index);<br> &#125;,<br></code></pre></td></tr></table></figure><p>恕我前端不够深入， 推荐一篇讲的更加详细的文章，如有兴趣，可以前去浏览</p><p><a href="https://www.cnblogs.com/zhuzhenwei918/p/6893496.html"></a></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django分页器实现分页和源码分析</title>
    <link href="/2021/04/01/Django%E5%88%86%E9%A1%B5%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2021/04/01/Django%E5%88%86%E9%A1%B5%E5%99%A8%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5%E5%92%8C%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>在博客文章多了情况下，如果全部显示在一页，给人的体验感相当不好，所以就需要分页处理</p><p>主要涉及到两个类</p><h3 id="一、-Paginator和page类使用"><a href="#一、-Paginator和page类使用" class="headerlink" title="一、 Paginator和page类使用"></a>一、 <strong><code>Paginator</code>和<code>page</code>类</strong>使用</h3><h4 id="①后端代码："><a href="#①后端代码：" class="headerlink" title="①后端代码："></a><strong>①后端代码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_notes</span>(<span class="hljs-params">request, type_, page_number</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    获取Python中type类型的文章,需要分页</span><br><span class="hljs-string">    :param type_:文章类型</span><br><span class="hljs-string">    :param request:Request请求对象</span><br><span class="hljs-string">    :return:对应序号的文章内容</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># user = request.session.get(&#x27;user&#x27;, default=&#x27;游客&#x27;)</span><br>    user = request.user.username <span class="hljs-keyword">if</span> request.user.is_authenticated <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;游客&#x27;</span><br>    <span class="hljs-keyword">try</span>:<br>        number = page_number  <span class="hljs-comment"># 获取前端请求的页数</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        number = <span class="hljs-number">1</span><br>    data = &#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: user,<br>        <span class="hljs-string">&#x27;type&#x27;</span>: type_,<br>    &#125;<br>    notes = notes_models.Note.note_.<span class="hljs-built_in">filter</span>(<span class="hljs-built_in">type</span>=type_, status=<span class="hljs-string">&#x27;Published&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 初始化分页器列表，每页5篇，当第一页没有文章的时候，要求其自定义处理异常</span><br>        paginator = Paginator(notes, <span class="hljs-number">5</span>, allow_empty_first_page=<span class="hljs-literal">False</span>)<br>        <span class="hljs-comment"># 通过page()来创建Page对象,前端的模板语言也可以会调用函数</span><br>        notes = paginator.page(number=number)<br>        data[<span class="hljs-string">&#x27;notes&#x27;</span>] = notes<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;notes.html&#x27;</span>, data)<br>    <span class="hljs-keyword">except</span> EmptyPage:<br>        data[<span class="hljs-string">&#x27;error&#x27;</span>] = <span class="hljs-string">&#x27;当前类别没有笔记，如果您想要加盟云博的话,为此页增添技术文章，共同学习进步的话，请注册成为本站的vip，一起记录学习的心得&#x27;</span><br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">&#x27;notes.html&#x27;</span>, data)<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>① 通过匹配路由，获取url地址中的参数，首先查找已经发布的所有笔记，然后对这些笔记进行分页处理，生成每页5篇笔记的分页器对象(我喜欢这么叫它)，其中<code>allow_empty_first_page</code>是允许第一个也是否为空，默认为True，即没有文章的时候，也不会报EmptyPage的异常。主要用来捕捉异常，实现个性化（自定义）提示用户此页尚没有文章。</p><p>② 产生了分页其对象后，我们需要调用page函数去产生Page对象，所以不需要手动实例化。详细过程源码分析请看下方。之后通过render将参数直接渲染到页面上。</p><p><strong>注：</strong>  每次页面跳转都会重新生成分页器，进行数据切片渲染到前端页面</p><h4 id="②前端代码："><a href="#②前端代码：" class="headerlink" title="②前端代码："></a><strong>②前端代码：</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-timeline notes_list&quot;</span>&gt;</span><br>  &#123;% if error %&#125;<br>    &#123;&#123;error&#125;&#125;<br>  &#123;% endif %&#125;<br>  &#123;% for note in notes.object_list %&#125;<br>  &#123;% if forloop.first %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-elem-quote layui-quote-nm quote&quot;</span>&gt;</span>最近更新笔记--------文章简介<span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br>  &#123;% endif %&#125;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-timeline-item&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-icon layui-timeline-axis icon layui-icon-note &quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-timeline-content&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot; /notes/user_articles_list/&#123;&#123;note.slug&#125;&#125; &quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layui-timeline-title notes_title&quot;</span>&gt;</span>&#123;&#123;note.title&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;notes_content&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--escape进行html转义不过不大管用--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;shorthands&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;font-weight:bolder&quot;</span>&gt;</span>简介：<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>&#123;&#123;note.shorthand&#125;&#125;<br>          <span class="hljs-comment">&lt;!--修改成关键字--&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note_detail&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>作者：&#123;&#123;note.note_author.username&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>关键词：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color:#1a0202&quot;</span>&gt;</span>&#123;&#123;note.key_word&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>文章类型：&#123;&#123;note.type&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>阅读量：&#123;&#123;note.read_counts&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>发布日期：&#123;&#123;note.publish_date&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  &#123;% endfor %&#125;<br>  &#123;% if notes.has_previous %&#125;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/notes/user_note/note/&#123;&#123;type&#125;&#125;/page_number=&#123;&#123; notes.previous_page_number &#125;&#125;&quot;</span>&gt;</span>上一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>    &#123;% endif %&#125;<br>  &#123;% for note in notes.paginator.page_range %&#125;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/notes/user_note/note/&#123;&#123;type&#125;&#125;/page_number=&#123;&#123; note &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; note &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  &#123;% endfor %&#125;<br>  &#123;% if notes.has_next %&#125;<br>     <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/notes/user_note/note/&#123;&#123;type&#125;&#125;/page_number=&#123;&#123; notes.next_page_number &#125;&#125;&quot;</span>&gt;</span>下一页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  &#123;% endif %&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>主要通过模板语言调用函数，模板语言能够结合python函数，进行调用，模板语言中的参数都可以看做对象，毕竟Python崇尚的是万物皆对象嘛~</p><p><strong>具体的函数下面将会进行源码分析：</strong></p><h4 id="二、Paginator和page源码分析："><a href="#二、Paginator和page源码分析：" class="headerlink" title="二、Paginator和page源码分析："></a>二、<strong>Paginator和page源码分析：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Paginator</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, object_list, per_page, orphans=<span class="hljs-number">0</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">                 allow_empty_first_page=<span class="hljs-literal">True</span></span>):</span><br>        self.object_list = object_list <span class="hljs-comment"># 对象列表</span><br>        self._check_object_list_is_ordered()<br>        self.per_page = <span class="hljs-built_in">int</span>(per_page)<br>        self.orphans = <span class="hljs-built_in">int</span>(orphans)  <span class="hljs-comment"># 孤儿</span><br>        self.allow_empty_first_page = allow_empty_first_page<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate_number</span>(<span class="hljs-params">self, number</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;Validate the given 1-based page number.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(number, <span class="hljs-built_in">float</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> number.is_integer():<br>                <span class="hljs-keyword">raise</span> ValueError<br>            number = <span class="hljs-built_in">int</span>(number)<br>        <span class="hljs-keyword">except</span> (TypeError, ValueError):<br>            <span class="hljs-keyword">raise</span> PageNotAnInteger(_(<span class="hljs-string">&#x27;That page number is not an integer&#x27;</span>))<br>        <span class="hljs-keyword">if</span> number &lt; <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">raise</span> EmptyPage(_(<span class="hljs-string">&#x27;That page number is less than 1&#x27;</span>))<br>        <span class="hljs-keyword">if</span> number &gt; self.num_pages:<br>            <span class="hljs-keyword">if</span> number == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> self.allow_empty_first_page:<br>                <span class="hljs-keyword">pass</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">raise</span> EmptyPage(_(<span class="hljs-string">&#x27;That page contains no results&#x27;</span>))<br>        <span class="hljs-keyword">return</span> number<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page</span>(<span class="hljs-params">self, number</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Return a valid page, even if the page argument isn&#x27;t a number or isn&#x27;t</span><br><span class="hljs-string">        in range.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 其实加了页号的验证</span><br>        <span class="hljs-keyword">try</span>:<br>            number = self.validate_number(number)<br>        <span class="hljs-keyword">except</span> PageNotAnInteger:<br>            number = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span> EmptyPage:<br>            number = self.num_pages<br>        <span class="hljs-keyword">return</span> self.page(number)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page</span>(<span class="hljs-params">self, number</span>):</span><br>        <span class="hljs-comment"># 对相应的页号进行查询集的切片，最后调用_get_page方法，用于产生Page实例</span><br>        <span class="hljs-string">&quot;&quot;&quot;Return a Page object for the given 1-based page number.&quot;&quot;&quot;</span><br>        number = self.validate_number(number)<br>        bottom = (number - <span class="hljs-number">1</span>) * self.per_page<br>        top = bottom + self.per_page<br>        <span class="hljs-keyword">if</span> top + self.orphans &gt;= self.count:<br>            top = self.count<br>        <span class="hljs-keyword">return</span> self._get_page(self.object_list[bottom:top], number, self)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_get_page</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-comment"># 产生Page实例，传入相应的参数，分别为切片后的列表，页号，分页器对象</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Return an instance of a single page.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        This hook can be used by subclasses to use an alternative to the</span><br><span class="hljs-string">        standard :cls:`Page` object.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> Page(*args, **kwargs)<br><br>    <span class="hljs-comment"># 只读特性缓存</span><br><span class="hljs-meta">    @cached_property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;Return the total number of objects, across all pages.&quot;&quot;&quot;</span><br>        c = <span class="hljs-built_in">getattr</span>(self.object_list, <span class="hljs-string">&#x27;count&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">callable</span>(c) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> inspect.isbuiltin(c) <span class="hljs-keyword">and</span> method_has_no_args(c):<br>            <span class="hljs-keyword">return</span> c()<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.object_list)<br>    <span class="hljs-comment"># 获取最大页</span><br><span class="hljs-meta">    @cached_property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">num_pages</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;Return the total number of pages.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.count == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> self.allow_empty_first_page:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        hits = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, self.count - self.orphans)<br>        <span class="hljs-keyword">return</span> ceil(hits / self.per_page)<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page_range</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Return a 1-based range of pages for iterating through within</span><br><span class="hljs-string">        a template for loop.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, self.num_pages + <span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_check_object_list_is_ordered</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Warn if self.object_list is unordered (typically a QuerySet).</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        ordered = <span class="hljs-built_in">getattr</span>(self.object_list, <span class="hljs-string">&#x27;ordered&#x27;</span>, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">if</span> ordered <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> ordered:<br>            obj_list_repr = (<br>                <span class="hljs-string">&#x27;&#123;&#125; &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.object_list.model, self.object_list.__class__.__name__)<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(self.object_list, <span class="hljs-string">&#x27;model&#x27;</span>)<br>                <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;&#123;!r&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(self.object_list)<br>            )<br>            warnings.warn(<br>                <span class="hljs-string">&#x27;Pagination may yield inconsistent results with an unordered &#x27;</span><br>                <span class="hljs-string">&#x27;object_list: &#123;&#125;.&#x27;</span>.<span class="hljs-built_in">format</span>(obj_list_repr),<br>                UnorderedObjectListWarning,<br>                stacklevel=<span class="hljs-number">3</span><br>            )<br></code></pre></td></tr></table></figure><p>说明：<br><code>@cached_property</code>的主要源码如下：</p><p>说明几点：</p><p>① 拥有__get__方法的类是只能其实例属于类属性的时候生效，这个类中name为类属性，因此<code>self.func(instance)</code>实际上是调用的<code>Paginator</code>实例的<code>num_pages</code>函数，产生的结果放入Paginator实例的缓存，而不会调用<code>cached_property</code>类中的__dict__。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get__</span>(<span class="hljs-params">self, instance, cls=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Call the function and put the return value in instance.__dict__ so that</span><br><span class="hljs-string">        subsequent attribute access on the instance returns the cached value</span><br><span class="hljs-string">        instead of calling cached_property.__get__().</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self<br>        res = instance.__dict__[self.name] = self.func(instance)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><p><code>self.func = func # 打赏猴子补丁，将num_pages传给self.func</code></p><h4 id="Page类源码："><a href="#Page类源码：" class="headerlink" title="Page类源码："></a><strong>Page类源码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span>(<span class="hljs-params">collections.abc.<span class="hljs-type">Sequence</span></span>):</span><br>    <span class="hljs-comment"># 由_get_page传过来的实例</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, object_list, number, paginator</span>):</span><br>        self.object_list = object_list<br>        self.number = number<br>        self.paginator = paginator<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;Page %s of %s&gt;&#x27;</span> % (self.number, self.paginator.num_pages)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.object_list)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self, index</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(index, (<span class="hljs-built_in">int</span>, <span class="hljs-built_in">slice</span>)):<br>            <span class="hljs-keyword">raise</span> TypeError<br>        <span class="hljs-comment"># The object_list is converted to a list so that if it was a QuerySet</span><br>        <span class="hljs-comment"># it won&#x27;t be a database hit per __getitem__.</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(self.object_list, <span class="hljs-built_in">list</span>):<br>            self.object_list = <span class="hljs-built_in">list</span>(self.object_list)<br>        <span class="hljs-keyword">return</span> self.object_list[index]<br>    <span class="hljs-comment"># 判断是否有下一页</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_next</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.number &lt; self.paginator.num_pages<br>    <span class="hljs-comment"># 判断是否有前一页</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_previous</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.number &gt; <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 判断是否有前一页或下一页</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">has_other_pages</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.has_previous() <span class="hljs-keyword">or</span> self.has_next()<br>    <span class="hljs-comment"># 获取下一页页号</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">next_page_number</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.paginator.validate_number(self.number + <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 获取上一页页号</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">previous_page_number</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.paginator.validate_number(self.number - <span class="hljs-number">1</span>)<br>    <span class="hljs-comment"># 获取开始的当前页第一条数据在queryset中的索引值</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">start_index</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Return the 1-based index of the first object on this page,</span><br><span class="hljs-string">        relative to total objects in the paginator.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Special case, return zero if no items.</span><br>        <span class="hljs-keyword">if</span> self.paginator.count == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> (self.paginator.per_page * (self.number - <span class="hljs-number">1</span>)) + <span class="hljs-number">1</span><br>    <span class="hljs-comment"># 获取当前页的最后一条数据的在queryset中的索引值</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">end_index</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Return the 1-based index of the last object on this page,</span><br><span class="hljs-string">        relative to total objects found (hits).</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># Special case for the last page because there can be orphans.</span><br>        <span class="hljs-keyword">if</span> self.number == self.paginator.num_pages:<br>            <span class="hljs-keyword">return</span> self.paginator.count<br>        <span class="hljs-keyword">return</span> self.number * self.paginator.per_page<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux下文件的复制、移动与删除命令为：cp，mv，rm</title>
    <link href="/2021/03/11/linux%E4%B8%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%8D%E5%88%B6%E3%80%81%E7%A7%BB%E5%8A%A8%E4%B8%8E%E5%88%A0%E9%99%A4%E5%91%BD%E4%BB%A4%E4%B8%BA%EF%BC%9Acp%EF%BC%8Cmv%EF%BC%8Crm/"/>
    <url>/2021/03/11/linux%E4%B8%8B%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%8D%E5%88%B6%E3%80%81%E7%A7%BB%E5%8A%A8%E4%B8%8E%E5%88%A0%E9%99%A4%E5%91%BD%E4%BB%A4%E4%B8%BA%EF%BC%9Acp%EF%BC%8Cmv%EF%BC%8Crm/</url>
    
    <content type="html"><![CDATA[<p><strong>linux常用指令：</strong></p><p>linux学习笔记<br><a href="https://www.jianshu.com/p/f82cf926efbc" title="https://www.jianshu.com/p/f82cf926efbc">https://www.jianshu.com/p/f82cf926efbc</a></p><p>linux学习网址（一）<br><a href="https://www.jianshu.com/p/f82cf926efbc" title="https://www.jianshu.com/p/39a3467c67e8">https://www.jianshu.com/p/39a3467c67e8</a></p><p>1.whereis python3 用来查找某个包的路径</p><p>2.which python3 软链接</p><hr><br><br><p>linux中各文件颜色意思：</p><p>蓝色：目录</p><p>绿色：可执行文件</p><p>红色：压缩文件</p><p>蓝绿色：链接文件</p><p>灰色：其他文件</p><p>黄色：设备文件，其中包括block,char,fifo.</p><p>白色：表示普通文件</p><p>红色闪烁：表示链接的文件有问题</p><hr><br><br>### **linux下文件的复制、移动与删除命令为：cp，mv，rm**<p><strong>一、文件复制命令cp</strong></p><p>命令格式：cp [-adfilprsu] 源文件(source) 目标文件(destination)</p><p>cp [option] source1 source2 source3 … directory</p><p>参数说明：</p><p>-a:是指archive的意思，也说是指复制所有的目录</p><p>-d:若源文件为连接文件(link file)，则复制连接文件属性而非文件本身</p><p>-f:强制(force)，若有重复或其它疑问时，不会询问用户，而强制复制</p><p>-i:若目标文件(destination)已存在，在覆盖时会先询问是否真的操作</p><p>-l:建立硬连接(hard link)的连接文件，而非复制文件本身</p><p>-p:与文件的属性一起复制，而非使用默认属性</p><p>-r:递归复制，用于目录的复制操作</p><p>-s:复制成符号连接文件(symbolic link)，即“快捷方式”文件</p><p>-u:若目标文件比源文件旧，更新目标文件</p><p>如将/test1目录下的file1复制到/test3目录，并将文件名改为file2,可输入以下命令：</p><p>cp /test1/file1 /test3/file2</p><hr><br><br>**二、文件移动命令mv**<p>命令格式：mv [-fiv] source destination</p><p>参数说明：</p><p>-f:force，强制直接移动而不询问</p><p>-i:若目标文件(destination)已经存在，就会询问是否覆盖</p><p>-u:若目标文件已经存在，且源文件比较新，才会更新</p><p>如将/test1目录下的file1复制到/test3 目录，并将文件名改为file2,可输入以下命令：</p><p>mv /test1/file1 /test3/file2</p><hr><br><br>**三、文件删除命令rm**<p>命令格式：rm [fir] 文件或目录</p><p>参数说明：</p><p>-f:强制删除</p><p>-i:交互模式，在删除前询问用户是否操作</p><p>-r:递归删除，常用在目录的删除</p><p>如删除/test目录下的file1文件，可以输入以下命令：</p><p>rm -i /test/file1</p><blockquote></blockquote><hr><br><br>### **/usr目录下的重要目录**<p>目录            应放置文件内容</p><br>**/usr/X11R6/** ：为X Window System重要数据所放置的目录，之所以取名为X11R6是因为最后的X版本为第11版，且该版的第6次释出之意。<br>**/usr/bin/** ：绝大部分的用户可使用指令都放在这里。请注意到他与/bin的不同之处。(是否与开机过程有关)<br>**/usr/include/** ：c/c++等程序语言的档头(header)与包含档(include)放置处，当我们以tarball方式 (*.tar.gz 的方式安装软件)安装某些数据时，会使用到里头的许多包含档。<br>**/usrb/** ：包含各应用软件的函式库、目标文件(object file)，以及不被一般使用者惯用的执行档或脚本(script)。 某些软件会提供一些特殊的指令来进行服务器的设定，这些指令也不会经常被系统管理员操作， 那就会被摆放到这个目录下啦。要注意的是，如果你使用的是X86_64的Linux系统， 那可能会有/usrb64/目录产生<br>**/usr/local/** ：统管理员在本机自行安装自己下载的软件(非distribution默认提供者)，建议安装到此目录， 这样会比较便于管理。举例来说，你的distribution提供的软件较旧，你想安装较新的软件但又不想移除旧版， 此时你可以将新版软件安装于/usr/local/目录下，可与原先的旧版软件有分别啦。 你可以自行到/usr/local去看看，该目录下也是具有bin, etc, include, lib...的次目录<br>**/usr/sbin/** ：非系统正常运作所需要的系统指令。最常见的就是某些网络服务器软件的服务指令(daemon)<br>**/usr/** ：放置共享文件的地方，在这个目录下放置的数据几乎是不分硬件架构均可读取的数据， 因为几乎都是文本文件嘛。在此目录下常见的还有这些次目录：/usr/man：联机帮助文件/usr/doc：软件杂项的文件说明/usr/zoneinfo：与时区有关的时区文件<br>**/usrc/** ：一般原始码建议放置到这里，src有source的意思。至于核心原始码则建议放置到/usrcnux/目录下。]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Docker将vue跨域的项目部署到云服务器</title>
    <link href="/2021/01/19/%E4%BD%BF%E7%94%A8Docker%E5%B0%86vue%E8%B7%A8%E5%9F%9F%E7%9A%84%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/01/19/%E4%BD%BF%E7%94%A8Docker%E5%B0%86vue%E8%B7%A8%E5%9F%9F%E7%9A%84%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h3><p>之前在开发完项目后,部署过Django和Flask的项目,同时也做了相应的笔记,但是那个时候部署都是一个一个配置文件,配置完文件后,不敢乱改,稍有不慎,可能就出问题了.同时那个时候,我是采用supervisor来管理各个服务进程的.但是对于我个人来说,只有一台服务器,那么绑定到一台服务器上,这样的方式也还好,但是对于一家大公司来说,有着成百上千的服务器,如果都用这种方式肯定不醒,所以,恰好这次实习过程中做了一个vue.js的项目,之前也了解过docker技术,正好将这个vue项目使用docker容器进行部署.以下是我部署过程中的过程和心得.</p><hr><h3 id="二-部署过程"><a href="#二-部署过程" class="headerlink" title="二  部署过程"></a><strong>二  部署过程</strong></h3><p>由于本地和服务器上都有docker,但是出于第一次使用docker部署,不是特别熟练,所以首先在本地进行部署测试.然后测试通过后,无问题后,再将镜像打包,直接扔到服务器上启动容器即可.</p><p>使用容器技术可以确保应用在不同的环境,如生产,测试,上线环境中正常的运行,并且在部署过程中不会出现令人头疼的问题,使用docker可以确保每个环境下的每个服务都具备一直的配置和文件,具备很高的可移植性,可配置性和可隔离性.</p><p>假设你已经安装了docker,没有的去官网下载与本机操作系统匹配的版本.</p><hr><p><strong>1.pull nginx 镜像</strong></p><p>命令:<code>sudo docker pull nginx</code></p><hr><p><strong>2.在项目的根目录创建nginx文件夹,在nginx文件夹中创建default.conf</strong></p><p>命令:</p><p><code>mkdir nginx</code></p><p><code>sudo vim default.conf</code></p><p>将下面代码写入default.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>   listen       80;<br>   server_name  localhost;<br><br><span class="hljs-meta">   #</span><span class="bash">charset koi8-r;</span><br>   access_log  /var/log/nginx/host.access.log  main;<br>   error_log  /var/log/nginx/error.log  error;<br><br>   location / &#123;<br>       root   /usr/share/nginx/html;       # 将定位到该目录下的dist模块,我将在dockerfile中将dist模块copy到这里<br>       try_files $uri $uri/ /index.html;<br>       proxy_set_header Host              $host;<br>       proxy_set_header X-Real-IP         $remote_addr; # 从中的最后一截获取用户真是IP<br>       proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for; # 同上<br>       proxy_set_header X-Forwarded-Proto $scheme;<br><br>       index  index.html index.htm;<br>   &#125;<br><span class="hljs-meta">   #</span><span class="bash"> 正向代理vue中转发的请求,请求网易云的API</span><br><span class="hljs-meta">   #</span><span class="bash"> 找到以/api开头的请求</span><br>   location ^~ /api/ &#123;<br>       # ip是node容器中的ip地址,port是其内部暴露的端口号<br>       proxy_pass http://172.17.0.2:3000/;<br>   &#125;<br><br><span class="hljs-meta">   #</span><span class="bash">error_page  404              /404.html;</span><br><br><span class="hljs-meta">   #</span><span class="bash"> redirect server error pages to the static page /50x.html</span><br><span class="hljs-meta">   #</span><br><span class="bash">   error_page   500 502 503 504  /50x.html;</span><br>   location = /50x.html &#123;<br>       root   /usr/share/nginx/html;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>注意:这里只写了server服务,其将被引入到nginx的主配置文件中,因此需要编写如下的Dockerfile</strong></p><hr><p><strong>3.编写dockerfile</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM nginx:latest<br><br>COPY dist/ /usr/share/nginx/html/<br><br>COPY nginx/default.conf /etc/nginx/conf.d/default.conf<br><br></code></pre></td></tr></table></figure><p><strong>说明:</strong></p><p>第一行:表示基于<code>nginx:latest</code> 镜像上镜像上进行搭建</p><p>第二行:将vue打包文件 copy到/usr/share/nginx/html/下,需要和nginx.conf中的root转发的地址一致</p><p>第三行:将在nginx文件夹下的default.conf配置文件copy到/etc/nginx/conf.d/default.conf</p><hr><p><strong>4.构建docker镜像</strong></p><p>命令: <code>sudo docker build -t vue-smartcloudmusic .</code></p><p>其中 -t 指明构建后的镜像名.   <code>.</code> 表示在当前目录下进行构建</p><hr><p><strong>5.本地运行docker容器</strong></p><p>命令: <code>sudo docker run --name vuesmartcloudmusic -d -p 8080:80 vue-smartcloudmusic</code></p><p>其中 –name制定容器名 , -d 表示守护进程方式运行, -p指明映射关系,将本机的8080端口映射到容器内部的80端口, 最后指明了实例那个镜像名.</p><hr><p><strong>6. 查看nginx服务是否正常运行</strong></p><p>命令:<code>ps aux|grep nginx</code></p><p>查看nginx服务是否启动成功,同时可以访问本机的地址<code>127.0.0.1:8080</code>看是否正常显示.</p><hr><h4 id="到此为止-部署纯vue项目-不带任何跨域-任何负载-就基本完成了由于我在项目中还需要调用网易云的API-因此还需要构建一个node容器来运行其项目-同时还要配置跨域的配置-因此请往下看"><a href="#到此为止-部署纯vue项目-不带任何跨域-任何负载-就基本完成了由于我在项目中还需要调用网易云的API-因此还需要构建一个node容器来运行其项目-同时还要配置跨域的配置-因此请往下看" class="headerlink" title="到此为止,部署纯vue项目,不带任何跨域,任何负载,就基本完成了由于我在项目中还需要调用网易云的API,因此还需要构建一个node容器来运行其项目,同时还要配置跨域的配置.因此请往下看."></a>到此为止,部署纯vue项目,不带任何跨域,任何负载,就基本完成了由于我在项目中还需要调用网易云的API,因此还需要构建一个node容器来运行其项目,同时还要配置跨域的配置.因此请往下看.</h4><hr><p><strong>7. 网易云API的项目自带了Dockerfile,因此我就偷个懒,直接用它的Dockerfile进行构建</strong></p><p>Dockerfile文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM node:lts-alpine<br><br>WORKDIR /app<br>COPY . /app<br><br>RUN rm -f package-lock.json \<br>    ; rm -rf .idea \<br>    ; rm -rf node_modules \<br>    ; npm config set registry &quot;https://registry.npm.taobao.org/&quot; \<br>    &amp;&amp; npm install<br><br>EXPOSE 3000<br>CMD [&quot;node&quot;, &quot;app.js&quot;]<br><br></code></pre></td></tr></table></figure><p><strong>说明:说下大概的意思</strong></p><p>第一行: 基于<code>node:lts-alpine</code>版本镜像进行构建,如果没有则会自动pull下来</p><p>第二行: 设置工作目录为 /app下</p><p>第三行:将当前目录所有文件拷贝到 /app下</p><p>第四行:执行一系列的指令,删除一系列的文件和依赖包,为npm设置镜像源,然后重新安装依赖包.</p><p>倒数第二行:暴露node服务器的端口号为3000</p><p>最后一行:执行命令行<code> node app.js</code>启动服务器</p><p><strong>备注: 请注意要实现本地项目访问网易云的node项目,还需要在nginx中配置路由转发</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">location ^~ /api/ &#123;<br>     # ip是node容器中的ip地址,port是其内部暴露的端口号<br>     proxy_pass http://172.17.0.2:3000/;<br> &#125;<br></code></pre></td></tr></table></figure><p>上面的ip地址通过检查目标容器信息找到Address IP, 使用指令 <code>sudo docker inspect CONTAINER_ID</code>,<br>不是云服务器的内网ip,而是容器的内部ip.</p><hr><p><strong>8.在了解了dockerfile基本指令后,就可以构建镜像了</strong></p><p>命令: <code>sudo docker build -t neteasecloudmusic .</code></p><p>根据当前目录构建镜像</p><p><strong>9.启动node容器</strong></p><p>命令:<code>sudo docker run --name neteasecloudmusic -d -p 3000:3000 neteasecloudmusic</code></p><p><strong>10. 测试浏览<code>ip:port</code>,看服务能否正常启动</strong></p><p>网址输入<code>127.0.0.1:3000</code></p><p>截图效果:</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/netcloudmusicapi.png" alt="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/netcloudmusicapi.png">{width=80%}</p><hr><h3 id="三-过程错误总结"><a href="#三-过程错误总结" class="headerlink" title="三  过程错误总结"></a><strong>三  过程错误总结</strong></h3><p>前前后后构建镜像,出错,删除镜像,修改,重新构建,出错,删除….正确.经过了很多次,终于成功了.这里主要写几个非低级错误.</p><p><strong>1.首先第一个错误:</strong></p><p><code>Resource interpreted as Stylesheet but transferred with MIME type application/octet-stream</code></p><p>项目启动成功后,在css样式渲染不出来,查看控制台发现如下错误,Resource interpreted as Stylesheet but transferred with MIME type text/html.</p><p>这个错误意思是静态资源被渲染成了stylesheet但是被转化为二进制类型.</p><p><strong>错误产生的原因:</strong></p><p>我在构建我自己的项目时,我在本地独自启动nginx,没有用docker时,nginx.conf中的配置文件<code> include /usr/local/nginx/conf/mime.types;</code><br>这一行不正确,没有包含正确mime.type路径,它应该是nginx安装路径中的mime.types文件.</p><p><strong>解决方案:</strong></p><p>在找到目标文件,修改路径后,清除缓存并刷新浏览器,就正常的渲染出界面了.</p><hr><p><strong>2.第二个错误:</strong></p><p>在编写Dockfile时,一定要仔细,如果配置某一个server,nginx允许直接在一个新文件中写server,然后在nginx.conf总配置文件中引入这些子配置文件即可.</p><p><strong>错误产生的原因:</strong></p><p>我将nginx.conf替换到<code>/etc/nginx/conf.d/default.conf</code>,导致nginx服务直接启动不起来.</p><p><strong>解决方案</strong></p><p>要么将nginx.conf,替换掉<code>/etc/nginx/nginx.conf</code>要么,将子配置文件替换<code>/etc/nginx/conf.d/default.conf</code>或者<code>/etc/nginx/site-availabled/default.conf</code>,或者该文件夹下的其他文件名即可.</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>虽然这是第一次使用docker部署,虽然花了我一上午,但是最终成功了,自己还是蛮欣慰的.做一个项目,在平时学习过程中,<br>应该做到精益求精,可能工作上不需要我部署,但是平时学习的过程还是值得自己探索一番的!</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习RabbitMQ的原理和简单应用(2)</title>
    <link href="/2020/11/25/%E5%AD%A6%E4%B9%A0rabbitmq%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8(2)/"/>
    <url>/2020/11/25/%E5%AD%A6%E4%B9%A0rabbitmq%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8(2)/</url>
    
    <content type="html"><![CDATA[<p>学习rabbitm今天学习了rabbitmq的持久化和消息分发的简单原理和简单demo.做个笔记记录下</p><hr><h3 id="Four-—–持久化Durable"><a href="#Four-—–持久化Durable" class="headerlink" title="Four —–持久化Durable"></a>Four —–持久化Durable</h3><p>之前学到了consumer(worker)挂掉了,可以通过消息确认机制实现rabbitmq服务的重新转发.但是如果rabbitmq服务自己也突然挂掉了,怎么办呢?根据以往学过的redis,我们可以很容易想到可以将数据在每次操作指令后将其以RDB或AOF的形式持久化到磁盘;而rabbitmq也有自己的持久化机制.</p><p>1.通过标记queue和messages为可持久化的来告诉rabbitmq.(注:对于已经存在的同名且未声明持久话的queue,对其重新定义durable无效.)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># durable_consumer.py</span><br><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># 建立channel通道</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;localhost&#x27;</span>))<br>channel = connection.channel()<br>channel.queue_declare(queue=<span class="hljs-string">&#x27;task_queue&#x27;</span>, durable=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span>(<span class="hljs-params">ch, method, propeties, body</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Received %r&quot;</span> % body.decode())<br>    ch.basic_ack(delivery_tag=method.delivery_tag)  <span class="hljs-comment"># 消息确认</span><br><br><br>channel.basic_consume(queue=<span class="hljs-string">&#x27;task_queue&#x27;</span>,on_message_callback=callback)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># durable_product.py</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># 建立channel通道</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(<span class="hljs-string">&#x27;localhost&#x27;</span>))<br>channel = connection.channel()<br>channel.queue_declare(queue=<span class="hljs-string">&#x27;task_queue&#x27;</span>, durable=<span class="hljs-literal">True</span>)<br><br><br>channel.basic_publish(exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>                      routing_key=<span class="hljs-string">&quot;task_queue&quot;</span>,<br>                      body=<span class="hljs-string">&#x27;syz666&#x27;</span>,<br>                      properties=pika.BasicProperties(<br>                         delivery_mode = <span class="hljs-number">2</span>, <span class="hljs-comment"># make message persistent</span><br>                      ))<br><br>channel.close()<br><br></code></pre></td></tr></table></figure><p><strong>结果:</strong></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/durable_2.png">{width=100%}</p><p>hello队列不是可持久化的,task_queue和celery是可持久化的</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/durable_3.png">{width=100%}</p><p>重启rabbitmq后</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/durable_1.png">{width=100%}</p><p>重启rabbitmq后,非持久化的队列和消息都被清空了,因为其占用的内存空间被回收.</p><hr><h3 id="Five-—-消息分发-Dispatch"><a href="#Five-—-消息分发-Dispatch" class="headerlink" title="Five —-消息分发 Dispatch"></a>Five —-消息分发 Dispatch</h3><p>Five —- 消息分发公平性</p><p>rabbitmq默认情况下,并不会公平的分发消息到空闲的consumer,因为默认情况下rabbitmq是在消息进入到队列后,才会分发消息,因此此时并不会知道每个consumer还有多少个消息未处理,依然将第N个消息发送给对应的第N个consumer.因此就会产生某个consumer很忙(未处理完当前,又收到消息了),而其他的consumer很闲(当前很闲且还没有接收到消息.</p><p>解决方案:</p><p>1.使用basic.qos协议方法来告诉rabbitmq不要同一时刻给一个工作者超过一条以上的消息.换句话来说,就是不会将消息发送给正在处理的consumer,而是那些不繁忙的consumer.</p><p>2.当然,如果恰巧所有queue都填满了,并且所有的consumer都在忙,那么此时需要增加更多的consumer(可以通过集群方式)来加快处理速度,或者为每个消息设置存活时间TTL,来减缓处理的压力.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># dispatch_consumer.py</span><br><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-keyword">import</span> time<br><br>connection = pika.BlockingConnection(<br>    pika.ConnectionParameters(host=<span class="hljs-string">&#x27;localhost&#x27;</span>))<br>channel = connection.channel()<br><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;task_queue&#x27;</span>, durable=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span>(<span class="hljs-params">ch, method, properties, body</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; [x] Received %r&quot;</span> % body.decode())<br>    time.sleep(body.count(<span class="hljs-string">b&#x27;.&#x27;</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot; [x] Done&quot;</span>)<br>    ch.basic_ack(delivery_tag=method.delivery_tag)<br><br><br>channel.basic_qos(prefetch_count=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 设置每个consumer统一时刻接受一个消息</span><br><br>channel.basic_consume(queue=<span class="hljs-string">&#x27;task_queue&#x27;</span>, on_message_callback=callback)<br><br>channel.start_consuming()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># dispatch_consume.py</span><br><span class="hljs-keyword">import</span> pika<br><br><br>connection = pika.BlockingConnection(<br>pika.ConnectionParameters(host=<span class="hljs-string">&#x27;localhost&#x27;</span>))<br><br>channel = connection.channel()  <span class="hljs-comment"># 声明通道</span><br>channel.queue_declare(queue=<span class="hljs-string">&#x27;task_queue&#x27;</span>, durable=<span class="hljs-literal">True</span>)<br><br>message1 = <span class="hljs-string">&#x27;水人波浪形态&#x27;</span><br>message2 = <span class="hljs-string">&#x27;第一滴血!&#x27;</span><br><br>channel.basic_publish(<br>    exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>    routing_key=<span class="hljs-string">&#x27;task_queue&#x27;</span>,<br>    body=message1,<br>    properties=pika.BasicProperties(<br>        delivery_mode=<span class="hljs-number">2</span>,  <span class="hljs-comment"># 让消息持久化</span><br>    ))<br><br>channel.basic_publish(<br>    exchange=<span class="hljs-string">&#x27;&#x27;</span>,<br>    routing_key=<span class="hljs-string">&#x27;task_queue&#x27;</span>,<br>    body=message2,<br>    properties=pika.BasicProperties(<br>        delivery_mode=<span class="hljs-number">2</span>,  <span class="hljs-comment"># 让消息持久化</span><br>    ))<br>connection.close()<br><br></code></pre></td></tr></table></figure><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/dispatch_1.png">{width=100%}</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/dispatch_2.png">{width=100%}</p><p><strong>说明:</strong></p><p>上图中启动了两个consumer进程,因为设置了prefetch_count=1,即每个consumer统一时刻只接受一个message,因此统一时刻发送两个message到队列中,两个consumer会分别处理其中一个,待处理完再处理其他message.</p>]]></content>
    
    
    <categories>
      
      <category>RabbitMQ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mongodb的学习与实践(1)</title>
    <link href="/2020/11/15/Mongodb%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5(1)/"/>
    <url>/2020/11/15/Mongodb%E7%9A%84%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%AE%9E%E8%B7%B5(1)/</url>
    
    <content type="html"><![CDATA[<p>之前做项目时候使用的关系性数据库在面对一些不可控的字段情况下,变得很复杂.因此尝试学习下Mongodb,来寻找更快速方便的解决方案.</p><p>Mongodb官方有免费的集群云服务器,帮你现搭了由3个mongodb服务组成的集群.如果不想自己本地配置的话,直接去官方注册一下,申请云mongo,然后会给你连接字符串,包括shell,mongodb compass,或者不同语言建立连接的字符串.这样就可以去构建客户端连接.</p><p>我这里去注册过了,不过我这里使用的本地的mongodb服务.</p><p>我在linux环境下安装,直接去官网下载压缩包,解压,编写配置文件(port,host,path等),然后设置环境变量,最后启动mongo服务.这里细节就不多说了,网上都有安装教程.</p><p>实在不会的戳这里<a href="https://www.cnblogs.com/xiaofeideboke/p/9837648.html">https://www.cnblogs.com/xiaofeideboke/p/9837648.html</a></p><h2 id="以下代码均在jupyter-notebook编写"><a href="#以下代码均在jupyter-notebook编写" class="headerlink" title="以下代码均在jupyter-notebook编写"></a><strong>以下代码均在jupyter-notebook编写</strong></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> pymongo<br><br><br>client = pymongo.MongoClient(<span class="hljs-string">&quot;mongodb://127.0.0.1:27017/?readPreference=primary&amp;appname=MongoDB%20Compass&amp;ssl=false&quot;</span>)<br>db = client.hellofriends  <span class="hljs-comment"># 选择数据库，没有就自动创建一个</span><br><br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 向数据库中的collection中插入一条数据，hellofriends为collection，如果没有则创建collection</span><br>db.hellofriends.insert_one(  <br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;canvas&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">100</span>,<br>     <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;cotton&quot;</span>],<br>     <span class="hljs-string">&quot;size&quot;</span>: &#123;<span class="hljs-string">&quot;h&quot;</span>: <span class="hljs-number">28</span>, <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">35.5</span>, <span class="hljs-string">&quot;uom&quot;</span>: <span class="hljs-string">&quot;cm&quot;</span>&#125;&#125;<br>     )<br><br><span class="hljs-comment"># 向数据库中插入多条数据</span><br>result1 = db.hellofriends.insert_many([<br>   &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;syz&quot;</span>,<br>      <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">20</span>,<br>      <span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;sleep&quot;</span><br>   &#125;,<br>   &#123;<br>      <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;zjw66&quot;</span>,<br>      <span class="hljs-string">&quot;age&quot;</span>:<span class="hljs-number">21</span>,<br>       <span class="hljs-string">&quot;hobby&quot;</span>:<span class="hljs-string">&quot;run&quot;</span><br>   &#125;<br>])<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 通过过滤参数查询指定的数据</span><br><span class="hljs-comment"># 等价于SELECT * FROM hellofriends WHERE name = &quot;syz&quot;</span><br>result = db.hellofriends.find(&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;syz&quot;</span>&#125;)<br><span class="hljs-comment"># result 为游标</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-comment"># 等价于SELECT * FROM hellofriends WHERE age in (19, 21)</span><br>result = db.hellofriends.find(&#123;<span class="hljs-string">&quot;age&quot;</span>:&#123;<span class="hljs-string">&quot;$in&quot;</span>:[<span class="hljs-number">19</span>,<span class="hljs-number">21</span>]&#125;&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-comment"># 等价于 select * from hellofriends where name = &quot;syz&quot; and age &lt; 20</span><br>result = db.hellofriends.find(&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;syz&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>:&#123;<span class="hljs-string">&quot;$lt&quot;</span>:<span class="hljs-number">20</span>&#125;&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-comment"># 等价于 select * from hellofriends where name = &quot;syz&quot; or age &lt; 20</span><br><br>result = db.hellofriends.find(&#123;<span class="hljs-string">&quot;$or&quot;</span>:[&#123;<span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;syz&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;age&quot;</span>:&#123;<span class="hljs-string">&#x27;$lt&#x27;</span>:<span class="hljs-number">21</span>&#125;&#125;]&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 等价于 select * from hellofriends where name = &quot;syz&quot; and (age &lt; 20 or hobby like &#x27;s%&#x27;)</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;name&quot;</span>:<span class="hljs-string">&quot;syz&quot;</span>,<br>    <span class="hljs-string">&quot;$or&quot;</span>:[<br>        &#123;<span class="hljs-string">&quot;age&quot;</span>:&#123;<span class="hljs-string">&quot;$lt&quot;</span>:<span class="hljs-number">20</span>&#125;&#125;,<br>        &#123;<span class="hljs-string">&quot;hobby&quot;</span>:&#123;<span class="hljs-string">&quot;$regex&quot;</span>:<span class="hljs-string">&quot;^s&quot;</span>&#125;&#125;<br>    ]<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><br><span class="hljs-comment"># 为了确保嵌套的字典是有序的，需要使用OrderedDict或者第三方包bson(垃圾包不要安)</span><br>db.hellofriends.insert_many([<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;journal&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">25</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: OrderedDict([(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">14</span>), (<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-number">21</span>), (<span class="hljs-string">&quot;uom&quot;</span>, <span class="hljs-string">&quot;cm&quot;</span>)]),<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;notebook&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">50</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: OrderedDict([(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">8.5</span>), (<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-number">11</span>), (<span class="hljs-string">&quot;uom&quot;</span>, <span class="hljs-string">&quot;in&quot;</span>)]),<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;paper&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">100</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: OrderedDict([(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">8.5</span>), (<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-number">11</span>), (<span class="hljs-string">&quot;uom&quot;</span>, <span class="hljs-string">&quot;in&quot;</span>)]),<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;planner&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">75</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: OrderedDict([(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">22.85</span>), (<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-number">30</span>), (<span class="hljs-string">&quot;uom&quot;</span>, <span class="hljs-string">&quot;cm&quot;</span>)]),<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;postcard&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">45</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: OrderedDict([(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-number">15.25</span>), (<span class="hljs-string">&quot;uom&quot;</span>, <span class="hljs-string">&quot;cm&quot;</span>)]),<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>&#125;])<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 注意：整个嵌套的文档中的匹配要求需要与指定的文档（包括字段的顺序）要完全一致，</span><br><span class="hljs-comment"># 字段顺序和之前插入的顺序不对，查不到任何文档</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;size&quot;</span>:OrderedDict([(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">14</span>), (<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-number">21</span>), (<span class="hljs-string">&quot;uom&quot;</span>, <span class="hljs-string">&quot;cm&quot;</span>)])<br>&#125;)<br>result1 = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;size&quot;</span>:OrderedDict([ (<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-number">21</span>), (<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-number">14</span>), (<span class="hljs-string">&quot;uom&quot;</span>, <span class="hljs-string">&quot;cm&quot;</span>)])<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:  <span class="hljs-comment"># 会显示数据</span><br>    <span class="hljs-built_in">print</span>(i)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result1:  <span class="hljs-comment"># 不会显示任何数据</span><br>    <span class="hljs-built_in">print</span>(i)<br><br><br><br>    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 通过.符号来获取嵌套的文档</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;size.h&quot;</span>:&#123;<span class="hljs-string">&quot;$lt&quot;</span>:<span class="hljs-number">15</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 插入数组</span><br><br>db.hellofriends.insert_many([<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;journal&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">25</span>,<br>     <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;blank&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>],<br>     <span class="hljs-string">&quot;dim_cm&quot;</span>: [<span class="hljs-number">14</span>, <span class="hljs-number">21</span>]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;notebook&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">50</span>,<br>     <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blank&quot;</span>],<br>     <span class="hljs-string">&quot;dim_cm&quot;</span>: [<span class="hljs-number">14</span>, <span class="hljs-number">21</span>]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;paper&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">100</span>,<br>     <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;blank&quot;</span>, <span class="hljs-string">&quot;plain&quot;</span>],<br>     <span class="hljs-string">&quot;dim_cm&quot;</span>: [<span class="hljs-number">14</span>, <span class="hljs-number">21</span>]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;planner&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">75</span>,<br>     <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;blank&quot;</span>, <span class="hljs-string">&quot;red&quot;</span>],<br>     <span class="hljs-string">&quot;dim_cm&quot;</span>: [<span class="hljs-number">22.85</span>, <span class="hljs-number">30</span>]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;postcard&quot;</span>,<br>     <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">45</span>,<br>     <span class="hljs-string">&quot;tags&quot;</span>: [<span class="hljs-string">&quot;blue&quot;</span>],<br>     <span class="hljs-string">&quot;dim_cm&quot;</span>: [<span class="hljs-number">10</span>, <span class="hljs-number">15.25</span>]&#125;])<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 搜索指定tags顺序的文档，要考虑顺序,并且是精准查询，只含有red和blank</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;tags&quot;</span>:[<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;blank&quot;</span>]<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 搜索包含red和blank数组，但不考虑他们的顺序</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;tags&quot;</span>:&#123;<span class="hljs-string">&quot;$all&quot;</span>:[<span class="hljs-string">&quot;red&quot;</span>,<span class="hljs-string">&quot;blank&quot;</span>]&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 查找数组中存在某个元素的文档</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;tags&quot;</span>:<span class="hljs-string">&quot;red&quot;</span><br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 对查找数组中的元素增加条件,只要数组中有满足某一个元素大于25且另外一个元素大于23</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;dim_cm&quot;</span>:&#123;<span class="hljs-string">&quot;$gt&quot;</span>:<span class="hljs-number">25</span>,<span class="hljs-string">&quot;$lt&quot;</span>:<span class="hljs-number">23</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 数组中需满足存在一个元素既大于23,又小于25就可以了</span><br><span class="hljs-comment"># $elemMatch表示 至少存在一个满足所有的条件的文档</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;dim_cm&quot;</span>:&#123;<span class="hljs-string">&quot;$elemMatch&quot;</span>:&#123;<span class="hljs-string">&quot;$gt&quot;</span>:<span class="hljs-number">22</span>, <span class="hljs-string">&quot;$lt&quot;</span>:<span class="hljs-number">25</span>&#125;&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 查找满足某些条件下数组中某个具体索引位置的元素</span><br><span class="hljs-comment"># 例如查找dim_cm数组中索引为1的并&gt;22的元素</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;dim_cm.0&quot;</span>:&#123;<span class="hljs-string">&quot;$gt&quot;</span>:<span class="hljs-number">21</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 通过数组的长度查找对应的文档</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;tags&quot;</span>:&#123;<span class="hljs-string">&quot;$size&quot;</span>:<span class="hljs-number">3</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 数组中嵌套</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br>db.hellofriends.insert_many([<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;journal&quot;</span>,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">5</span>)]),<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">15</span>)])]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;notebook&quot;</span>,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">5</span>)])]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;paper&quot;</span>,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">60</span>)]),<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">15</span>)])]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;planner&quot;</span>,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">40</span>)]),<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">5</span>)])]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;postcard&quot;</span>,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">15</span>)]),<br>         OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">35</span>)])]&#125;])<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> OrderedDict<br><br><span class="hljs-comment"># 精确查询某个嵌套的文档（精确查询要按照字典顺序）</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;instock&quot;</span>:OrderedDict([(<span class="hljs-string">&quot;warehouse&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>), (<span class="hljs-string">&quot;qty&quot;</span>, <span class="hljs-number">5</span>)])<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 查找只要数组中存在满足的条件即可</span><br><br><span class="hljs-comment"># 查找instock中的 qty&gt;=50 的文档</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;instock.qty&quot;</span>:&#123;<span class="hljs-string">&quot;$gte&quot;</span>:<span class="hljs-number">50</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 查找数组中指定索引的并满足条件的文档</span><br><br><span class="hljs-comment"># 查找instock数组中索引为0且 qty&lt;=10 的文档</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;instock.0.qty&quot;</span>:&#123;<span class="hljs-string">&quot;$lte&quot;</span>:<span class="hljs-number">10</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-comment"># elemMatch操作符</span><br><span class="hljs-comment"># 寻找满足instock数组中，6&lt;=qty&lt;=20条件下至少存在一条子文档的文档</span><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;instock&quot;</span>:&#123;<span class="hljs-string">&quot;$elemMatch&quot;</span>:&#123;<span class="hljs-string">&quot;qty&quot;</span>:&#123;<span class="hljs-string">&quot;$lte&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;$gte&quot;</span>:<span class="hljs-number">6</span>&#125;&#125;&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 查找满足instock数组中，qty &gt;= 6 or qty &lt;= 20 条件下至少存在一条子文档的文档</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;instock.qty&quot;</span>:&#123;<span class="hljs-string">&quot;$lte&quot;</span>:<span class="hljs-number">20</span>,<span class="hljs-string">&quot;$gte&quot;</span>:<span class="hljs-number">6</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br><br>    <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 查找满足qty=5且warehouse=”A“的至少一条文档</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;instock.qty&quot;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&quot;instock.warehouse&quot;</span>:<span class="hljs-string">&quot;A&quot;</span><br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 用于限定查询文档字段量的demo</span><br>db.hellofriends.insert_many([<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;journal&quot;</span>,<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: &#123;<span class="hljs-string">&quot;h&quot;</span>: <span class="hljs-number">14</span>, <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">21</span>, <span class="hljs-string">&quot;uom&quot;</span>: <span class="hljs-string">&quot;cm&quot;</span>&#125;,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [&#123;<span class="hljs-string">&quot;warehouse&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">5</span>&#125;]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;notebook&quot;</span>,<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: &#123;<span class="hljs-string">&quot;h&quot;</span>: <span class="hljs-number">8.5</span>, <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&quot;uom&quot;</span>: <span class="hljs-string">&quot;in&quot;</span>&#125;,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [&#123;<span class="hljs-string">&quot;warehouse&quot;</span>: <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">5</span>&#125;]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;paper&quot;</span>,<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: &#123;<span class="hljs-string">&quot;h&quot;</span>: <span class="hljs-number">8.5</span>, <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">11</span>, <span class="hljs-string">&quot;uom&quot;</span>: <span class="hljs-string">&quot;in&quot;</span>&#125;,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [&#123;<span class="hljs-string">&quot;warehouse&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">60</span>&#125;]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;planner&quot;</span>,<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;D&quot;</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: &#123;<span class="hljs-string">&quot;h&quot;</span>: <span class="hljs-number">22.85</span>, <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">30</span>, <span class="hljs-string">&quot;uom&quot;</span>: <span class="hljs-string">&quot;cm&quot;</span>&#125;,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [&#123;<span class="hljs-string">&quot;warehouse&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">40</span>&#125;]&#125;,<br>    &#123;<span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-string">&quot;postcard&quot;</span>,<br>     <span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;A&quot;</span>,<br>     <span class="hljs-string">&quot;size&quot;</span>: &#123;<span class="hljs-string">&quot;h&quot;</span>: <span class="hljs-number">10</span>, <span class="hljs-string">&quot;w&quot;</span>: <span class="hljs-number">15.25</span>, <span class="hljs-string">&quot;uom&quot;</span>: <span class="hljs-string">&quot;cm&quot;</span>&#125;,<br>     <span class="hljs-string">&quot;instock&quot;</span>: [<br>         &#123;<span class="hljs-string">&quot;warehouse&quot;</span>: <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">15</span>&#125;,<br>         &#123;<span class="hljs-string">&quot;warehouse&quot;</span>: <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;qty&quot;</span>: <span class="hljs-number">35</span>&#125;]&#125;])<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 默认返回包含所有字段的文档</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;A&quot;</span><br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 返回指定fields的文档</span><br><br><span class="hljs-comment"># 返回的文档中只包含item和status和_id字段，</span><br><span class="hljs-comment"># 默认包含_id字段（即无需显示指定_id字段），可以通过显示显示&quot;_id&quot;:0,来排出该字段</span><br><br><span class="hljs-comment"># 等价于select _id, item, status fro hellofriends where status = &quot;A&quot;</span><br><br><br>result = db.hellofriends.find(<br>    &#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;item&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-number">1</span>&#125; <span class="hljs-comment"># 添加限制约束条件</span><br>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;A&quot;</span><br>&#125;,&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&quot;instock&quot;</span>:<span class="hljs-number">0</span>, <span class="hljs-string">&quot;item&quot;</span>:<span class="hljs-number">0</span>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 对嵌套的文档执行指定字段的映射</span><br><br><span class="hljs-comment"># 可以使用.fields，无法使用.index</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;A&quot;</span><br>&#125;,&#123;<span class="hljs-string">&quot;item&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;size.uom&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;instock.qty&quot;</span>:<span class="hljs-number">1</span>&#125;)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># $slice表示查询结果的数组中指定的元素数量</span><br><br><span class="hljs-comment"># 选择显示一个元素</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-string">&quot;A&quot;</span><br>&#125;,&#123;<span class="hljs-string">&quot;item&quot;</span>:<span class="hljs-number">1</span>, <span class="hljs-string">&quot;instock&quot;</span>:&#123;<span class="hljs-string">&quot;$slice&quot;</span>:<span class="hljs-number">1</span>&#125;&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 查询null数据或者缺失的字段</span><br><br>db.hellofriends.insert_many([&#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&quot;item&quot;</span>: <span class="hljs-literal">None</span>&#125;, &#123;<span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-number">2</span>&#125;])<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 精确查询，查找item为null或者不包含item字段的文档</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;item&quot;</span>:<span class="hljs-literal">None</span><br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 文档类型检查,10表示为null，只查询item为null的文档</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;item&quot;</span>:&#123;<span class="hljs-string">&quot;$type&quot;</span>:<span class="hljs-number">10</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 只查询item不存在（并不是null or ‘’）的文档，区别于关系sql，关系sql只有null or &#x27;&#x27;</span><br>result = db.hellofriends.find(&#123;<br>    <span class="hljs-string">&quot;item&quot;</span>:&#123;<span class="hljs-string">&quot;$exists&quot;</span>:<span class="hljs-literal">False</span>&#125;<br>&#125;)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Mongodb</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mongodb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastAPI框架学习笔记（一）</title>
    <link href="/2020/11/05/FastAPI%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2020/11/05/FastAPI%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h3><p>出入学习，简单介绍一下FastApi这个框架，它是具备高性能，支持异步的基于OpenApi和json scheme 协议模式的并适用于API快速开发的框架。其性能可媲美GO的web框架。是python的web框架速度最快框架之一。</p><p>声明：之前学习了DRF用于开发API的框架，所以现在学习FastAPI的过程中我有时也会对比思考两框架的相同点和不同点，这样更易于理解两个框架。</p><p>学习文档来源：<a href="https://fastapi.tiangolo.com/tutorial/">官方文档</a></p><hr><h3 id="二-安装"><a href="#二-安装" class="headerlink" title="二  安装"></a><strong>二  安装</strong></h3><p>创建并进入虚拟环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install fastapi<br><br>pip install uvicorn  <span class="hljs-comment"># python的asgi协议的 服务器</span><br><br><br></code></pre></td></tr></table></figure><hr><h3 id="三-运行服务器"><a href="#三-运行服务器" class="headerlink" title="**三  运行服务器 **"></a>**三  运行服务器 **</h3><p>在命令行输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">uvicorn main:app --reload  # reload只使用开发模式，保存代码后自动刷新服务器<br><br></code></pre></td></tr></table></figure><hr><h3 id="四-学习之旅"><a href="#四-学习之旅" class="headerlink" title="四  学习之旅"></a><strong>四  学习之旅</strong></h3><h4 id="1-自动生成API文档"><a href="#1-自动生成API文档" class="headerlink" title="1.自动生成API文档"></a><strong>1.自动生成API文档</strong></h4><p>阅读官方文档的起步部分，给我印象最深得高效的就是自动对接了swagger的文档和redoc文档，以及之后的一些教程，文档中都会强调文档的重要性，而DRF在文档生成这块做的并不是特别好，官方文档中并没有明确指出与其搭配的最佳文档，我之前也在drf中加入了swaggerui，但是生成的文档与fastapi生成的文档相比，显然后者更加全面。</p><hr><h4 id="1-参数传递"><a href="#1-参数传递" class="headerlink" title="1.参数传递"></a><strong>1.参数传递</strong></h4><p>fastapi中视图函数中有三种参数类型，分别为了路径参数，请求体参数，查询参数。</p><p>（1）路径参数：</p><p>格式：/home/{home-id}/,这里的home-id就属于home-id,当然可以在在前面添加类型限制，当然这种写法在django和flask等其他框架中都可以这样写，不过这里fastapi区别于其他的在于它可以在参数中定义类型，用于数据验证和类型检查，这一点想比于DRF我认为使用起来简易，易于快速开发。</p><p>这里举个路径参数的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 路由参数匹配任何的路径</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/files/&#123;file_path:path&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_file</span>(<span class="hljs-params">file_path: <span class="hljs-built_in">str</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;file_path&quot;</span>: file_path&#125;<br></code></pre></td></tr></table></figure><hr><p>（2） 请求体参数：</p><p>一般发生在post，put，patch请求中，格式：/home/，数据以报文段的形式放在请求体中，这里先需要转入另一个话题，pydantic的model，初识pydantic的model，给我的感觉就是挺像DRF的序列化器，但又存在不同。</p><p><strong>DRF的序列化器和Pydantic的BaseModel的异同点：</strong></p><p>1.相同点：</p><p>（1）两者中每个属性都可以为一个字段，都是一个对象。每个字段都可以嵌套其他的序列化器/model。</p><p>（2）前端传过来的数据/响应回去的数据都通过序列化器/model，进行反序列化和序列化。</p><p>2.不同点：</p><p>（1）DRF自身的界定是作为一个开发API框架潜入到Django，因此它要与Django继承，必然API的一系列操作要与Django存在着耦合性。而FastApi作为一款纯API开发的异步框架，自然其主导核心在API上，所以视图函数和数据的序列化和反序列化写到一起，而使用装饰器大大降低了数据验证和业务逻辑之间的耦合性。</p><p>（2）DRF的序列化器其中封装了很多功能，同时需要需要手动调用is_valid()方法，进行数据的验证。而FastApi会在装饰器内进行数据的验证，通过指明参数的类型。一旦验证出错就会抛出异常，这样 raise HTTPException异常，FastApi就会捕捉进行处理响应。</p><p>（3）FastApi的数据校验通常在继承modelbase的类（通过Field函数设定）或者装饰器（控制响应数据）以及试图函数中（参数类型）进行约束。而DRF中主要的验证是在field_validate,各字段的validator，validate中进行验证。其主要在序列化器中。</p><p>（4）FastApi主要的数据校验直接通过Python的Typing类中的类型进行，而DRF的数据校验通过封装的一系列序列化字段进行。</p><p>（5）FastApi中验证错误会返回422,表示Unprocessable Entity 请求格式正确，但其中的数据语法错误。而DRF中会验证错误，抛出ValidationErro异常后，会返回400的状态码。</p><p>（6）FastApi中的请求体参数从视图函数的参数中传递过来，而DRF是在二次封装的在dispatch方法的initial_request函数中封装到request.data的property的只读特性中。</p><p>（7）总的给我的感觉，用FastApi写Api比DRF效率快，且性能高，毕竟人家FastApi是异步的～</p><hr><p><strong>注意：以上的区别点不包括各个FastApi的特殊类—-Query/Body/Form/File/Path/Field的比较，这些介绍放在以后的笔记中！</strong></p><hr><p>下面举一些例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Item</span>(<span class="hljs-params">BaseModel</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    用于数据校验，自动化完成</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    name: <span class="hljs-built_in">str</span><br>    price: <span class="hljs-built_in">float</span><br>    is_offer: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">bool</span>] = <span class="hljs-literal">None</span><br><br><br><span class="hljs-meta">@app.put(<span class="hljs-params"><span class="hljs-string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">int</span>, item: Item</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    item在进入函数前已经完成相关的校验了</span><br><span class="hljs-string">    item具备代码补全，数据验证</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;item_name&quot;</span>: item.name, <span class="hljs-string">&quot;item_id&quot;</span>: item_id&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>其中的参数中设定的item的类型为Item，因为Item继承了BaseModel，所以它就可以被看作是一个请求体，前端的数据会通过序列化+验证==&gt;item对象，然后被编译器识别，提供代码补全，此时就可以通过item对象来访问里面的属性了。这个例子只是简单介绍了请求时的情况，响应时的情况将在以后的笔记中记录。</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 创建一个枚举类，用于约束某个字段输入的数据</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelName</span>(<span class="hljs-params"><span class="hljs-built_in">str</span>, Enum</span>):</span><br>    name = <span class="hljs-string">&#x27;syz&#x27;</span><br>    age = <span class="hljs-number">18</span><br>    hobby = <span class="hljs-string">&#x27;play game&#x27;</span><br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/model/&#123;model_name&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_model</span>(<span class="hljs-params">model_name: ModelName</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;只有经过枚举类型的验证才会进入该函数内&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> model_name == ModelName.name:<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;model_name&quot;</span>: model_name&#125;<br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;model_name&quot;</span>: <span class="hljs-string">&#x27;???&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 需要将固定的路由放在前面</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/users/me&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_user_me</span>():</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;user_id&quot;</span>: <span class="hljs-string">&quot;the current user&quot;</span>&#125;<br><br><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">read_user</span>(<span class="hljs-params">user_id: <span class="hljs-built_in">str</span></span>):</span><br>    <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">&quot;user_id&quot;</span>: user_id&#125;<br></code></pre></td></tr></table></figure><hr><p>（3）查询参数</p><p>查询参数一般在前端传递的格式为/?page=1&amp;limit=10，其中page和limit就是查询参数。<br>同样的与DRF相比较一下</p><p>1.相同点：</p><p>（1）一般用于GET方法，遵循查询参数的一系列格式</p><p>2.不同点：</p><p>（1）FastApi的查询参数放在视图参数中，而DRF的查询参数通过中间件封装在request.GET中。</p><hr><p><strong>注意：以上的区别点不包括各个FastApi的特殊类—-Query/Body/Form/File/Path/Field的比较，这些介绍放在以后的笔记中！</strong></p><hr><p><strong>举个例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 路径参数 + 路径参数 + 查询参数,顺序不能乱！</span><br><br><span class="hljs-meta">@app.put(<span class="hljs-params"><span class="hljs-string">&quot;/items_two/&#123;item_id&#125;&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_item</span>(<span class="hljs-params">item_id: <span class="hljs-built_in">int</span>, item: Item, q: <span class="hljs-type">Optional</span>[<span class="hljs-built_in">str</span>] = <span class="hljs-literal">None</span></span>):</span><br>    result = &#123;<span class="hljs-string">&quot;item_id&quot;</span>: item_id, **item.<span class="hljs-built_in">dict</span>()&#125;<br>    <span class="hljs-keyword">if</span> q:<br>        result.update(&#123;<span class="hljs-string">&quot;q&quot;</span>: q&#125;)<br>    <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><hr><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>这篇笔记在学习到FastApi后半部分时候记录的笔记，因为有太多要讲，但一次很难讲完全部，因此我拆分几部分进行记录讲解。下一篇笔记准备讲解记录FastApi中的特殊类！</p><p>总的来说，FastApi写API给我的感觉很舒服，完备的SwaagerUi文档，数据校验的优雅代码，希望之后的学习中FastApi可以带给我更多惊喜，提高Api的急速开发！</p>]]></content>
    
    
    <categories>
      
      <category>FastApi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FastApi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探析cached_propety装饰器缓存的原理</title>
    <link href="/2020/10/21/%E6%8E%A2%E6%9E%90cached_propety%E8%A3%85%E9%A5%B0%E5%99%A8%E7%BC%93%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <url>/2020/10/21/%E6%8E%A2%E6%9E%90cached_propety%E8%A3%85%E9%A5%B0%E5%99%A8%E7%BC%93%E5%AD%98%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h4><p>今天在用FastDfs重写Django默认的Storage存储系统，跟着源码来设计一些常用的功能，正好看到了一个装饰器cached_propety,看着这个名字，非常好懂，缓存+描述器。于是我打算学习下源码中是如何利用描述器实现缓存的。</p><p>cached_property是我在Django的Storage类中找到的，其他地方也可以找到。</p><hr><h4 id="二-源码分析"><a href="#二-源码分析" class="headerlink" title="二  源码分析"></a><strong>二  源码分析</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cached_property</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Decorator that converts a method with a single self argument into a</span><br><span class="hljs-string">    property cached on the instance.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    A cached property can be made out of an existing method:</span><br><span class="hljs-string">    (e.g. ``url = cached_property(get_absolute_url)``).</span><br><span class="hljs-string">    On Python &lt; 3.6, the optional ``name`` argument must be provided, e.g.</span><br><span class="hljs-string">    ``url = cached_property(get_absolute_url, name=&#x27;url&#x27;)``.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    name = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>(<span class="hljs-params">instance</span>):</span><br>        <span class="hljs-keyword">raise</span> TypeError(<br>            <span class="hljs-string">&#x27;Cannot use cached_property instance without calling &#x27;</span><br>            <span class="hljs-string">&#x27;__set_name__() on it.&#x27;</span><br>        )<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_is_mangled</span>(<span class="hljs-params">name</span>):</span><br>        <span class="hljs-keyword">return</span> name.startswith(<span class="hljs-string">&#x27;__&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> name.endswith(<span class="hljs-string">&#x27;__&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, func, name=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">if</span> PY36:<br>            self.real_func = func<br>        <span class="hljs-keyword">else</span>:<br>            func_name = func.__name__<br>            name = name <span class="hljs-keyword">or</span> func_name<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> (<span class="hljs-built_in">isinstance</span>(name, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">and</span> name.isidentifier()):<br>                <span class="hljs-keyword">raise</span> ValueError(<br>                    <span class="hljs-string">&quot;%r can&#x27;t be used as the name of a cached_property.&quot;</span> % name,<br>                )<br>            <span class="hljs-keyword">if</span> self._is_mangled(name):<br>                <span class="hljs-keyword">raise</span> ValueError(<br>                    <span class="hljs-string">&#x27;cached_property does not work with mangled methods on &#x27;</span><br>                    <span class="hljs-string">&#x27;Python &lt; 3.6 without the appropriate `name` argument. See &#x27;</span><br>                    <span class="hljs-string">&#x27;https://docs.djangoproject.com/en/%s/ref/utils/&#x27;</span><br>                    <span class="hljs-string">&#x27;#cached-property-mangled-name&#x27;</span> % get_docs_version(),<br>                )<br>            self.name = name<br>            self.func = func<br>        self.__doc__ = <span class="hljs-built_in">getattr</span>(func, <span class="hljs-string">&#x27;__doc__&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__set_name__</span>(<span class="hljs-params">self, owner, name</span>):</span><br>        <span class="hljs-keyword">if</span> self.name <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self.name = name<br>            self.func = self.real_func<br>        <span class="hljs-keyword">elif</span> name != self.name:<br>            <span class="hljs-keyword">raise</span> TypeError(<br>                <span class="hljs-string">&quot;Cannot assign the same cached_property to two different names &quot;</span><br>                <span class="hljs-string">&quot;(%r and %r).&quot;</span> % (self.name, name)<br>            )<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get__</span>(<span class="hljs-params">self, instance, cls=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Call the function and put the return value in instance.__dict__ so that</span><br><span class="hljs-string">        subsequent attribute access on the instance returns the cached value</span><br><span class="hljs-string">        instead of calling cached_property.__get__().</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self<br>        res = instance.__dict__[self.name] = self.func(instance)<br>        <span class="hljs-keyword">return</span> res<br></code></pre></td></tr></table></figure><hr><p>这个装饰器的源码不算长，这里主要关注的几个函数分别为<code>__init__</code>，<code>__set_name___</code>,<code>__get__</code>方法，我之前认为的类装饰器一般都会使用<code>__call__</code>内置方法，在这里我要直呼装饰器的强大。</p><p>之前还看见DRF的viewset中action装饰器工厂，在增强被修饰的函数其实装饰器工厂只需两层就够了，并不一定像书上说的装饰器工厂需要三层，三层的情况一般在装饰器中显示调用了被修饰的函数，这里可能您看着比较绕，我会在之后的笔记中详细解读各类框架中的优秀装饰器！</p><hr><p>1.首先我们来看下<strong>init</strong>()初始化函数，传入了两个额外参数，分别为func，name，func其实就是装饰器修饰的方法，而name默认为None,为可变防御参数。<strong>init</strong>()方法主要是获取被修饰函数的一些元属性，包括__name__，然后进行类型检查等，并规定被cached_property修饰的方法不能是魔法方法（内置方法），原因异常中给出了，小于python3.6的版本没有name属性。</p><p><strong>注：这里有一点我没有弄懂，他在这里加了name，那我该如何在写@cached_property的时候添加上name呢？如果作为@cached_property的参数，则会报参数不够的异常。如果有大佬知道，欢迎给我留言或者注册下，还请您不吝珠玉！</strong></p><hr><p>2.接着来看第二个函数<code>__get__()</code>函数,熟悉描述器的高手们肯定知道这个这个方法是属于描述器协议中的。用于当一个定义了<code>__get__()</code>/<code>__set__()</code>/<code>__del__()</code>的协议的类作为另一个类的类属性时，调用该属性，则会调用<code>__get__()</code>方法。我在另一篇笔记中讲解了<a href="https://syzzjw.cn/notes/user_articles_list/syz_descriptors/">描述器</a>。这个函数是整个缓存思想的核心哦，原理就是首先调用被修饰的方法，然后获取到结果，将其保存在调用类（不是cached_propery,而是其所修饰的函数所在的类)的实例对象的实例字典__dict__中，键为默认为函数名。然后返回结果。</p><p><strong>注：第一次会调用<strong>get</strong>()方法，因为__dict__中没有对应的键值对，而第一次调用后会添加键值对，以便后面的调用都会直接获取实例字典中的属性，而不需要重复调用被修饰的函数了。这样有效的利用实例字典缓存数据提高了性能！</strong></p><p>为此我自己模仿它，写了简单的类并通过Debug来验证其只有在第一此调用才会调用<strong>get</strong>(),之后则会调用<strong>getattribute</strong>()方法，实则调用<code>__dict[name]__.__get__(self,type(self))</code>。</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    counts = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get__</span>(<span class="hljs-params">self, instance, cls=<span class="hljs-literal">None</span></span>):</span><br>        self.counts += <span class="hljs-number">1</span><br>        instance.__dict__[<span class="hljs-string">&#x27;t&#x27;</span>] = <span class="hljs-string">&#x27;ok!&#x27;</span><br>        <span class="hljs-built_in">print</span>(self.counts)<br>        <span class="hljs-keyword">return</span> instance.__dict__[<span class="hljs-string">&#x27;t&#x27;</span>]<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    t = Test()<br><br>m = Operation()<br><br><span class="hljs-built_in">print</span>(m.t)       <span class="hljs-comment"># 第一次调用__get()__方法</span><br><br><span class="hljs-built_in">print</span>(m.t)       <span class="hljs-comment"># 第二次调用__getattribute__()&lt;==&gt;__dict__[&#x27;t&#x27;].__get__(m,type(m))</span><br></code></pre></td></tr></table></figure><p>感兴趣的可以利用debug <code>__get__()</code>来看counts的打印次数，只有一次</p><hr><p>3.最后第三个函数，就是<code>__set_name__</code>函数，一边运行时可以动态修改name值，修改dict字典中映射键值对。</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>看完上面的讲解，是不是发现大神们的框架中有很多高级的用法呢？或许肯定有小伙伴觉得麻烦，认为直接在函数中可以直接利用实例字典进行缓存。是的，没错，但是框架毕竟是框架，要高可用和扩展性强才能证明是一个好框架。而利用了装饰器的解耦效果，增强了扩展性！</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详细理解并举例分析Python中的上下文管理器</title>
    <link href="/2020/10/15/%E8%AF%A6%E7%BB%86%E7%90%86%E8%A7%A3%E5%B9%B6%E4%B8%BE%E4%BE%8B%E5%88%86%E6%9E%90Python%E4%B8%AD%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <url>/2020/10/15/%E8%AF%A6%E7%BB%86%E7%90%86%E8%A7%A3%E5%B9%B6%E4%B8%BE%E4%BE%8B%E5%88%86%E6%9E%90Python%E4%B8%AD%E7%9A%84%E4%B8%8A%E4%B8%8B%E6%96%87%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="理解Python的上下文管理器的原理和使用"><a href="#理解Python的上下文管理器的原理和使用" class="headerlink" title="理解Python的上下文管理器的原理和使用"></a>理解Python的上下文管理器的原理和使用</h3><h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h3><p>很久前看了《流畅的Python》一书，未做笔记，最近学FastAPI框架时，学到了在FastAPI中使用到了上下文管理器，特此来把笔记补上，加深学习印象！</p><h3 id="二-简介"><a href="#二-简介" class="headerlink" title="二  简介"></a><strong>二  简介</strong></h3><p>with作为python上下文管理的关键字，它会设置一个临时的上下文，交给上下文的管理器对象控制，并且负责清理上下文，避免错误以及减少重用代码。</p><p><strong>用一句话简要概括</strong>: 上下文管理器的存在母的是管理with语句，就像迭代器的存在是为了管理for语句</p><hr><h3 id="三-探索with"><a href="#三-探索with" class="headerlink" title="三  探索with"></a><strong>三  探索with</strong></h3><p>1.with的语句是简化重复的try/finally在语句中多次出现，并完成try/finally该做的事情。说到这，我觉得装饰器和上下文管理器有着异曲同工之妙，面向切面编程。</p><p>2.上下文管理器的协议包含<code>__enter__</code>和<code>__exit__</code>方法。</p><p>3.以<code>with open() as f:</code>为例子大致执行流程：</p><p>(1)首先with开始运行时，会在上下文管理器中调用<code>__enter__</code>方法，将<code>__enter__</code>返回的值绑定到<code>f</code>对象上，这样就得到了上下文管理对象，接下来在with代码体内都可以通过f来调用相关属性（例如这里的f就是文件对象，那么我就可以通过f来调用文件对象中的属性和方法）。退出with代码块时调用<code>__exit__</code>。</p><p>(2)<code>__enter__</code>返回的也不一定是上下文对象（自身），也可以是其他对象</p><p>(3)注意要绑定对象，必须使用<code>as</code>。</p><hr><p><strong>举一个最简单的例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestContextManager</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;__enter__ is running&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute</span>(<span class="hljs-params">self</span>):</span><br>        x = <span class="hljs-number">1</span>/<span class="hljs-number">0</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;computing is running&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span>(<span class="hljs-params">self, exc_type, exc_value,traceback</span>):</span><br>        <span class="hljs-keyword">if</span> exc_type <span class="hljs-keyword">is</span> ZeroDivisionError:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;error&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;no error&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">with</span> TestContextManager() <span class="hljs-keyword">as</span> t:<br>    t.compute()<br>    <br><span class="hljs-comment"># 执行结果：</span><br>__enter__ <span class="hljs-keyword">is</span> running<br>error<br></code></pre></td></tr></table></figure><p><strong>执行流程：</strong>先进入with前，执行<code>__enter__</code>,然后调用<code>compute</code>,最后退出with时调用<code>__exit__</code>。</p><p><strong>注意点：</strong> </p><p>1.从上述<code>__exit__</code>代码的参数中可以看出需要传入三个参数，分别为异常类型，异常实例（通过exc_value.args来获取异常值)，回朔点对象。</p><p>2.注意看<code>__exit__</code>中最后一句是<code>return True</code>,这里会告诉解释器异常已经处理，解释器会压制异常，从而不会报错。而如果不写<code>return True</code>时，则解释器仍会抛出异常。这一点会在@contextmanager装饰器中再次提到</p><hr><h3 id="四-常用的contextlib-contextmanager装饰器"><a href="#四-常用的contextlib-contextmanager装饰器" class="headerlink" title="四  常用的contextlib.@contextmanager装饰器"></a><strong>四  常用的contextlib.@contextmanager装饰器</strong></h3><p>1.在抽象AbstractContextManager(出现在3.6中)定义了该两个函数的默认抽象方法，同时定义了一个钩子函数，用于检查自定义的上下文管理器类是否具备<code>__enter__</code>,和<code>__exit__</code>方法。（也就是继承了抽象类，必须要存在这两个方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractContextManager</span>(<span class="hljs-params">abc.ABC</span>):</span><br><br>    <span class="hljs-string">&quot;&quot;&quot;An abstract base class for context managers.&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;Return `self` upon entering the runtime context.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self<br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span>(<span class="hljs-params">self, exc_type, exc_value, traceback</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;Raise any exception triggered within the runtime context.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__subclasshook__</span>(<span class="hljs-params">cls, C</span>):</span><br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">is</span> AbstractContextManager:<br>            <span class="hljs-keyword">return</span> _collections_abc._check_methods(C, <span class="hljs-string">&quot;__enter__&quot;</span>, <span class="hljs-string">&quot;__exit__&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NotImplemented</span><br><br></code></pre></td></tr></table></figure><p>（1）默认的<code>__enter__</code>返回的是上下文管理器对象自身。</p><p>（2）默认的<code>__exit__</code>返回的是None</p><hr><p>2.AbstractAsyncContextManager和AbstractContextManager的区别主要在前者之处异步，后者支持同步。</p><p>3.@contextmanager（出现在3.7版本)是一个装饰器，装饰器在这里的作用是简化代码，通过装饰器来装饰函数，而不需要定义一个类，包含两个必要的函数（<code>__enter__</code>,<code>__exit__</code>)。这样在函数中需用yield来作为<code>__enter__</code>和<code>__exit__</code>的临界点。yield的前半段的代码作用等同于调用了<code>__enter__</code>,后半段等同与调用了<code>__exit__</code>。</p><p>4.@contextmanager会将函数包装成实现了<code>__enter__</code>和<code>__exit__</code>。</p><p>5.会在退出with的作用域后调用<code>__exit__</code>或执行yield之后的代码段</p><hr><p><strong>仍用上面的1/0举个例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-meta">@contextlib.contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_contextmanager</span>(<span class="hljs-params">number</span>):</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;enter %d&#x27;</span> % number)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br><br><span class="hljs-keyword">with</span> test_contextmanager(<span class="hljs-number">0</span>) <span class="hljs-keyword">as</span> t:<br>    <span class="hljs-built_in">print</span>(t)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;running&#x27;</span>)     <span class="hljs-comment"># 模拟业务逻辑</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>)    <span class="hljs-comment"># 模拟业务逻辑出错,会被yield后的异常处理代码段捕捉</span><br><br><span class="hljs-comment"># 执行结果：</span><br>enter <span class="hljs-number">0</span>  <span class="hljs-comment"># yield之前执行</span><br><span class="hljs-number">1</span>           <span class="hljs-comment"># yield之后执行</span><br>running   <span class="hljs-comment"># yield之后执行</span><br>division by zero   <span class="hljs-comment"># 异常处理</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>使用调试模式运行，在with下面的所有语句（包括自身）打上断点，就可以直观的感受到是如何运行的了，@contextlib.contextmanager是语法糖，能够在无需<code>__enter__</code>和<code>__exit__</code>方法，通过单yield实现<br>上下文管理器功能。</p><hr><p><strong>4.1 @contextmanager中等价于<code>__enter__</code>的功能作用：</strong></p><p>(1)调用生成器函数（被装饰的函数），保存生成器对象obj。</p><p>(2)调用next(obj),执行到yield关键字所在的位置处。</p><p>(3)将yield value产出的值，绑定到as 后指明的目标变量上。</p><hr><p><strong>4.2 @contextmanager中等价于<code>__exit__</code>的功能作用：</strong></p><p>(1)检查有没有把异常传给exc_type，如果有则调用obj.throw，抛出异常。</p><p>(2)在生成器函数yield关键字那一行抛出抛出异常（可以回滚到yield)，在yield后半段处理异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 例如在yield处抛出异常，yield后半段进行处理</span><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">yield</span> ValueError(<span class="hljs-string">&#x27;value error&#x27;</span>)<br><span class="hljs-keyword">except</span> ValueError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Exception successfully handled&#x27;</span>)<br></code></pre></td></tr></table></figure><p>(3)否则没有异常，则继续调用next(obj)，执行yield语句以后的代码。</p><p><strong>注意点：</strong></p><p>刚才上面提到了自定义的上下文类中的<code>__exit__</code>方法中使用了<code>return True</code>来压制异常。但是在<code>@contextmanager</code>中由于没有显示的<code>__exit__</code>方法存在，所以其装饰器会默认异常已经被处理，也就是强制压制了异常，因此在使用<code>@contextmanager</code>的时候必须要在yield处用try和catch捕获异常。然后捕捉到在yield处抛出。</p><hr><h3 id="五-FastApi中所提到的Dependencies-with-yield"><a href="#五-FastApi中所提到的Dependencies-with-yield" class="headerlink" title="五  FastApi中所提到的Dependencies with yield"></a><strong>五  FastApi中所提到的Dependencies with yield</strong></h3><p>1.如果对FastApi不感兴趣的可以不用往下看了。</p><p>2.FastApi中使用到了一种解耦+复用的机制—-依赖注入，依赖注入在Spring中也被广泛使用到。而FastApi将依赖注入和上下文管理器结合到了一起。</p><p>举个官网的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> fastapi <span class="hljs-keyword">import</span> Depends<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dependency_a</span>():</span><br>    dep_a = generate_dep_a()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> dep_a<br>    <span class="hljs-keyword">finally</span>:<br>        dep_a.close()<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dependency_b</span>(<span class="hljs-params">dep_a=Depends(<span class="hljs-params">dependency_a</span>)</span>):</span><br>    dep_b = generate_dep_b()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> dep_b<br>    <span class="hljs-keyword">finally</span>:<br>        dep_b.close(dep_a)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dependency_c</span>(<span class="hljs-params">dep_b=Depends(<span class="hljs-params">dependency_b</span>)</span>):</span><br>    dep_c = generate_dep_c()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> dep_c<br>    <span class="hljs-keyword">finally</span>:<br>        dep_c.close(dep_b)<br>        <br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&#x27;/items-syz&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dependency</span>(<span class="hljs-params">dependency: <span class="hljs-built_in">str</span> = DeDepends(<span class="hljs-params">dependency_c</span>)</span>):</span><br>    <span class="hljs-keyword">return</span> dependency<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>1.FastApi中对上下文管理器的用法和普通的上下文管理器有一些差别，但基本原理是一致的。</p><p>2.FastApi中设定了这样一种机制，它允许在<code>__exit__</code>中依赖项处理异常程序之外自定义异常处理程序。其中依赖项退出代码相当于在<code>__exit__</code>中定义的函数。而自定义异常需要自定义异常处理程序处理，不能由依赖项退出代码处理（<code>__exit__</code>\yield之后）</p><p>3.FastApi在捕获处理了HttpExcpetion后，其他自定义的异常处理程序将不能再捕获该异常。</p><p>4.如果在后台运行期间（路径函数中）发生了异常，可以会滚到yield处进行捕获抛出。</p><p>5.进入到yield后的代码段，将执行异常处理程序，同时将不能再对response做出修改(此时已经退出了路径函数作用域)。</p><p>6.总的来说，其实并不需要在fastapi中使用@contextmanager装饰器或者自定义上下文管理器类实现，因为它已经将其和依赖注入结合封装好了（Depends)，要学习它的原理。</p><hr><p>结合官方的一张图能更好的理解：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/fastApi_context_manager.png" alt="6666">{width=100%}</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro添加双屏的显示问题</title>
    <link href="/2020/10/08/manjaro%E6%B7%BB%E5%8A%A0%E5%8F%8C%E5%B1%8F%E7%9A%84%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2020/10/08/manjaro%E6%B7%BB%E5%8A%A0%E5%8F%8C%E5%B1%8F%E7%9A%84%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>今天刚到手便携显示器，刚连接manjaro发现，触摸屏幕不准，有意思的是两个屏幕上界面竟然不一样，<br>讲道理不应该是共享嘛？用了几个小时，滑动屏幕，随着越左，偏移越多，竟然偏移到了主屏上。</p><p>经过百度了一番，最终确定是屏幕显示的问题，默认将第二屏幕向右扩展了。因此只需要修改复制屏幕就行了</p><hr><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h4><p>首先查看显示器状态，<code>xrandr</code></p><p>我这里连接了两个，eDP-1为主屏，而HDMI-2为副屏，因此只需要执行如下指令，将向右靠齐===&gt;整体复制就行了</p><p><code>xrandr --output HDMI-2 --same-as eDP-1 --mode 1920x1080</code></p><p>注意：HDMI-2为副屏的设备接口名，而eDP-1为主屏的设备接口名！</p><p>这样调整后，触感瞬间就来了～</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Manjaro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从数据结构角度理解B和B+树的特性</title>
    <link href="/2020/10/05/%E4%BB%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3B%E5%92%8CB+%E6%A0%91%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <url>/2020/10/05/%E4%BB%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3B%E5%92%8CB+%E6%A0%91%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h4><p>之前通过网课学习了B树和B+树的一些知识，我再另一篇笔记中分析比较了4钟类型的树结构，<a href="https://syzzjw.cn/notes/user_articles_list/syz_mysql_b/">文章地址</a>，最近忙于考研，正好看到了王道书上B树和B+树的知识点，从数据结构角度来讲解的，为了加深理解，我将结合王道书的内容和自己的理解，写成本篇笔记。</p><hr><h4 id="二-B树的概念"><a href="#二-B树的概念" class="headerlink" title="二  B树的概念"></a><strong>二  B树的概念</strong></h4><p>首先标明几个概念：</p><p><strong>1.阶：B树中所有结点的孩子个数的最大值</strong></p><p><strong>2.终端结点：除叶子结点外最底层的那一层结点</strong></p><p><strong>1.概念：B树称为多路平衡查找树。</strong></p><p><strong>2.特点：</strong></p><p>  1).树中每个结点至多有m棵子树，即至多含有m-1个关键字，这里的关键字就是指一个索引结点中含有m-1个元素值。</p><p>  2).若根节点不是终端结点，则至少有两棵子树</p><p>  3).除根结点外的非叶子结点至少有m/2(向上取整)棵子树，即至少含有m/2-1（向上取整）个关键字</p><p>  4).查找的叶节点都出现在同一层次上，并且不带信息关键字</p><hr><p><strong>3举个例子：</strong></p><p>先推荐个数据结构可视化的网站：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">戳我进入</a></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/btree.png"></p><p>分析：</p><p>1.结点中的孩子（子树）个数等于该结点中的关键字个数+1，例如222，665所在的结点A，那么A的子树个数为3，关键字为2</p><p>2.如果根结点没有关键字，则为空；如果根结点有关键字，则其子树个数必大于等于2，即其关键字个数必大于等于1。</p><p>3.除了根结点外的非终端结点至少有5/2(向上取整)，关键字至少有5/2-1（向上取整），至多有5棵子树，关键字至多有4个</p><p>4.所有的叶子结点均在第4层，代表查找失败的位置。</p><hr><h4 id="三-B树的高度"><a href="#三-B树的高度" class="headerlink" title="三  B树的高度"></a><strong>三  B树的高度</strong></h4><p>1.B树的高度即磁盘I/O操作的次数</p><p>2.因为B树中每个结点最多有m棵子树，m-1个关键字，所以高度h和m阶B树中的关键字个数n所应满足的公式为：h&gt;=logm (n+1)</p><p>3.若让每个结点中的关键字个数达到最少，则容纳同样多的关键字的B树的高度就会最高。</p><p>因为关键字结点个数为n，所以叶结点的结点为n+1。而叶子结点所在那层至少有2*(m/2)的h-1次幂，因此n+1 &gt;= 2*(m/2)的h-1次幂<br>，即h&lt;=log的m/2(向上取整)((n+1)/2)+1</p><hr><h4 id="四-B树的查找"><a href="#四-B树的查找" class="headerlink" title="四  B树的查找"></a><strong>四  B树的查找</strong></h4><p>1.B树查找的两个基本操作：</p><p>（1）在磁盘上查找B树中的结点</p><p>（2）将结点放入内存，在内存中比较结点中的关键字</p><p>2.查找到叶结点时，没有对应的关键字</p><hr><h4 id="五-B树的插入"><a href="#五-B树的插入" class="headerlink" title="五  B树的插入"></a><strong>五  B树的插入</strong></h4><p>1.通过B树查找算法定位到最底层中的某个非叶子结点上。</p><p>2.插入到某个结点后，如果该结点中的关键字个数小于m，则直接插入，不需要变换位置。</p><p>如果插入后检查被插入结点内的关键字个数大于m-1了，则此时需要对结点进行分裂。</p><p><strong>具体分裂的方法：</strong></p><p>取一个新的结点，再插入key的原结点后，左部分包含的关键字放在原结点中，右部分包含的关键字放到新结点中，如果刚好m-1为奇数，<br>则中间位置m/2（向上取整)的结点插入原结点的父结点。整个过程需要递归向上和递归向下插入结点。</p><hr><h4 id="六-B树的删除"><a href="#六-B树的删除" class="headerlink" title="六  B树的删除"></a><strong>六  B树的删除</strong></h4><p>1.直接删除关键字，如果删除关键字所在的结点删除前的关键字个数&gt;=m/2（向上取整），则直接删除</p><p>2.借兄弟的结点，如果删除关键字所在的结点删除前的关键字个数=m/2（向上取整)-1，且与次结点相邻的左右兄弟结点的关键字个数&gt;=m/2(向上取整)</p><p>则调整左，右，双亲的结点位置。</p><p>3.兄弟的结点不够借：根据第2中思想，发现左右兄弟关键字个数均为m/2-1（向上取整），发现不好借，因为借了之后，左/右兄弟结点都也不平衡了。<br>因此就尝试向父亲借，然后再调整左，右，双亲的结点位置。</p><hr><h4 id="七-B树和B-树的区别"><a href="#七-B树和B-树的区别" class="headerlink" title="七  B树和B+树的区别"></a><strong>七  B树和B+树的区别</strong></h4><p>1.在B+树中，具有n个关键字的结点只含有n棵子树，即每个关键字对应一棵子树；<br>而在B树中，具有n个关键字的结点只含有n+1棵子树</p><p>2.在B+树中，每个结点的关键字个数n的范围为m/2（向上取整)&lt;=n&lt;=m，而在B树中，<br>每个结点的关键字个数n的范围为m/2-1（向上取整)&lt;=n=&lt;m-1</p><p>3.在B+树中，只有叶子结点包含数据信息和存储地址，而非叶子结点中只存索引地址。<br>非叶子结点的每个索引项只包含最大关键字和索引地址（关键字其实指的就是索引项）</p><p>4.在B+树中，叶子结点包含了所有的关键字，并且每个关键字都用指针从小到大链接，因此叶子结点和非叶子结点中关键字是会有重复的。<br>而B树中，叶子结点和非叶子结点中的关键字是不重复的。</p><hr><h4 id="八-B-树比B树搜索更快的原因"><a href="#八-B-树比B树搜索更快的原因" class="headerlink" title="八 B+树比B树搜索更快的原因"></a><strong>八 B+树比B树搜索更快的原因</strong></h4><p>就我理解而言，他们俩的数据结构的差异，即B+树的非叶子结点只起到了索引作用，因此B+树一个结点中包含的关键字个数相对于B树来说要多很多。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从数据结构角度理解B树的特性</title>
    <link href="/2020/09/14/%E4%BB%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3B%E6%A0%91%E7%9A%84%E7%89%B9%E6%80%A7/"/>
    <url>/2020/09/14/%E4%BB%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3B%E6%A0%91%E7%9A%84%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h4><p>之前通过网课学习了B树和B+树的一些知识，我再另一篇笔记中分析比较了4钟类型的树结构，<a href="https://syzzjw.cn/notes/user_articles_list/syz_mysql_b/">文章地址</a>，最近忙于考研，正好看到了王道书上B树和B+树的知识点，从数据结构角度来讲解的，为了加深理解，我将结合王道书的内容和自己的理解，写成本篇笔记。</p><hr><h4 id="二-B树的概念"><a href="#二-B树的概念" class="headerlink" title="二  B树的概念"></a><strong>二  B树的概念</strong></h4><p>首先标明几个概念：</p><p><strong>1.阶：B树中所有结点的孩子个数的最大值</strong></p><p><strong>2.终端结点：除叶子结点外最底层的那一层结点</strong></p><p><strong>1.概念：B树称为多路平衡查找树。</strong></p><p><strong>2.特点：</strong></p><p>  1).树中每个结点至多有m棵子树，即至多含有m-1个关键字，这里的关键字就是指一个索引结点中含有m-1个元素值。</p><p>  2).若根节点不是终端结点，则至少有两棵子树</p><p>  3).除根结点外的非叶子结点至少有m/2(向上取整)棵子树，即至少含有m/2-1（向上取整）个关键字</p><p>  4).查找的叶节点都出现在同一层次上，并且不带信息关键字</p><p><strong>3举个例子：</strong></p><p>先推荐个数据结构可视化的网站：<a href="https://www.cs.usfca.edu/~galles/visualization/BTree.html">戳我进入</a></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/btree.png"></p><p>分析：</p><p>1.结点中的孩子（子树）个数等于该结点中的关键字个数+1，例如222，665所在的结点A，那么A的子树个数为3，关键字为2</p><p>2.如果根结点没有关键字，则为空；如果根结点有关键字，则其子树个数必大于等于2，即其关键字个数必大于等于1。</p><p>3.除了根结点外的非终端结点至少有5/2(向上取整)，关键字至少有5/2-1（向上取整），至多有5棵子树，关键字至多有4个</p><p>4.所有的叶子结点均在第4层，代表查找失败的位置。</p><hr><h4 id="三-B树的高度"><a href="#三-B树的高度" class="headerlink" title="三  B树的高度"></a><strong>三  B树的高度</strong></h4><p>1.B树的高度即磁盘I/O操作的次数</p><p>2.因为B树中每个结点最多有m棵子树，m-1个关键字，所以高度h和m阶B树中的关键字个数n所应满足的公式为：h&gt;=logm (n+1)</p><p>3.若让每个结点中的关键字个数达到最少，则容纳同样多的关键字的B树的高度就会最高。</p><p>因为关键字结点个数为n，所以叶结点的结点为n+1。而叶子结点所在那层至少有2*(m/2)的h-1次幂，因此n+1 &gt;= 2*(m/2)的h-1次幂，即h&lt;=log的m/2(向上取整)((n+1)/2)+1</p><hr><h4 id="四-B树的查找"><a href="#四-B树的查找" class="headerlink" title="四  B树的查找"></a><strong>四  B树的查找</strong></h4><p>1.B树查找的两个基本操作：</p><p>（1）在磁盘上查找B树中的结点</p><p>（2）将结点放入内存，在内存中比较结点中的关键字</p><p>2.查找到叶结点时，没有对应的关键字</p><hr><h4 id="五-B树的插入"><a href="#五-B树的插入" class="headerlink" title="五  B树的插入"></a><strong>五  B树的插入</strong></h4><p>1.通过B树查找算法定位到最底层中的某个非叶子结点上。</p><p>2.插入到某个结点后，如果该结点中的关键字个数小于m，则直接插入，不需要变换位置。</p><p>如果插入后检查被插入结点内的关键字个数大于m-1了，则此时需要对结点进行分裂。</p><p><strong>具体分裂的方法：</strong></p><p>取一个新的结点，再插入key的原结点后，左部分包含的关键字放在原结点中，右部分包含的关键字放到新结点中，如果刚好m-1为奇数，则中间位置m/2（向上取整)的结点插入原结点的父结点。整个过程需要递归向上和递归向下插入结点。</p><hr><h4 id="六-B树的删除"><a href="#六-B树的删除" class="headerlink" title="六  B树的删除"></a><strong>六  B树的删除</strong></h4><p>1.直接删除关键字，如果删除关键字所在的结点删除前的关键字个数&gt;=m/2（向上取整），则直接删除</p><p>2.借兄弟的结点，如果删除关键字所在的结点删除前的关键字个数=m/2（向上取整)-1，且与次结点相邻的左右兄弟结点的关键字个数&gt;=m/2(向上取整)</p><p>则调整左，右，双亲的结点位置。</p><p>3.兄弟的结点不够借：根据第2中思想，发现左右兄弟关键字个数均为m/2-1（向上取整），发现不好借，因为借了之后，左/右兄弟结点都也不平衡了。因此就尝试向父亲借，然后再调整左，右，双亲的结点位置。</p><hr><h4 id="七-B树和B-树的区别"><a href="#七-B树和B-树的区别" class="headerlink" title="七  B树和B+树的区别"></a><strong>七  B树和B+树的区别</strong></h4><p>1.在B+树中，具有n个关键字的结点只含有n棵子树，即每个关键字对应一棵子树；而在B树中，具有n个关键字的结点只含有n+1棵子树</p><p>2.在B+树中，每个结点的关键字个数n的范围为m/2（向上取整)&lt;=n&lt;=m，而在B树中，每个结点的关键字个数n的范围为m/2-1（向上取整)&lt;=n=&lt;m-1</p><p>3.在B+树中，只有叶子结点包含数据信息和存储地址，而非叶子结点中只存索引地址。非叶子结点的每个索引项只包含最大关键字和索引地址（关键字其实指的就是索引项）</p><p>4.在B+树中，叶子结点包含了所有的关键字，并且每个关键字都用指针从小到大链接，因此叶子结点和非叶子结点中关键字是会有重复的。而B树中，叶子结点和非叶子结点中的关键字是不重复的。</p><hr><h4 id="八-B-树比B树搜索更快的原因"><a href="#八-B-树比B树搜索更快的原因" class="headerlink" title="八 B+树比B树搜索更快的原因"></a><strong>八 B+树比B树搜索更快的原因</strong></h4><p>就我理解而言，他们俩的数据结构的差异，即B+树的非叶子结点只起到了索引作用，因此B+树一个结点中包含的关键字个数相对于B树来说要多很多。</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>B+树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git pull失败，显示“本地文件修改将被合并操作覆盖”的问题（已解决）</title>
    <link href="/2020/09/10/git%20pull%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%98%BE%E7%A4%BA%E2%80%9C%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E5%B0%86%E8%A2%AB%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E8%A6%86%E7%9B%96%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/09/10/git%20pull%E5%A4%B1%E8%B4%A5%EF%BC%8C%E6%98%BE%E7%A4%BA%E2%80%9C%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%BF%AE%E6%94%B9%E5%B0%86%E8%A2%AB%E5%90%88%E5%B9%B6%E6%93%8D%E4%BD%9C%E8%A6%86%E7%9B%96%E2%80%9D%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="git-pull-拉取项目出现-error-您对下列文件的本地修改将被合并操作覆盖：-settings-py"><a href="#git-pull-拉取项目出现-error-您对下列文件的本地修改将被合并操作覆盖：-settings-py" class="headerlink" title="git pull 拉取项目出现  error: 您对下列文件的本地修改将被合并操作覆盖： settings.py"></a><strong>git pull 拉取项目出现  error: 您对下列文件的本地修改将被合并操作覆盖： settings.py</strong></h3><h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h4><p>在github上私有仓库做了几个月的项目，今天打算将项目public，上午一直在写readme，提交了7，8次。<br>然后下午准备修改下配置文件，提交上去。因为远程仓库文件修改过了，所以首先要pull下最新版，于是乎出现了问题：<br>” error: 您对下列文件的本地修改将被合并操作覆盖： settings.py“。</p><p>然后我使用了<code>git status</code>查看了下提交状态</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/git_pull_error1.png"></p><p>显示本地分支和远程分支的提交次数不同，也就是版本不一致。</p><h4 id="二-解决方案"><a href="#二-解决方案" class="headerlink" title="二   解决方案"></a><strong>二   解决方案</strong></h4><p>因为我将我对本地修改的文件暂存到了本地仓库中，因此我只需要将远程的完全覆盖本地的就行了。</p><p>1.声明完全覆盖<code>git reset --hard</code></p><p>2.然后<code>git pull</code></p><p>3.最终可以看到成功覆盖<br><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/git_pull_success1.png"></p><p>4.最后在查看下<code>git status</code></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/git_pull_success2.png"></p><p>可以看到之前commit到本地仓库的仍然存在，领先于远程分支版本，因此我们就可以使用<code>git push orign master</code>来首尾了。</p><p>5.提交成功，问题解决！</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/git_push_success.png"></p><hr><h4 id="三-总结下问题的出现和解决："><a href="#三-总结下问题的出现和解决：" class="headerlink" title="三   总结下问题的出现和解决："></a><strong>三   总结下问题的出现和解决：</strong></h4><p>出现的原因主要是本地版本和远程仓库的版本不一致，存在冲突。</p><p>解决方案：暂存好本地修改后（准备commit的文件），然后将远程仓库完全覆盖掉本地版本，这样就可以使得版本重新一致了！</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中添加环境变量的简单操作</title>
    <link href="/2020/09/05/linux%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/09/05/linux%E4%B8%AD%E6%B7%BB%E5%8A%A0%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h4 id="一-Linux中添加环境变量"><a href="#一-Linux中添加环境变量" class="headerlink" title="一   Linux中添加环境变量"></a><strong>一   Linux中添加环境变量</strong></h4><p>Linux中一般手动下载tar.gz包的时候，安装服务的时候需要自行添加环境变量。<br>而使用包管理器下载服务的时候，则会自动配置好环境变量。</p><hr><h4 id="二-步骤"><a href="#二-步骤" class="headerlink" title="二  步骤"></a><strong>二  步骤</strong></h4><p>1.进入profile环境变量配置文件（针对所有用户的系统环境变量文件）或者~/.bashrc文件（每个用户目录下的环境变量文件）</p><p><code>sudo vim /etc/profile</code></p><p> 或</p><p> <code>vim ~/.bashrc</code></p><p>2.添加环境变量</p><p><code>export CLASS_HOME=&quot;[自己安装的服务的路径]&quot;</code></p><p><code>export PATH=$PATH:$CLASS_HOME</code></p><p>3.手动更新环境变量</p><p><code>source /etc/profile</code></p><p>4.举个例子</p><p>安装MAVEN，从官网安装tar.gz压缩包后，进行tar解压到制定目录。</p><p>然后配置环境变量。</p><p><code>export MAVEN_HOME=/opt/maven/apache-maven-3.6.3</code></p><p><code>export PATH=$PATH:$MAVEN_HOME/bin</code></p><p>然后刷新环境变量，输入<code>mvn -v</code>就可以看到maven的版本信息了。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>偶遇新的问题---部署nginx访问静态资源时新的问题（已解决）</title>
    <link href="/2020/09/01/%E5%81%B6%E9%81%87%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98---%E9%83%A8%E7%BD%B2nginx%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%B6%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/09/01/%E5%81%B6%E9%81%87%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98---%E9%83%A8%E7%BD%B2nginx%E8%AE%BF%E9%97%AE%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%97%B6%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一   背景"></a><strong>一   背景</strong></h4><p>每一次的尝试都会产生新的问题，而每一次的解决都会让自己感到成就满满</p><hr><h4 id="二-问题所在及解决方法"><a href="#二-问题所在及解决方法" class="headerlink" title="二  问题所在及解决方法"></a><strong>二  问题所在及解决方法</strong></h4><p>有了第一次部署的经验，第二次部署一切都很快，但是偏偏又出现了问题—-访问静态资源出现permission denied。</p><p>当时一出现这个问题，我立马想到了会不会是文件权限访问不够，我去查看了文件权限，都是我统一的非root角色，而且我启动nginx的时候是以root角色启动的，讲道理不应该会出现权限不够呀。</p><p>后来我查看了nginx的进程信息，终于发现了原因！！！</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/nginx_worker.png">{width=100%}</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/nginx_conf_user.png">{width=100%}</p><p><strong>说明：</strong></p><p>如果默认不配值user的话，那么是以nobody角色运行worker进程，那么可以直到nobody不具备对任何角色的文件访问权限，所以只需要修改user为启动nginx所使用的角色就行了，这里我设置为root。</p><p>最后还要注意对/nginx的路径设置，root和alias都是可以访问到的，只不过有些区别。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/nginx_static.png">{width=100%}</p><p>这样一来，通过nginx就可以访问到静态资源了！</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>偶遇新的问题---部署虚拟环境中的uwsgi（已解决）</title>
    <link href="/2020/09/01/%E5%81%B6%E9%81%87%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98---%E9%83%A8%E7%BD%B2%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84uwsgi%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/09/01/%E5%81%B6%E9%81%87%E6%96%B0%E7%9A%84%E9%97%AE%E9%A2%98---%E9%83%A8%E7%BD%B2%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84uwsgi%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一   背景"></a><strong>一   背景</strong></h4><p>第二次部署django项目到uwsgi上，吸取了第一次部署的经验和教训，没想到第二次部署又遇到了新的问题—–<strong>找不到django包</strong>。</p><p>因为第一次是在阿里云上直接部署，当时的项目不再虚拟环境，所以全局只有一个uwsgi，而第二个项目在虚拟环境中，所以问题就出现了，也许经过我的这番话，您可能察觉到问题所在，您可以独自取解决，也可以慢慢往下看。</p><hr><h4 id="二-问题所在"><a href="#二-问题所在" class="headerlink" title="二  问题所在"></a><strong>二  问题所在</strong></h4><p>往往python很多部署的问题都会出现在虚拟环境场景下，因为uwsgi启动的时候，会在当前环境下寻找python包。如果没招到就会报错。因此在虚拟环境中要额外安装uwsgi。</p><p>步骤如下：</p><p>1.激活虚拟环境，<code>source activate</code></p><p>2.进入虚拟环境，安装符合该虚拟环境的uwsgi，<code>pip install uwsgi</code></p><p>3.安装完毕后，查看已安装到所有uwsgi，<code>whereis uwsgi</code></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/whereis_uwsgi.png">{width=100%}</p><p>4.建立软链接,方便启动，<code>sudo ln -s /home/syz/E_mall/bin/uwsgi  /usr/bin</code></p><p>5.启动uwsgi(假设已经配置好uwsgi.ini的配置文件)，<code>sudo uwsgi-py3.6 --ini uwsgi.ini</code></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/start_uwsgi.png">{width=100%}</p><p><strong>说明：</strong></p><p>显示上述红色箭头的信息，已经可以正确运行了。</p><p><strong>注：</strong> </p><p>在虚拟环境中的项目，已经要注意配置与虚拟环境中对应python环境的uwsgi。可能还有其他办法解决，不过目前我想到的只有该方法了。</p>]]></content>
    
    
    <categories>
      
      <category>Uwsgi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部署</tag>
      
      <tag>Uwsgi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux上使用supervisor管理各个进程</title>
    <link href="/2020/08/30/Linux%E4%B8%8A%E4%BD%BF%E7%94%A8supervisor%E7%AE%A1%E7%90%86%E5%90%84%E4%B8%AA%E8%BF%9B%E7%A8%8B/"/>
    <url>/2020/08/30/Linux%E4%B8%8A%E4%BD%BF%E7%94%A8supervisor%E7%AE%A1%E7%90%86%E5%90%84%E4%B8%AA%E8%BF%9B%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一   背景"></a><strong>一   背景</strong></h4><p>做项目时，要启动蛮多的服务，一个个手打指令启动，觉得蛮累的，想起之前部署过一个项目时候用了supervisor管理celery和daphne，那么这次就将该项目所需的都由supervisor统一管理吧～</p><hr><h4 id="二-为什么要使用supervisor"><a href="#二-为什么要使用supervisor" class="headerlink" title="** 二  为什么要使用supervisor**"></a>** 二  为什么要使用supervisor**</h4><p>1.简单方便：相比于自己写shell脚本启动，暂停，中止，监听各个子进程的复杂程度来说，使用supervisor避免了重复造轮子，可以快速实现管理。</p><p>2.权限控制：supervisor可以通过设置user和password来允许通过不同的角色启动进程。</p><p>3.集中式的管理：这一点很明显，可以将配置文件写在一个conf中，也可以分开写到不同的.ini文件中，将多个服务统一管理，重定向日志，方便维护，排错。</p><p>4.有效性：当supervisor的子进程挂掉的时候，操作系统会直接给supervisor发信号。</p><hr><h4 id="三-supervisor配置"><a href="#三-supervisor配置" class="headerlink" title="三  supervisor配置"></a><strong>三  supervisor配置</strong></h4><p>先上一波我配置好已经测试通过的代码，方便以后换电脑了，直接拿来用！</p><p>代码下面我会对我配置这些进程中遇到的问题进行说明，请耐心看下去！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br></pre></td><td class="code"><pre><code class="hljs shell">[program:elasticsearch]<br><br>command=/usr/bin/elasticsearch<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>user=syz<br><br>priority=15<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/elasticsearch/elasticsearch_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/elasticsearch/elasticsearch_out.log<br><br>stopsignal=INT<br><br><br><br>[program:redis-celery]<br><br>command=sudo /usr/bin/redis-server /opt/redis-6.0.5/redis.conf<br><br>;directory=/opt/redis-5.0.5/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=2<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/redis/redis_master_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/redis/redis_master_out.log<br><br>stopsignal=INT<br><br><br><br>[program:redis-master]<br><br>command=sudo /usr/bin/redis-server /opt/redis-5.0.5/redis_master_slave/master/redis-5.0.5/redis.conf<br><br>;directory=/opt/redis-5.0.5/redis_master_slave/master/redis-5.0.5/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=1<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/redis/redis_master_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/redis/redis_master_out.log<br><br>stopsignal=INT<br><br><br><br>[program:redis-slave1]<br><br>command=sudo /usr/bin/redis-server /opt/redis-5.0.5/redis_master_slave/slave/redis-5.0.5/redis.conf<br><br>;directory=/opt/redis-5.0.5/redis_master_slave/slave1/redis-5.0.5/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=2<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/redis/redis_master_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/redis/redis_master_out.log<br><br>stopsignal=INT<br><br><br><br>[program:redis-slave2]<br><br>command=sudo /usr/bin/redis-server /opt/redis-5.0.5/redis_master_slave/slave2/redis-5.0.5/redis.conf<br><br>;directory=/opt/redis-5.0.5/redis_master_slave/slave2/redis-5.0.5/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=3<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/redis/redis_master_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/redis/redis_master_out.log<br><br>stopsignal=INT<br><br><br><br>[program:redis-sentinel-master]<br><br>command=sudo /usr/bin/redis-sentinel /opt/redis-5.0.5/redis_master_slave/master/redis-5.0.5/sentinel.conf<br><br>;directory=/opt/redis-5.0.5/redis_master_slave/master/redis-5.0.5/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=3<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/redis/redis_master_sentinel_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/redis/redis_master_sentinel_out.log<br><br>stopsignal=INT<br><br><br><br><br>[program:redis-sentinel-slave1]<br><br>command=sudo /usr/bin/redis-sentinel /opt/redis-5.0.5/redis_master_slave/slave/redis-5.0.5/sentinel.conf<br><br>;directory=/opt/redis-5.0.5/redis_master_slave/slave1/redis-5.0.5/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=3<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/redis/redis_master_sentinel_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/redis/redis_master_sentinel_out.log<br><br>stopsignal=INT<br><br><br><br><br>[program:redis-sentinel-slave2]<br><br>command=sudo /usr/bin/redis-sentinel /opt/redis-5.0.5/redis_master_slave/slave2/redis-5.0.5/sentinel.conf<br><br>;directory=/opt/redis-5.0.5/redis_master_slave/slave2/redis-5.0.5/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=3<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/redis/redis_master_sentinel_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/redis/redis_master_sentinel_out.log<br><br>stopsignal=INT<br><br><br>[program:celery]<br><br>;运行目录下执行命令<br><br>command=/home/syz/E_mall/bin/celery worker -A e_mall.celery -l info<br><br>;指定运行目录<br><br>directory=/home/syz/E_mall/e_mall/<br><br>;启动设置<br><br>autostart=true      ;当supervisor启动时，程序将会自动启动<br><br>autorestart=true   ;自动重启<br><br>startsecs=10<br><br>;numprocs=1        ;初始的进程<br><br>priority=10<br><br>user=syz   ;脚本运行的用户<br><br>;输出日志<br><br>stdout_logfile=/var/log/supervisor/celery/celery_worker.log<br><br>stdout_logfile_maxbytes=10MB      ;默认最大50M<br><br>stdout_logfile_backups=10               ;默认日志文件备份数，默认为10<br><br><br><br>;错误日志<br><br>redirect_stderr=false                         ;为true表示禁止监听错误<br><br>stderr_logfile=/var/log/supervisor/celery/celery_worker_err.log<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br><br>;停止信号,默认TERM <br><br>;中断:INT (类似于Ctrl+C)(kill -INT pid)，退出后会将写文件或日志(推荐) <br><br>;终止:TERM (kill -TERM pid) <br><br>;挂起:HUP (kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同 <br><br>;从容停止:QUIT (kill -QUIT pid) <br><br>stopsignal=INT<br><br><br><br>[program:nginx-master]<br><br>command=sudo /usr/local/nginx/sbin/nginx -g &#x27;daemon off;&#x27; -c /usr/local/nginx/conf/nginx.conf  <br><br>;directory=/usr/local/nginx/conf/<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=30<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/nginx/nginx_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/nginx/nginx_out.log<br><br>stopsignal=INT<br><br><br>[program:rabbitmq]<br><br>command=/usr/lib/rabbitmq/bin/rabbitmq-server<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=30<br><br>user=root<br><br>password=123456<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/rabbitmq/rabbitmq_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/rabbitmq/rabbitmq_out.log<br><br>stopsignal=INT<br><br><br><br><br>[program:uwsgi]<br><br>command=/usr/bin/uwsgi  --ini /home/syz/E_mall/e_mall/uwsgi.ini<br><br>;directory=/home/syz/E_mall/e_mall<br><br>autostart=true<br><br>autorestart=true<br><br>startsecs=10<br><br>priority=30<br><br>user=syz<br><br>redirect_stderr=false<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br>stderr_logfile=/var/log/supervisor/uwsgi/uwsgi_err.log<br><br>stdout_logfile_maxbytes=10MB<br><br>stdout_logfile_backups=10<br><br>stdout_logfile=/var/log/supervisor/uwsgi/uwsgi_out.log<br><br>stopsignal=INT<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.celery和redis的相关进程之间需要设置优先级，先启动redis后，再启动celery，因为celery需要读取broker和backend</p><p>2.有些进程需要在root下运行，比如rabbitmq，nginx，redis-sentinel,有些不能在root下运行，比如elasticsearch（这个是硬性规定不能以root角色运行）。当然具体哪些进程在什么角色下运行完全由自己制定，分配不同的用户和组就行了。</p><p>3.为了兼容root和非root的服务，所以启动supervisor的时候，必须以root角色启动。切换角色<code>sudo su root</code></p><p>4.如果有些服务需要在虚拟环境中运行，例如celery，则需要通过directory定位到虚拟环境中的celery才行。</p><p>5.使用supervisor的时候，此时应该是上线环境，因此一些服务不能再使用测试环境下的deamon=yes的模式，例如redis，nginx，sentinel,uwsgi等，需要取修改对应的配置文件，因为如果使用守护进程模式的话，再用supervisor管理的话，尽管运行成功了，但是supervisoctl status显示的子进程启动失败（显示快速的退出），同时正确运行的日志也会被重定向到错误的日志中。</p><p>6.如果directory不起作用的话，尽量在command中使用绝对路径</p><p>7.在配置各个子进程的日志的时候，必须首先提前创建好日志文件夹，并赋予用户和组，以及读写的权限！否则会报错</p><p>8.启动supervisor后，尽管子进程都成功启动，最好去检查每个服务是否真正启动。</p><p>(1) redis：通过redis-cli的info replication，查看是否有sentinel和master-slave主从配置</p><p>(2)rabbitmq: 访问<code>ip:port</code>,例如：<code>192.168.0.105:15672</code>，看是否能够进入rabbitmq可视化界面</p><p>(3)elasticsearch:  访问<code>ip:port</code>,例如：<code>192.168.0.105:9200</code>,看是否显示elasticsearch启动成功</p><p>(4)其他一些的可以通过<code>ps aux|grep process</code>来查看进程是否启动成功</p><p><strong>成功运行效果图：</strong></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/supervisor.png">{width=100%}</p><hr><h4 id="四-desktop一键启动"><a href="#四-desktop一键启动" class="headerlink" title="四   desktop一键启动"></a><strong>四   desktop一键启动</strong></h4><p>为了不用每次指令启动supervisor，我在桌面配置了一个desktop应用，来启动supervisor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Desktop Entry]<br>Comment[zh_CN]=<br>Comment=<br>Exec=sudo /usr/bin/supervisord3.6 -c /etc/supervisor/supervisord.conf<br>GenericName[zh_CN]=<br>GenericName=<br>Icon=cadaver<br>MimeType=<br>Name[zh_CN]=点开有惊喜<br>Name=点开有惊喜<br>Path=<br>StartupNotify=true<br>Terminal=true<br>TerminalOptions=<br>Type=Application<br>X-DBUS-ServiceName=<br>X-DBUS-StartupType=none<br>X-KDE-SubstituteUID=true<br>X-KDE-Username=root<br><br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.因为使用root角色启动，但是启动环境又是在非root下，所以指令中要添加root，否则显示对<code>supervisord.log</code>没有访问权限</p><p>2.要给desktop的角色设置为root，利用chown指令</p><p>3.要配置高级选项</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/desktop.png">{width=50%}</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Supervisor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Supervisor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结合源码分析Python的 Descriptors的原理和使用</title>
    <link href="/2020/08/25/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84%20Descriptors%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/08/25/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90Python%E7%9A%84%20Descriptors%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="一-什么是Descriptors"><a href="#一-什么是Descriptors" class="headerlink" title="一  什么是Descriptors"></a><strong>一  什么是Descriptors</strong></h4><p>描述器，是指一个包含 绑定行为的 对象，对其属性的访问被描述器协议中所定义的方法覆盖。所定义的方法有<code>__get()__</code>，<code>__set()__</code>，<code>__del()__</code>，如果某个类实现了这三个方法中的一个，那么该实例就被称作描述器。</p><p>定义形式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">descr.__get__(self, obj, type=None) -&gt; value<br><br>descr.__set__(self, obj, value) -&gt; None<br><br>descr.__delete__(self, obj) -&gt; None<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>如果某一个对象定义了<code>__set__()</code>或<code>__delete__()</code>,则会称为数据描述器;如果仅定义了<code>__get__()</code>方法，则被称为非数据描述器。</p><hr><h4 id="二-获取实例属性的方法"><a href="#二-获取实例属性的方法" class="headerlink" title="二  获取实例属性的方法"></a><strong>二  获取实例属性的方法</strong></h4><p>获取实例属性一般与<code>__getattribute__()</code>，<code>__getattr__()</code>，<code>__get__()</code>方法有关，接下来依次学习。</p><p>1.<code>__getattribute__()</code>内置方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># object类中的__getattribute__方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattribute__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot; Return getattr(self, name). &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong><br>通过注释，我们可以了解到<code>__getattribute__()</code>方法其实等价与<code>getattr()</code>基于字符串的反射机制的函数。</p><p>2.举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    sss = <span class="hljs-string">&#x27;s&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattribute__</span>(<span class="hljs-params">self, item</span>):</span><br>        <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&#x27;syz&#x27;</span>)   <span class="hljs-comment"># 主动抛出AttributeError,如果定义了__getattr__，则会被__getattr__捕捉</span><br>        <span class="hljs-comment"># return &#x27;syz&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, item</span>):</span><br>        <span class="hljs-keyword">return</span> item<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get__</span>(<span class="hljs-params">self, instance, owner</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;love&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operation</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br><br>    t = Test()<br><br>m = Operation()<br><span class="hljs-built_in">print</span>(m.t,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-built_in">type</span>(m.t))  <span class="hljs-comment"># 结果：love | &lt;class &#x27;str&#x27;&gt;</span><br><br>test = Test()<br><span class="hljs-built_in">print</span>(test.sss)       <span class="hljs-comment"># 结果：syz</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">getattr</span>(test,<span class="hljs-string">&#x27;sss&#x27;</span>) == test.sss)         <span class="hljs-comment"># 结果：True</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>1.调用<code>m.t</code>获取属性&lt;==&gt;<code>m.__getattribute__(t)</code>方法&lt;=&gt;<code>m.__dict__[&#39;t&#39;].__get__(m,type(m))</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 官网中是例子，这段代码我找到出现在哪里...</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattribute__</span>(<span class="hljs-params">self, key</span>):</span><br>    <span class="hljs-string">&quot;Emulate type_getattro() in Objects/typeobjectEmulate type_getattro() in Objects/typeobject.c&quot;</span><br>    v = <span class="hljs-built_in">object</span>.__getattribute__(self, key)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(v, <span class="hljs-string">&#x27;__get__&#x27;</span>):<br>        <span class="hljs-keyword">return</span> v.__get__(<span class="hljs-literal">None</span>, self)<br>    <span class="hljs-keyword">return</span> v<br></code></pre></td></tr></table></figure><p>2.如果定义了<code>__getattribute__()</code>方法，却在内部主动抛出了AttributeError,如果同时定义了<code>__getattr__()</code>方法，则会被其捕获调用。</p><p>3.无论访问的是该对象存在还是不存在的属性或方法，首先都会去寻找是否定义了<code>__getattribute__</code>方法，如果定义，则尽管属性存在，但还是返回<code>__getattribute__()</code>返回的值。</p><p>4.<code>__getattribute__()</code>方法&lt;==&gt;<code>getattr()</code>方法</p><p>5.描述器：当一个类（Test）的实例作为另一个类（Operation）的属性，调用类(Operation)的属性(t)，其实调用类(Test)实例的<code>__get__()</code>方法，可能说的有点绕，结合代码看清晰点。</p><p>6.描述器会由<code>__getattribute__()</code>调用，调用了<code>__getattribute__()</code>，实际底层调用<code>__dict__[&#39;t&#39;].__get(m,type(m))__</code>。实例调用和类调用是有区别的。</p><p>7.描述器必须通过类的属性赋值，而不能通过<code>__init__()</code>实例化产生。</p><p>8.总结调用时机和次序：</p><p>（1）如果访问一个属性，该属性是描述器，则调用描述器的<code>__get__()</code>方法</p><p>（2）如果访问非描述器的属性，首先会调用<code>__getattribute__()</code>方法，无论属性是否存在，只要定义了<code>__getattribute__()</code>,则会返回<code>__getattribute__()</code>的值。</p><p>（3）如果调用没有定义<code>__getattribute__()</code>或者在<code>__getattribute__()</code>中抛出了AttributeError异常，则会调用<code>__getattr__()</code>方法</p><hr><h4 id="三-Property—描述器的应用之一"><a href="#三-Property—描述器的应用之一" class="headerlink" title="三  Property—描述器的应用之一"></a><strong>三  Property—描述器的应用之一</strong></h4><p>Property是描述器应用之一，Property有两种使用方式，一种是装饰器，一种是实例化形式。</p><p>仔细学习下Property发现很有意思！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Python的一个等价实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">property</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&quot;Emulate PyProperty_Type() in Objects/descrobject.c&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, fget=<span class="hljs-literal">None</span>, fset=<span class="hljs-literal">None</span>, fdel=<span class="hljs-literal">None</span>, doc=<span class="hljs-literal">None</span></span>):</span><br>        self.fget = fget<br>        self.fset = fset<br>        self.fdel = fdel<br>        <span class="hljs-keyword">if</span> doc <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> fget <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            doc = fget.__doc__<br>        self.__doc__ = doc<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get__</span>(<span class="hljs-params">self, obj, objtype=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">if</span> obj <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self<br>        <span class="hljs-keyword">if</span> self.fget <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&quot;unreadable attribute&quot;</span>)<br>        <span class="hljs-keyword">return</span> self.fget(obj)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__set__</span>(<span class="hljs-params">self, obj, value</span>):</span><br>        <span class="hljs-keyword">if</span> self.fset <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&quot;can&#x27;t set attribute&quot;</span>)<br>        self.fset(obj, value)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__delete__</span>(<span class="hljs-params">self, obj</span>):</span><br>        <span class="hljs-keyword">if</span> self.fdel <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&quot;can&#x27;t delete attribute&quot;</span>)<br>        self.fdel(obj)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getter</span>(<span class="hljs-params">self, fget</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>(self)(fget, self.fset, self.fdel, self.__doc__)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setter</span>(<span class="hljs-params">self, fset</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>(self)(self.fget, fset, self.fdel, self.__doc__)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deleter</span>(<span class="hljs-params">self, fdel</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">type</span>(self)(self.fget, self.fset, fdel, self.__doc__)<br></code></pre></td></tr></table></figure><hr><p><strong>例子</strong></p><p>利用上面Python实现的等价Property,举个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Emm</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self._name = <span class="hljs-string">&#x27;syz&#x27;</span><br><span class="hljs-comment"># Property 装饰器，用于实例化，name函数作为__init__的第一个参数fget，返回Property描述器对象,具备fget属性</span><br><span class="hljs-meta">    @Property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self._name<br><br><span class="hljs-comment"># name.setter也是个装饰器，调用的是描述器对象的setter方法， name函数作为参数传给setter方法，用于返回新的Property描述器对象，具备fset属性</span><br><span class="hljs-meta">    @name.setter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self, value</span>):</span><br>        self._name = value<br>     <br> <span class="hljs-comment"># 同理setter，返回新的Property描述器对象，具备fdel属性</span><br><span class="hljs-meta">    @name.deleter</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">del</span> self._name<br><br><br>emm = Emm()<br><span class="hljs-built_in">print</span>(emm.__dict__)   <span class="hljs-comment"># 结果： &#123;&#x27;_name&#x27;: &#x27;syz&#x27;&#125;</span><br><span class="hljs-built_in">print</span>(emm.name)       <span class="hljs-comment"># 结果： syz</span><br>emm.name = <span class="hljs-string">&#x27;zjw&#x27;</span><br><span class="hljs-built_in">print</span>(emm.name)      <span class="hljs-comment"># 结果： zjw</span><br><span class="hljs-keyword">del</span> emm.name<br><span class="hljs-built_in">print</span>(emm.__dict__)    <span class="hljs-comment"># 结果： &#123;&#125;</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>上述Emm类中，实际上创建了三个Property描述器，分别添加fget属性，fset属性，fdel属性，这三个属性分别对应三个同名的方法，在对某个属性操作的时候，三个描述器分别会调用<code>__get()__</code>，<code>__set()__</code>，<code>__del()__</code>。</p><p><strong>总结：</strong></p><p>描述器在property中是对同一个属性进行不同行为绑定的一种形式，如上个例子中，对<code>_name</code>属性绑定get,set,del三种行为。</p><hr><h4 id="四-Django中FileField-—-描述器的应用之一"><a href="#四-Django中FileField-—-描述器的应用之一" class="headerlink" title="四   Django中FileField —-描述器的应用之一"></a><strong>四   Django中FileField —-描述器的应用之一</strong></h4><p>很多框架的底层肯定也会涉及到众多的内置方法，正巧打算用FastDFS重写Django默认的文件存储系统，在重写过程中需要知道默认的存储系统是如何调用的，以及如何和Field字段产生关系。现在就来学习以下底层的源码。</p><p>这里我不打算贴出重写的Storage，一方面还没有完善好，我准备单独写一篇笔记来记录FastDfs重写的代码。</p><p>主要分析下FileField中的描述器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileField</span>(<span class="hljs-params">Field</span>):</span><br><br>    <span class="hljs-comment"># The class to wrap instance attributes in. Accessing the file object off</span><br>    <span class="hljs-comment"># the instance will always return an instance of attr_class.</span><br>    attr_class = FieldFile   <span class="hljs-comment"># 属性类，FileField实例最终会返回attr_class的实例，包含了文件操作的属性</span><br><br>    <span class="hljs-comment"># The descriptor to use for accessing the attribute off of the class.</span><br>    descriptor_class = FileDescriptor   <span class="hljs-comment"># 用于获取该类属性的描述器</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pre_save</span>(<span class="hljs-params">self, model_instance, add</span>):</span><br>    <span class="hljs-comment">#在保存模型的前，先写入文件到指定的位置</span><br>        file = <span class="hljs-built_in">super</span>().pre_save(model_instance, add)<br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> file._committed:<br>            <span class="hljs-comment"># Commit the file to storage prior to saving the model</span><br>            file.save(file.name, file.file, save=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> file<br><br>   <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">contribute_to_class</span>(<span class="hljs-params">self, cls, name, **kwargs</span>):</span><br>        <span class="hljs-built_in">super</span>().contribute_to_class(cls, name, **kwargs)<br>        <span class="hljs-comment"># self.name为attr_class实例，即将__dict__中的该字段对象属性与attr_class实例绑定,通过描述器来绑定对象的一种行为</span><br>        <span class="hljs-built_in">setattr</span>(cls, self.name, self.descriptor_class(self))      <span class="hljs-comment"># 将 描述器对象赋值给self.name,调用self.name，其实调用的是self.__dict__[self.field.name]</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileDescriptor</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    The descriptor for the file attribute on the model instance. Return a</span><br><span class="hljs-string">    FieldFile when accessed so you can write code like::</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, field</span>):</span><br>    <span class="hljs-comment"># field参数其实是FileField字段对象</span><br>        self.field = field<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__get__</span>(<span class="hljs-params">self, instance, cls=<span class="hljs-literal">None</span></span>):</span>         <span class="hljs-comment"># instance 为 字段实例，cls为字段类</span><br>        <span class="hljs-keyword">if</span> instance <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> self<br>        <span class="hljs-keyword">if</span> self.field.name <span class="hljs-keyword">in</span> instance.__dict__:<br>    <span class="hljs-comment"># self.field.name 为 字段名</span><br>            file = instance.__dict__[self.field.name]  <span class="hljs-comment"># 获取实例__dict__中的字段对象</span><br>        <span class="hljs-keyword">else</span>:<br>            instance.refresh_from_db(fields=[self.field.name])<br>            file = <span class="hljs-built_in">getattr</span>(instance, self.field.name)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(file, <span class="hljs-built_in">str</span>) <span class="hljs-keyword">or</span> file <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            attr = self.field.attr_class(instance, self.field, file)<br>            instance.__dict__[self.field.name] = attr<br><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(file, File) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(file, FieldFile): <br>            file_copy = self.field.attr_class(instance, self.field, file.name)       <span class="hljs-comment">#  返回FieldFile实例，包含一些文件的操作</span><br>            file_copy.file = file<br>            file_copy._committed = <span class="hljs-literal">False</span><br>            instance.__dict__[self.field.name] = file_copy                              <span class="hljs-comment"># 替换了原来__dict__中的FileFiled对象为FieldFile对象</span><br><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(file, FieldFile) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(file, <span class="hljs-string">&#x27;field&#x27;</span>):<br>            file.instance = instance<br>            file.field = self.field<br>            file.storage = self.field.storage<br><br>        <span class="hljs-comment"># Make sure that the instance is correct.</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(file, FieldFile) <span class="hljs-keyword">and</span> instance <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> file.instance:<br>            file.instance = instance<br><br>        <span class="hljs-keyword">return</span> instance.__dict__[self.field.name]                          <span class="hljs-comment"># 返回FieldFile对象，用于直接操作文件对象</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__set__</span>(<span class="hljs-params">self, instance, value</span>):</span><br>        instance.__dict__[self.field.name] = value                       <span class="hljs-comment"># set描述器</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 使用shell测试的时候获取head_image字段时，返回的实际是ImageFieldFile文件对象，也就是attr_class实例</span><br>In [<span class="hljs-number">44</span>]: queryset[<span class="hljs-number">0</span>].head_image<br>Out[<span class="hljs-number">44</span>]: &lt;ImageFieldFile: group1/M00/<span class="hljs-number">00</span>/<span class="hljs-number">00</span>/wKgAaV9KO-mAHdRbAAAzLoMjwYM8236232&gt;<br></code></pre></td></tr></table></figure><p>顺便提一下，访问某个模型的字段，实际上访问的是field.name,因为model源码中<code>_setattr(self, field.name, rel_obj)</code>，将真实的obj和field.name绑定起来。这一切其实在实例化Model的时候就做好了，绑定对应的字段名到真实的对象上。</p><hr><p><strong>总结</strong>：</p><p>在Django框架中ImageFiled/FileField中使用到描述器，作用是替换原来的FieldFile实例为FileField实例，通过setattr()和描述器的<code>__get()__</code>内置方法，修改<code>instance.__dict__[self.field.name] = attr</code>为attr_class实例，即FieldFile文件对象。做了一个偷换对象的事情，正如注释中所说That was fun, wasn’t it?</p><p>总的来说，描述器的主要作用还是绑定某个属性的行为，利用协议的方法来覆盖掉对原始的属性的访问！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>15. 三数之和 （三指针解）</title>
    <link href="/2020/08/25/15%20.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%20%EF%BC%88%E4%B8%89%E6%8C%87%E9%92%88%E8%A7%A3%EF%BC%89/"/>
    <url>/2020/08/25/15%20.%20%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C%20%EF%BC%88%E4%B8%89%E6%8C%87%E9%92%88%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a><strong>原题：</strong></h4><p>题目：给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？请你找出所有满足条件且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/3sum">https://leetcode-cn.com/problems/3sum</a></p><hr><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h4><p>一开始想使用暴力解法，时间复杂度接近O(n³)，同时难以消除重复的组合，该方法失败。</p><p>后来又想了使用双指针+排序解决，从首尾分别向中间遍历，时间复杂度虽然降低了不少，但是同样难以消除重复的组合，因此该方法也失败。</p><p>最后无奈参考了题解，发现需要用到三指针+排序实现。跟我的方法二的思想类似，只不过还需要一个指针来固定一个数，动态的控制另外两个数。后来，按照题解的方法解出来后，仔细想了想，如果求两数之和等于0的所有不重复组合，两指针+排序也是轻松可以实现的。那么推到三数之和，四数之和，是不是需要相对应的指针呢？虽然没有达到对于N数之和证明的实力，不过就先假设这个猜想成立吧。</p><p><strong>本题解的关键点：</strong><br>我总结了一句话，对于去掉重复的组合，最清晰的方法应该就是先排序，然后针对三个数字（三个指针）都需要跳过相邻重复的数字。</p><p>时间复杂度平均为O(n²)，空间复杂度为O(1)。</p><hr><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">threeSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        <span class="hljs-comment"># 三指针</span><br>        nums.sort()  <span class="hljs-comment"># 时间杂度为O(NlogN)</span><br>        lens = <span class="hljs-built_in">len</span>(nums)<br>        <span class="hljs-keyword">if</span> lens &lt; <span class="hljs-number">3</span> <span class="hljs-keyword">or</span> (nums[<span class="hljs-number">0</span>] + nums[-<span class="hljs-number">1</span>] &gt; nums[-<span class="hljs-number">1</span>] <span class="hljs-keyword">or</span> nums[<span class="hljs-number">0</span>] + nums[-<span class="hljs-number">1</span>] &lt; nums[<span class="hljs-number">0</span>]):<br>            <span class="hljs-comment"># 不可能有三元组满足a+b+c=0</span><br>            <span class="hljs-keyword">return</span> []<br>        result = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,lens-<span class="hljs-number">2</span>):<br>            <span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> nums[i] == nums[i-<span class="hljs-number">1</span>]: <span class="hljs-comment"># 预防第一个数出现重复</span><br>                <span class="hljs-keyword">continue</span><br>            left, right = i+<span class="hljs-number">1</span>, lens-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> left &lt; right:<br>                <span class="hljs-keyword">if</span> nums[i] + nums[left] + nums[right] == <span class="hljs-number">0</span>:<br>                <span class="hljs-comment"># 因为两个数字已经能够决定第三个数字了,因此如果第一个数字固定，第二个也相同的话，则说明出现重复，因此在固定第一个数字后，要确保第二个数字不能重复，因此再排序好后需要跳过相同的相邻第二个数字</span><br>                    result.append([nums[i], nums[left] ,nums[right]])<br>                    <span class="hljs-comment"># 动态修改双指针,对第二个数和第三个数进行预防重复，只需要跳过重复的数字</span><br>                    <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> nums[left] == nums[left+<span class="hljs-number">1</span>]:<br>                        left += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">while</span> left &lt; right <span class="hljs-keyword">and</span> nums[right] == nums[right-<span class="hljs-number">1</span>]:<br>                        right -= <span class="hljs-number">1</span><br>                    <span class="hljs-comment"># 双指针向往下遍历</span><br>                    left += <span class="hljs-number">1</span><br>                    right -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">elif</span> nums[i] + nums[left] + nums[right] &gt; <span class="hljs-number">0</span>:<br>                    right -= <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    left += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>三指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探索elasticsearch从安装到运用到项目中----踩了不少坑</title>
    <link href="/2020/08/25/%E6%8E%A2%E7%B4%A2elasticsearch%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E8%BF%90%E7%94%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD----%E8%B8%A9%E4%BA%86%E4%B8%8D%E5%B0%91%E5%9D%91/"/>
    <url>/2020/08/25/%E6%8E%A2%E7%B4%A2elasticsearch%E4%BB%8E%E5%AE%89%E8%A3%85%E5%88%B0%E8%BF%90%E7%94%A8%E5%88%B0%E9%A1%B9%E7%9B%AE%E4%B8%AD----%E8%B8%A9%E4%BA%86%E4%B8%8D%E5%B0%91%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h3 id="主机环境8GB，操作系统Manjaro，Python3-6-6-，-Django2-2"><a href="#主机环境8GB，操作系统Manjaro，Python3-6-6-，-Django2-2" class="headerlink" title="主机环境8GB，操作系统Manjaro，Python3.6.6 ， Django2.2"></a><strong>主机环境8GB，操作系统Manjaro，Python3.6.6 ， Django2.2</strong></h3><p>之前用whoosh+haystack+jieba实现的搜索，感觉速度不是特别快，这次学习下elasticsearch+haystack+ik实现搜索功能。</p><p>elasticsearch是一个分布式的搜索引擎，支持集群，部署在不同的机器上。同时支持分词插件，比如ik分词，可视化插件kibana等。</p><p>我所理解的elasticsearch主要的原理：</p><p>首先在自己程序中配置要产生索引的表字段和指定索引库，然后根据这些字段，创建索引数据结构，保存在es中的索引库中，借着通过API根据关键字从指定的索引库中查找结果，以JSON格式返回，然后根据这些结果再去数据库中查找相应的记录，最终对这些查询集序列化，返回给前端。</p><p>es主要解决了数据库在模糊查询关键字的时候，会忽略所建立的索引，从而导致大数据量的查询效率低的问题。</p><hr><h4 id="一-安装elasticsearch"><a href="#一-安装elasticsearch" class="headerlink" title="一   安装elasticsearch"></a><strong>一   安装elasticsearch</strong></h4><p>1.安装JAVA虚拟机，这个就不说了</p><p>2.去官网找到网址，命令行</p><p><code>wget  https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.8.1-linux-x86_64.tar.gz</code></p><p>3.然后解压到制定目录</p><p><code>tar -zxvf elasticsearch-7.8.1-linux-x86_64.tar.gz -C /opt/elasticsearch</code> ，-C表明指定具体解压的目录。</p><p>因为我的是manjaro操作系统，自带了包管理器pacman，直接<code>sudo pacman -S elasticsearch</code>，一键安装。不过pacman的软件库中的elasticsearch没有官网的版本新。</p><hr><h4 id="二-配置elasticsearch"><a href="#二-配置elasticsearch" class="headerlink" title="二   配置elasticsearch"></a><strong>二   配置elasticsearch</strong></h4><p>1.创建非root用户</p><p>因为elasticsearch默认不能使用root角色启动服务，所以需要创建另外的用户。创建用户的指令</p><p><code>useradd syz</code></p><p><code>password syz</code></p><p>使用<code>sudo su syz</code>进入相应的用户下</p><p>这一步因为我的manjaro做了主系统，一开始就已经设置了一个不是root的用户，所以这一步是跳过的，如果已经有了非root用户，则可以不用在创建新的用户。直接将elasticsearch相关文件的所属用户或组修改成非root就可以操作了。</p><hr><p>2.配置elasticsearch.yml</p><p>找到自己elasticsearch目录下的elasticsearch.yml,进入其中修改配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> es的集群名</span><br>cluster.name:my-application<br><span class="hljs-meta">#</span><span class="bash"> es结点值</span><br>node.name:node-1<br><span class="hljs-meta">#</span><span class="bash"> 数据存放的地方</span><br>path.data:/var/lib/elasticsearch<br><span class="hljs-meta">#</span><span class="bash">日志存放的地方</span><br>path.logs:/var/log/elasticsearch<br><span class="hljs-meta">#</span><span class="bash"> 自己的ip地址</span><br>network:192.168.0.105<br><span class="hljs-meta">#</span><span class="bash"> 端口号</span><br>http.port:9200<br>bootstrap.memory_lock:false<br>bootstrap.initial_master_nodes:false<br></code></pre></td></tr></table></figure><hr><p>3.启动elasticsearch<br>进入其bin目录。</p><p><code>./elasticsearch</code></p><p>后台运行：<code>./elasticsearch -d</code></p><hr><h4 id="三-启动elasticsearch遇到的一些错误汇总"><a href="#三-启动elasticsearch遇到的一些错误汇总" class="headerlink" title="三   启动elasticsearch遇到的一些错误汇总"></a><strong>三   启动elasticsearch遇到的一些错误汇总</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/bootstarp%E6%A3%80%E6%9F%A5%E4%B8%BATrue.png">{width=90%}</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/elasic%E5%B7%B2%E6%9C%89%E7%BB%93%E7%82%B9%E8%A2%AB%E4%BD%BF%E7%94%A8.png">{width=90%}</p><p>说明：这个表示当前以运行的服务器结点个数达到上线，我出先这个问题的原因是之前已经启动了一个结点，启动失败了，然后再次启动就会出错。解决方法是kill掉之前启动不成功的结点，重新启动。</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/elastic%E4%B8%8D%E8%83%BD%E7%94%A8root%E5%90%AF%E5%8A%A8.png">{width=90%}</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/elastic%E6%97%A5%E5%BF%97%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98.png">{width=90%}</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/elastic%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98.png">{width=90%}</p><hr><h4 id="四-在Django的前后端分离中对接elasticsearch"><a href="#四-在Django的前后端分离中对接elasticsearch" class="headerlink" title="四   在Django的前后端分离中对接elasticsearch"></a><strong>四   在Django的前后端分离中对接elasticsearch</strong></h4><p><strong>以下是吐嘈：</strong></p><p>这地方，按照原始的思路，打算使用DRF对接elasticsearch，但是使用过程中也是出现了蛮多的问题。例如使用drf-haystack序列化searchset，返回的结果竟然是空，我用curl直接查找索引库可以查找到数据。</p><p>使用drf-haystack对接whoosh搜索引擎，虽然返回了结果，但是却返回了所有的结果，不同的关键字，返回同样所有的结果集。</p><p>忙了一天，百度浏览了博客，基本上都一模一样，没有一个人出了问题，大多数只是表面的对接了一下，我就纳闷了？是版本冲突还是啥？具体也不晓得之后也去了github上查看，fork和star的人好少，估计也不怎么维护，所以最终决定放弃drf-haystack，还是自己写个类来在内部请求es，然后解析json，在去hit数据库，拿到对应的结果集，最后序列化给前端。</p><hr><p>先上代码，因为昨天实现好对elasticsearch的操作类，写的可能不够完善。不过基本的根据关键字查找到对应的索引结果，是可以实现了。一些复杂的工程还需要去学习es的一些API参数，以满足不同的场景。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 视图类</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommoditySearchOperation</span>(<span class="hljs-params">GenericAPIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;ES搜索操作&quot;&quot;&quot;</span><br><br>    index_models = [Commodity]<br><br>    serializer_class = CommoditySerializer<br><br>    pagination_class = CommodityResultsSetPagination<br><br>    elastic_class = ElasticSearchOperation<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_elastic_class</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.elastic_class<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_elastic</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;elastic&#x27;</span>, <span class="hljs-literal">None</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;elastic&#x27;</span>)<br>        elastic_ = self.get_elastic_class()<br>        <span class="hljs-built_in">setattr</span>(self, <span class="hljs-string">&#x27;elastic&#x27;</span>, elastic_(*args, **kwargs))<br>        <span class="hljs-keyword">return</span> self.elastic<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span>(<span class="hljs-params">self</span>):</span><br>        elastic = self.get_elastic(request=self.request)<br>        <span class="hljs-keyword">return</span> elastic.get_queryset()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        queryset = self.get_queryset()<br>        common_logger.info(queryset)<br>        page = self.paginate_queryset(queryset)  <span class="hljs-comment"># 返回一个list页对象,默认返回第一页的page对象</span><br>        <span class="hljs-keyword">if</span> page <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            serializer = self.get_serializer(page, many=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> self.get_paginated_response(serializer.data)<br>        serializer = self.get_serializer(queryset, many=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br><br><br><span class="hljs-comment"># 序列化器类</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommoditySerializer</span>(<span class="hljs-params">serializers.ModelSerializer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;商品序列化器&quot;&quot;&quot;</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Commodity<br>        fields = <span class="hljs-string">&#x27;__all__&#x27;</span><br><br><br><br><span class="hljs-comment"># 对es操作类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ElasticSearchOperation</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;直接对es的请求封装&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># __slots__ = (&#x27;query&#x27;, &#x27;_instance&#x27;, &#x27;url&#x27;, &#x27;request&#x27;)</span><br>    Model = Commodity<br><br>    BASE_URL = <span class="hljs-string">&#x27;http://192.168.0.105:9200/&#x27;</span><br>    FUNC = <span class="hljs-string">&#x27;_search&#x27;</span><br>    INDEX_DB = <span class="hljs-string">&#x27;shop&#x27;</span><br><br>    <span class="hljs-comment"># def __new__(cls, *args, **kwargs):</span><br>    <span class="hljs-comment">#     if not hasattr(cls, &#x27;_instance&#x27;):</span><br>    <span class="hljs-comment">#         cls._instance = super().__new__(cls, *args, **kwargs)</span><br>    <span class="hljs-comment">#     return cls._instance</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> kwargs.items():<br>            <span class="hljs-built_in">setattr</span>(self, key, value)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">combine_url</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;request&#x27;</span>), <span class="hljs-string">&#x27;Should include request &#x27;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;url&#x27;</span>):<br>            <span class="hljs-keyword">return</span> self.url<br>        query = self.request.query_params.copy()<br>        query.pop(<span class="hljs-string">&#x27;page&#x27;</span>)<br>        url = self.BASE_URL + self.INDEX_DB + <span class="hljs-string">&#x27;/&#x27;</span> + self.FUNC + <span class="hljs-string">&#x27;?&#x27;</span> + <span class="hljs-string">&#x27;&amp;&#x27;</span>.join(<br>            [<span class="hljs-string">&#x27;q=&#x27;</span> + key + <span class="hljs-string">&#x27;:&#x27;</span> + value <span class="hljs-keyword">for</span> key, value <span class="hljs-keyword">in</span> query.items()])<br>        <span class="hljs-built_in">setattr</span>(self, <span class="hljs-string">&#x27;url&#x27;</span>, url)<br>        common_logger.info(url)<br>        <span class="hljs-keyword">return</span> url<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_search_results</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;pk_list&#x27;</span>):<br>            <span class="hljs-keyword">return</span> self.pk_list<br>        url = self.combine_url()<br>        response = requests.get(url).json()<br>        hits = response.get(<span class="hljs-string">&#x27;hits&#x27;</span>).get(<span class="hljs-string">&#x27;hits&#x27;</span>)<br>        pk_list = [<span class="hljs-built_in">int</span>(document.get(<span class="hljs-string">&#x27;_source&#x27;</span>).get(<span class="hljs-string">&#x27;django_id&#x27;</span>)) <span class="hljs-keyword">for</span> document <span class="hljs-keyword">in</span> hits]<br>        <span class="hljs-built_in">setattr</span>(self, <span class="hljs-string">&#x27;pk_list&#x27;</span>, pk_list)<br>        common_logger.info(pk_list)<br>        <span class="hljs-keyword">return</span> pk_list<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;根据索引结果查询数据库&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;Model&#x27;</span>), <span class="hljs-string">&#x27;Should define Model&#x27;</span><br>        pk_list = self.get_search_results()<br>        ordering = <span class="hljs-string">&#x27;FIELD(`id`, &#123;&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&#x27;,&#x27;</span>.join([<span class="hljs-built_in">str</span>(pk) <span class="hljs-keyword">for</span> pk <span class="hljs-keyword">in</span> pk_list]))  <span class="hljs-comment"># 设定排序</span><br>        <span class="hljs-keyword">return</span> self.Model.commodity_.<span class="hljs-built_in">filter</span>(pk__in=pk_list).extra(select=&#123;<span class="hljs-string">&quot;ordering&quot;</span>: ordering&#125;, order_by=(<span class="hljs-string">&quot;ordering&quot;</span>,))<br><br></code></pre></td></tr></table></figure><hr><p><strong>说明：</strong>我没有去仔细看drf-haystack的代码，只是利用了es向外提供了Restful的Api。为了不暴露自己的ip和端口号。加了一层视图封装一下。</p><p>基本流程：前端请求GET方法到后台，后台获取GET的参数。然后通过这些参数，拼接成请求es索引库的url，发送GET请求，获取JSON格式的结果，对其解析，解析出model的id，随即利用extra制定其结果集的顺序（这里需要制定），不然queryset返回的是按id从小到达的，而不是按照es返回的按照score排列的结果集了。最后，将这些queryset进行序列化，添加分页器等等，将结果返回给前端。</p><p>存在的几个问题，记录下，下次需要解决：</p><p>1.es每次hit索引库，只返回了10条结果，如何让它一次返回更多的数据。</p><p>2.我的这种方法性能上是否还需要提高？</p><p>其实，Python中存在elasticsearch包，可以创建多重模式的elasticsearch，并提供丰富的Client和API，以后使用到的时候，我再学习并写篇笔记！今天就到这里。</p><hr><h4 id="五-返回的结果示例："><a href="#五-返回的结果示例：" class="headerlink" title="五   返回的结果示例："></a><strong>五   返回的结果示例：</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png">{width=90%}</p>]]></content>
    
    
    <categories>
      
      <category>ElasticSearch</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11. 盛水最多的容器 （双指针解）</title>
    <link href="/2020/08/25/11%20%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8%20%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%EF%BC%89/"/>
    <url>/2020/08/25/11%20%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8%20%EF%BC%88%E5%8F%8C%E6%8C%87%E9%92%88%E8%A7%A3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a><strong>原题：</strong></h4><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/container-with-most-water">https://leetcode-cn.com/problems/container-with-most-water</a></p><hr><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h4><p>这道题利用双指针+动态规划的思想很容易就可以解出。</p><p>1.分别设置一头head，一尾tail，分别从头尾两端往中间遍历。</p><p>2.当height[head] &lt; height[tail]时，head += 1; 反之 tail -= 1</p><p>3.利用木桶效应原理，取板短的那一个计算面积。</p><p>4.利用动态规划思想，计算每次的面积与之前最大的面积进行比较，得出新的最大的面积</p><p>5.head &gt; tail 表示比较结束，跳出循环</p><hr><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxArea</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-comment"># 双指针，一头一尾,从两头开始比较</span><br>        lens = <span class="hljs-built_in">len</span>(height)<br>        head = <span class="hljs-number">0</span><br>        tail = lens-<span class="hljs-number">1</span><br>        max_area = (tail-head) * <span class="hljs-built_in">min</span>(height[head],height[tail])<br>        <span class="hljs-keyword">while</span> head &lt; tail:<br>            <span class="hljs-keyword">if</span> height[head] &lt; height[tail]:<br>               head += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>               tail -= <span class="hljs-number">1</span><br>            max_area = <span class="hljs-built_in">max</span>(max_area, <span class="hljs-built_in">min</span>(height[head],height[tail])*(tail-head))<br>        <span class="hljs-keyword">return</span> max_area<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入理解Queryset源码之内置缓存特性</title>
    <link href="/2020/08/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Queryset%E6%BA%90%E7%A0%81%E4%B9%8B%E5%86%85%E7%BD%AE%E7%BC%93%E5%AD%98%E7%89%B9%E6%80%A7/"/>
    <url>/2020/08/22/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Queryset%E6%BA%90%E7%A0%81%E4%B9%8B%E5%86%85%E7%BD%AE%E7%BC%93%E5%AD%98%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一   背景"></a><strong>一   背景</strong></h4><p>之前做了篇笔记，简单介绍了下Queryset的两大性质—–缓存和惰性，当时初学Django，也并没有阅读下QuerySet的底层源码。</p><p>现做此笔记，详细的从代码角度理解下什么样的操作会去查询数据库，什么样的操作会去创建清除QuerySet内置的缓存。</p><p>浏览了网上的一些博客，大多数都只是字面谈了谈Queryset的缓存和惰性两大性质,有些写的也是错的，因此我就自己去源码寻找正确的答案，毕竟自己经历一番，才会更加熟悉。</p><hr><h4 id="二-查询数据库，产生缓存列表的代码分析"><a href="#二-查询数据库，产生缓存列表的代码分析" class="headerlink" title="二   查询数据库，产生缓存列表的代码分析"></a><strong>二   查询数据库，产生缓存列表的代码分析</strong></h4><p>首先进入到QuerySet类，<code>from django.db.models import QuerySet</code></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/queryset_result_cache.png">{width=90%}</p><p><strong>说明：</strong>我们在实例方法<code>__init__</code>中可以找到存放缓存的属性的定义</p><p>接下来，我们需要找到查询数据库产生缓存的地方</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/_fetch_all.png">{width=90%}</p><p>知道了缓存产生的函数，我们就可以依次去从源码中找哪些地方调用了该函数。</p><p>1.<code>__getstate__</code>使用pickle模块等序列化queryset时候，会去查询数据库，生成缓存列表，例如将查询集序列化到缓存redis中。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/__setstate__cache.png">{width=90%}</p><p>2.<code>__getitem__</code>方法中，对queryset进行索引或者切片会去查询数据库，生成缓存列表</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/__getitem__cache.png">{width=90%}</p><p>3.<code>__bool__</code>方法中，调用if else来对查询集进行判断的时候，例如<code>if  queryset:</code>，此时会去查询数据库，<br>因此当已经存在缓存列表时，使用<code>if queryset.exists()</code>而不是直接<code>if queryset</code>。这样不会再次查询数据库。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/__bool_cache.png">{width=90%}</p><p>4.<code>__iter__</code>方法中,返回一个迭代器的时候，也就是在for循环时，会去查询数据库，生成缓存列表</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/__iter__cache.png">{width=90%}</p><p>5.<code>__repr__</code> 方法中，通过<code>print</code>打印或者调用<code>queryset.__repr__</code>均会调用<code>__repr__</code>,因为其中并没有定义<code>__str__</code>。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/__repr__cache.png">{width=90%}</p><p><strong>说明：</strong> 其中回调用list(self[:REPR])方法，实际上调用了<code>__getitem__</code>内置方法，然后调用了<code>__iter__</code>内置方法，返回一个迭代器。</p><hr><h4 id="三-清空缓存的函数"><a href="#三-清空缓存的函数" class="headerlink" title="三   清空缓存的函数"></a><strong>三   清空缓存的函数</strong></h4><p>1.delete删除实例的时候，清空缓存<br><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/delete_cache.png">{width=90%}</p><p>2.update更新实例的时候，清空缓存</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/update_cache.png">{width=90%}</p><p>那么到这里，针对QuerySet的缓存设置和删除的相关函数已经基本了解，但是在深入想一下，如果我不手动调用delete或者update方法，那么缓存如何清除呢？</p><p>其实，QuerySet内置的缓存是List类型的，也就是存放在内存中，那么根据Python三大内存回收机制，一段时间不使用缓存列表了，则Python解释器会自动帮你回收内存资源，这样也就自然的清除了。</p><p>所以我大胆猜测，前端发送的请求，如果多个请求间隔小，则利用QuerySet的缓存特性，则可以减少数据库的查询次数。就像<code>self.get_queryset()</code>原理函数一样，调用缓存。</p><hr><h4 id="四-不产生缓存的方法"><a href="#四-不产生缓存的方法" class="headerlink" title="四  不产生缓存的方法"></a><strong>四  不产生缓存的方法</strong></h4><p>这里先主要介绍下iterator()方法，其实还有exists()也不会生成缓存</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/query_fetch.png">{width=90%}</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/query_iterators_.png">{width=90%}</p><p>分析：因为yield关键字存在，所以它所在的方法就是一个生成器。生成器是一个特殊的迭代器，依赖惰性性质，需要生成数据时候才会生成数据，不占用过多内存。迭代器内部定义了__iter__方法和__next__方法。</p><p>具体想要了解迭代器和生成器的区别，可以参考以下博客：</p><p><a href="https://www.cnblogs.com/wj-1314/p/8490822.html">https://www.cnblogs.com/wj-1314/p/8490822.html</a></p><p><a href="https://www.zhihu.com/question/20829330">https://www.zhihu.com/question/20829330</a></p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python递归和迭代解二叉树前序，中序，后序遍历</title>
    <link href="/2020/08/20/Python%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E8%A7%A3%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%EF%BC%8C%E4%B8%AD%E5%BA%8F%EF%BC%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <url>/2020/08/20/Python%E9%80%92%E5%BD%92%E5%92%8C%E8%BF%AD%E4%BB%A3%E8%A7%A3%E4%BA%8C%E5%8F%89%E6%A0%91%E5%89%8D%E5%BA%8F%EF%BC%8C%E4%B8%AD%E5%BA%8F%EF%BC%8C%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h3 id="题目：二叉树的前序，中序，后序遍历"><a href="#题目：二叉树的前序，中序，后序遍历" class="headerlink" title="题目：二叉树的前序，中序，后序遍历"></a><strong>题目：二叉树的前序，中序，后序遍历</strong></h3><p>前序关键词：根左右</p><p>中序关键词：左根右</p><p>后序列关键词：左右根</p><hr><p><strong>题目来源Leetcode：</strong></p><p><a href="https://leetcode-cn.com/leetbook/read/data-structure-binary-tree/xeywh5/" title="前序遍历">前序遍历</a></p><p><a href="https://leetcode-cn.com/leetbook/read/data-structure-binary-tree/xecaj6/" title="中序遍历">中序遍历</a></p><p><a href="https://leetcode-cn.com/leetbook/read/data-structure-binary-tree/xebrb2/" title="后序遍历">后序遍历</a></p><hr><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><h5 id="前序："><a href="#前序：" class="headerlink" title="前序："></a><strong>前序：</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x</span>):</span><br>         self.val = x<br>         self.left = <span class="hljs-literal">None</span><br>         self.right = <span class="hljs-literal">None</span><br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">preorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br><br>        <span class="hljs-comment"># 递归算法</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>             <span class="hljs-keyword">return</span> []<br>        result = [root.val]<br>        <span class="hljs-comment"># 从底层网上追加</span><br>        result.extend(self.preorderTraversal(root.left))<br>        result.extend(self.preorderTraversal(root.right))<br>        <span class="hljs-keyword">return</span> result<br><br><br>        <span class="hljs-comment"># 迭代算法，栈+DFS</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>: <span class="hljs-comment"># 如果该结点为空</span><br>            <span class="hljs-keyword">return</span> []<br>        stack = []       <span class="hljs-comment"># 初始化一个栈</span><br>        results = []     <span class="hljs-comment"># 初始化结果队列</span><br>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">or</span> root:      <span class="hljs-comment"># 当栈空且结点遍历完则跳出循环</span><br>            <span class="hljs-keyword">if</span> root:              <span class="hljs-comment"># 当前结点存在，先遍历左子树</span><br>                results.append(root.val)         <span class="hljs-comment"># 将值添加到结果队列</span><br>                stack.append(root)               <span class="hljs-comment"># 将该结点压入栈</span><br>                root = root.left                 <span class="hljs-comment"># 指向其左孩子结点</span><br>            <span class="hljs-keyword">else</span>:                 <span class="hljs-comment"># 结点不存在需要遍历右子树</span><br>                root = stack.pop()               <span class="hljs-comment"># 从栈中弹出每个子数的根结点</span><br>                root = root.right                <span class="hljs-comment"># 指向其右孩子结点</span><br>        <span class="hljs-keyword">return</span> results<br></code></pre></td></tr></table></figure><hr><h5 id="中序："><a href="#中序：" class="headerlink" title="中序："></a><strong>中序：</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x</span>):</span><br>         self.val = x<br>         self.left = <span class="hljs-literal">None</span><br>         self.right = <span class="hljs-literal">None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        <span class="hljs-comment"># # 递归</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>             <span class="hljs-keyword">return</span> []<br>        result = []<br>        result.extend(self.inorderTraversal(root.left))<br>        result.extend([root.val])<br>        result.extend(self.inorderTraversal(root.right))<br>        <span class="hljs-keyword">return</span> result<br><br>        <span class="hljs-comment"># 迭代算法，栈+BFS</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> []<br>        result = []<br>        stack = []<br>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">or</span> root:<br>            <span class="hljs-keyword">if</span> root:<br>                stack.append(root)<br>                root = root.left<br>            <span class="hljs-keyword">else</span>:<br>                root = stack.pop()<br>                result.append(root.val)<br>                root = root.right<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><hr><h5 id="后序："><a href="#后序：" class="headerlink" title="后序："></a><strong>后序：</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span>:</span><br>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, x</span>):</span><br>         self.val = x<br>         self.left = <span class="hljs-literal">None</span><br>         self.right = <span class="hljs-literal">None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">postorderTraversal</span>(<span class="hljs-params">self, root: TreeNode</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        <span class="hljs-comment"># 递归算法</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>             <span class="hljs-keyword">return</span> []<br>        result = []<br>        result.extend(self.postorderTraversal(root.left))<br>        result.extend(self.postorderTraversal(root.right))<br>        result.extend([root.val])<br>        <span class="hljs-keyword">return</span> result<br><br>        <span class="hljs-comment"># 迭代算法</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> []<br>        stack = []          <span class="hljs-comment"># 栈</span><br>        result = []          <span class="hljs-comment"># 结果列表</span><br>        temp = <span class="hljs-literal">None</span>    <span class="hljs-comment"># 记录上一次已经访问过的结点</span><br>        <span class="hljs-keyword">while</span> stack <span class="hljs-keyword">or</span> root:<br>            <span class="hljs-keyword">if</span> root:<br>                stack.append(root)<br>                root = root.left    <span class="hljs-comment"># 指向左结点</span><br>            <span class="hljs-keyword">else</span>:<br>                root = stack[-<span class="hljs-number">1</span>]   <span class="hljs-comment"># 这里先不出栈，获取栈顶元素，因为是左右根顺序</span><br>                <span class="hljs-keyword">if</span> root.right <span class="hljs-keyword">and</span> root.right != temp:      <span class="hljs-comment"># 右孩子存在且未被访问过，防止死循环，要判断是否已经访问过一次</span><br>                    root = root.right   <span class="hljs-comment"># 指向其右孩子结点</span><br>                    stack.append(root)  <span class="hljs-comment"># 将右孩子结点入栈</span><br>                    root = root.left    <span class="hljs-comment"># 指向其左孩子结点，再次遍历其左子树</span><br>                <span class="hljs-keyword">else</span>:<br>                    root = stack.pop()          <span class="hljs-comment"># 出栈，右子树已经全部访问过或已没有右孩子结点</span><br>                    result.append(root.val)  <span class="hljs-comment"># 添加到结果列表中</span><br>                    temp = root                   <span class="hljs-comment"># 该结点出栈，意味着已经访问过一次，防止死循环， 防止右孩子循环</span><br>                    root = <span class="hljs-literal">None</span>                  <span class="hljs-comment"># 此时应该出栈的是子树的根结点，因此需要满足回退的时候不会再去访问左子树, 防止根节点循环</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><p>对于三种顺序的二叉树遍历，递归算法从思想上和代码量上来说要比迭代简单写，但是递归所开辟的空间和效率一定程度上高于迭代。</p><p>做这篇笔记的主要目的是学习二叉树遍历的迭代算法和递归算法思想的区别。</p><p><strong>递归算法：</strong>思路还是蛮简单的，只要结合画图，可以很轻松的理清头绪。</p><p><strong>迭代算法：</strong> 需要借助栈或者队列临时保存数据，因此增加了变成的复杂度，但一定程度上提高了遍历的效率，锻炼了思维。</p><hr><p>最后说下后序的迭代算法，后序迭代算法中需要注意的是，当遍历完左子树后，不能像先序和中序那样直接将根结点出栈，因为后序是左右根，判断完左边，还需要判断右边，最后才会输出根结点。而且细想以下，又出现了一个问题，遍历右子树，同样按照左右根的顺序遍历下去，那么一轮下来肯定是所有结点都会遍历结束，此时就需要像递归那样回退，只不过迭代中借助出栈来实现回退，那么回退的过程中肯定会回到当初遍历过得某个根结点，如果不对该根结点做标识，则会导致死循环。因此还需要添加一个标志位，表示该结点刚才已经被访问过一次。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>DFS</tag>
      
      <tag>队列</tag>
      
      <tag>Python</tag>
      
      <tag>二叉树</tag>
      
      <tag>递归栈</tag>
      
      <tag>BFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对DRF的APIView执行流程的源码学习</title>
    <link href="/2020/08/19/%E5%AF%B9DRF%E7%9A%84APIView%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%9A%84%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/08/19/%E5%AF%B9DRF%E7%9A%84APIView%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B%E7%9A%84%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="跟着源码学习下DRF的APIView执行流程原理"><a href="#跟着源码学习下DRF的APIView执行流程原理" class="headerlink" title="跟着源码学习下DRF的APIView执行流程原理"></a><strong>跟着源码学习下DRF的APIView执行流程原理</strong></h3><h4 id="一-入口函数as-view-方法——入口"><a href="#一-入口函数as-view-方法——入口" class="headerlink" title="一  入口函数as_view() 方法——入口"></a><strong>一  入口函数as_view() 方法——入口</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/DRF_as_view.png">{width=90%}</p><p><strong>说明：</strong></p><p>一般通过urlconf中配置路由时，需绑定类视图的as_view()方法。注意必须以类名.as_view()形式调用，而不能实例化调用，因为@classonlymethod中重写了__get__内置方法进行限制。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/classonlymethod.png">{width=90%}</p><hr><h4 id="二-基类中的as-view-—–闭包，实例化类"><a href="#二-基类中的as-view-—–闭包，实例化类" class="headerlink" title="二   基类中的as_view()—–闭包，实例化类"></a><strong>二   基类中的as_view()—–闭包，实例化类</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/django_as_view.png">{width=90%}</p><p><strong>说明：</strong></p><p>采用闭包形式，返回的视图取消了csrf验证，因此继承APIView中的所有类中的视图都不会在进行防跨域伪造请求验证。因此需要搭配上JWT。</p><hr><h4 id="三-核心方法dispatch—-反射处理请求"><a href="#三-核心方法dispatch—-反射处理请求" class="headerlink" title="三  核心方法dispatch—-反射处理请求"></a><strong>三  核心方法dispatch—-反射处理请求</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/dispatch.png">{width=90%}</p><p><strong>说明：</strong></p><p>1.DRF对Django原生的wsgi协议的request进行了二次封装，向下兼容，使得现在的request能访问原生的request对象,同时也封装了数据解析，以request.data形式表示（默认接受application/json格式），以往的django都是request.POST和request.get来获取基于请求头为application/x-www-form-urlencode格式的数据。</p><p>2.利用反射机制映射到同名的自定义的请求处理方法上，然后执行。</p><p>3.封装了处理异常的方法，Django的dispatch中是没有的。</p><p>4.dispatch中的<code>*args,**kwargs</code>其实也就是经过路由匹配传过来的参数。</p><hr><h4 id="四-initial初始化—–认证，权限，频率检查"><a href="#四-initial初始化—–认证，权限，频率检查" class="headerlink" title="四   initial初始化—–认证，权限，频率检查"></a><strong>四   initial初始化—–认证，权限，频率检查</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/initial.png">{width=90%}</p><hr><h4 id="五-finialize-response—–数据格式渲染，头部添加"><a href="#五-finialize-response—–数据格式渲染，头部添加" class="headerlink" title="五   finialize_response—–数据格式渲染，头部添加"></a><strong>五   finialize_response—–数据格式渲染，头部添加</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/finalize_response.png">{width=90%}</p><hr><h4 id="六-数据解析将数据封装到request-data"><a href="#六-数据解析将数据封装到request-data" class="headerlink" title="六   数据解析将数据封装到request.data"></a><strong>六   数据解析将数据封装到request.data</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/load_pase_data.png">{width=90%}</p><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/data.png">{width=90%}</p><p><strong>说明：</strong></p><p>数据解析的封装是在二次封装request的对象实例化时候完成的，也就是在dispatch中调用了initialize_request()方法。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>DRF</category>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
      <tag>DRF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享Redis中bittop和bitcount的有趣的实例</title>
    <link href="/2020/08/18/%E5%88%86%E4%BA%ABredis%E4%B8%ADbittop%E5%92%8Cbitcount%E7%9A%84%E6%9C%89%E8%B6%A3%E7%9A%84%E5%AE%9E%E4%BE%8B/"/>
    <url>/2020/08/18/%E5%88%86%E4%BA%ABredis%E4%B8%ADbittop%E5%92%8Cbitcount%E7%9A%84%E6%9C%89%E8%B6%A3%E7%9A%84%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="利用redis的bitop和bitcount来实现每日的用户量快速统计和单独用户的一段时间的登录次数"><a href="#利用redis的bitop和bitcount来实现每日的用户量快速统计和单独用户的一段时间的登录次数" class="headerlink" title="利用redis的bitop和bitcount来实现每日的用户量快速统计和单独用户的一段时间的登录次数"></a><strong>利用redis的bitop和bitcount来实现每日的用户量快速统计和单独用户的一段时间的登录次数</strong></h3><p>用bitop的位逻辑运算来计算每日的用户量的思路来源于一篇外文博客。</p><p>地址：<a href="https://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/">https://blog.getspool.com/2011/11/29/fast-easy-realtime-metrics-using-redis-bitmaps/</a></p><p>因为是篇英文博客，因此我借着这个机会锻炼英语阅读能力，同时学习一下这种运算思维逻辑，写出自己一些感悟。</p><h4 id="一-思想来源的背景"><a href="#一-思想来源的背景" class="headerlink" title="一  思想来源的背景"></a><strong>一  思想来源的背景</strong></h4><p>目前很多软件中都会统计的功能，例如淘宝统计在线人数，统计每个店铺月销量，或者全民K歌中统计每一首歌在一个月内被多少用户翻唱过等等。因为这些统计往往是一种聚合，并且表述的有时很复杂，很烦多。因此用普通数据库来实现的话，有点小题大用了，而且会和磁盘I/O打上交道，一旦并发量大，又要考虑堆服务器，甚至分库分表等。</p><p>因此选用redis中间件来存放这些计算统计数据，一是因为redis中大部分的指令的时间复杂度都很小，而是所需的内存空间也很小。根据这篇外文博客中指出的：In a simulation of 128 million users, a typical metric such as “daily unique users” takes less than 50 ms on a MacBook Pro and only takes 16 MB of memory.</p><p>意思就是：在对1.28亿的用户数模拟中，就像计算每日不同用户的登录的这种典型指标，消耗了低于50ms的时间和仅仅使用了16MB的内存大小（这是基于bitmap的内存消耗）。</p><hr><h4 id="二-Bitmap的简要介绍"><a href="#二-Bitmap的简要介绍" class="headerlink" title="二  Bitmap的简要介绍"></a><strong>二  Bitmap的简要介绍</strong></h4><p>bitmap（位图）是一连串由0或1组成的二进制位，每一个位置表示一个偏移量，它提供了AND，OR，XOR等其他逻辑运算。</p><hr><h4 id="三-统计日用户量的思想"><a href="#三-统计日用户量的思想" class="headerlink" title="三  统计日用户量的思想"></a><strong>三  统计日用户量的思想</strong></h4><p>例如全名K歌中，某首歌（假设这首歌叫做《梦灯笼》）在一小时内被用户翻唱过一次的统计，则键可以设置   key=”梦灯笼:2020-07-23-13“，则指令为<code>redis.setbit(key,5,1)</code></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/bitmap.png">{width=80%}</p><p>说明：用用户id来表示key的offset，用那么上图总共16位，其中9位置为1，则使用bitcount统计,则一个小时内该歌曲被9个不同的用户翻唱过。当然用于登录次数也可以用这种表示。</p><hr><h4 id="四-某个用户一段时间的统计量"><a href="#四-某个用户一段时间的统计量" class="headerlink" title="四   某个用户一段时间的统计量"></a><strong>四   某个用户一段时间的统计量</strong></h4><p>例如某个用户一年的登录次数，用bitmap，最大也只需要365bit的空间，键值就可以为该用户的id了。</p><hr><h4 id="五-使用bitop将范围延伸"><a href="#五-使用bitop将范围延伸" class="headerlink" title="五   使用bitop将范围延伸"></a><strong>五   使用bitop将范围延伸</strong></h4><p>如果此时有个需求，我统计了每天的数据，那么我想要按周计算每个月的某首歌的翻唱不同用户数（不叠加），这里是记录不重复的次数，因此可以用bitmap，设置偏移量，如果需要记录重复的次数，那么就要考虑用其他数据结构了，这里先不谈。</p><p>因此我们使用bitop对已有的数据做逻辑运算，例如我要获取一周内，翻唱的次数，我可以这样做，对每天的统计量进行或运算。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-23 6 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-23 7 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-23 15 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-23 14 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-24 1 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-24 2 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-24 6 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-24 15 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-25 15 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-25 25 1<br>(integer) 0<br>127.0.0.1:6379&gt; SETBIT 梦灯笼:2020-07-25 1 1<br><br></code></pre></td></tr></table></figure><p>如上我对《梦灯笼》这首歌曲分别在2020-7-23～2020-7-25日期间对不同的用户模拟设定了翻唱。然后我要统计2020-7-23这天翻唱的人数，只需<code>BITCOUNT 梦灯笼:2020-07-23</code>。</p><p>如果我要统计一周内翻唱的不同用户总数，只需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1:6379&gt; BITOP OR 梦灯笼:2020-07:4 梦灯笼:2020-07-23 梦灯笼:2020-07-24 梦灯笼:2020-07-25<br>(integer) 4<br></code></pre></td></tr></table></figure><p><strong>注：</strong>利用bitop来做逻辑运算，求得1周内总共有多少不同的用户对该首歌进行了翻唱。</p><p>如果还想要统计某一区间的用户的翻唱情况，可以使用<code>BITCOUNT</code>的start和end来进行约束，例如：<br>我想要获取用户区id区间在16,31中的翻唱情况，则可以使用<code>BITCOUNT 梦灯笼:2020-07-25 2 4</code>,这里的[start, end]基本单位为字节，也就是8bit，因此[2,4]表示[16,31]，但是最低也只能8个为单位，因此也存在一定的局限性。</p><p>redis用于统计数据的时候，可以看出效率还是蛮高的，下图是截取了外文博客的一个时间比较。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/bitmap_time_compare.png">{width=80%}</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入探讨JWT流程原理及对drf-jwt的流程分析和源码修改</title>
    <link href="/2020/08/17/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8JWT%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9drf-jwt%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%92%8C%E6%BA%90%E7%A0%81%E4%BF%AE%E6%94%B9/"/>
    <url>/2020/08/17/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8JWT%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AF%B9drf-jwt%E7%9A%84%E6%B5%81%E7%A8%8B%E5%88%86%E6%9E%90%E5%92%8C%E6%BA%90%E7%A0%81%E4%BF%AE%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>之前做Django项目的时候，一直都用的自带的session认证模式，Django的session模式的后端可以选择redis，也可以选择数据库进行存储。用redis如果需要经常清理内存数据库，而用db存储，则需要频繁写操作，效率也比较低，在用户多的时候，存储大量的session记录带来额外的开销。</p><h4 id="一-什么是JWT"><a href="#一-什么是JWT" class="headerlink" title="一  什么是JWT?"></a><strong>一  什么是JWT?</strong></h4><p>JWT俗称 Json Web Token,是一种用于通信双方之间传递安全信息的简洁的、URL安全的表述性声明规范，经常用在跨域身份验证。</p><p>它的数据格式一般以JSON对象的形式传递，并伴有数字签名，加强安全性。</p><hr><h4 id="二-传统的认证模式Session"><a href="#二-传统的认证模式Session" class="headerlink" title="二  传统的认证模式Session"></a><strong>二  传统的认证模式Session</strong></h4><p>传统的session认证（其实是session+cookie),session离不开cookie。当某一个用户第一次登录了某个网站，那么为了满足一定时间内或条件内下一次进入该网站无需再登录，但是由于HTTP的无状态，无连接特性，并不会记住该用户的信息，那么就需要将这个登录状态以一种形式保存下来。通常以数据库为backends，建立表，然后保存成一次记录。</p><p>我就Django而言，把session的使用流程简单说明以下：</p><p>首先会建立名为django_session的表，分别设立了3个字段：session_id,session_data,session_date。此时，有一名用户，输入了用户名和密码准备登录到网站，它发送了POST请求到后台（不带任何cookie请求），服务器在中间件(SessionMiddleware)拦截到了发送的请求，判断是否带有session_id，如果没有,则“放他走”，取执行视图，执行完毕，一般回调用login方法，根据user对象和过期时间等一些额外信息来创建新的session记录，存放到数据表中，并在响应对象中设置cookie，返回给前端。如果请求body中存在session_id，则表明该请求前不久请求过一次，session尚未过期，因此就拿着这个session_id取数据库表中比对，找到对应的记录，然后根据session_data数据中的信息，创建User对象，存入request.user中，以便后面的视图能够使用request.user，同是将session_data数据转为字典形式，封装到request.session中，以便后续使用。</p><p>其实不同框架，不同技术实现session+cookie的原理基本都一样。</p><hr><h4 id="三-细想Session存在的一些问题"><a href="#三-细想Session存在的一些问题" class="headerlink" title="三  细想Session存在的一些问题"></a><strong>三  细想Session存在的一些问题</strong></h4><p>1.session需要经常对数据库写操作，磁盘I/O嘛，懂得，比较慢。同时如果不及时处理，越写越多，造成额外的开销</p><p>2.session通常搭配数据库，那么如果一个项目它的用户量很大的时候，一个数据库难以支持大规模的读写操作，此时就需要对数据库进行负载均衡了，集群处理了。因此问题就来了，存储在一个backend的session,如果做了集群，还要需存储session的固定数据库匹配session_id,是不是觉的蛮麻烦的。。。</p><p>3.其实说session很安全，也并不是百分百特别安全，毕竟和cookie有关，需要将session_id保存在cookie中，假如中途被人截了，做CSRF攻击咋办。不过Django针对CSRF攻击想得还是蛮周到，每次请求，都会在Cookie中添加额外的字段csrftoken，然后请求的时候，在请求头中带上这个csrftoken，用来防跨域伪造请求。不过在用DRF的APIView的时候，csrf也被禁止了，那咋办嘞？于是我想到了之前从别人口中听到的JWT认证，今天就来会会它！</p><hr><h4 id="四-JWT的原理"><a href="#四-JWT的原理" class="headerlink" title="四   JWT的原理"></a><strong>四   JWT的原理</strong></h4><p>JWT的构成有三段，分别为head(头部），payload（有效载荷）, signature（签证）。</p><p>结构如图所示：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/jwt_token.png">{width=”100%”}</p><p>不同部分分别以’.’分隔。分别表示head，payload，和signature。</p><hr><p>1.<strong>head</strong> :主要包括认证令牌的类型，加密算法，也可以是一些项目的信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>   <span class="hljs-attr">&quot;project&quot;</span>:<span class="hljs-string">&quot;天秀&quot;</span>,<br>   <span class="hljs-attr">&quot;algorithm&quot;</span>:<span class="hljs-string">&quot;HS256&quot;</span>,<br>   <span class="hljs-attr">&quot;type&quot;</span>:<span class="hljs-string">&quot;jwt&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后对其进行base64编码，注意不是加密，可以对其反解码</p><p>2.<strong>payload</strong>:有效载荷存放的是有效信息的地方，体现的一般是关键信息。包括三类：标准中注册的声明，公共的声明，私有的声明。</p><ul><li><p><strong>标准中注册的声明</strong>：包括jwt的签发者，设备号，接受jwt的一方，jwt的过期时间，jwt的签发时间等等。</p></li><li><p><strong>公共声明</strong>：包含业务的信息或者用户名信息等。</p></li><li><p><strong>私有声明</strong>：往往是提供者和客户共同定义的信息。</p></li></ul><p>格式如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>  <span class="hljs-attr">&quot;id&quot;</span>: <span class="hljs-string">&quot;125&quot;</span>,<br>  <span class="hljs-attr">&quot;name&quot;</span>: <span class="hljs-string">&quot;syz&quot;</span>,<br>  <span class="hljs-attr">&quot;admin&quot;</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">&quot;is_active&quot;</span>:<span class="hljs-literal">true</span>,<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：</strong>这一部分的内容也是通过base64进行编码的，同时也是可以反解码的，需要在后台解码，提取相关用户信息，创建用户对象，因此也不应存放过于隐私的数据，确保传输安全性。</p><p>3.<strong>signature</strong>:用户签证作为其第三部分，它的组成有三部分：</p><ul><li><p>base64编码后的head</p></li><li><p>base64编码后的payload</p></li><li><p>服务器安全码（采用hash加密，如md5，不可逆）</p></li></ul><p>格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br><span class="hljs-attr">&quot;head&quot;</span>: <span class="hljs-string">&quot;头的加密字符串&quot;</span>,<br><span class="hljs-attr">&quot;payload&quot;</span>: <span class="hljs-string">&quot;体的加密字符串&quot;</span>,<br><span class="hljs-attr">&quot;secret_key&quot;</span>: <span class="hljs-string">&quot;安全码&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后将这head和payload以及secret_key组合成一个字符串，再经过加密，就得到了jwt的第三部分—签证。</p><p>而最终的token是由’.’将这三部分连接起来。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/jwt_token.png">{width=”100%”}</p><hr><p><strong>注： secret_key是服务端提供的密钥，不能被客户端用户知晓，否则客户端就可以自己签发token了。</strong></p><hr><h4 id="五-使用jwt的好处"><a href="#五-使用jwt的好处" class="headerlink" title="五   使用jwt的好处"></a><strong>五   使用jwt的好处</strong></h4><p>jwt的出现是为了解决session存在的一些问题，token不需要存储下来，直接通过base64编码+加密以及base64解码的方式，来生成所需要的用户对象。</p><p>优点也很明显：</p><p>1.不需要存储在服务器端，也就不需要大量的写操作，高效，不需要占用额外的磁盘空间，省空间。</p><p>2.存在利用hash不可逆加密的签证，只要服务器端的安全码不被外泄，则还是蛮安全的。</p><p>如果不太明白如何防止csrf的原理，我觉得这篇介绍了<a href="http://cache.baiducontent.com/c?m=9d78d513d99200ef0cfa950e1a66dc716a5397134cc0a41068d5e35fe2134c37307193be30511a13d2b56b1771b83d5ffd813c65440037b6ebdff94fcacce23f5e8d3040710b873105a26fb8bb4332c050872be9b86de5aeb772cda18895991612dd5276679db5ce1f1714bd37ab476da2fcde5f152841e7b22d27e259267dcf2745b216feea626d&p=c2708315d9c442e402b8c7710f51&newp=c272c4378c904ead10bd9b790e4392695d0fc20e38d3db01298ffe0cc4241a1a1a3aecbf2d251004d3c1776502aa4c58eaf43d723d0034f1f689df08d2ecce7e67&s=45c48cce2e2d7fbd&user=baidu&fm=sc&query=csrf%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%DE%B7%EF%BF%BD%EF%BF%BD%EF%BF%BD%C8%A1%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD%CD%B7%EF%BF%BD%EF%BF%BD&qid=c9f5b9e8004b7506&p1=6" title="为什么要将cookie放到请求头中发送才行的解释">防止csrf，为什么要将cookie放到请求头中发送才行的解释</a>，讲的还是蛮不错的。</p><p><strong>我觉得最主要的一点就是csrf只是利用了受害者网站中的cookie，而不是拿其cookie，这样就促使服务器是从request的header中拿token，而不是直接从cookie中拿token，从而防止了CSRF攻击！</strong></p><p>3.对于服务器或者数据库的水平扩展来说，比较方便，因为jwt也不需要设计到数据库，直接计算token返回给客户端，然后拿到token，进行解码校验，生成用户对象就ok了。</p><hr><h4 id="DRF中jwt使用的流程"><a href="#DRF中jwt使用的流程" class="headerlink" title="DRF中jwt使用的流程"></a><strong>DRF中jwt使用的流程</strong></h4><h5 id="签发（第一次请求后端）："><a href="#签发（第一次请求后端）：" class="headerlink" title="签发（第一次请求后端）："></a><strong>签发（第一次请求后端）：</strong></h5><p>1.从请求体中拿到json格式的数据，将head采用base64进行编码得到第一部分字符串</p><p>2.将payload采用base64编码得到第二部分字符串</p><p>3.将第一部分+第二部分+服务器安全码组合起来，使用hash加密得到签名字符串。</p><p>4.组合第一部分+第二部分+第三部分成为最终的token</p><h5 id="校验（登录后再一次请求）"><a href="#校验（登录后再一次请求）" class="headerlink" title="校验（登录后再一次请求）"></a><strong>校验（登录后再一次请求）</strong></h5><p>1.将token进行切片，分为三段，第一段为head，第二段为payload,第三段为signature。</p><p>2.将第二段进行解码，获取其中用户的信息，用于创建用户对象，并将其赋给request.user。</p><p>3.第一段+第二段+服务器安全码再进行一次安全加密去与切出来的第三段进行匹配，如果匹配成功，则通过认证，否则返回异常信息。</p><hr><h4 id="七-DRF中如何使用jwt"><a href="#七-DRF中如何使用jwt" class="headerlink" title="七   DRF中如何使用jwt"></a><strong>七   DRF中如何使用jwt</strong></h4><p>1.安装依赖包</p><p><code>pip install djangorestframework-jwt</code></p><hr><p>2.setting.py中配置jwt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">REST_FRAMEWORK = &#123;<br>    <span class="hljs-comment"># 全局添加jwt认证方式,所有视图请求都会调用该验证方法，对token进行认证，反解出生成user对象，赋给request.user</span><br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,<br>    ],<br>&#125;<br><br>JWT_AUTH = &#123;<br>    <span class="hljs-comment"># 配置jwt的过期时间,24小时存活周期</span><br>    <span class="hljs-string">&#x27;JWT_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="hljs-number">1</span>),<br>    <span class="hljs-comment"># 是否可以刷新</span><br>    <span class="hljs-string">&#x27;JWT_ALLOW_REFRESH&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-comment"># 刷新的过期时间</span><br>    <span class="hljs-string">&#x27;JWT_REFRESH_EXPIRATION_DELTA&#x27;</span>: datetime.timedelta(days=<span class="hljs-number">1</span>),<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>3.配置url路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;login-chsc-api/&#x27;</span>, LoginAPIView.as_view(), name=<span class="hljs-string">&#x27;login-chsc-api&#x27;</span>),<br><br></code></pre></td></tr></table></figure><p>4.编写视图</p><p>drf-jwt默认为我们创建好了视图，但是只是基本的用户密码认证，如果我们要想自定义jwt视图和序列化器，就需要改写以下。</p><p>下面是我修改后的视图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginAPIView</span>(<span class="hljs-params">ObtainJSONWebToken</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot; 使用JWT登录&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ObtainJSONWebToken</span>(<span class="hljs-params">JSONWebTokenAPIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    API View that receives a POST with a user&#x27;s username and password.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns a JSON Web Token that can be used for authenticated requests.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    serializer_class = JSONWebTokenSerializer<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JSONWebTokenAPIView</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Base API View that various JWT interactions inherit from.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    permission_classes = ()<br>    authentication_classes = ()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_serializer_context</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Extra context provided to the serializer class.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">&#x27;request&#x27;</span>: self.request,<br>            <span class="hljs-string">&#x27;view&#x27;</span>: self,<br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_serializer_class</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Return the class to use for the serializer.</span><br><span class="hljs-string">        Defaults to using `self.serializer_class`.</span><br><span class="hljs-string">        You may want to override this if you need to provide different</span><br><span class="hljs-string">        serializations depending on the incoming request.</span><br><span class="hljs-string">        (Eg. admins get full serialization, others get basic serialization)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">assert</span> self.serializer_class <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>, (<br>            <span class="hljs-string">&quot;&#x27;%s&#x27; should either include a `serializer_class` attribute, &quot;</span><br>            <span class="hljs-string">&quot;or override the `get_serializer_class()` method.&quot;</span><br>            % self.__class__.__name__)<br>        <span class="hljs-keyword">return</span> self.serializer_class<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_serializer</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Return the serializer instance that should be used for validating and</span><br><span class="hljs-string">        deserializing input, and for serializing output.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        serializer_class = self.get_serializer_class()<br>        kwargs[<span class="hljs-string">&#x27;context&#x27;</span>] = self.get_serializer_context()<br>        <span class="hljs-keyword">return</span> serializer_class(*args, **kwargs)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">remember_username</span>(<span class="hljs-params">self, response, is_remember, login_id</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;设置cookie，本地暂存用户名1周&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> is_remember:<br>            response.set_cookie(<span class="hljs-string">&#x27;login_id&#x27;</span>, login_id, max_age=<span class="hljs-number">7</span> * <span class="hljs-number">24</span> * <span class="hljs-number">3600</span>)<br>        <span class="hljs-keyword">else</span>:<br>            response.delete_cookie(<span class="hljs-string">&#x27;login_id&#x27;</span>, login_id)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):</span><br>        serializer = self.get_serializer(data=request.data)<br><br>        <span class="hljs-keyword">if</span> serializer.is_valid():<br>            user = serializer.<span class="hljs-built_in">object</span>.get(<span class="hljs-string">&#x27;user&#x27;</span>) <span class="hljs-keyword">or</span> request.user<br>            token = serializer.<span class="hljs-built_in">object</span>.get(<span class="hljs-string">&#x27;token&#x27;</span>)<br>            is_remember = serializer.<span class="hljs-built_in">object</span>.get(<span class="hljs-string">&#x27;is_remember&#x27;</span>)<br>            previous_page = serializer.<span class="hljs-built_in">object</span>.get(<span class="hljs-string">&#x27;previous_page&#x27;</span>)<br>            <span class="hljs-comment"># 生成响应对象，如果配置中支持刷新，则更新token,将user调用中间件赋给request.user</span><br>            response_data = jwt_response_payload_handler(token, user, request)<br>            response_data.update(&#123;<span class="hljs-string">&#x27;previous_page&#x27;</span>:previous_page&#125;)<br>            response = Response(response_data)<br>            self.remember_username(response, is_remember, user.get_username())  <span class="hljs-comment"># 记住用户名</span><br>            <span class="hljs-comment"># 将token存到response的cookie中，设置有效的日期</span><br>            <span class="hljs-keyword">if</span> api_settings.JWT_AUTH_COOKIE:<br>                expiration = (datetime.utcnow() +<br>                              api_settings.JWT_EXPIRATION_DELTA)<br>                response.set_cookie(api_settings.JWT_AUTH_COOKIE,<br>                                    token,<br>                                    expires=expiration,<br>                                    httponly=<span class="hljs-literal">True</span>)<br>            <span class="hljs-keyword">return</span> response<br><br>        <span class="hljs-keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)<br></code></pre></td></tr></table></figure><p>修改对应的序列化器：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JSONWebTokenSerializer</span>(<span class="hljs-params">Serializer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Serializer class used to validate a username and password.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    &#x27;username&#x27; is identified by the custom UserModel.USERNAME_FIELD.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns a JSON Web Token that can be used to authenticate later calls.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Dynamically add the USERNAME_FIELD to self.fields.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-built_in">super</span>(JSONWebTokenSerializer, self).__init__(*args, **kwargs)<br>        <br><span class="hljs-comment"># 创建额外的四个字段</span><br>        self.fields[self.username_field] = serializers.CharField()<br>        self.fields[<span class="hljs-string">&#x27;password&#x27;</span>] = PasswordField(write_only=<span class="hljs-literal">True</span>)<br>        self.fields[<span class="hljs-string">&#x27;previous_page&#x27;</span>] = serializers.SlugField()  <span class="hljs-comment"># 前一页</span><br>        self.fields[<span class="hljs-string">&#x27;is_remember&#x27;</span>] = serializers.BooleanField()  <span class="hljs-comment"># 是否记住用户名</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">username_field</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> get_username_field()<br><br>    <span class="hljs-comment"># 对前端传入的属性字段进行验证</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate</span>(<span class="hljs-params">self, attrs</span>):</span><br><br>        <span class="hljs-comment"># 获取字段</span><br>        credentials = &#123;<br>            self.username_field: attrs.get(self.username_field),<br>            <span class="hljs-string">&#x27;password&#x27;</span>: attrs.get(<span class="hljs-string">&#x27;password&#x27;</span>),<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">all</span>(credentials.values()):<br>            <span class="hljs-comment"># 登录方式，邮箱或用户名登录</span><br>            <span class="hljs-comment"># 创建user对象</span><br>            user = email_or_username.authenticate(**credentials)<br><br>            <span class="hljs-keyword">if</span> user:<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user.is_active:<br>                    msg = _(<span class="hljs-string">&#x27;User account is disabled.&#x27;</span>)<br>                    <span class="hljs-keyword">raise</span> serializers.ValidationError(msg)<br><br>                payload = jwt_payload_handler(user)  <span class="hljs-comment"># 对其进行base64编码</span><br><br>                <span class="hljs-keyword">return</span> &#123;<br>                    <span class="hljs-string">&#x27;token&#x27;</span>: jwt_encode_handler(payload),    <span class="hljs-comment"># 对其进行hash加密生成最终的token</span><br>                    <span class="hljs-string">&#x27;user&#x27;</span>: user,<br>                    <span class="hljs-string">&#x27;previous_page&#x27;</span>: attrs.get(<span class="hljs-string">&#x27;previous_page&#x27;</span>),<br>                    <span class="hljs-string">&#x27;is_remember&#x27;</span>:attrs.get(<span class="hljs-string">&#x27;is_remember&#x27;</span>),<br>                &#125;<br>            <span class="hljs-keyword">else</span>:<br>                msg = _(<span class="hljs-string">&#x27;Unable to log in with provided credentials.&#x27;</span>)<br>                <span class="hljs-keyword">raise</span> serializers.ValidationError(msg)<br>        <span class="hljs-keyword">else</span>:<br>            msg = _(<span class="hljs-string">&#x27;Must include &quot;&#123;username_field&#125;&quot; and &quot;password&quot;.&#x27;</span>)<br>            msg = msg.<span class="hljs-built_in">format</span>(username_field=self.username_field)<br>            <span class="hljs-keyword">raise</span> serializers.ValidationError(msg)<br></code></pre></td></tr></table></figure><hr><h4 id="七-postman中测试编写好的jwt接口"><a href="#七-postman中测试编写好的jwt接口" class="headerlink" title="七   postman中测试编写好的jwt接口"></a><strong>七   postman中测试编写好的jwt接口</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/jwt_test.png">{width=”100%”}</p><p>以上就是我对jwt的解读和drf-jwt的视图和序列化的自定义修改，其实jwt理解起来也不难。</p><hr><p>我觉得以下几篇博客也值得参考：</p><p><a href="https://qilitang.gitee.io/qilitang/2019/03/05/DRF%2002%20%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3/#jwt-%E8%AE%A4%E8%AF%81%E7%A4%BA%E6%84%8F%E5%9B%BE" title="DRF详解">DRF详解</a></p><p><a href="https://baijiahao.baidu.com/s?id=1645628469934418895&wfr=spider&for=pc" title="一文读懂JWT">一文读懂JWT</a></p>]]></content>
    
    
    <categories>
      
      <category>JWT</category>
      
      <category>Django</category>
      
      <category>DRF</category>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
      <tag>DRF</tag>
      
      <tag>JWT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Supervisor配置虚拟环境中的celery</title>
    <link href="/2020/08/15/supervisor%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84celery/"/>
    <url>/2020/08/15/supervisor%E9%85%8D%E7%BD%AE%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E4%B8%AD%E7%9A%84celery/</url>
    
    <content type="html"><![CDATA[<p>前几个月部署过使用虚拟环境的项目，今天把笔记补上！</p><p>使用supervisor部署普通项目中的celery和虚拟环境中的celery在command的写法上有些许不同，其他地方都差不多，话不多说，直接上配置。</p><hr><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell">[program:celery]<br><br>;运行目录下执行命令，这里写绝对路径，需要虚拟环境中的celery启动服务<br><br>command=/home/syz/E_mall/bin/celery worker -A e_mall.celery -l info<br><br>;指定运行目录，表示项目的根目录，用来调用e_mall.celery<br><br>directory=/home/syz/E_mall/e_mall/<br><br><br><br>;启动设置<br><br>autostart=true      ;当supervisor启动时，程序将会自动启动<br><br>autorestart=true   ;自动重启<br><br>startsecs=10<br><br>numprocs=1        ;初始的进程<br><br><br><br><br><br>user=syz   ;脚本运行的用户<br><br>;输出日志<br><br>stdout_logfile=/var/log/celery/celery_worker.log<br><br>stdout_logfile_maxbytes=10MB      ;默认最大50M<br><br>stdout_logfile_backups=10               ;默认日志文件备份数，默认为10<br><br><br><br>;错误日志<br><br>redirect_stderr=false                         ;为true表示禁止监听错误<br><br>stderr_logfile=/var/log/celery/celery_worker_err.log<br><br>stderr_logfile_maxbytes=10MB<br><br>stderr_logfile_backups=10<br><br><br>;停止信号,默认TERM <br><br>;中断:INT (类似于Ctrl+C)(kill -INT pid)，退出后会将写文件或日志(推荐) <br><br>;终止:TERM (kill -TERM pid) <br><br>;挂起:HUP (kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同 <br><br>;从容停止:QUIT (kill -QUIT pid) <br><br> stopsignal=INT <br><br><br></code></pre></td></tr></table></figure><hr><p>上述配置完毕后，注意需要对日志文件赋予权限，否则会报无法分配celery的错误，其实也就是无法写入日志文件。</p><p><strong>解决方法：</strong></p><p><code>chown -R syz:syz /var/log/celery</code></p><p>-R表示递归执行文件，目的是将该文件归属给syz这个用户名（这里是我的，改成你自己的），或者用户组。</p><p>区别于chmod，chmod是对文件的读，写，执行设置权限，而chown是对文件所属的对象赋予权限。</p><p>在我看来，chmod的目的对象是文件本身，而chown的目的对象其实是用户或组。chown要比chmod更加外层，只有符合chown的该用户，再进一步判断是否对文件拥有读，写，执行权限。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Celery</category>
      
      <category>Supervisor</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Celery</tag>
      
      <tag>Linux</tag>
      
      <tag>Supervisor</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>汇总Python实现单例模式的四大方式</title>
    <link href="/2020/08/10/%E6%B1%87%E6%80%BBPython%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%9B%9B%E5%A4%A7%E6%96%B9%E5%BC%8F/"/>
    <url>/2020/08/10/%E6%B1%87%E6%80%BBPython%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%9B%9B%E5%A4%A7%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>之前Django开发使用过集中单例模式，今天来整理下这些实现单例模式的方式。</p><h4 id="法一：使用-new-魔法方法"><a href="#法一：使用-new-魔法方法" class="headerlink" title="法一：使用__new__魔法方法"></a><strong>法一：使用__new__魔法方法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleMode1</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(cls, <span class="hljs-string">&#x27;_instance&#x27;</span>):<br>            cls._instance = <span class="hljs-built_in">super</span>().__new__(cls, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls._instance<br></code></pre></td></tr></table></figure><p><strong>说明：使用__new__方法对实例进行增强！</strong></p><p>测试及结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">m1 = SingleMode1()<br>m2 = SingleMode1()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(m1) == <span class="hljs-built_in">hash</span>(m2))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><hr><h4 id="法二：使用自定义装饰器实现"><a href="#法二：使用自定义装饰器实现" class="headerlink" title="法二：使用自定义装饰器实现"></a><strong>法二：使用自定义装饰器实现</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">single</span>(<span class="hljs-params">cls</span>):</span><br>    _instance = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generate_obj</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> _instance.setdefault(cls,<span class="hljs-literal">None</span>):<br>            _instance[cls] = cls(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> _instance[cls]<br><br>    <span class="hljs-keyword">return</span> generate_obj<br><br><br><span class="hljs-meta">@single</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleMode4</span>:</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>测试及结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">m5 = SingleMode4()<br>m6 = SingleMode4()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(m5) == <span class="hljs-built_in">hash</span>(m6))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><p><strong>说明：其核心思想是利用类属性（这里用了字典类型）来判断实例是否已被创建过一次！</strong></p><hr><h4 id="法三：使用-classmethod类装饰器实现"><a href="#法三：使用-classmethod类装饰器实现" class="headerlink" title="法三：使用@classmethod类装饰器实现"></a><strong>法三：使用@classmethod类装饰器实现</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleMode2</span>:</span><br>    _instance = <span class="hljs-literal">None</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_obj</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(cls, <span class="hljs-string">&#x27;_instance&#x27;</span>):<br>            cls._instance = <span class="hljs-built_in">super</span>().__new__(cls, *args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls._instance<br></code></pre></td></tr></table></figure><p><strong>说明：其核心思想是利用类属性来判断实例是否已被创建过一次！</strong></p><p>测试及结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">m3 = SingleMode2.create_obj()<br>m4 = SingleMode2.create_obj()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hash</span>(m3) == <span class="hljs-built_in">hash</span>(m4))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h4 id="法三：Python的模块导入"><a href="#法三：Python的模块导入" class="headerlink" title="法三：Python的模块导入"></a><strong>法三：Python的模块导入</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># celery.py</span><br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-comment"># __init__.py</span><br>settings = LazySettings()<br><br></code></pre></td></tr></table></figure><p>注：使用懒加载的方式将配置文件动态放入到内存中执行，同时在内存中只需创建一份实例，全局都会使用这一份实例，不会再去创建新的实例。</p><h4 id="结论："><a href="#结论：" class="headerlink" title="结论："></a><strong>结论：</strong></h4><p>单例模式的存在，是为了应对在某项业务在大量请求的情况下，需要创建大量的实例而出现的，单例模式大大降低创建大量实例消耗的内存资源。</p><p><strong>Python使用单例的核心思想就是在创建实例前，判断类中是否已经存在保存该实例的类属性！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro中对可执行文件添加Icon</title>
    <link href="/2020/08/05/manjaro%E4%B8%AD%E5%AF%B9%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0Icon/"/>
    <url>/2020/08/05/manjaro%E4%B8%AD%E5%AF%B9%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E6%B7%BB%E5%8A%A0Icon/</url>
    
    <content type="html"><![CDATA[<h3 id="manjaro中对可执行文件添加Icon"><a href="#manjaro中对可执行文件添加Icon" class="headerlink" title="manjaro中对可执行文件添加Icon"></a><strong>manjaro中对可执行文件添加Icon</strong></h3><p>用了2天manjaro，感觉它自定义性真得太强大了，以及各种包管理工具pacman,yay,yaourt等</p><p>我安装了Pycharm后，需要放到桌面直接执行，而我下载的是zip，采用shell脚本在命令行下进行执行。所以没有图标。</p><p>在这里，我总结两种启动pycharm的方法：</p><p><strong>1.从命令行启动</strong></p><p>进入pycharm的bin目录下，执行shell脚本</p><p><code>source pycharm.sh</code> 或者 <code>./pycharm.sh</code></p><p><strong>2.创建桌面desktop，从而启动</strong></p><p>可以在桌面直接创建一个desktop文件，也可以在<code>/usr/share/applications/</code>下创建一个desktop。默认所有的桌面desktop都是放在<code>/usr/share/applications/</code>下的。</p><p>我这里采用了第二种：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/pycharm_desktop.png">{width=90%}</p><p>创建desktop文件(用命令行创建，需要权限进入，chomod 777 就行），添加如下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">[Desktop Entry]<br>Type=Application<br>Name=Pycharm<br>GenericName=Pycharm<br>Comment=Pycharm:The Python IDE<br>Exec=/home/syz/pycharm/pycharm-2020.1.1/bin/pycharm.sh %f  # 这个填自己的pycharm脚本文件路径<br>Icon=/home/syz/pycharm/pycharm-2020.1.1/bin/pycharm.png # 填pycharm图标路径<br>Terminal=pycharm<br>Categories=Pycharm<br><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p><strong>路径不要用引号，否则图片为透明</strong></p><p>添加完毕后在复制到桌面就可以了。</p><p>下面是我的桌面，嘿嘿嘿</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/manjaro_background.png">{width=100%}</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Manjaro</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入探究GIL的利与弊</title>
    <link href="/2020/08/05/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6GIL%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/"/>
    <url>/2020/08/05/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%A9%B6GIL%E7%9A%84%E5%88%A9%E4%B8%8E%E5%BC%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="深入分析Python全局解释器锁GIL的利与弊"><a href="#深入分析Python全局解释器锁GIL的利与弊" class="headerlink" title="深入分析Python全局解释器锁GIL的利与弊"></a><strong>深入分析Python全局解释器锁GIL的利与弊</strong></h3><hr><h4 id="一、GIL的诞生背景"><a href="#一、GIL的诞生背景" class="headerlink" title="一、GIL的诞生背景"></a><strong>一、GIL的诞生背景</strong></h4><p>在谈GIL之前，先补一波线程的知识，正好最近再复习操作系统：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/thread.png">{width=100%}</p><hr><p>在那个单核盛行的时代，自多线程问世以来，线程成为了处理机调度最基本的单位。很多语言都开始着手处理线程并发的问题。其中python之父Guido在1992年8月4号引入了GIL的概念。那么那时候为什么要引入GIL全局解释器锁呢？</p><p>比方你申请了计算机的某些资源，用来创建一些Object，等到你用完了这些资源后，是不是要归还这些资源，这样才能够取之有度，用之不竭。</p><p>在线程引入之前，只有进程的时候，CPU调度每次只能运行一个进程，也就是单核无论如何也不能并行运行多个进程。而线程的出现，则被称之为“微进程”，在进程中进一步划分空间，增加并发度，减小进程切换带来的开销，但随之而来也出现了一些问题，那就是多线程并发的结果的不确定性。</p><hr><p>以下面两个线程回收资源为例进行说明：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/threads.png">{width=90%}</p><hr><p><strong>分析：</strong></p><p>Python中垃圾回收机制不同于Java，它采用的引用计数的方式，当计数器为0，则表示某资源已不被任何对象引用，因此可以回收该资源。</p><p>如图所示是汇编指令，因为高级语言可能一条语句就会对应很多条汇编指令。我们就看前三条。首先将ax加载到obj_ref，也就是引用技术，然后执行ax-1，最后保存ax。</p><p>假设此时引用计数为2，要回收这两个资源，假设thread1先运行到了2步骤，紧跟着thread2运行了1步骤，因为他们是并发的，同时这些指令也不是原子性的。所以根据并发的不确定性，是有一种可能，让thread2保存了减一后得到的引用计数，剩余引用计数为1时，thread1那里显示的仍然是回收thread2中资源前的引用计数值2。这样就会导致资源回收的问题。</p><p>因此GIL全局解释器锁的出现是为了解决资源回收的引用计数的问题。当然GIL锁在后来与其他语言组合的时候，为了方便的管理资源的分配问题，例如与C语言结合，诞生了科学计算包Numpy等，也有着相应的好处。</p><hr><h4 id="二、GIL的定义及存在的好处"><a href="#二、GIL的定义及存在的好处" class="headerlink" title="二、GIL的定义及存在的好处"></a><strong>二、GIL的定义及存在的好处</strong></h4><p>之前谈到了GIL的出现主要是为了解决多线程中资源回收的引用计数的问题，以及为了方便管理与多语言结合的资源的分配问题。那么这把锁又和现在的一般的锁，例如分布式锁，共享锁等等的区别又在哪？</p><p>经过一番寻找资料，发现GIL锁其实是定义在很底层的位置，它是一把底层的，基于字节码级别的互斥锁，这样确保了同一时刻只有拿到这把唯一的GIL锁的线程才能够上处理机进行调度。GIL存在的好处就是节省了加锁解锁带来的内存性能开销. 同时由于这把字节码级别的锁存在,在Python虚拟机中的每条字节码指令都是线程安全的.举个例子,例如list.append操作,使用dis模块查看字节码执行过程,可以发现append是内建名字空间中的一个名字,其占用了一个字节码,同时其回调了底层了的C语言函数app1,即这个app1函数是线程安全的.因而append操作也是线程安全的.而list,dict的一系列操作都是线程安全的.</p><hr><h4 id="三、GIL的存在的坏处"><a href="#三、GIL的存在的坏处" class="headerlink" title="三、GIL的存在的坏处"></a><strong>三、GIL的存在的坏处</strong></h4><p>GIL基于bytecode定义在底层的位置，早已根深蒂固，我猜想当时guido可能没有意识到多核发展的如此之快，没有完全考虑到多核情况下GIL的巨大局限—–无法充分利用CPU资源。</p><p>Python的线程调度参考了操作系统的时间片调度算法, 只不过Python中的线程调度的时间片以一个字节码为单位,执行了一定数量的字节码就会产生线程调度.</p><p>因为Python中每个线程进入调度都有一个字节码计数器，类似操作系统中的时间片，当执行完一定数量的字节码，将释放GIL锁并唤醒其他线程。而执行CPU密集型的任务的时候，会导致线程调度多次，因此多线程正常情况下会比单线程产生更多的线程调度的时间消耗。如果在多核上跑多线程任务，也会导致CPU利用率很低，接下来我会用代码和CPU资源图来分析。</p><hr><h4 id="四、单线程，多线程，多进程，进程池的CPU密集型任务举例"><a href="#四、单线程，多线程，多进程，进程池的CPU密集型任务举例" class="headerlink" title="四、单线程，多线程，多进程，进程池的CPU密集型任务举例"></a><strong>四、单线程，多线程，多进程，进程池的CPU密集型任务举例</strong></h4><p>下面是一个很简单的比较例子，用了求解质数来模仿cpu密集型，其实求之前刷leetcode的时候，还有一种时间复杂度更小的求解质数的方法(埃拉托色尼筛选法)，不过这里先不谈。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">import</span> time<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cpu_tense</span>(<span class="hljs-params">number</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算质数&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(number ** <span class="hljs-number">0.5</span>) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> number % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_zs</span>(<span class="hljs-params">counts</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;计算固定数量的质数&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 模拟CPU密集型</span><br>    initial_number = <span class="hljs-number">2</span><br>    total_zs = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> total_zs &lt;= counts:<br>        total_zs += cpu_tense(initial_number)<br>        initial_number += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> initial_number<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    times = <span class="hljs-number">100000</span><br><br>    <span class="hljs-comment"># 同步</span><br>    t1 = time.time()<br>    count_zs(times)<br>    count_zs(times)<br>    count_zs(times)<br>    count_zs(times)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CPU密集型下同步所需要的时间：&quot;</span>, time.time() - t1)<br><br>    <span class="hljs-comment"># 多线程</span><br>    t2 = time.time()<br>    threading_list = [threading.Thread(target=count_zs, args=(times,)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threading_list:<br>        thread.start()<br>    <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threading_list:<br>        thread.join()  <span class="hljs-comment"># 阻塞主进程</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CPU密集型下多线程所需要的时间：&quot;</span>, time.time() - t2)<br><br>    <span class="hljs-comment"># 多进程</span><br>    t3 = time.time()<br>    process_list = [multiprocessing.Process(target=count_zs, args=(times,)) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)]<br>    <span class="hljs-keyword">for</span> process <span class="hljs-keyword">in</span> process_list:<br>        process.start()<br>    <span class="hljs-keyword">for</span> process <span class="hljs-keyword">in</span> process_list:<br>        process.join()  <span class="hljs-comment"># 阻塞主进程</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CPU密集型下多进程所需要的时间：&quot;</span>, time.time() - t3)<br><br>    <span class="hljs-comment"># 进程池</span><br>    t4 = time.time()<br>    pool = multiprocessing.Pool(processes=<span class="hljs-number">4</span>)<br>    pool_output = pool.<span class="hljs-built_in">map</span>(count_zs, [<span class="hljs-number">100000</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>)])<br>    pool.close()<br>    pool.join()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CPU密集型下进程池所需要的时间：&quot;</span>, time.time() - t4)<br><br><br></code></pre></td></tr></table></figure><h4 id="我的操作系统如下："><a href="#我的操作系统如下：" class="headerlink" title="我的操作系统如下："></a><strong>我的操作系统如下：</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png">{width=90%}</p><hr><h4 id="单进程单线程的CPU运行效果如下："><a href="#单进程单线程的CPU运行效果如下：" class="headerlink" title="单进程单线程的CPU运行效果如下："></a><strong>单进程单线程的CPU运行效果如下：</strong></h4><hr><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E5%8D%95%E7%BA%BF%E7%A8%8B%E5%8D%95%E8%BF%9B%E7%A8%8B.png">{width=100%}</p><hr><h4 id="多线程单进程的CPU运作如下："><a href="#多线程单进程的CPU运作如下：" class="headerlink" title="多线程单进程的CPU运作如下："></a><strong>多线程单进程的CPU运作如下：</strong></h4><h2 id="width-100"><a href="#width-100" class="headerlink" title="{width=100%}"></a><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%8D%95%E8%BF%9B%E7%A8%8B.png">{width=100%}</h2><h4 id="多进程CPU运作如下："><a href="#多进程CPU运作如下：" class="headerlink" title="多进程CPU运作如下："></a><strong>多进程CPU运作如下：</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E5%A4%9A%E8%BF%9B%E7%A8%8B.png">{width=100%}</p><hr><h4 id="进程池的CPU运作如下："><a href="#进程池的CPU运作如下：" class="headerlink" title="进程池的CPU运作如下："></a><strong>进程池的CPU运作如下：</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E8%BF%9B%E7%A8%8B%E6%B1%A0.png">{width=100%}</p><h4 id="消耗时间如下"><a href="#消耗时间如下" class="headerlink" title="消耗时间如下"></a><strong>消耗时间如下</strong></h4><p>CPU密集型下同步所需要的时间： 30.59021615982056</p><p>CPU密集型下多线程所需要的时间： 31.321476459503174</p><p>CPU密集型下多进程所需要的时间： 8.955211162567139</p><p>CPU密集型下进程池所需要的时间： 10.86313271522522</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a><strong>结论</strong></h4><p>我测了5次，可以初步判断，CPU密集型下多线程并不一定比单线程所花费的时间少，而采用多进程以及进程池可以有效的减少时间。因此可以认为Python对于CPU密集型的处理使用多进程要比多进程好的多。</p><hr><p><strong>原因分析：</strong></p><p>刚才上面已经谈到了GIL锁，它的存在仅针对线程而不是进程，它在解决了垃圾回收问题的计数问题，但是也带来了额外的性能问题，因为同一时间只有一个线程可以拿到这把GIL全局解释器锁，拿到锁的线程就会进入Pyhon虚拟机执行，但是中每个线程都记录了自己执行了多少个字节码,也可以理解为一个计数器ticks，当ticks达到一定数量之后，就需要进行线程（进程）的调度，调度的过程由操作系统底层完成，修改其状态位，而正式这种CPU密集型的任务（请看多线程的那副图），导致了线程调度的次数大大增加，也并没有完全利用CPU资源，进而带来更多的切换开销。尽管统一个进程间的线程不断的切换，虽然不需要切换进程的。的运行环境，但是切换次数太多，开销仍然很大，并不比单线程效率高，而罪魁祸首正是这把GIL锁！！</p><p>当然对于CPU密集型使用多线程的问题，一般替换成多进程就行了！</p><p>下次做个I/O对比的例子，这次就先到这，不早了，命要紧～</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>解释器锁</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro上初体验之配置好输入法（亲测有效）</title>
    <link href="/2020/08/02/manjaro%E4%B8%8A%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%A5%BD%E8%BE%93%E5%85%A5%E6%B3%95%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/"/>
    <url>/2020/08/02/manjaro%E4%B8%8A%E5%88%9D%E4%BD%93%E9%AA%8C%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%A5%BD%E8%BE%93%E5%85%A5%E6%B3%95%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="一-安装基本的依赖包"><a href="#一-安装基本的依赖包" class="headerlink" title="一 安装基本的依赖包"></a><strong>一 安装基本的依赖包</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo pacman -S fcitx<br>sudo pacman -S fcitx-configtool   # 安装图形化工具<br>sudo pacman -S fcitx-qt4 fcitx-qt5   # 安装搜狗需要安装qt4<br>sudo pacman -S fcitx-im<br>sudo pacman -S fcitx-sogoupinyin  # 安装搜狗拼音<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>一开始装好机器后，fcitx显示是缺少模块的，因为还少一个配置文件。先将上述按自己需要装，我是没有装搜狗的，用了自带的拼音，有需要的可以装。如果提示已经安装过模块的话，可以自己考虑需不需要重新安装！</p><h4 id="一-配置fcitx配置文件"><a href="#一-配置fcitx配置文件" class="headerlink" title="一 配置fcitx配置文件"></a><strong>一 配置fcitx配置文件</strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nano ~/.xprofile<br></code></pre></td></tr></table></figure><p>在配置文件中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export GTK_IM_MODULE=fcitx<br> export QT_IM_MODULE=fcitx<br> export XMODIFIERS=&quot;@im=fcitx&quot;<br><br></code></pre></td></tr></table></figure><p>添加完成后，在重新启动，然后对右下角的输入法进行自定义配置，例如修改输入法的优先级和切换按键等。manjaro自定义话比windows高太多，不过也提升了一些难度。</p>]]></content>
    
    
    <categories>
      
      <category>Manjaro</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结合源码分析下defaultdict(type)的执行流程</title>
    <link href="/2020/08/01/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8Bdefaultdict(type)%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/"/>
    <url>/2020/08/01/%E7%BB%93%E5%90%88%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8Bdefaultdict(type)%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>Python中为了获取或操作字典中某个某个不存在的键的时候，引入了两种方式。</p><p>一种是dict.setdefault(),另外一种是defaultdict(type)，今天来重点学习记录下defaultdict()的底层原理。</p><hr><h4 id="分析Python源码"><a href="#分析Python源码" class="headerlink" title="分析Python源码"></a><strong>分析Python源码</strong></h4><p><strong>defaultdict:</strong><br>通过构造defaultdict字典，能够有效的处理找不到的键，具有核心方法<strong>missing</strong>()，调用default_factory</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">defaultdict</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span></span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, default_factory=<span class="hljs-literal">None</span>, **kwargs</span>):</span> <span class="hljs-comment"># known case of _collections.defaultdict.__init__</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        defaultdict(default_factory[, ...]) --&gt; dict with default factory</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        The default factory is called without arguments to produce</span><br><span class="hljs-string">        a new value when a key is not present, in __getitem__ only.</span><br><span class="hljs-string">        A defaultdict compares equal to a dict with the same items.</span><br><span class="hljs-string">        All remaining arguments are treated the same as if they were</span><br><span class="hljs-string">        passed to the dict constructor, including keyword arguments.</span><br><span class="hljs-string">        </span><br><span class="hljs-string">        # (copied from class doc)</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__missing__</span>(<span class="hljs-params">self, key</span>):</span> <span class="hljs-comment"># real signature unknown; restored from __doc__</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        __missing__(key) # Called by __getitem__ for missing key; pseudo-code:</span><br><span class="hljs-string">          if self.default_factory is None: raise KeyError((key,))</span><br><span class="hljs-string">          self[key] = value = self.default_factory()</span><br><span class="hljs-string">          return value</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">pass</span><br><br>    default_factory = <span class="hljs-built_in">property</span>(<span class="hljs-keyword">lambda</span> self: <span class="hljs-built_in">object</span>(), <span class="hljs-keyword">lambda</span> self, v: <span class="hljs-literal">None</span>, <span class="hljs-keyword">lambda</span> self: <span class="hljs-literal">None</span>)  <span class="hljs-comment"># default</span><br>    <span class="hljs-string">&quot;&quot;&quot;Factory for default value called by __missing__().&quot;&quot;&quot;</span><br><br></code></pre></td></tr></table></figure><hr><p><strong>举个例子说明：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><br>k = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-built_in">print</span>(k[<span class="hljs-string">&#x27;params&#x27;</span>])   <span class="hljs-comment"># 结果：[]</span><br><span class="hljs-built_in">print</span>(k.get(<span class="hljs-string">&#x27;params&#x27;</span>))  <span class="hljs-comment"># 结果 ： None</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;params&#x27;</span> <span class="hljs-keyword">in</span> k)   <span class="hljs-comment"># 结果 ：False</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>首先实例化defaultdict(list),传进去了列表类型，然后接下来要获取字典中的键为<code>params</code>的值，实际上调用了<code>__getitem__</code>方法，很明显，字典中并没有键为<code>params</code>的键值对存在，那么接下来就会调用<code>__missing__</code>方法，然后调用default_factory只读特性的lambda函数，实例化一个空的list对象，为<code>[]</code>。将其作为键的默认值返回。</p><p><strong>注意：</strong></p><p>1.<code>default_factory = property(lambda self: object(), lambda self, v: None, lambda self: None) </code>中的self并不是defaultdict实例，而是之前传进来的default_factory本身，也就是list，然后调用object()，实例化default_factory类型，重新赋值给default_factory，作为键的默认值。</p><p>2.如果在实例化default_factory的时候没有传入默认类型，则回抛出keyerror异常。</p><p>3.<code>__missing__</code>方法只会对<code>__getitem__</code>的调用作出响应，<code>__get__</code>和<code>__contains__</code>调用不会触发<code>__missing__</code>方法。也就是<code>in</code>和<code>dict.get()</code>并不会返回default_factory的值！</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>源码分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对Nginx中的缓存设置的深入理解</title>
    <link href="/2020/08/01/%E5%AF%B9Nginx%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98%E8%AE%BE%E7%BD%AE%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <url>/2020/08/01/%E5%AF%B9Nginx%E4%B8%AD%E7%9A%84%E7%BC%93%E5%AD%98%E8%AE%BE%E7%BD%AE%E7%9A%84%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>网站已经运行有一段时间了，起初采用了nginx的反向代理，在location中设置了expires 30d，当时没有去仔细想如何合适的设计缓存。后来，我美化了网站的一些界面，修改了一些静态文件，更新到云服务器上，再次访问的时候发现，我所修改的静态文件资源并没有发生变化，仍是之前的那些…</p><p>设置缓存的好处无非就是在前端和后端之间建立额外的数据副本，用于减小请求后端服务器的压力，减轻了网路的压力，同时也减少了网络中数据传输的延迟性也便提高用户访问网站的速度。甚至在有时候，后台某台服务器崩了，如果还有缓存存在，则确保了网站短时间的稳定性，方便及时维护。</p><p>因此做此笔记，以便再次深入学习nginx如何设置合理的缓存和删除缓存。</p><hr><h4 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a><strong>二、原因分析</strong></h4><p>经过google浏览了一些好的博客，学习到了nginx的缓存机制其实有三种，而我之前所使用的expires 30d，其实使用了nginx缓存机制中的基于web的缓存技术，其基本思想利用了客户端访问的时间局部性原理，也就是当客户端访问一次服务器后，将响应的数据生成一份缓存，保存在本地客户端，这样，下次在访问服务器的时候，会首先访问本地浏览器的缓存，如果本地缓存没有过期，则直接从缓存中拿取数据，否则的话，再去访问服务器，生成本地的缓存副本。</p><p>如下图，是访问我的网站中某个js资源的相应头中的信息（我只设置了expires):</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/nginx_cache.png">{width=80%}</p><p><strong>说明：</strong></p><p>1.Cache-Control:表示缓存持续的时间，以服务器时间为基准。</p><p>2.Expires:表示缓存过期时间。</p><p>3.Last-Modified:表示上次缓存过期后，新生成的本地浏览器的副本的日期。</p><p><strong>注：</strong><br>因为我才用的这种方式是基于本地浏览器的缓存，因此想要删除缓存只有通过删除本地浏览器的历史缓存才行，这种方式带来的弊端是，更新缓存的主动权在客户端，而非服务器端，因此基本上要想更新所有用户的历史缓存是很麻烦的。</p><hr><h4 id="三、另外两种基于Nginx服务器端的缓存"><a href="#三、另外两种基于Nginx服务器端的缓存" class="headerlink" title="三、另外两种基于Nginx服务器端的缓存"></a><strong>三、另外两种基于Nginx服务器端的缓存</strong></h4><p>另外还有其他两种缓存机制，这里也简单的介绍下。</p><hr><h5 id="（1）404驱动缓存"><a href="#（1）404驱动缓存" class="headerlink" title="（1）404驱动缓存"></a><strong>（1）404驱动缓存</strong></h5><p>从名字来看，可以大致了解到该缓存基于404找不到资源来进行缓存驱动的，使用了Nginx自身的proxy store对404错误进行转发到内部请求处理服务器，进行响应，然后将缓存保存在服务器中缓存文件里。</p><p>其主要的响应和设置缓存的步骤如下：</p><p>1.首先，nginx接受客户端的请求，比如客户端要请求某个css或者js或者图片等资源。</p><p>2.nginx会先在自己的缓存中查找是否有相应的数据资源，如果有则直接返回给客户端；如果没有，则抛出404资源找不到的异常。然后服务器捕捉到后，向内部服务器发送请求，然后内部服务器处理请求，最后nginx将响应的数据发送给前端，同时在服务器的本地保存缓存的副本。</p><hr><h5 id="（2）资源不存在驱动web缓存"><a href="#（2）资源不存在驱动web缓存" class="headerlink" title="（2）资源不存在驱动web缓存"></a><strong>（2）资源不存在驱动web缓存</strong></h5><p>该方法和404驱动缓存不同的是该缓存机制是需要if判断是否存在资源，而进一步进行重定向。</p><hr><h4 id="四、缓存的配置"><a href="#四、缓存的配置" class="headerlink" title="四、缓存的配置"></a><strong>四、缓存的配置</strong></h4><p><strong>它可以配置在http，server或者location中，基本的配置参数如下：</strong></p><p>首先要在相应的地方创建存放缓存文件的文件夹，我这里是/usr/local/nginx/cache，这个一定要提前设置，否则启动nginx会报错！</p><hr><p>在最顶层http中进行配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>proxy_cache_path /usr/local/nginx/cache levels=1:2 keys_zone=cache_one:100m inactive=1d max_size=10g;<br><span class="hljs-meta">#</span><span class="bash">设置缓存存放的文件路径，levels是可选的，表示目录层级，表示两级子目录，keys_zone表示缓存共享内存区的名称和共享内存区的总的大小，用于多个进程或线程共享访问。keys_zone:表示缓存多长时间失效，max_size表示允许存放在磁盘上缓存数据的最大值</span><br><br></code></pre></td></tr></table></figure><hr><p>在server中进行配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>proxy_cache_methods GET HEAD;<br><span class="hljs-meta">#</span><span class="bash">设置允许缓存的http方法，默认情况下GET和HEAD请求会缓存,所以如果不是特别需要缓存POST，则可以不用设置</span><br><br>proxy_cache_valid 200 10m;<br>proxy_cache_valid 404 30s;<br><span class="hljs-meta">#</span><span class="bash">可以针对不同的请求响应码设置缓存时间</span><br><br>proxy_cache_valid any 5m;<br><span class="hljs-meta">#</span><span class="bash">如果想为所有的响应码设置相同的缓存时间，用any</span><br><br>proxy_cache_min_uses 2;<br><span class="hljs-meta">#</span><span class="bash">设置为请求设置最少发送2次，才对其数据进行缓存</span><br><br><br></code></pre></td></tr></table></figure><hr><p>在location中要选择http中指定的内存共享区，进行缓存的存放，需添加如下指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>proxy_cache cache_one<br><span class="hljs-meta">#</span><span class="bash"> 指定路由匹配中的缓存存放的内存共享区</span><br><span class="hljs-meta">#</span><span class="bash"> proxy_cache机制开启后会检测被服务器的HTTP响应头中的<span class="hljs-string">&quot;Cache-Control&quot;</span>、<span class="hljs-string">&quot;Expire&quot;</span>头域。如，Cache-Control为no-cache时，是不会缓存数据的。</span><br><span class="hljs-meta">#</span><span class="bash"> 需要设置proxy_buffing on;</span><br></code></pre></td></tr></table></figure><p><strong>注：除了proxy_cache_path需要配置在http全局中，其他的配置可以配置在server中也可以配置在location中，只不过缓存的范围不同</strong></p><hr><h4 id="五、整体配置下nginx-conf和default-conf"><a href="#五、整体配置下nginx-conf和default-conf" class="headerlink" title="五、整体配置下nginx.conf和default.conf"></a><strong>五、整体配置下nginx.conf和default.conf</strong></h4><p><strong>配置nginx.conf中的http</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">http &#123;<br><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#</span></span><br><span class="hljs-meta">#</span><span class="bash"> Basic Settings</span><br><span class="hljs-meta">#</span><span class="bash"><span class="hljs-comment">#</span></span><br>        <br>        # 默认请求报文的最大限量<br>        client_max_body_size 200M;<br><br>        proxy_cache_path /usr/local/nginx/cache levels=1:2 keys_zone=cache_one:30m inactive=1d max_size=5g;<br>...<br></code></pre></td></tr></table></figure><p><strong>配置default中的server和location</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">proxy_buffering on;<br>        proxy_buffer_size 4k;<br><span class="hljs-meta">#</span><span class="bash"> 代理缓存的大小（通常为服务器端响应的数据）</span><br>        proxy_buffers 2 8k;<br><span class="hljs-meta">#</span><span class="bash"> 代理缓存的总大小（响应数据报大小+请求报文段大小）</span><br>        proxy_busy_buffers_size 8k;<br><span class="hljs-meta">#</span><span class="bash"> 请求繁忙时，设置的缓存大小，必须大于等于总buffer大小</span><br>        proxy_temp_path /usr/local/nginx/temp 1 2;<br><span class="hljs-meta">#</span><span class="bash"> 设置缓存临时存放的文件目录</span><br>        proxy_max_temp_file_size 20M;<br><span class="hljs-meta">#</span><span class="bash"> 缓存所有临时文件最大的空间</span><br>        proxy_temp_file_write_size 8k;<br><span class="hljs-meta">#</span><span class="bash"> 单个临时文件的最大空间</span><br><br>location / &#123;<br><span class="hljs-meta">#</span><span class="bash"> First attempt to serve request as file, <span class="hljs-keyword">then</span></span><br><span class="hljs-meta">#</span><span class="bash"> as directory, <span class="hljs-keyword">then</span> fall back to displaying a 404.</span><br><span class="hljs-meta">#</span><span class="bash"> try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ =404;</span><br>                include uwsgi_params;<br>                # uwsgi_pass 127.0.0.1:8002;<br>                uwsgi_pass SYZ;<br>                proxy_cache cache_one;<br>                #此处的cache_one必须与http中配置的缓存区域名称相同，表示该缓存存放到目标内存共享区中<br>                proxy_cache_valid 200 304 12h;<br>                proxy_cache_valid 301 302 1d;<br>                proxy_cache_valid any 1m;<br>                proxy_cache_key $uri$is_args$args;<br>                # uwsgi_pass e_mall;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>做完笔记，还是蛮有成就感的！</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>中间件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue中props属性的使用和理解</title>
    <link href="/2020/07/30/Vue%E4%B8%ADprops%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E7%90%86%E8%A7%A3/"/>
    <url>/2020/07/30/Vue%E4%B8%ADprops%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><strong>Vue中的props：</strong>主要用于获取父组件传过来的数据。</p><hr><p>话不多说，先上代码，再做分析：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;posts&quot;</span>&gt;</span><br>&lt;blog-post<br>  v-for=&quot;post in posts&quot;<br>  v-bind:key=&quot;post.id&quot;<br>  v-bind:postss=&quot;post&quot;<br>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">blog-post</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>Vue.component(<span class="hljs-string">&#x27;blog-post&#x27;</span>, &#123;<br>  props: [<span class="hljs-string">&#x27;postss&#x27;</span>],<br>  template:<br>  <span class="hljs-string">`</span><br><span class="hljs-string">  &lt;div class=&quot;blog-post&quot;&gt;</span><br><span class="hljs-string">  &lt;h3&gt;&#123;&#123; postss.title &#125;&#125;&lt;/h3&gt;</span><br><span class="hljs-string">  &lt;div v-html=&quot;postss.content&quot;&gt;&lt;/div&gt;</span><br><span class="hljs-string">  &lt;/div&gt;</span><br><span class="hljs-string">`</span><br>&#125;);<br><br><br><span class="hljs-keyword">var</span> app2 = <span class="hljs-keyword">new</span> Vue(&#123;<br>el:<span class="hljs-string">&#x27;#posts&#x27;</span>,<br>data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> &#123;<br>posts:[<br>&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">1</span>, <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;syz&#x27;</span>, <span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;this is my name&#x27;</span>&#125;,<br>&#123;<span class="hljs-attr">id</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;zjw&#x27;</span>, <span class="hljs-attr">content</span>:<span class="hljs-string">&#x27;this is my grilfriend&#x27;</span>s name<span class="hljs-string">&#x27;&#125;</span><br><span class="hljs-string">]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">&#125;)</span><br></code></pre></td></tr></table></figure><hr><p><strong>说明：</strong></p><p>1.首先注册组件，<code>blog-post</code>，尽量使用<code>kebab-case</code>短横线格式命名组件名。<br>2.组件中使用了for循环，循环遍历app2对象中的posts列表，绑定key，确定每个组件都是唯一的,绑定post整个列表对象到属性postss。<br>3.在组件注册时，定义了prop属性，用于接收确定的父组件传来的数据，这里我为了区分，写成了<code>postss</code>,<code>postss</code>接受的是post列表属性，然后在<code>template</code>模板中获取列表中相关的属性指。</p><p><strong>总结：</strong></p><p>props传入的可以是一个列表，也可以传入动态的数据，它里面的数据可以用来传递一个初始值，和Python一样，如果传入的是一个对象，则传入的数据是一个引用，因此会指向同一个组件，所以改变子组件有可能会影响到父组件的数据。</p><hr><p>No small steps, no small streams, no river or sea</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue中插槽slot的使用与理解</title>
    <link href="/2020/07/23/Vue%E4%B8%AD%E6%8F%92%E6%A7%BDslot%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <url>/2020/07/23/Vue%E4%B8%AD%E6%8F%92%E6%A7%BDslot%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>1.slot：名为插槽，实则作为分发数据的一种接口形式。</p><p>2.slot主要有具名插槽和作用域插槽。</p><p>①具名插槽主要针对多个插槽，为了区分这些插槽作用于不同的地方，因此在定义插槽的时候，添加name属性用来表示插槽名。</p><p>②作用域插槽主要用于针对不同的插槽、不同的条件下插入不同的数据，以达到理想效果。</p><hr><p><strong>话不多说，先上代码，再做分析：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span> <span class="hljs-attr">v-bind:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">default</span>=<span class="hljs-string">&quot;myslot&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&#123;&#123; myslot.user.firstName &#125;&#125; &#123;&#123; myslot.user.lastName &#125;&#125;--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">template</span> #<span class="hljs-attr">myslot</span>=<span class="hljs-string">&quot;myslot&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!--中间可以加if--&gt;</span><br>  父组件：<br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;myslot.user.isFirstName&quot;</span>&gt;</span>&#123;&#123; myslot.user.firstName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span>&#123;&#123; myslot.user.lastName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.component(<span class="hljs-string">&#x27;current-user&#x27;</span>, &#123;<br>props:[<span class="hljs-string">&#x27;user&#x27;</span>],<br>template:<span class="hljs-string">`</span><br><span class="hljs-string">&lt;span&gt;</span><br><span class="hljs-string">  &lt;slot v-bind:user=&quot;user&quot;&gt;</span><br><span class="hljs-string">    子组件：&#123;&#123; user.lastName &#125;&#125;</span><br><span class="hljs-string">  &lt;/slot&gt;</span><br><span class="hljs-string">  &lt;slot name=&quot;myslot&quot; v-bind:user=&quot;user&quot;&gt;</span><br><span class="hljs-string">    子组件：&#123;&#123; user.firstName &#125;&#125;</span><br><span class="hljs-string">  &lt;/slot&gt;</span><br><span class="hljs-string">&lt;/span&gt;</span><br><span class="hljs-string">`</span><br>&#125;);<br><br><span class="hljs-keyword">var</span> app8 = <span class="hljs-keyword">new</span> Vue(&#123;<br>el:<span class="hljs-string">&#x27;#app8&#x27;</span>,<br>data:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> &#123;<br>user:&#123;<br>lastName:<span class="hljs-string">&#x27;云中&#x27;</span>,<br>firstName:<span class="hljs-string">&#x27;司&#x27;</span>,<br>isFirstName:<span class="hljs-literal">true</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><hr><p><strong>说明：</strong></p><p>1.current-user是我自定义的一个组件，绑定了user的property，用于获取vue实例（app8）中的user对象。</p><p>2.组件中的<code>template</code>中使用了<code>&lt;slot&gt;&lt;/slot&gt;</code>标签，用于定义插槽。包含了<code>name</code>属性，用于标识插槽的名称，还包含了<code>v-bind</code>，用于绑定父级插槽，也就是<code>&lt;template&gt;&lt;/template&gt;</code>标签，然后指明我所使用的插槽名，可以用<code>v-slot</code>指定，也可以缩写为<code>#</code>,但是使用缩写必须要跟上参数（也就是插槽名），例如<code>v-slot:default = &quot;myslot&quot;</code>等价于<code>#:default=&quot;myslot&quot;</code>。</p><p>3.<code> &lt;template #default=&quot;myslot&quot;&gt;&lt;/template&gt;</code>相当于<code>&lt;slot name=&quot;myslot&quot; v-bind:user=&quot;user&quot;&gt;&lt;/slot&gt;</code>的父插槽。</p><p>4.插槽中通常可以结合<code>v-if</code>来显示不同的插槽内容。</p><hr><p><strong>注：这里需要绑定父级插槽，如果不绑定父级插槽，而使用如下的代码，则会插槽将不会显示任何内容</strong></p><p><strong>错误代码：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">current-user</span>&gt;</span><br>  &#123;&#123; user.firstName &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">current-user</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br>template:<span class="hljs-string">`</span><br><span class="hljs-string">&lt;span&gt;</span><br><span class="hljs-string">  &lt;slot&gt;</span><br><span class="hljs-string">    子组件：&#123;&#123; user.lastName &#125;&#125;</span><br><span class="hljs-string">  &lt;/slot&gt;</span><br><span class="hljs-string">  &lt;slot&gt;</span><br><span class="hljs-string">    子组件：&#123;&#123; user.firstName &#125;&#125;</span><br><span class="hljs-string">  &lt;/slot&gt;</span><br><span class="hljs-string">&lt;/span&gt;</span><br><span class="hljs-string">`</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue中$attrs和$listener的用法</title>
    <link href="/2020/07/22/Vue%E4%B8%AD$attrs%E5%92%8C$listener%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2020/07/22/Vue%E4%B8%AD$attrs%E5%92%8C$listener%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>1.$attrs:用于继承获取父组件的所有属性（除了props中传递的属性，以及class和style属性）</p><p>2.$listener:用于继承获取父组件的所有事件，包含了作用在该组件上的所有事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript">Vue.component(<span class="hljs-string">&#x27;base-input&#x27;</span>, &#123;<br>  inheritAttrs: <span class="hljs-literal">false</span>,<br>  props: [<span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>],<br>  computed: &#123;<br>    inputListeners: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">var</span> vm = <span class="hljs-built_in">this</span><br>      <span class="hljs-comment">// `Object.assign` 将所有的对象合并为一个新对象</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.assign(&#123;&#125;,<br>        <span class="hljs-comment">// 我们从父级添加所有的监听器</span><br>        <span class="hljs-built_in">this</span>.$listeners,<br>        <span class="hljs-comment">// 然后我们添加自定义监听器，</span><br>        <span class="hljs-comment">// 或覆写一些监听器的行为</span><br>        &#123;<br>          <span class="hljs-comment">// 这里确保组件配合 `v-model` 的工作</span><br>          input: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>&#123;<br>            vm.$emit(<span class="hljs-string">&#x27;input&#x27;</span>, event.target.value)<br>          &#125;<br>        &#125;<br>      )<br>    &#125;<br>  &#125;,<br>  template: <span class="hljs-string">`</span><br><span class="hljs-string">    &lt;label&gt;</span><br><span class="hljs-string">      &#123;&#123; label &#125;&#125;</span><br><span class="hljs-string">      &lt;input</span><br><span class="hljs-string">        v-bind=&quot;$attrs&quot;</span><br><span class="hljs-string">        v-bind:value=&quot;value&quot;</span><br><span class="hljs-string">        v-on=&quot;inputListeners&quot;</span><br><span class="hljs-string">      &gt;</span><br><span class="hljs-string">    &lt;/label&gt;</span><br><span class="hljs-string">  `</span><br>&#125;)<br><br><br></code></pre></td></tr></table></figure><hr><p><strong>说明：</strong></p><p>1.在template中input绑定了<code>$attrs</code>，实际上是绑定了原始input标签中的属性，除了class和style以及props外.</p><p>2.在template中<code>v-on=&quot;inputListeners&quot;</code>，实际上绑定了组件中自定义的事件监听器，通过computed计算属性定义其函数，其中有原始的监听器，也有覆盖了原始监听器的方法<code>input</code>。</p><p>3.<code>inheritAttrs: false</code>表示它的子组件不能够继承于它，也就是它的子组件获取不到它的属性，默认为true</p><hr><p><strong>总结：</strong></p><p>1.$attrs,$listeners,$props，这三个我们都可以通过vue实例来访问到，同时$attrs+$props等价于该组件定义的所有的属性，他们三个的作用都是继承父组件的相关的要素到当前使用的组件中来。</p><p>2.上述的代码可以当作一个普通的input使用，这也就是为什么vue被称为组件式开发框架，它不同于传统框架，例如layui，easyui，jquery，amazeui等，传统的框架是基于已有的html标签，在其中添加额外的自定义属性，而vue可以重写覆盖已有的标签，进而形成自己的一套组件体系，就像element-ui。所以vue的组件式开发更加灵活和高效，可用！</p><hr>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>总结redis的zset数据结构实战用法</title>
    <link href="/2020/07/21/%E6%80%BB%E7%BB%93redis%E7%9A%84zset%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%88%98%E7%94%A8%E6%B3%95/"/>
    <url>/2020/07/21/%E6%80%BB%E7%BB%93redis%E7%9A%84zset%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E6%88%98%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="一-背景"><a href="#一-背景" class="headerlink" title="一 背景"></a><strong>一 背景</strong></h3><p>之前做了项目中,很多地方都使用了redis,都使用了不同的redis数据结构来实现不同的需求,但是做完之后,却没有及时总结,现在,将设计到redis各数据结构的使用从项目中剥离出来,进行分析,本篇先着重讲zset数据结构的用途与常见指令,底层原理解析留在以后的笔记中学习记录!</p><p>我使用的后端框架Django,原生的redis操作集,redis版本6.0.6</p><hr><h3 id="二-zset数据结构"><a href="#二-zset数据结构" class="headerlink" title="二  zset数据结构"></a><strong>二  zset数据结构</strong></h3><p>我们都直到redis中的有常用的五大数据结构,分别为string, list, hash, set, zset,可以看到set是集合,而zset是有序集合.本篇所要讲的zset是基于集合上一种有顺序(分值)的的数据结构,有序集合中的每一个元素项会对应一个分数值,并且分数是可以重复的,它会按照分值进行排序,从小到大,或从大到小,我使用zset的频率比set要多得多.接下来我将通过自己项目中的例子来分析zset中常见的操作.</p><hr><h3 id="三-开启讲解"><a href="#三-开启讲解" class="headerlink" title="三  开启讲解"></a><strong>三  开启讲解</strong></h3><h4 id="1-搜索历史记录栏和热搜词汇排行榜"><a href="#1-搜索历史记录栏和热搜词汇排行榜" class="headerlink" title="1.搜索历史记录栏和热搜词汇排行榜"></a><strong>1.搜索历史记录栏和热搜词汇排行榜</strong></h4><p>   搜索历史记录栏可以说对于每个网络应用程序都是必不可少的功能,像存储用户搜索历史这样的热点数据,如果存储在像mysql这样关系型数据,纯I/O读写的速度是较慢的,存储在mysql中,每次添加会给数据库带来过大的压力,而使用mongodb非关系性数据库来说,它使用内存映射存储引擎,它会把磁盘I/O操作转化为内存操作,因而大大提升了读写性能.因此该功能实现可以基于mongodb,而我这里选了历史搜索记录,因为在我(小菜鸟)看来,第一时间想到的实现方法就是基于redis的zset数据结构,并且搜索记录不必一直存在,可以持续1个月或几个月就可以自动删除,还有一方面的原因就是自己对mongodb用法,使用场景,原理不是特别了解.</p><hr><p><strong>项目关键代码</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 上下文管理器代码</span><br><span class="hljs-meta">@contextlib.contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manage_redis</span>(<span class="hljs-params">db, redis_class=BaseRedis, redis=<span class="hljs-literal">None</span></span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># redis = get_redis_connection(db)  # redis实例链接</span><br>        redis = redis_class.choice_redis_db(db).redis  <span class="hljs-comment"># 单例获取redis实例对象</span><br>        <span class="hljs-keyword">yield</span> redis<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        redis_logger.error(e)<br>        <span class="hljs-keyword">raise</span> RedisOperationError()<br>    <span class="hljs-keyword">finally</span>:<br>        redis.close()  <span class="hljs-comment"># 其实可以不要,除非single client connection, 每条执行执行完都会调用conn.release()</span><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 记录用户搜索的关键词和维护热搜数据</span><br><span class="hljs-meta">@client_key  </span><span class="hljs-comment"># 自定义的装饰器,用于获取唯一key标识</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_search</span>(<span class="hljs-params">self, sender, key, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    记录某用户的浏览记录</span><br><span class="hljs-string">    有效时间1个月</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> manage_redis(self.DB, <span class="hljs-built_in">type</span>(self)) <span class="hljs-keyword">as</span> redis:<br>        <span class="hljs-comment"># 为每个用户维护一个搜索有序集合</span><br>        <span class="hljs-comment"># 为所有关键词维护一个有序集合,用于分析</span><br>        <span class="hljs-keyword">with</span> redis.pipeline() <span class="hljs-keyword">as</span> pipe:<br>            pipe.zadd(self.user_key(sender), &#123;key: self.score&#125;)<br>            <span class="hljs-comment"># 60*60*24*30 = 25920000 30天存活</span><br>            pipe.expire(self.user_key(sender), <span class="hljs-number">25920000</span>)<br>            pipe.zincrby(self.heat_key(datetime.datetime.today()), <span class="hljs-number">1</span>, key)  <span class="hljs-comment"># 将该关键字添加到热搜有序集合中,如果存在key,则+1,不存在设置为1</span><br>            pipe.execute()<br>            <br>            <br><span class="hljs-meta">@client_key</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_search_single</span>(<span class="hljs-params">self, sender, key, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    单删某条搜索历史记录</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> manage_redis(self.DB, <span class="hljs-built_in">type</span>(self)) <span class="hljs-keyword">as</span> redis:<br>        redis.zrem(self.user_key(sender), key)<br><br>        <br><span class="hljs-meta">@client_key</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_search_all</span>(<span class="hljs-params">self, sender, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    群删所有搜索历史记录</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> manage_redis(self.DB, <span class="hljs-built_in">type</span>(self)) <span class="hljs-keyword">as</span> redis:<br>        redis.delete(self.user_key(sender))<br>        <br><br><span class="hljs-meta">@client_key</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">retrieve_last_ten</span>(<span class="hljs-params">self, sender, key, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;根据分页获取最新的10条搜索记录&quot;&quot;&quot;</span><br><br>    <span class="hljs-comment"># with 生存周期持续到函数结束</span><br>    <span class="hljs-keyword">with</span> manage_redis(self.DB, <span class="hljs-built_in">type</span>(self)) <span class="hljs-keyword">as</span> redis:<br>        page = kwargs.get(<span class="hljs-string">&#x27;page&#x27;</span>)<br>        count = kwargs.get(<span class="hljs-string">&#x27;count&#x27;</span>)<br>        result = redis.zrevrange(self.user_key(sender), page * count, (page + <span class="hljs-number">1</span>) * count)  <span class="hljs-comment"># 返回分数从高到低的前十个(时间最近的前十个)</span><br>        <span class="hljs-keyword">return</span> result<br>    <br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heat_search</span>(<span class="hljs-params">self, sender, key, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    每日热搜</span><br><span class="hljs-string">    动态更新每日的前十位</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">with</span> manage_redis(self.DB, <span class="hljs-built_in">type</span>(self)) <span class="hljs-keyword">as</span> redis:<br>        date = datetime.datetime.today()<br>        result = redis.zrevrange(self.heat_key(date), <span class="hljs-number">0</span>, <span class="hljs-number">10</span>)  <span class="hljs-comment"># 前十大热搜</span><br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><hr><h4 id="总体分析"><a href="#总体分析" class="headerlink" title="总体分析:"></a><strong>总体分析:</strong></h4><p>1).我这里使用了上下文管理器来获取redis和自动释放redis,通过传递配置中使用的DB和类型,获取单例操作类的redis实例.</p><p>2).因为涉及到的redis指令较多,我使用了pipeline来传输命令,统一操作,这样一方面可以减少与redis通信多次命令执行的RTT(往返时间),另一方面可以可以保证数据的顺序,按照队列先进先出的顺序.</p><hr><h4 id="save-search-函数方法分析"><a href="#save-search-函数方法分析" class="headerlink" title="save_search()函数方法分析"></a><strong><code>save_search()</code>函数方法分析</strong></h4><p>1).首先向pipeline推送zadd命令,zadd命令是向制定name的有序集合中添加一条数据{key:score}, name用于唯一表示有序集合,key用于唯一标识一条数据项的键,score表示其对应的分数值,这里我将时间戳作为score.因此score越小表示浏览的时间越早,这样在从redis取出显示在前端就可以按照时间从前往后的顺序进行展示,有效的减少了时间复杂度.zadd命令时间复杂度为0(log(N))</p><p>2).然后为该键设置过期时间,通过expire命令设定30天存活</p><p>3).借着使用zincrby方法维护一个有序集合,用于记录每天的热搜词汇,每当有一个用户搜索词汇时,将该词汇添加到集合中,每次加1,如果一开始没有该词汇,则默认为1,时间复杂度为0(log(N))</p><p>4).最后,执行execute(),依次执行pipeline中的指令.</p><hr><h4 id="heat-search-函数方法分析"><a href="#heat-search-函数方法分析" class="headerlink" title="** heat_search() 函数方法分析**"></a>** <code>heat_search()</code> 函数方法分析**</h4><p>1)使用zrevrange()操作来查找按照score值递减来排列,具有相同score的成员按照字典序的反序排序.该函数,返回热搜sorted set中排名前十的关键词返回.时间复杂度为O(N+log(M)),M表示当前sorted set中所具有的元素个数,M表示返回的数据个数.<br>ps:zrevrange()中可以添加score=True属性,来获取带有分数值的列表</p><hr><h4 id="2-足迹记录"><a href="#2-足迹记录" class="headerlink" title="2.足迹记录"></a><strong>2.足迹记录</strong></h4><p>足迹记录和搜索历史记录有者异曲同工的作用.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_foot_commodity_id</span>(<span class="hljs-params">self, user_id, validated_data</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    消费者浏览某个商品，添加足迹</span><br><span class="hljs-string">    :param validated_data: 验证后的数据</span><br><span class="hljs-string">    :param user_id:用户id</span><br><span class="hljs-string">    :return:boolean</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># add_foot.apply_async(args=(pickle.dumps(self), user_id, validated_data))  # can&#x27;t pickle _thread.lock objects</span><br>    <span class="hljs-keyword">with</span> manage_redis(self.db) <span class="hljs-keyword">as</span> redis:<br>        <span class="hljs-keyword">try</span>:<br>            key = self.key(<span class="hljs-string">&#x27;foot&#x27;</span>, user_id)<br>            timestamp = self.score  <span class="hljs-comment"># 毫秒级别的时间戳</span><br>            commodity_id = validated_data[<span class="hljs-string">&#x27;pk&#x27;</span>]<br>            <span class="hljs-comment"># pipe = self.redis.pipeline()  # 添加管道，减少客户端和服务端之间的TCP包传输次数</span><br>            redis.zadd(key, &#123;commodity_id: timestamp&#125;)  <span class="hljs-comment"># 分别表示用户id（加密），当前日期+时间戳（分数值），商品id</span><br>            <span class="hljs-comment"># 每个用户最多记录100条历史记录</span><br>            <span class="hljs-keyword">if</span> redis.zcard(key) &gt;= <span class="hljs-number">100</span>:  <span class="hljs-comment"># 集合中key为键的数量</span><br>                redis.zremrangebyrank(key, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment"># 移除时间最早的那条记录</span><br>            <span class="hljs-comment"># pipe.execute()</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            consumer_logger.error(e)<br>            <span class="hljs-keyword">raise</span> RedisOperationError()<br></code></pre></td></tr></table></figure><hr><h4 id="分析"><a href="#分析" class="headerlink" title="分析:"></a><strong>分析:</strong></h4><p>这个项目中添加足迹的相关操作我也是使用了sorted key, 因为大多数用户可能并不会在意自己的浏览足迹,而且用户每浏览一个商品都会添加足迹,但是多次浏览同一个商品,商品不变只是浏览的时间变化了,因此用sorted key 来模拟这个功能还是比较合适的,时间作为score,商品id作为key,key唯一,而分数值可以相同,替换旧的分数值.</p><p>zard()操作用于计算当前集合中数据项的个数,我这里限定了记录100条足迹记录,一旦某次添加超过了,就自动删除时间最早的那条记录,使用zremrangebyrank方法,按照排名区间删除,start和stop分别设置为0,0处表示分数值最小(即时间最早).</p><hr><h4 id="3-运动排行榜"><a href="#3-运动排行榜" class="headerlink" title="3.运动排行榜"></a><strong>3.运动排行榜</strong></h4><p>排行榜在像游戏APP,运动APP中很常见,我们熟悉的就是微信运动排行榜,用redis实现排行榜毋庸置疑,每日更新,非常nice!话不多说,上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">retrieve_cur_rank_user</span>(<span class="hljs-params">self, member, mold, today=<span class="hljs-literal">None</span>, redis_name=<span class="hljs-string">&#x27;default&#x27;</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    当天计数,获取当前用户在全服运动榜中的排名和运动值,从大到小</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param redis_name: redis name in config</span><br><span class="hljs-string">    :param mold:运动项目类型</span><br><span class="hljs-string">    :param today:当天日期</span><br><span class="hljs-string">    :param member: 用户id</span><br><span class="hljs-string">    :return [rank ,score]</span><br><span class="hljs-string"></span><br><span class="hljs-string">    键:&#x27;rank&#x27;-mold-date</span><br><span class="hljs-string"></span><br><span class="hljs-string">    数据结构:sorted set</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    member = <span class="hljs-built_in">str</span>(member)<br>    today = today <span class="hljs-keyword">or</span> (datetime.datetime.now()).strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>    <span class="hljs-keyword">with</span> manager_redis(redis_name) <span class="hljs-keyword">as</span> redis:<br>        name = self.key(<span class="hljs-string">&#x27;rank&#x27;</span>, mold, today)<br>        pipe = redis.pipeline()<br>        pipe.zrevrank(name, member)  <span class="hljs-comment"># 获取当前用户的排名</span><br>        pipe.zscore(name, member)  <span class="hljs-comment"># 获取当前用户的运动值</span><br>        result = pipe.execute()<br>        <span class="hljs-keyword">return</span> result<br><br></code></pre></td></tr></table></figure><hr><h4 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a><strong>分析</strong></h4><p>1.使用revrank从有序集成员中按score值从小到大进行排序,排名以0为底,socre分数值最大的成员排名为0</p><p>2.使用zscore来从有序集成员中获取当前用户的运动值</p><p>3.使用pipeline减少RTT的时间消耗</p><hr><h3 id="四-总结"><a href="#四-总结" class="headerlink" title="四  总结:"></a><strong>四  总结</strong>:</h3><p>以上是我几个项目中使用redis的zset的部分典型实例.由于代码太多,则就不全不贴出来,有兴趣的可以去看我github上的项目.</p><p>1.第一个项目地址:<a href="https://github.com/syz247179876/Django-Mall">https://github.com/syz247179876/Django-Mall</a></p><p>2.第二个项目地址:<a href="https://github.com/syz247179876/Flask-Sports">https://github.com/syz247179876/Flask-Sports</a></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在window10玩Linux系统初体验</title>
    <link href="/2020/07/20/%E5%9C%A8window10%E7%8E%A9Linux%E7%B3%BB%E7%BB%9F%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
    <url>/2020/07/20/%E5%9C%A8window10%E7%8E%A9Linux%E7%B3%BB%E7%BB%9F%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="在window10上玩Linux"><a href="#在window10上玩Linux" class="headerlink" title="在window10上玩Linux"></a><strong>在window10上玩Linux</strong></h4><p>Window的Linux子系统的版本目前也有Ubuntu，kali,暂时没有centos具体的安装Linux子系统的步骤网上有很多，我这里就不演示如何安装Linux子系统了，如果是window10的话，安装起来不复杂。</p><h4 id="更换Ubuntu的镜像源"><a href="#更换Ubuntu的镜像源" class="headerlink" title="更换Ubuntu的镜像源"></a><strong>更换Ubuntu的镜像源</strong></h4><p>默认的Linux子系统的镜像源为国外的，在<code>apt-get update</code>时候太慢了，所以需要更换为国内的镜像源。</p><h5 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h5><p>① 拷贝一份旧的镜像源，以保证万无一失。</p><p>更换权限为root</p><p><code>sudo su root</code></p><p><code>cp /etc/apt/sourses.list /etc/apt/sources.list_orgin</code></p><p>copy之后，打开新的文件</p><p><code>vim /etc/apt/sourses.list</code></p><p>输入以下内容：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cmd">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse<br>deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse<br><br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse<br>deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>更换之后,使用<code>apt-get update</code>和<code>apt-get upgrade</code>更新软件包就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript实现复制文本到剪切板</title>
    <link href="/2020/07/13/JavaScript%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/"/>
    <url>/2020/07/13/JavaScript%E5%AE%9E%E7%8E%B0%E5%A4%8D%E5%88%B6%E6%96%87%E6%9C%AC%E5%88%B0%E5%89%AA%E5%88%87%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h4 id="js实现复制文本到剪切板"><a href="#js实现复制文本到剪切板" class="headerlink" title="js实现复制文本到剪切板"></a>js实现复制文本到剪切板</h4><hr><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>我的博客网站目前需要添加赋值文本，在文本的末尾追加一些额外的信息，因此就需要调用window.oncopy方法，然后需要实现复制文本的js。</p><hr><h4 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a><strong>二、代码实现</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-keyword">let</span> oInput = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;input&#x27;</span>);<br><span class="hljs-keyword">let</span> url = <span class="hljs-built_in">window</span>.location.href;<br><span class="hljs-keyword">let</span> title = <span class="hljs-string">&#x27;《&#x27;</span> + $(<span class="hljs-string">&quot;#title&quot;</span>).text() + <span class="hljs-string">&#x27;》&#x27;</span>;<br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&#x27;云博文章&#x27;</span> + title + <span class="hljs-string">&#x27;,地址:&#x27;</span> + url;<br>oInput.value = text;<br><span class="hljs-built_in">document</span>.body.appendChild(oInput);<br>oInput.select(); <span class="hljs-comment">// 选择对象</span><br><span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&quot;Copy&quot;</span>); <span class="hljs-comment">// 执行浏览器复制命令,关键</span><br>oInput.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>① 首先需要创建一个input的<code>HTMLInputElement</code>的object。</p><p>② 这里我获取了我的该文章页的url，并添加额外信息</p><p>③ 将这些信息赋给object的value</p><p>④ 将这个obj添加到body中，然后选择该input对象，执行浏览器的赋值命令，这一步是核心所在。</p><p><strong>注：</strong></p><p>这样做的好处是，不用依赖已有的input框或者textarea文本域，只需要触发按钮，动态创建input，添加额外的信息，执行赋值命令，就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux的软硬链接以及CP间的区别</title>
    <link href="/2020/07/12/Linux%E7%9A%84%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%BB%A5%E5%8F%8ACP%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/07/12/Linux%E7%9A%84%E8%BD%AF%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%BB%A5%E5%8F%8ACP%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="Liunx中的软链接和硬链接学习"><a href="#Liunx中的软链接和硬链接学习" class="headerlink" title="Liunx中的软链接和硬链接学习"></a><strong>Liunx中的软链接和硬链接学习</strong></h3><h4 id="一-背景"><a href="#一-背景" class="headerlink" title="一  背景"></a><strong>一  背景</strong></h4><p>最近在玩manjaro,在装些软件和工具的时候，用到了软硬链接和CP，在此做个笔记，加深一下印象！</p><hr><h4 id="二-软链接："><a href="#二-软链接：" class="headerlink" title="二 软链接："></a><strong>二 软链接：</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E8%BD%AF%E9%93%BE%E6%8E%A5.png">{width=90%}</p><p>1.类似window系统下的快捷方式，作用可以将一个复杂目录下的文件链接到一个简单的目录下，因为复杂目录很难记住，如果要去执行的话，还得去复杂目录下找，这就很麻烦。</p><p>2.软链接和被链接的文件指向不同的innode索引结点。</p><p>3.删除软连接，并不会影响原来的链接，如果源文件删除了，那么软链接就变成了死链接。</p><p>4..软链接的数据块存放的只是目的文件的路径名，然后通过一层层的路径查找取找到对应的文件目录项中索引结点指向的文件。</p><p>5.软链接是可以对不同跨挂载点的文件进行软链接的。</p><p>6.软链接其实表示的也是文件的另一位置，通常用于链接到/usr/bin，直接从根环境下输出，而不用每次都去相应目录中启动服务或者进程等。</p><p>7.命令为 <code>ln -s  &lt;linked_path&gt;  [new_path]</code></p><hr><h4 id="三-硬链接："><a href="#三-硬链接：" class="headerlink" title="三  硬链接："></a><strong>三  硬链接：</strong></h4><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E7%A1%AC%E9%93%BE%E6%8E%A5.png">{width=90%}</p><hr><p>1.硬链接也不会消耗硬盘的空间，因为创建硬链接其实是对该文件的count（链接计数器）+1，当count变成0，也就意味着该文件确实被删除了。</p><p>2.因此我们可以从count+1,推断出，也就是一个文件可以创建多个硬链接，也可以将硬链接理解为为文件创建的别名，那么顺理成章，别名就可以有多个。</p><p>3.这些“别名”，硬链接之间指向同一个文件，彼此是隔离的，也就是删除某一个文件的硬链接，对该文件的另外硬链接没有影响。</p><p>4.硬链接也可以被称之为拷贝和同步，修改不同的硬链接，因为他们指向共同的对象，因此源文件和硬链接都会修改,如果要备份源文件，用CP，不要用硬链接。</p><p>5.硬链接不能用于跨挂载点的链接，这个我试过，是不会产生硬链接的。</p><p>6.硬链接与CP指令也是有区别的，主要是硬链接并不会创建新的innode(索引节点)，而是指针指向的关系，但是CP会完全复制文件的全部内容，生成新的innode，因此会占用多余物理内存。</p><p>7.所以为了能够跨挂载点进行链接，可以考虑使用CP或者软链接。只不过CP会多占用物理内存空间。</p><p>8.命令为 <code>ln  &lt;linked_path&gt;  [new_path]</code></p><p><strong>软链接，硬链接和CP的区别类似与Python中的对象的引用和深拷贝的区别！</strong></p><hr><p><strong>坚持下去，做最好的自己！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue中$emit的使用</title>
    <link href="/2020/07/05/vue%E4%B8%AD$emit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/07/05/vue%E4%B8%AD$emit%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="Vue中关于-emit的用法"><a href="#Vue中关于-emit的用法" class="headerlink" title="Vue中关于$emit的用法"></a><strong>Vue中关于$emit的用法</strong></h4><hr><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>最近正官方文档学习vue框架，只掌握一门语言及其技术是不够的，需要不断充实自己，这样才会有更加宽阔的视野。</p><hr><h4 id="二、-emit的使用"><a href="#二、-emit的使用" class="headerlink" title="二、$emit的使用"></a><strong>二、$emit的使用</strong></h4><p>$emit(event,arg):子组件可以回调自身或者父组件上的事件，参数event表示事件名，arg表示需要传递给回调事件的参数。</p><p>下面是官网给出的一段代码，我将对代码进行分析：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;todo-list-example&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">v-on:submit.prevent</span>=<span class="hljs-string">&quot;addNewTodo&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;new-todo&quot;</span>&gt;</span>Add a todo<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    &lt;input<br>      v-model=&quot;newTodoText&quot;<br>      id=&quot;new-todo&quot;<br>      placeholder=&quot;E.g. Feed the cat&quot;<br>    &gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>Add<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>   <span class="hljs-comment">&lt;!--指明某个组件--&gt;</span><br>    &lt;li<br>      is=&quot;todo-item&quot;                        // 指明了所使用的特定的组件<br>      v-for=&quot;(todo, index) in todos&quot;        // for循环<br>      v-bind:key=&quot;todo.id&quot;                  // 标识组件唯一性，方便重用<br>      v-bind:title=&quot;todo.title&quot;<br>      v-on:remove=&quot;todos.splice(index, 1)&quot;  // 删除元素<br>    &gt;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建名为todo-item的组件</span><br>Vue.component(<span class="hljs-string">&#x27;todo-item&#x27;</span>, &#123;<br>  template: <span class="hljs-string">&#x27;\</span><br><span class="hljs-string">    &lt;li&gt;\</span><br><span class="hljs-string">      &#123;&#123; title &#125;&#125;\</span><br><span class="hljs-string">      &lt;button v-on:click=&quot;$emit(\&#x27;remove\&#x27;)&quot;&gt;Remove&lt;/button&gt;\</span><br><span class="hljs-string">    &lt;/li&gt;\</span><br><span class="hljs-string">  &#x27;</span>,<br>  props: [<span class="hljs-string">&#x27;title&#x27;</span>]<br>&#125;)<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  el: <span class="hljs-string">&#x27;#todo-list-example&#x27;</span>,<br>  data: &#123;<br>    newTodoText: <span class="hljs-string">&#x27;&#x27;</span>,<br>    todos: [<br>      &#123;<br>        id: <span class="hljs-number">1</span>,<br>        title: <span class="hljs-string">&#x27;Do the dishes&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">2</span>,<br>        title: <span class="hljs-string">&#x27;Take out the trash&#x27;</span>,<br>      &#125;,<br>      &#123;<br>        id: <span class="hljs-number">3</span>,<br>        title: <span class="hljs-string">&#x27;Mow the lawn&#x27;</span><br>      &#125;<br>    ],<br>    nextTodoId: <span class="hljs-number">4</span><br>  &#125;,<br>  methods: &#123;<br>    addNewTodo: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-built_in">this</span>.todos.push(&#123;<br>        id: <span class="hljs-built_in">this</span>.nextTodoId++,<br>        title: <span class="hljs-built_in">this</span>.newTodoText<br>      &#125;)<br>      <span class="hljs-built_in">this</span>.newTodoText = <span class="hljs-string">&#x27;&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;);<br><br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.li标签中使用<code>is</code>属性指明了所要使用的组件，其效果等价于直接写<code>&lt;todo-item&gt;...&lt;/tode-item&gt;</code>,不过官网指说明了使用<code>is</code>可以避免不同浏览器的解析问题。</p><p>2.在模板中使用<code>&lt;button v-on:click=&quot;$emit(\&#39;remove\&#39;)&quot;&gt;Remove&lt;/button&gt;\</code>了模板，这里面使用到了<code>$emit()</code>方法，其在此代码中调用父组件中的<code>remove</code>属性，也就是<code>todos.splice(index, 1)</code>方法，删除数组中指定index和数量的项目。</p><p>3.<code>&lt;form v-on:submit.prevent=&quot;addNewTodo&quot;&gt;</code>这句代码中的<code>sumbit.prevent</code>相当于js中<code>preventDefault</code>方法，该方法通知浏览器不要执行该dom默认绑定的事件，在form中也就是取消页面跳转。</p><p>学无止境，要让自己的才华配的上自己的野心！</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro初上体验之安装mysql8</title>
    <link href="/2020/07/01/manjaro%E5%88%9D%E4%B8%8A%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%AE%89%E8%A3%85mysql8/"/>
    <url>/2020/07/01/manjaro%E5%88%9D%E4%B8%8A%E4%BD%93%E9%AA%8C%E4%B9%8B%E5%AE%89%E8%A3%85mysql8/</url>
    
    <content type="html"><![CDATA[<h3 id="manjaro上安装mysql8-0的踩坑记录"><a href="#manjaro上安装mysql8-0的踩坑记录" class="headerlink" title="manjaro上安装mysql8.0的踩坑记录"></a><strong>manjaro上安装mysql8.0的踩坑记录</strong></h3><p>假设前面的源已经换好，这样下载速度快些。</p><hr><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><strong>安装步骤</strong></h4><p>1.我们首先看下仓库中最新版的mysql的版本</p><p><code>pacman -Si mysql</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[syz@syz-x542un ~]$ pacman -Si mysql<br>软件库         : archlinuxcn<br>名字           : mysql<br>版本           : 8.0.20-1<br>描述           : Fast SQL database server, community edition<br>架构           : x86_64<br>URL            : https://www.mysql.com/products/community/<br>软件许可       : GPL<br>组             : 无<br>提供           : mariadb=8.0.20  mysql=8.0.20<br>依赖于         : mysql-clients  libsasl  zlib  jemalloc  libaio  libtirpc  icu  lz4<br>                 libevent  systemd-libs<br>可选依赖       : perl-dbd-mysql: for mysqlhotcopy, mysql_convert_table_format and<br>                 mysql_setpermission<br>与它冲突       : mariadb<br>取代           : 无<br>下载大小       : 18.04 MiB<br>安装后大小     : 155.20 MiB<br>打包者         : lilac (on behalf of winstonwu91) &lt;winstonwu91@gmail.com&gt;<br>编译日期       : 2020年05月05日 星期二 02时41分45秒<br>验证者         : MD5校验值  SHA-256 校验值  数字签名<br><br></code></pre></td></tr></table></figure><p>确保我们站装我们所需要的mysql版本</p><hr><p>2.下载并安装mysql</p><p><code>sudo pacman -S mysql</code></p><p>该指令的意思是从本地数据仓库中下载msyql，并安装</p><hr><p>3.初始化Mysql</p><p><code>mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql</code></p><p>如果正确安装，则应该是以下信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[syz@syz-x542un var]$ sudo mysqld --initialize --user=mysql --basedir=/usr --datadir=/var/lib/mysql<br>2020-07-17T04:37:34.441250Z 0 [Warning] [MY-010915] [Server] &#x27;NO_ZERO_DATE&#x27;, &#x27;NO_ZERO_IN_DATE&#x27; and &#x27;ERROR_FOR_DIVISION_BY_ZERO&#x27; sql modes should be used with strict mode. They will be merged with strict mode in a future release.<br>2020-07-17T04:37:34.441319Z 0 [System] [MY-013169] [Server] /usr/bin/mysqld (mysqld 8.0.20) initializing of server in progress as process 3048<br>2020-07-17T04:37:34.450031Z 1 [System] [MY-013576] [InnoDB] InnoDB initialization has started.<br>2020-07-17T04:37:36.533504Z 1 [System] [MY-013577] [InnoDB] InnoDB initialization has ended.<br>2020-07-17T04:37:39.986572Z 6 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: UjmcwMawE1.d<br></code></pre></td></tr></table></figure><p><strong>！！！注意</strong></p><p>最某位的位置是数据库初始化的密码，这个一定要先复制下来，不然可能像我一样，第一次安装，这里疏忽了，然后进不去数据库。那也只能重装了。</p><p>重装注意要将文件都删除干净，步骤如下：</p><hr><p>(1) <code>sudo pacman -Rs mysql</code></p><p>该命令中<code>-R</code>表示删除某个包，<code>-s</code>表示删除于这个包相关联的其他所有依赖包</p><hr><p>(2)然后删除<code>/var/lib/mysql</code>目录，使用<code>sudo rm -rf /var/lib/mysql</code></p><hr><p>4.设置mysql开机自起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl enable mysqld.service<br>sudo systemctl start mysqld.service  #启动<br></code></pre></td></tr></table></figure><hr><p>5.进入mysql修改默认密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -u root -p<br><br>alter user &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;syzxss247179876&#x27;;<br><br>flush privileges<br></code></pre></td></tr></table></figure><p>6.自此Mysql在manjaro上的安装就基本完成了！</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Manjaro</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>MySQL</tag>
      
      <tag>Manjaro</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux安装Memcache</title>
    <link href="/2020/07/01/linux%E5%AE%89%E8%A3%85memcache/"/>
    <url>/2020/07/01/linux%E5%AE%89%E8%A3%85memcache/</url>
    
    <content type="html"><![CDATA[<h4 id="linux上安装memcache和python操作memcache的依赖项"><a href="#linux上安装memcache和python操作memcache的依赖项" class="headerlink" title="linux上安装memcache和python操作memcache的依赖项"></a>linux上安装memcache和python操作memcache的依赖项</h4><hr><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a><strong>背景</strong></h4><p>memcache由于只具备k-v操作，因此在处理非常高的并发的情况下，速度要略快与redis。同时它是一款多线程的分布式缓存系统。</p><hr><h4 id="linux中安装memcache"><a href="#linux中安装memcache" class="headerlink" title="linux中安装memcache"></a><strong>linux中安装memcache</strong></h4><p>安装memcache的方式有两种方式：</p><p>①一种是wget网上的压缩包（包括libevent依赖包），然后下载下来进行tar，接着进入指定的目录，make编译，最后make install 进行安装。<br>此种方法要找对memcache的压缩包才行，可以参考<br><a href="https://blog.csdn.net/datangwss/article/details/87287454">https://blog.csdn.net/datangwss/article/details/87287454</a></p><p>①另外一种因为我采用python的的pip方法进行安装，此方法针对python有效，会统一将依赖包<code>libevent</code>和<code>memcached</code>安装好<br><code>pip3 install python-memcached</code></p><hr><h4 id="检测是否成功安装"><a href="#检测是否成功安装" class="headerlink" title="检测是否成功安装"></a><strong>检测是否成功安装</strong></h4><p><code>memcached -h</code></p><p>如果出现其版本号，和帮助文档则表示安装成功！</p><hr><h4 id="运行memcache"><a href="#运行memcache" class="headerlink" title="运行memcache"></a><strong>运行memcache</strong></h4><p>进入/usr/bin目录,执行</p><p><code>./memcached -d -m 10 -u root -l 127.0.0.1 -p 11211 -c 256 -P /tmp/memcache.pid</code></p><p><strong>注：</strong><br>-d:以后台守护进程的方式运行。<br>-m:指定使用的内存大小，因为我是2G的云服务器，因此就设置的稍微少点，默认为64M。<br>-u:指明运行此memcache的角色。<br>-l:指定连接的ip地址。<br>-p:指定连接的端口号<br>-c:指定连接的client客户端<br>-P:指定存放pid文件的位置，存放在tmp目录下，一般用于存放系统临时的文件，比如pid号。  </p><hr><h4 id="测试是否成功启动memcache"><a href="#测试是否成功启动memcache" class="headerlink" title="测试是否成功启动memcache"></a><strong>测试是否成功启动memcache</strong></h4><p>方法①：</p><p><code>ps aux|grep memcache</code></p><p>查看进程是否启动成功</p><p>方法②：</p><p><code>telnet 127.0.0.1 11211</code></p><p>查看是否能够远程连接</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>memcache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>memcache</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记如何远程连接Mysql及出现的问题</title>
    <link href="/2020/06/25/%E8%AE%B0%E5%A6%82%E4%BD%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Mysql%E5%8F%8A%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/06/25/%E8%AE%B0%E5%A6%82%E4%BD%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Mysql%E5%8F%8A%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="本地远程连接云服务器上的mysql"><a href="#本地远程连接云服务器上的mysql" class="headerlink" title="本地远程连接云服务器上的mysql"></a><strong>本地远程连接云服务器上的mysql</strong></h3><h4 id="云服务器环境：Mysql8-0-Ubuntu16-04"><a href="#云服务器环境：Mysql8-0-Ubuntu16-04" class="headerlink" title="云服务器环境：Mysql8.0+Ubuntu16.04"></a>云服务器环境：Mysql8.0+Ubuntu16.04</h4><hr><h4 id="一、安装mysql"><a href="#一、安装mysql" class="headerlink" title="一、安装mysql"></a><strong>一、安装mysql</strong></h4><p>首选本地和云服务器上都要安装好mysql</p><hr><h4 id="二、开发云服务器的端口"><a href="#二、开发云服务器的端口" class="headerlink" title="二、开发云服务器的端口"></a><strong>二、开发云服务器的端口</strong></h4><p>阿里云服务器默认不开放3306端口，因此需要手动开房3306端口，在安全组中进行选择开放。我使用的是Ubuntu版本，我安装了ufw作为防火墙管理工具，因此我还需要使用<code>sudo ufw allow 3306</code>使得防火墙允许3306的端口通过。</p><hr><h4 id="三、创建本地连接"><a href="#三、创建本地连接" class="headerlink" title="三、创建本地连接"></a><strong>三、创建本地连接</strong></h4><p>我本地使用的<code>Navicat for Mysql</code>，按照如下图方式创建连接。</p><p><a href="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/navicat_mysql.png"><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/navicat_mysql.png"></a>{:width=80%}</p><p><strong>注：</strong></p><p>ip地址：填写你的公网ip地址</p><p>用户名：填写数据库的用户</p><p>密码：填写该用户登入mysql所需的密码</p><hr><h4 id="四、服务器上创建新用户"><a href="#四、服务器上创建新用户" class="headerlink" title="四、服务器上创建新用户"></a><strong>四、服务器上创建新用户</strong></h4><p>这里我使用root用户连接时出现“外部连接mysql提示客户端不支持服务器请求的身份验证协议;考虑升级MySQL客户端”的问题</p><p>因为我是用的是Mysql8.0，相对于5.7比较严格，所以我重新创建了一个用户，赋予了所有权限，然后就成功连接。步骤如下</p><p>① 进入数据库：<code>mysql -u root -p</code></p><p><code>password:</code></p><p>② 创建新用户：</p><p><code>create user &#39;syz&#39; identified with mysql_native_password by &#39;password&#39;;</code></p><p><strong>说明：</strong></p><p>该行代码创建了用户名为syz，加密方式为<code>mysql_native_password</code>，密码为password的用户。</p><p>③ 为新用户赋予所有权限</p><p><code>grant all privileges on *.* to &#39;syz&#39;;</code></p><p><strong>说明：</strong></p><p>为该用户赋予所有数据库中所有表的所有权限。</p><p>④ 刷新数据库</p><p><code>flush privileges;</code></p><p>最后刷新数据库，使得刚才创建用户的语句立马生效。</p><hr><h4 id="五、重新建立连接"><a href="#五、重新建立连接" class="headerlink" title="五、重新建立连接"></a><strong>五、重新建立连接</strong></h4><p>这样一来就成功建立连接了~</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript获取url的各方法汇总</title>
    <link href="/2020/06/19/Javascript%E8%8E%B7%E5%8F%96url%E7%9A%84%E5%90%84%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/"/>
    <url>/2020/06/19/Javascript%E8%8E%B7%E5%8F%96url%E7%9A%84%E5%90%84%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h4 id="JavaScript获取url中基本信息的各种方法"><a href="#JavaScript获取url中基本信息的各种方法" class="headerlink" title="JavaScript获取url中基本信息的各种方法"></a><strong>JavaScript获取url中基本信息的各种方法</strong></h4><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>获取url的基本信息在前后端都需要使用，举个例子，当用户未注册，需要访问某个地址的</p><p>以我的博客的某篇文章地址为例：</p><p><a href="http://syzzjw.cn/notes/user_articles_list/syz_c_s_m/">http://syzzjw.cn/notes/user_articles_list/syz_c_s_m/</a></p><h4 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a><strong>二、代码</strong></h4><h5 id="1、window-location-href-设置或获取整个-URL-为字符串"><a href="#1、window-location-href-设置或获取整个-URL-为字符串" class="headerlink" title="1、window.location.href(设置或获取整个 URL 为字符串)"></a>1、window.location.href(设置或获取整个 URL 为字符串)</h5><p>let test = window.location.href;</p><p>结果： <a href="http://syzzjw.cn/notes/user_articles_list/syz_c_s_m/">http://syzzjw.cn/notes/user_articles_list/syz_c_s_m/</a></p><h5 id="2、window-location-protocol-设置或获取-URL-的协议部分"><a href="#2、window-location-protocol-设置或获取-URL-的协议部分" class="headerlink" title="2、window.location.protocol(设置或获取 URL 的协议部分)"></a>2、window.location.protocol(设置或获取 URL 的协议部分)</h5><p>let test = window.location.protocol;</p><p>结果：http:</p><h5 id="3、window-location-host-设置或获取-URL-的主机部分"><a href="#3、window-location-host-设置或获取-URL-的主机部分" class="headerlink" title="3、window.location.host(设置或获取 URL 的主机部分)"></a>3、window.location.host(设置或获取 URL 的主机部分)</h5><p>let test = window.location.host;</p><p>结果：syzzjw.cn</p><h5 id="4、window-location-port-设置或获取与-URL-关联的端口号码"><a href="#4、window-location-port-设置或获取与-URL-关联的端口号码" class="headerlink" title="4、window.location.port(设置或获取与 URL 关联的端口号码)"></a>4、window.location.port(设置或获取与 URL 关联的端口号码)</h5><p>let test = window.location.port;</p><p>结果：空字符(如果采用默认的80端口(update:即使添加了:80)，那么返回值并不是默认的80而是空字符)</p><h5 id="5、window-location-pathname-设置或获取与-URL-的路径部分（就是文件地址）"><a href="#5、window-location-pathname-设置或获取与-URL-的路径部分（就是文件地址）" class="headerlink" title="5、window.location.pathname(设置或获取与 URL 的路径部分（就是文件地址）)"></a>5、window.location.pathname(设置或获取与 URL 的路径部分（就是文件地址）)</h5><p>let test = window.location.pathname;</p><p>结果：syzzjw.cn/notes/user_articles_list/syz_c_s_m/</p><h5 id="6、window-location-search-设置或获取-href-属性中跟在问号后面的部分"><a href="#6、window-location-search-设置或获取-href-属性中跟在问号后面的部分" class="headerlink" title="6、window.location.search(设置或获取 href 属性中跟在问号后面的部分)"></a>6、window.location.search(设置或获取 href 属性中跟在问号后面的部分)</h5><p>let test = window.location.search;</p><p>结果：空字符串，因为我的没有?及以后的参数，举个其他例子：<a href="http://syzzjw.cn/search/?q=%E5%A4%A9%E7%A7%80">http://syzzjw.cn/search/?q=%E5%A4%A9%E7%A7%80</a></p><p>那么test结果过就是<code>?q=%E5%A4%A9%E7%A7%80</code>（经过base64编码的）</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>serializer序列化器的源码分析与分析序列化嵌套的问题</title>
    <link href="/2020/06/18/serializer%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%86%E6%9E%90%E5%BA%8F%E5%88%97%E5%8C%96%E5%B5%8C%E5%A5%97%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/06/18/serializer%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%86%E6%9E%90%E5%BA%8F%E5%88%97%E5%8C%96%E5%B5%8C%E5%A5%97%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="serializer序列化器的嵌套组成新的序列器—–遵循适配器模式"><a href="#serializer序列化器的嵌套组成新的序列器—–遵循适配器模式" class="headerlink" title="serializer序列化器的嵌套组成新的序列器—–遵循适配器模式"></a><strong>serializer序列化器的嵌套组成新的序列器—–遵循适配器模式</strong></h3><hr><h4 id="一、个人对适配器模式的理解"><a href="#一、个人对适配器模式的理解" class="headerlink" title="一、个人对适配器模式的理解"></a><strong>一、个人对适配器模式的理解</strong></h4><p>假如当前有一个接口，比如浏览记录的序列化器，序列化model后形成的json格式的数据为这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JSON">[<br>        &#123;<br>            <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;旺仔牛奶&quot;</span>,<br>            <span class="hljs-attr">&quot;grade&quot;</span>: <span class="hljs-string">&quot;四星好评&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_content&quot;</span>: <span class="hljs-string">&quot;宝贝非常好，质量不错，下次继续买你家的，不过物流太慢了，好几天才到！&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_time&quot;</span>: <span class="hljs-string">&quot;2020-05-29T15:20:53&quot;</span>,<br>            <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;食品&quot;</span>,<br>            <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;鹿皮棉袄&quot;</span>,<br>            <span class="hljs-attr">&quot;grade&quot;</span>: <span class="hljs-string">&quot;四星好评&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_content&quot;</span>: <span class="hljs-string">&quot;宝贝非常好，质量不错，下次继续买你家的，不过物流太慢了，好几天才到！&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_time&quot;</span>: <span class="hljs-string">&quot;2020-05-28T15:20:53&quot;</span>,<br>            <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">300</span>,<br>            <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;衣服&quot;</span>,<br>            <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>        &#125;,<br>]<br></code></pre></td></tr></table></figure><p>随便举个例子。</p><p>但是现在，我前端采用了流加载，通过触发临界点，再次发送请求，此时我是不是需要知道，我到底一共要发送多少次请求，才能完全加载完数据，因此我还需要知道最大页数，也将其序列化，然后前端获取进行解析。</p><hr><p>所以我原来的浏览记录的序列器就满足不了了，因为我是继承的<code>serializer.ModelSerializer</code>,因此我需要重新generate一个新的序列器，既包含了原来的浏览记录的序列器，也具备最大pages的可序列化，因此我就需要将浏览记录的序列器适配到这个新的序列器中。使之满足我的最新的需求。</p><p>这样一来，新的序列器的数据就可以是这样：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&#123;<br>    <span class="hljs-attr">&quot;page&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;data&quot;</span>: [<br>        &#123;<br>            <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;旺仔牛奶&quot;</span>,<br>            <span class="hljs-attr">&quot;grade&quot;</span>: <span class="hljs-string">&quot;四星好评&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_content&quot;</span>: <span class="hljs-string">&quot;宝贝非常好，质量不错，下次继续买你家的，不过物流太慢了，好几天才到！&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_time&quot;</span>: <span class="hljs-string">&quot;2020-05-29T15:20:53&quot;</span>,<br>            <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">5</span>,<br>            <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;食品&quot;</span>,<br>            <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>        &#125;,<br>        &#123;<br>            <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;鹿皮棉袄&quot;</span>,<br>            <span class="hljs-attr">&quot;grade&quot;</span>: <span class="hljs-string">&quot;四星好评&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_content&quot;</span>: <span class="hljs-string">&quot;宝贝非常好，质量不错，下次继续买你家的，不过物流太慢了，好几天才到！&quot;</span>,<br>            <span class="hljs-attr">&quot;reward_time&quot;</span>: <span class="hljs-string">&quot;2020-05-28T15:20:53&quot;</span>,<br>            <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">300</span>,<br>            <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;衣服&quot;</span>,<br>            <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>        &#125;,<br>]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>这样的序列化嵌套其实就是一个适配器的设计模式，将两个或多个不相关的序列化器接口进行包装，使之满足用户所期待的形式。</p><hr><h4 id="二、如何实现这种嵌套的序列器"><a href="#二、如何实现这种嵌套的序列器" class="headerlink" title="二、如何实现这种嵌套的序列器"></a><strong>二、如何实现这种嵌套的序列器</strong></h4><p>我想要实现这种model和自定义序列器进行组合的效果。一开始的做法是，通过序列化器类的<code>context</code>属性（<strong>注：ModelSerializer不存在context属性，因为它直接继承与Field类</strong>），将我所需要的数据以额外参数的形式传递进去，类似这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">serializer = PageSerializer(context=&#123;<span class="hljs-string">&#x27;serializer&#x27;</span>: self.get_serializer_class,<br>                                                                 <span class="hljs-string">&#x27;instances&#x27;</span>: instances,<span class="hljs-string">&#x27;page&#x27;</span>:page&#125;)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageSerializer</span>(<span class="hljs-params">serializers.Serializer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;页数序列器&quot;&quot;&quot;</span><br><br>    page = serializers.SerializerMethodField()<br><br>    data = serializers.SerializerMethodField()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">serializer_class</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;data serializer&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.context.get(<span class="hljs-string">&#x27;serializer&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_page</span>(<span class="hljs-params">self, obj</span>):</span><br>    page = self.context.get(<span class="hljs-string">&#x27;page&#x27;</span>)<br><span class="hljs-keyword">return</span> page<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">self, obj</span>):</span><br>        instances = self.context.get(<span class="hljs-string">&#x27;instances&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.serializer_class(instances, many=<span class="hljs-literal">True</span>).data<br></code></pre></td></tr></table></figure><p>但是后来使用了只传入context，而不传入instances和data参数的这种序列化器方式，根本产生不了相应的任何数据，也就是调用序列化器对象的data获取不到序列化结果。可是理论上这样做是不会有问题的呀，我决定去源码探索一番。</p><hr><h4 id="三、serializer的源码分析"><a href="#三、serializer的源码分析" class="headerlink" title="三、serializer的源码分析"></a><strong>三、serializer的源码分析</strong></h4><hr><h5 id="①、我们首先来看BaseSerilaizer的构造函数："><a href="#①、我们首先来看BaseSerilaizer的构造函数：" class="headerlink" title="①、我们首先来看BaseSerilaizer的构造函数："></a><strong>①、我们首先来看<code>BaseSerilaizer</code>的构造函数：</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, instance=<span class="hljs-literal">None</span>, data=empty, **kwargs</span>):</span><br>    self.instance = instance  <span class="hljs-comment"># model实例或普通的python对象</span><br>    <span class="hljs-keyword">if</span> data <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> empty:<br>        self.initial_data = data   <span class="hljs-comment"># 可以是HttpRequest的POST,DELETE,PUT,GET请求传进来的参数。</span><br>    self.partial = kwargs.pop(<span class="hljs-string">&#x27;partial&#x27;</span>, <span class="hljs-literal">False</span>)<br>    self._context = kwargs.pop(<span class="hljs-string">&#x27;context&#x27;</span>, &#123;&#125;)   <span class="hljs-comment"># 额外字段</span><br>    kwargs.pop(<span class="hljs-string">&#x27;many&#x27;</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-built_in">super</span>().__init__(**kwargs)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span>(<span class="hljs-params">cls, *args, **kwargs</span>):</span><br>    <span class="hljs-comment"># We override this method in order to automagically create</span><br>    <span class="hljs-comment"># `ListSerializer` classes instead when `many=True` is set.</span><br>    <span class="hljs-keyword">if</span> kwargs.pop(<span class="hljs-string">&#x27;many&#x27;</span>, <span class="hljs-literal">False</span>):<br>        <span class="hljs-keyword">return</span> cls.many_init(*args, **kwargs)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().__new__(cls, *args, **kwargs)<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>产生序列化的实例，首先会调用<code>__new__</code>内置方法，用来根据不同的参数选择我要如何实例化，这里会根据传进来的<code>many</code>参数进行选择，<code>many</code>参数表示我要序列化的对象是否是存在多个，以便创建<code>ListSerializer</code>序列化然后返回实例化对象。接下来调用<code>__init__</code>方法进行初始化，取出这些参数保存下来，但这些参数都不是必填的，拓展性很好，最后调用基类<code>Field</code>的<code>__init__</code>方法。</p><hr><h5 id="②、接下来，我们来看一些序列化器的结果是如何产生的"><a href="#②、接下来，我们来看一些序列化器的结果是如何产生的" class="headerlink" title="②、接下来，我们来看一些序列化器的结果是如何产生的"></a><strong>②、接下来，我们来看一些序列化器的结果是如何产生的</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">data</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># 如果传过来data数据，就会赋值给initial_data,但是需要经过is_valid()方法根据校验器验证后，才会将验证后的值赋给_validated_data,也就是说，传进来data参数，必须调用is_valid方法进行校验</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;initial_data&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;_validated_data&#x27;</span>):<br>            msg = (<br>                <span class="hljs-string">&#x27;When a serializer is passed a `data` keyword argument you &#x27;</span><br>                <span class="hljs-string">&#x27;must call `.is_valid()` before attempting to access the &#x27;</span><br>                <span class="hljs-string">&#x27;serialized `.data` representation.\n&#x27;</span><br>                <span class="hljs-string">&#x27;You should either call `.is_valid()` first, &#x27;</span><br>                <span class="hljs-string">&#x27;or access `.initial_data` instead.&#x27;</span><br>            )<br>            <span class="hljs-keyword">raise</span> AssertionError(msg)<br>        <span class="hljs-comment"># 如果一开始没有_data属性，而且我没有找到类中定义了_data属性，所以它总是会调用这个方法，生成新的序列化器结果</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;_data&#x27;</span>):<br>    <span class="hljs-comment"># 如果传入instances,以及没有错误产生，就对instances进行序列化，将结果发返回给_data</span><br>            <span class="hljs-keyword">if</span> self.instance <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;_errors&#x27;</span>, <span class="hljs-literal">None</span>):<br>                self._data = self.to_representation(self.instance)<br><span class="hljs-comment"># 如果传入data，以及没有错误提示，就将已经验证后的validated_data进行序列化，，将结果返回给_data</span><br>            <span class="hljs-keyword">elif</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;_validated_data&#x27;</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">getattr</span>(self, <span class="hljs-string">&#x27;_errors&#x27;</span>, <span class="hljs-literal">None</span>):<br>                self._data = self.to_representation(self.validated_data)<br><span class="hljs-comment"># 其他情况，调用self.get_initial（）方法进行_data构造</span><br>            <span class="hljs-keyword">else</span>:<br>                self._data = self.get_initial()<br>        <span class="hljs-keyword">return</span> self._data<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>很明显，data是个只读特性，通过访问self.data来获取序列化后的数据，此时回到刚才的问题，我既没有传入instances和data，只是传入了context的字典，那么可以看到我会调用<code>self._data = self.get_initial()</code>来获取数据，那么这个<code>self.get_initial()</code>又是什么呢？我们点进去看看。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>  initial = <span class="hljs-literal">None</span><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, read_only=<span class="hljs-literal">False</span>, write_only=<span class="hljs-literal">False</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">               required=<span class="hljs-literal">None</span>, default=empty, initial=empty, source=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">               label=<span class="hljs-literal">None</span>, help_text=<span class="hljs-literal">None</span>, style=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">               error_messages=<span class="hljs-literal">None</span>, validators=<span class="hljs-literal">None</span>, allow_null=<span class="hljs-literal">False</span></span>):</span><br>      self._creation_counter = Field._creation_counter<br>      Field._creation_counter += <span class="hljs-number">1</span><br><br>      <span class="hljs-comment"># If `required` is unset, then use `True` unless a default is provided.</span><br>      <span class="hljs-keyword">if</span> required <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>          required = default <span class="hljs-keyword">is</span> empty <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> read_only<br><br>      <span class="hljs-comment"># Some combinations of keyword arguments do not make sense.</span><br>      <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> (read_only <span class="hljs-keyword">and</span> write_only), NOT_READ_ONLY_WRITE_ONLY<br>      <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> (read_only <span class="hljs-keyword">and</span> required), NOT_READ_ONLY_REQUIRED<br>      <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> (required <span class="hljs-keyword">and</span> default <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> empty), NOT_REQUIRED_DEFAULT<br>      <span class="hljs-keyword">assert</span> <span class="hljs-keyword">not</span> (read_only <span class="hljs-keyword">and</span> self.__class__ == Field), USE_READONLYFIELD<br><br>      self.read_only = read_only<br>      self.write_only = write_only<br>      self.required = required<br>      self.default = default<br>      self.source = source<br><span class="hljs-comment"># 如果initial有值传进来则赋值，没有赋值为empty则赋值为None，因为类属性定义了initail为None</span><br>      self.initial = self.initial <span class="hljs-keyword">if</span> (initial <span class="hljs-keyword">is</span> empty) <span class="hljs-keyword">else</span> initial<br>      self.label = label<br>      self.help_text = help_text<br>      self.style = &#123;&#125; <span class="hljs-keyword">if</span> style <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">else</span> style<br>      self.allow_null = allow_null<br><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_initial</span>(<span class="hljs-params">self</span>):</span><br>      <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">      Return a value to use when the field is being returned as a primitive</span><br><span class="hljs-string">      value, without any object instance.</span><br><span class="hljs-string">      &quot;&quot;&quot;</span><br><span class="hljs-comment"># 完全自定义的参数，回调函数的结果为原始python数据对象</span><br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">callable</span>(self.initial):<br>          <span class="hljs-keyword">return</span> self.initial()<br>      <span class="hljs-keyword">return</span> self.initial<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">empty</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This class is used to represent no data being provided for a given input</span><br><span class="hljs-string">    or output value.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    It is required because `None` may be a valid input or output value.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>上述代码是最顶层基类<code>Field</code>的源码，首先看下它的<code>__init__</code>方法很多，这里我下先只讲下<code>initial</code>，仔细的看可以发现<code>initial</code>默认参数为empty，它是一个空类，用来消除<code>None</code>可能作为一个参数值的冲突，表示不提供任何的数据进来，其实也是赋值为None，只是None可能作为空值，也可能作为有效的值。</p><p>然后看<code>get_initial</code>获取值，我们可以很容易的发现，这个返回的值，完全就是由我们自己传进来的值进行决定的，必须是python原始数据，同时传入<code>initial</code>参数的时候，不能够传入<code>instances</code>否则，<code>initial</code>会无效。这下我豁然开朗，终于明白为什么只传入<code>context</code>根本不会产生任何的data了，因为还需要传入自定义的<code>initial</code>参数。</p><hr><h4 id="使用另外一种方法进行序列化嵌套"><a href="#使用另外一种方法进行序列化嵌套" class="headerlink" title="使用另外一种方法进行序列化嵌套"></a><strong>使用另外一种方法进行序列化嵌套</strong></h4><p>知道了上述原理后，觉得完全自定义序列化格式确实比较灵活，但是总觉得不够解耦合。所以我最终还是使用了另外一种方式。</p><p>话不多说，上代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageSerializer</span>(<span class="hljs-params">serializers.Serializer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;页数序列器&quot;&quot;&quot;</span><br><br>    page = serializers.IntegerField()<br><br>    data = serializers.SerializerMethodField()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">serializer_class</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;data serializer&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.context.get(<span class="hljs-string">&#x27;serializer&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_data</span>(<span class="hljs-params">self, obj</span>):</span><br>        instances = self.context.get(<span class="hljs-string">&#x27;instances&#x27;</span>)<br>        <span class="hljs-keyword">return</span> self.serializer_class(instances, many=<span class="hljs-literal">True</span>).data<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Page</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;the instance of page&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, page</span>):</span><br>        self.page = page<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>我采用适配器设计模式，将不同的序列化器接口融合在一起，使之满足我的需求。在这里我创建了最基本的<code>PageSerializer</code>序列化器，但是我还想添加其他的序列化器，因此采用<code>SerializerMethodField()</code>自定义序列化方法，通过<code>context</code>传入instances和serializer，针对某个serializer和它所需要的instances进行序列化。</p><p><strong>调用方法：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>instances, pages = self.get_object(user, **data)<br>page = Page(page=pages)<br>serializer = self.get_ultimate_serializer(page, context=&#123;<span class="hljs-string">&#x27;serializer&#x27;</span>: self.get_serializer_class,<br>                                                         <span class="hljs-string">&#x27;instances&#x27;</span>: instances&#125;)<br> <br></code></pre></td></tr></table></figure><p>这样我既传入了instance，确保对page进行序列化，然后又对context中的序列器进行序列化，这样就形成了最终我所需要的序列化格式。</p><hr><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a><strong>四、总结</strong></h4><p><strong>总之通常来说是要传入instance或者data参数的，不然就必须传入initial参数，一个可以回调的自定义对象。</strong></p><p><strong>看一看源码还是可以学到很多的</strong></p><p>好啦，最后再来分析下这个具体序列化的方法：<code>to_representation</code></p><p>选自Serializer类的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_representation</span>(<span class="hljs-params">self, instance</span>):</span><br> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"> Object instance -&gt; Dict of primitive datatypes.</span><br><span class="hljs-string"> &quot;&quot;&quot;</span><br> ret = OrderedDict()  <span class="hljs-comment"># 有序的字典对象</span><br> fields = self._readable_fields<br><br> <span class="hljs-keyword">for</span> field <span class="hljs-keyword">in</span> fields:<br>     <span class="hljs-keyword">try</span>:<br>         attribute = field.get_attribute(instance)  <span class="hljs-comment"># 返回该字段的原始属性值</span><br>     <span class="hljs-keyword">except</span> SkipField:<br>         <span class="hljs-keyword">continue</span><br><br>     <span class="hljs-comment"># We skip `to_representation` for `None` values so that fields do</span><br>     <span class="hljs-comment"># not have to explicitly deal with that case.</span><br>     <span class="hljs-comment">#</span><br>     <span class="hljs-comment"># For related fields with `use_pk_only_optimization` we need to</span><br>     <span class="hljs-comment"># resolve the pk value.</span><br>     check_for_none = attribute.pk <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(attribute, PKOnlyObject) <span class="hljs-keyword">else</span> attribute<br>     <span class="hljs-comment"># 检查该属性值是否为None，如果为None，设置None，否则将该字段值调用field基类的to_representation进行序列化</span><br>     <span class="hljs-keyword">if</span> check_for_none <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>         ret[field.field_name] = <span class="hljs-literal">None</span><br>     <span class="hljs-keyword">else</span>:<br>         ret[field.field_name] = field.to_representation(attribute)<br><br> <span class="hljs-keyword">return</span> ret<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
      <tag>drf</tag>
      
      <tag>序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记对DRF调用配置文件的源码分析</title>
    <link href="/2020/06/15/%E8%AE%B0%E5%AF%B9DRF%E8%B0%83%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/06/15/%E8%AE%B0%E5%AF%B9DRF%E8%B0%83%E7%94%A8%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="分析django-restful-framework配置文件调用的源码分析"><a href="#分析django-restful-framework配置文件调用的源码分析" class="headerlink" title="分析django-restful-framework配置文件调用的源码分析"></a><strong>分析django-restful-framework配置文件调用的源码分析</strong></h3><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>软件的启动的起于配置文件的调用，因此对配置文件的源码，运行机制还是需要去熟悉一下，同时通过源码也可以学习大佬们开发出框架时的设计思想是什么样的。</p><hr><h4 id="DRF的setting-py源码分析"><a href="#DRF的setting-py源码分析" class="headerlink" title="**    DRF的setting.py源码分析**"></a>**    DRF的setting.py源码分析**</h4><p>以下是DRF的setting.py中源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><code class="hljs python">DEFAULTS = &#123;<br>    <span class="hljs-comment"># Base API policies</span><br>    <span class="hljs-string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.renderers.BrowsableAPIRenderer&#x27;</span>,<br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.parsers.JSONParser&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.parsers.FormParser&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.parsers.MultiPartParser&#x27;</span><br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span><br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.permissions.AllowAny&#x27;</span>,<br>    ],<br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>: [],<br>    <span class="hljs-string">&#x27;DEFAULT_CONTENT_NEGOTIATION_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.negotiation.DefaultContentNegotiation&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_METADATA_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.metadata.SimpleMetadata&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_VERSIONING_CLASS&#x27;</span>: <span class="hljs-literal">None</span>,<br><br>    <span class="hljs-comment"># Generic view behavior</span><br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>: [],<br><br>    <span class="hljs-comment"># Schema</span><br>    <span class="hljs-string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.schemas.openapi.AutoSchema&#x27;</span>,<br><br>    <span class="hljs-comment"># Throttling</span><br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_RATES&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;user&#x27;</span>: <span class="hljs-literal">None</span>,<br>        <span class="hljs-string">&#x27;anon&#x27;</span>: <span class="hljs-literal">None</span>,<br>    &#125;,<br>    <span class="hljs-string">&#x27;NUM_PROXIES&#x27;</span>: <span class="hljs-literal">None</span>,<br><br>    <span class="hljs-comment"># Pagination</span><br>    <span class="hljs-string">&#x27;PAGE_SIZE&#x27;</span>: <span class="hljs-literal">None</span>,<br><br>    <span class="hljs-comment"># Filtering</span><br>    <span class="hljs-string">&#x27;SEARCH_PARAM&#x27;</span>: <span class="hljs-string">&#x27;search&#x27;</span>,<br>    <span class="hljs-string">&#x27;ORDERING_PARAM&#x27;</span>: <span class="hljs-string">&#x27;ordering&#x27;</span>,<br><br>    <span class="hljs-comment"># Versioning</span><br>    <span class="hljs-string">&#x27;DEFAULT_VERSION&#x27;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&#x27;ALLOWED_VERSIONS&#x27;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&#x27;VERSION_PARAM&#x27;</span>: <span class="hljs-string">&#x27;version&#x27;</span>,<br><br>    <span class="hljs-comment"># Authentication</span><br>    <span class="hljs-string">&#x27;UNAUTHENTICATED_USER&#x27;</span>: <span class="hljs-string">&#x27;django.contrib.auth.models.AnonymousUser&#x27;</span>,<br>    <span class="hljs-string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>: <span class="hljs-literal">None</span>,<br><br>    <span class="hljs-comment"># View configuration</span><br>    <span class="hljs-string">&#x27;VIEW_NAME_FUNCTION&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.views.get_view_name&#x27;</span>,<br>    <span class="hljs-string">&#x27;VIEW_DESCRIPTION_FUNCTION&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.views.get_view_description&#x27;</span>,<br><br>    <span class="hljs-comment"># Exception handling</span><br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.views.exception_handler&#x27;</span>,<br>    <span class="hljs-string">&#x27;NON_FIELD_ERRORS_KEY&#x27;</span>: <span class="hljs-string">&#x27;non_field_errors&#x27;</span>,<br><br>    <span class="hljs-comment"># Testing</span><br>    <span class="hljs-string">&#x27;TEST_REQUEST_RENDERER_CLASSES&#x27;</span>: [<br>        <span class="hljs-string">&#x27;rest_framework.renderers.MultiPartRenderer&#x27;</span>,<br>        <span class="hljs-string">&#x27;rest_framework.renderers.JSONRenderer&#x27;</span><br>    ],<br>    <span class="hljs-string">&#x27;TEST_REQUEST_DEFAULT_FORMAT&#x27;</span>: <span class="hljs-string">&#x27;multipart&#x27;</span>,<br><br>    <span class="hljs-comment"># Hyperlink settings</span><br>    <span class="hljs-string">&#x27;URL_FORMAT_OVERRIDE&#x27;</span>: <span class="hljs-string">&#x27;format&#x27;</span>,<br>    <span class="hljs-string">&#x27;FORMAT_SUFFIX_KWARG&#x27;</span>: <span class="hljs-string">&#x27;format&#x27;</span>,<br>    <span class="hljs-string">&#x27;URL_FIELD_NAME&#x27;</span>: <span class="hljs-string">&#x27;url&#x27;</span>,<br><br>    <span class="hljs-comment"># Input and output formats</span><br>    <span class="hljs-string">&#x27;DATE_FORMAT&#x27;</span>: ISO_8601,<br>    <span class="hljs-string">&#x27;DATE_INPUT_FORMATS&#x27;</span>: [ISO_8601],<br><br>    <span class="hljs-string">&#x27;DATETIME_FORMAT&#x27;</span>: ISO_8601,<br>    <span class="hljs-string">&#x27;DATETIME_INPUT_FORMATS&#x27;</span>: [ISO_8601],<br><br>    <span class="hljs-string">&#x27;TIME_FORMAT&#x27;</span>: ISO_8601,<br>    <span class="hljs-string">&#x27;TIME_INPUT_FORMATS&#x27;</span>: [ISO_8601],<br><br>    <span class="hljs-comment"># Encoding</span><br>    <span class="hljs-string">&#x27;UNICODE_JSON&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;COMPACT_JSON&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;STRICT_JSON&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;COERCE_DECIMAL_TO_STRING&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;UPLOADED_FILES_USE_URL&#x27;</span>: <span class="hljs-literal">True</span>,<br><br>    <span class="hljs-comment"># Browseable API</span><br>    <span class="hljs-string">&#x27;HTML_SELECT_CUTOFF&#x27;</span>: <span class="hljs-number">1000</span>,<br>    <span class="hljs-string">&#x27;HTML_SELECT_CUTOFF_TEXT&#x27;</span>: <span class="hljs-string">&quot;More than &#123;count&#125; items...&quot;</span>,<br><br>    <span class="hljs-comment"># Schemas</span><br>    <span class="hljs-string">&#x27;SCHEMA_COERCE_PATH_PK&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&#x27;SCHEMA_COERCE_METHOD_NAMES&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;retrieve&#x27;</span>: <span class="hljs-string">&#x27;read&#x27;</span>,<br>        <span class="hljs-string">&#x27;destroy&#x27;</span>: <span class="hljs-string">&#x27;delete&#x27;</span><br>    &#125;,<br>&#125;<br><br><br><span class="hljs-comment"># List of settings that may be in string import notation.</span><br>IMPORT_STRINGS = [<br>    <span class="hljs-string">&#x27;DEFAULT_RENDERER_CLASSES&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_PARSER_CLASSES&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_PERMISSION_CLASSES&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_THROTTLE_CLASSES&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_CONTENT_NEGOTIATION_CLASS&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_METADATA_CLASS&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_VERSIONING_CLASS&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_PAGINATION_CLASS&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_FILTER_BACKENDS&#x27;</span>,<br>    <span class="hljs-string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>,<br>    <span class="hljs-string">&#x27;EXCEPTION_HANDLER&#x27;</span>,<br>    <span class="hljs-string">&#x27;TEST_REQUEST_RENDERER_CLASSES&#x27;</span>,<br>    <span class="hljs-string">&#x27;UNAUTHENTICATED_USER&#x27;</span>,<br>    <span class="hljs-string">&#x27;UNAUTHENTICATED_TOKEN&#x27;</span>,<br>    <span class="hljs-string">&#x27;VIEW_NAME_FUNCTION&#x27;</span>,<br>    <span class="hljs-string">&#x27;VIEW_DESCRIPTION_FUNCTION&#x27;</span><br>]<br><br><br><span class="hljs-comment"># List of settings that have been removed</span><br>REMOVED_SETTINGS = [<br>    <span class="hljs-string">&#x27;PAGINATE_BY&#x27;</span>, <span class="hljs-string">&#x27;PAGINATE_BY_PARAM&#x27;</span>, <span class="hljs-string">&#x27;MAX_PAGINATE_BY&#x27;</span>,<br>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">perform_import</span>(<span class="hljs-params">val, setting_name</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    If the given setting is a string import notation,</span><br><span class="hljs-string">    then perform the necessary import or imports.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">if</span> val <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(val, <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span> import_from_string(val, setting_name)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(val, (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>)):<br>        <span class="hljs-keyword">return</span> [import_from_string(item, setting_name) <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> val]<br>    <span class="hljs-keyword">return</span> val<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">import_from_string</span>(<span class="hljs-params">val, setting_name</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Attempt to import a class from a string representation.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">return</span> import_string(val)<br>    <span class="hljs-keyword">except</span> ImportError <span class="hljs-keyword">as</span> e:<br>        msg = <span class="hljs-string">&quot;Could not import &#x27;%s&#x27; for API setting &#x27;%s&#x27;. %s: %s.&quot;</span> % (val, setting_name, e.__class__.__name__, e)<br>        <span class="hljs-keyword">raise</span> ImportError(msg)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APISettings</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A settings object, that allows API settings to be accessed as properties.</span><br><span class="hljs-string">    For example:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        from rest_framework.settings import api_settings</span><br><span class="hljs-string">        print(api_settings.DEFAULT_RENDERER_CLASSES)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Any setting with string import paths will be automatically resolved</span><br><span class="hljs-string">    and return the class, rather than the string literal.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, user_settings=<span class="hljs-literal">None</span>, defaults=<span class="hljs-literal">None</span>, import_strings=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-keyword">if</span> user_settings:<br>            self._user_settings = self.__check_user_settings(user_settings)<br>        self.defaults = defaults <span class="hljs-keyword">or</span> DEFAULTS   <span class="hljs-comment"># 如果传入自定义的配置，则使用自定义的配置参数</span><br>        self.import_strings = import_strings <span class="hljs-keyword">or</span> IMPORT_STRINGS<br>        self._cached_attrs = <span class="hljs-built_in">set</span>()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user_settings</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;获取主settings中的REST_FRAMEWORK字典配置&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;_user_settings&#x27;</span>):<br>            self._user_settings = <span class="hljs-built_in">getattr</span>(settings, <span class="hljs-string">&#x27;REST_FRAMEWORK&#x27;</span>, &#123;&#125;)<br>        <span class="hljs-keyword">return</span> self._user_settings<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getattr__</span>(<span class="hljs-params">self, attr</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;在调用属性前，将属性添加到缓存集合中&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> attr <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> self.defaults:<br>            <span class="hljs-keyword">raise</span> AttributeError(<span class="hljs-string">&quot;Invalid API setting: &#x27;%s&#x27;&quot;</span> % attr)<br><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># Check if present in user settings</span><br>            val = self.user_settings[attr]<br>        <span class="hljs-keyword">except</span> KeyError:<br>            <span class="hljs-comment"># Fall back to defaults</span><br>            <span class="hljs-comment"># 回滚属性</span><br>            val = self.defaults[attr]<br><br>        <span class="hljs-comment"># Coerce import strings into classes</span><br>        <span class="hljs-keyword">if</span> attr <span class="hljs-keyword">in</span> self.import_strings:<br>            <span class="hljs-comment"># 基于字符串的反射机制导入属性,val为模块名，attr为属性名</span><br>            val = perform_import(val, attr)<br><br>        <span class="hljs-comment"># Cache the result</span><br>        <span class="hljs-comment"># 添加到缓存中</span><br>        self._cached_attrs.add(attr)<br>        <span class="hljs-built_in">setattr</span>(self, attr, val)<br>        <span class="hljs-keyword">return</span> val<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__check_user_settings</span>(<span class="hljs-params">self, user_settings</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;检查REST_FREAMEWORK配置文件，如果存在过期的配置，抛出异常&quot;&quot;&quot;</span><br>        SETTINGS_DOC = <span class="hljs-string">&quot;https://www.django-rest-framework.org/api-guide/settings/&quot;</span><br>        <span class="hljs-keyword">for</span> setting <span class="hljs-keyword">in</span> REMOVED_SETTINGS:<br>            <span class="hljs-keyword">if</span> setting <span class="hljs-keyword">in</span> user_settings:<br>                <span class="hljs-keyword">raise</span> RuntimeError(<span class="hljs-string">&quot;The &#x27;%s&#x27; setting has been removed. Please refer to &#x27;%s&#x27; for available settings.&quot;</span> % (setting, SETTINGS_DOC))<br>        <span class="hljs-keyword">return</span> user_settings<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reload</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;重新加载配置文件，清除缓存&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">for</span> attr <span class="hljs-keyword">in</span> self._cached_attrs:<br>            <span class="hljs-built_in">delattr</span>(self, attr)<br>        self._cached_attrs.clear()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(self, <span class="hljs-string">&#x27;_user_settings&#x27;</span>):<br>            <span class="hljs-built_in">delattr</span>(self, <span class="hljs-string">&#x27;_user_settings&#x27;</span>)<br><br><br>api_settings = APISettings(<span class="hljs-literal">None</span>, DEFAULTS, IMPORT_STRINGS)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reload_api_settings</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;刷新缓存，用集合的数据结构&quot;&quot;&quot;</span><br>    setting = kwargs[<span class="hljs-string">&#x27;setting&#x27;</span>]<br>    <span class="hljs-keyword">if</span> setting == <span class="hljs-string">&#x27;REST_FRAMEWORK&#x27;</span>:<br>        api_settings.reload()<br><br><br><span class="hljs-comment"># 信号发送，setting改变，回调刷新缓存中的配置文件</span><br>setting_changed.connect(reload_api_settings)<br><br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>有些说明我已经在源码中标出来了。</p><hr><h4 id="大致说一下我的理解："><a href="#大致说一下我的理解：" class="headerlink" title="大致说一下我的理解："></a><strong>大致说一下我的理解：</strong></h4><p>DRF集成与Django框架，因此它时必须具备结合Django框架，但依然能够对Django框架拓展配置的能力。</p><p>① 所以在<code>APISettings</code>中的<code>__init__</code>初始化函数中，提供了<code>user_settings=None, defaults=None, import_strings=None</code>这些参数作为防御可变参数，提供了自定义配置的灵活性。</p><p>② <code>self.defaults = defaults or DEFAULTS</code>这样的写法，有效的提供了对自定义参数的绑定，如果<code>default</code>被传进来，那么就使用<code>default</code>，如果为<code>None</code>，那么就使用框架所设定的默认初始配置。因为框架本身需要提供一些基本的配置，以满足最基本的要求，然后需要我们根据不同的需求进行重写相关的方法，类，以及覆盖相关的配置文件。</p><p>③ <code>__getattr__</code>方法，使用的还是蛮巧妙地，在调用属性的之前增强属性添加到集合中去。如果我调用了这个一次属性，将属性添加到缓存集合中。同时调用属性基于字符串的反射机制（getattr），利用<code>importlib</code>的<code>import_module</code>方法进行模块的导入。因为配置文件中都是采用字符串的形式配置，所以要利用反射将每个模块赋给val，因此调用属性点获得的属性val不再是字符串了，而是某一个模块。</p><p>④ <code>api_settings = APISettings(None, DEFAULTS, IMPORT_STRINGS)</code>这种直接写在全局的实例化，其实也算是单例模式的一种，其他模块只需调用<code>api_settings</code>这唯一的一个实例。</p><p>⑤ <code>setting_changed.connect(reload_api_settings)</code>采用了django的信号机制，程序启动时，开启信号监听，当运行时，配置发生了改变，就会触发回调函数，删除该实例中的所有旧属性，以及清空缓存集合。</p><hr><h5 id="学一点，记录一点，积少成多，做好自己就足够了。"><a href="#学一点，记录一点，积少成多，做好自己就足够了。" class="headerlink" title="学一点，记录一点，积少成多，做好自己就足够了。"></a>学一点，记录一点，积少成多，做好自己就足够了。</h5>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
      <tag>drf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django对接支付宝的采坑之旅（详细介绍）</title>
    <link href="/2020/06/14/django%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9D%E7%9A%84%E9%87%87%E5%9D%91%E4%B9%8B%E6%97%85%EF%BC%88%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%EF%BC%89/"/>
    <url>/2020/06/14/django%E5%AF%B9%E6%8E%A5%E6%94%AF%E4%BB%98%E5%AE%9D%E7%9A%84%E9%87%87%E5%9D%91%E4%B9%8B%E6%97%85%EF%BC%88%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8D%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="django对接支付宝的采坑之旅"><a href="#django对接支付宝的采坑之旅" class="headerlink" title="django对接支付宝的采坑之旅"></a><strong>django对接支付宝的采坑之旅</strong></h3><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>自己使用Django开发的电子商城项目中订单提交支付需要对支付宝进行付款，在开发中使用alipay的接口时出现了一些问题，不过最后降低版本后，成功实现了沙箱模拟支付宝接口[[1]][1]的调用。做此笔记，记录学习过程中遇到的问题，防止以后出现同样的问题浪费时间。</p><h4 id="二、使用支付宝接口的过程"><a href="#二、使用支付宝接口的过程" class="headerlink" title="二、使用支付宝接口的过程"></a><strong>二、使用支付宝接口的过程</strong></h4><p>我所开发的环境：Python3.6+Django2.2</p><h5 id="1-安装依赖包"><a href="#1-安装依赖包" class="headerlink" title="1.安装依赖包"></a><strong>1.安装依赖包</strong></h5><p><code>pip install python-alipay-sdk==1.10.1</code></p><p>这里我选择了安装1.10.1版本的alipay包，因为一开始安装了最新版的，在创建<code>alipay</code>对象的时候出现了<code>startwith无法对bytes类型的密钥进行判断加载</code>，感到很奇怪，因为<code>startwith</code>函数在我python3.6的版本一下是针对的只有str类型。尝试了很多次后，经提点，降低了alipay的版本。因为不同版本改动还是比较大的，这才使得异常消失。</p><h5 id="2-注册成为支付宝开发者"><a href="#2-注册成为支付宝开发者" class="headerlink" title="2.注册成为支付宝开发者"></a><strong>2.注册成为支付宝开发者</strong></h5><p>首先添加应用</p><img style="width:90%" src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/VDR3%29KRV2L9%7B%29AXIQPXOQE7.png" /><p>添加应用成功后，获取到的appid，这个需要保存到项目中（稍后会提到），然后进行密钥的配置</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%5BY%5BOK1EHC%25O%249U0CKUWA%7D40.png">{:width=50%}</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/W%25ZCJGIKLZI%60PRIX68X0I_Y.png">{:width=60%}</p><h5 id="3-获取应用公私密钥以及支付宝公钥"><a href="#3-获取应用公私密钥以及支付宝公钥" class="headerlink" title="3.获取应用公私密钥以及支付宝公钥"></a><strong>3.获取应用公私密钥以及支付宝公钥</strong></h5><p>获取密钥的方式，有两种，一种是利用openssl获取密钥，另一种使用支付宝提供的密钥生成工具获取密钥。</p><p>我使用的是用支付宝开发平台助手进行密钥的生成。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/M7JJ%7D%24%28QKCRY%40%60%29J%5DC%28H9%293.png">{:width=60%}</p><p>按照上述选择后生成密钥，可以将密钥赋值下来，稍后添加到项目中使用，以及用应用公钥来获取支付宝密钥。</p><p>去开发者界面设置接口加签方式，点击设置。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/W%25ZCJGIKLZI%60PRIX68X0I_Y.png">{:width=60%}</p><p>进去后，输入应用公钥，然后获取支付宝公钥。</p><p>这里简单说一下:因为我对加密算法不是很了解，就我知道的介绍一下：</p><p>（1）公钥和私钥可以适用于非对称加密算法。公钥顾名思义，是公开的，因此公钥尝尝用来进行加密，而私钥是隐私的，只有本人知道，因此用于对公钥加密后的信息进行解密，这样就只有我拿到了我的信息，别人是拿不到的。</p><p>（2）数字签名，是由交易信息＋私钥信息计算得出的，因为数字签名隐含私钥信息，所以可以证明自己的身份。</p><h5 id="4-Django使用alipay"><a href="#4-Django使用alipay" class="headerlink" title="4.Django使用alipay"></a><strong>4.Django使用alipay</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>    app_private_key_string = <span class="hljs-built_in">open</span>(settings.APP_KEY_PRIVATE_PATH).read()<br>    alipay_public_key_string = <span class="hljs-built_in">open</span>(settings.ALIPAY_PUBLIC_KEY_PATH).read()<br><br><br><span class="hljs-meta">@property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_alipay</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 2.创建alipay对象</span><br>        alipay = AliPay(<br>            appid=settings.ALIPAY_APPID,  <span class="hljs-comment"># 创建的应用appid</span><br>            app_notify_url=settings.ALIPAY_NOTIFY_URL,  <span class="hljs-comment"># 处理支付宝回调的POST请求</span><br>            app_private_key_string=self.app_private_key_string,  <span class="hljs-comment"># 应用私钥</span><br>            alipay_public_key_string=self.alipay_public_key_string, <span class="hljs-comment"># 支付宝公钥</span><br>            sign_type=<span class="hljs-string">&quot;RSA2&quot;</span>,  <span class="hljs-comment"># 2048推荐使用RSA2非对称加密算法，1024使用RSA非对称加密算法</span><br>            debug=settings.ALIPAY_DEBUG, <span class="hljs-comment"># 是否启用调试模式，调试模式就是沙箱环境，非调试模式就是项目上线环境，两者的区别在于请求支付宝的url不同</span><br>        )<br>        <span class="hljs-keyword">return</span> alipay<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">combine_str</span>(<span class="hljs-params">alipay, order</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;assemble the url of get&quot;&quot;&quot;</span><br>        order_string = alipay.api_alipay_trade_page_pay(<br>            subject=settings.ALIPAY_SUBJECT,  <span class="hljs-comment"># 该支付界面的主题</span><br>            out_trade_no=order.orderId,  <span class="hljs-comment"># 交易编号</span><br>            total_amount=<span class="hljs-built_in">str</span>(order.total_price),  <span class="hljs-comment"># 支付总金额，类型为Decimal(),不支持序列化，需要强转成str</span><br>            return_url=settings.ALIPAY_RETURN_URL,  <span class="hljs-comment"># 支付成功后的回调地址,用于显示给用户</span><br>        )<br>        <span class="hljs-keyword">return</span> order_string<br></code></pre></td></tr></table></figure><p>以上两个方法分别是生成alipay对象，和组装url，向支付宝发送GET请求，跳转到支付界面。</p><p><strong>注：</strong></p><p>alipay2.0+ 和我当前1.10.1的版本关于Alipay的区别还是有一些的，下面是1.10.1的Alipay的部分源码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">    self,</span></span><br><span class="hljs-function"><span class="hljs-params">    appid,</span></span><br><span class="hljs-function"><span class="hljs-params">    app_notify_url,</span></span><br><span class="hljs-function"><span class="hljs-params">    app_private_key_path=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    app_private_key_string=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    alipay_public_key_path=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    alipay_public_key_string=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    sign_type=<span class="hljs-string">&quot;RSA2&quot;</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">    debug=<span class="hljs-literal">False</span></span></span><br><span class="hljs-function"><span class="hljs-params"></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    初始化:</span><br><span class="hljs-string">    alipay = AliPay(</span><br><span class="hljs-string">      appid=&quot;&quot;,</span><br><span class="hljs-string">      app_notify_url=&quot;http://example.com&quot;,</span><br><span class="hljs-string">      app_private_key_path=&quot;&quot;,</span><br><span class="hljs-string">      alipay_public_key_path=&quot;&quot;,</span><br><span class="hljs-string">      sign_type=&quot;RSA2&quot;</span><br><span class="hljs-string">    )</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    self._appid = <span class="hljs-built_in">str</span>(appid) <br>    self._app_notify_url = app_notify_url<br>    self._app_private_key_path = app_private_key_path  <span class="hljs-comment"># 2.0+版本砍掉了，需要自己从配置文件中read()出来</span><br>    self._app_private_key_string = app_private_key_string<br>    self._alipay_public_key_path = alipay_public_key_path  <span class="hljs-comment"># 2.0+版本砍掉了</span><br>    self._alipay_public_key_string = alipay_public_key_string<br><br>    self._app_private_key = <span class="hljs-literal">None</span><br>    self._alipay_public_key = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">if</span> sign_type <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;RSA&quot;</span>, <span class="hljs-string">&quot;RSA2&quot;</span>):<br>        <span class="hljs-keyword">raise</span> AliPayException(<span class="hljs-literal">None</span>, <span class="hljs-string">&quot;Unsupported sign type &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(sign_type))<br>    self._sign_type = sign_type<br><br>    <span class="hljs-keyword">if</span> debug <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>        self._gateway = <span class="hljs-string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>  <span class="hljs-comment"># 沙箱环境</span><br>    <span class="hljs-keyword">else</span>:<br>        self._gateway = <span class="hljs-string">&quot;https://openapi.alipay.com/gateway.do&quot;</span>  <span class="hljs-comment"># 上线环境</span><br><br>    <span class="hljs-comment"># load key file immediately</span><br>    self._load_key()  <span class="hljs-comment"># 加载pem密钥文件中的密钥</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_load_key</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># load private key</span><br>    content = self._app_private_key_string<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self._app_private_key_path) <span class="hljs-keyword">as</span> fp:   <span class="hljs-comment"># 2.0+版本砍掉了，直接调用content进行配置</span><br>            content = fp.read()<br>    self._app_private_key = RSA.importKey(content)  <span class="hljs-comment"># 调用RSA的非对称加密算法</span><br><br>    <span class="hljs-comment"># load public key</span><br>    content = self._alipay_public_key_string<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> content:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(self._alipay_public_key_path) <span class="hljs-keyword">as</span> fp:<br>            content = fp.read()<br>    self._alipay_public_key = RSA.importKey(content)<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>生成实例化主要过程是读取配置文件，然后进行RSA加密算法，获取加密后的密钥。</p><p>一开始我错的原因在于RSA包中的加密算法。如下是RSA加密密钥的算法的加密部分源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">import_key</span>(<span class="hljs-params">extern_key, passphrase=<span class="hljs-literal">None</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;Import an RSA key (public or private half), encoded in standard</span><br><span class="hljs-string">    form.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Args:</span><br><span class="hljs-string">      extern_key (string or byte string):</span><br><span class="hljs-string">        The RSA key to import.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        The following formats are supported for an RSA **public key**:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        - X.509 certificate (binary or PEM format)</span><br><span class="hljs-string">        - X.509 ``subjectPublicKeyInfo`` DER SEQUENCE (binary or PEM</span><br><span class="hljs-string">          encoding)</span><br><span class="hljs-string">        - `PKCS#1`_ ``RSAPublicKey`` DER SEQUENCE (binary or PEM encoding)</span><br><span class="hljs-string">        - OpenSSH (textual public key only)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        The following formats are supported for an RSA **private key**:</span><br><span class="hljs-string"></span><br><span class="hljs-string">        - PKCS#1 ``RSAPrivateKey`` DER SEQUENCE (binary or PEM encoding)</span><br><span class="hljs-string">        - `PKCS#8`_ ``PrivateKeyInfo`` or ``EncryptedPrivateKeyInfo``</span><br><span class="hljs-string">          DER SEQUENCE (binary or PEM encoding)</span><br><span class="hljs-string">        - OpenSSH (textual public key only)</span><br><span class="hljs-string"></span><br><span class="hljs-string">        For details about the PEM encoding, see `RFC1421`_/`RFC1423`_.</span><br><span class="hljs-string"></span><br><span class="hljs-string">        The private key may be encrypted by means of a certain pass phrase</span><br><span class="hljs-string">        either at the PEM level or at the PKCS#8 level.</span><br><span class="hljs-string"></span><br><span class="hljs-string">      passphrase (string):</span><br><span class="hljs-string">        In case of an encrypted private key, this is the pass phrase from</span><br><span class="hljs-string">        which the decryption key is derived.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Returns: An RSA key object (:class:`RsaKey`).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Raises:</span><br><span class="hljs-string">      ValueError/IndexError/TypeError:</span><br><span class="hljs-string">        When the given key cannot be parsed (possibly because the pass</span><br><span class="hljs-string">        phrase is wrong).</span><br><span class="hljs-string"></span><br><span class="hljs-string">    .. _RFC1421: http://www.ietf.org/rfc/rfc1421.txt</span><br><span class="hljs-string">    .. _RFC1423: http://www.ietf.org/rfc/rfc1423.txt</span><br><span class="hljs-string">    .. _`PKCS#1`: http://www.ietf.org/rfc/rfc3447.txt</span><br><span class="hljs-string">    .. _`PKCS#8`: http://www.ietf.org/rfc/rfc5208.txt</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    extern_key = tobytes(extern_key)<br>    <span class="hljs-keyword">if</span> passphrase <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        passphrase = tobytes(passphrase)<br><br>    <span class="hljs-keyword">if</span> extern_key.startswith(<span class="hljs-string">b&#x27;-----&#x27;</span>):<br>        <span class="hljs-comment"># This is probably a PEM encoded key.</span><br>        (der, marker, enc_flag) = PEM.decode(tostr(extern_key), passphrase)<br>        <span class="hljs-keyword">if</span> enc_flag:<br>            passphrase = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> _import_keyDER(der, passphrase)<br><br>    <span class="hljs-keyword">if</span> extern_key.startswith(<span class="hljs-string">b&#x27;ssh-rsa &#x27;</span>):<br>            <span class="hljs-comment"># This is probably an OpenSSH key</span><br>            keystring = binascii.a2b_base64(extern_key.split(<span class="hljs-string">b&#x27; &#x27;</span>)[<span class="hljs-number">1</span>])<br>            keyparts = []<br>            <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(keystring) &gt; <span class="hljs-number">4</span>:<br>                l = struct.unpack(<span class="hljs-string">&quot;&gt;I&quot;</span>, keystring[:<span class="hljs-number">4</span>])[<span class="hljs-number">0</span>]<br>                keyparts.append(keystring[<span class="hljs-number">4</span>:<span class="hljs-number">4</span> + l])<br>                keystring = keystring[<span class="hljs-number">4</span> + l:]<br>            e = Integer.from_bytes(keyparts[<span class="hljs-number">1</span>])  <span class="hljs-comment"># 将bytes类型的变量转为十进制</span><br>            n = Integer.from_bytes(keyparts[<span class="hljs-number">2</span>])<br>            <span class="hljs-keyword">return</span> construct([n, e])<br><br>    <span class="hljs-keyword">if</span> bord(extern_key[<span class="hljs-number">0</span>]) == <span class="hljs-number">0x30</span>:<br>            <span class="hljs-comment"># This is probably a DER encoded key</span><br>            <span class="hljs-keyword">return</span> _import_keyDER(extern_key, passphrase)<br><br>    <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;RSA key format is not supported&quot;</span>)<br><br><span class="hljs-comment"># Backward compatibility</span><br>importKey = import_key<br></code></pre></td></tr></table></figure><p><strong>说明：</strong> </p><p>alipay2.0+版本中增加了对<code>extern_key.startswith(b&#39;-----begin openssl key &#39;):</code>的判断，而问题就出在这里。</p><h5 id="5-调用支付宝接口使用的流程"><a href="#5-调用支付宝接口使用的流程" class="headerlink" title="5.调用支付宝接口使用的流程"></a><strong>5.调用支付宝接口使用的流程</strong></h5><p>下面我结合我的项目中对接支付宝的例子进行说明：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>common_logger = Logging.logger(<span class="hljs-string">&#x27;django&#x27;</span>)<br><br>order_logger = Logging.logger(<span class="hljs-string">&#x27;order_&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PaymentOperation</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    the operation of Ali payment</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    serializer_class = PaymentSerializer<br><br>    app_private_key_string = <span class="hljs-built_in">open</span>(settings.APP_KEY_PRIVATE_PATH).read()<br>    alipay_public_key_string = <span class="hljs-built_in">open</span>(settings.ALIPAY_PUBLIC_KEY_PATH).read()<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_serializer_class</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.serializer_class<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_serializer</span>(<span class="hljs-params">self, *args, **kwargs</span>):</span><br>        serializer_class = self.serializer_class<br>        <span class="hljs-keyword">return</span> serializer_class(*args, **kwargs)<br><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_alipay</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 2.创建alipay对象</span><br>        alipay = AliPay(<br>            appid=settings.ALIPAY_APPID,<br>            app_notify_url=settings.ALIPAY_NOTIFY_URL,  <span class="hljs-comment"># 处理支付宝回调的POST请求</span><br>            app_private_key_string=self.app_private_key_string,<br>            alipay_public_key_string=self.alipay_public_key_string,<br>            sign_type=<span class="hljs-string">&quot;RSA2&quot;</span>,<br>            debug=settings.ALIPAY_DEBUG,<br>        )<br>        <span class="hljs-keyword">return</span> alipay<br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">combine_str</span>(<span class="hljs-params">alipay, order</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;assemble the url of get&quot;&quot;&quot;</span><br>        order_string = alipay.api_alipay_trade_page_pay(<br>            subject=settings.ALIPAY_SUBJECT,<br>            out_trade_no=order.orderId,  <span class="hljs-comment"># 交易编号</span><br>            total_amount=<span class="hljs-built_in">str</span>(order.total_price),  <span class="hljs-comment"># 支付总金额，类型为Decimal(),不支持序列化，需要强转成str</span><br>            return_url=settings.ALIPAY_RETURN_URL,  <span class="hljs-comment"># 支付成功后的回调地址,显示给用户</span><br>        )<br>        <span class="hljs-keyword">return</span> order_string<br><br><span class="hljs-meta">    @method_decorator(<span class="hljs-params">login_required(<span class="hljs-params">login_url=<span class="hljs-string">&#x27;consumer/login/&#x27;</span></span>)</span>)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        创建订单基本信息,address,order_id</span><br><span class="hljs-string">        核对总价钱</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        user = request.user<br><br>        order = self.get_serializer_class.create_order(request, user)<br>        <span class="hljs-keyword">if</span> order <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> Response(response_code.create_order_error)<br><br>        <span class="hljs-comment"># 创建alipay对象</span><br>        alipay = self.get_alipay<br><br>        <span class="hljs-comment"># 调用方法,生成url</span><br>        <span class="hljs-comment"># 电脑网站支付，需要跳转到https://openapi.alipay.com/gateway.do? + order_string</span><br>        <span class="hljs-comment"># 字符串拼接</span><br>        order_string = self.combine_str(alipay, order)<br><br>        <span class="hljs-comment"># 4.返回url</span><br>        response_code.create_order_success.update(&#123;<span class="hljs-string">&quot;alipay_url&quot;</span>: settings.ALIPAY_GATE + order_string&#125;)<br>        <span class="hljs-keyword">return</span> Response(response_code.create_order_success)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;this function used to accept the post returned by alipay&quot;&quot;&quot;</span><br><br>        data = request.data<br>        common_logger.info(data)<br>        sign = data.get(<span class="hljs-string">&#x27;sign&#x27;</span>, <span class="hljs-literal">None</span>)<br>        alipay = self.get_alipay<br>        status = alipay.verify(data, sign)  <span class="hljs-comment"># 验证签名</span><br>        <span class="hljs-keyword">if</span> status:<br>            <span class="hljs-comment"># modify order</span><br>            common_logger.info(data.get(<span class="hljs-string">&#x27;out_trade_no&#x27;</span>))<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&#x27;成功&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&#x27;失败&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateOperation</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;receive the GET from alipay,display to user on screen&quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_out_trade_no</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-built_in">round</span>(time.time() * <span class="hljs-number">1000000</span>))<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_order</span>(<span class="hljs-params">self, order_id</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;更新订单&quot;&quot;&quot;</span><br>        Order_basic.order_basic_.update(orderId=order_id)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self, request</span>):</span><br>        data = request.GET<br>        common_logger.info(data)<br>        out_trade_no = data.get(<span class="hljs-string">&#x27;out_trade_no&#x27;</span>)<br>        total_amount = data.get(<span class="hljs-string">&#x27;total_amount&#x27;</span>)<br>        Order_basic.order_basic_.<span class="hljs-built_in">filter</span>(orderId=out_trade_no).update(status=<span class="hljs-string">&quot;2&quot;</span>, trade_number=self.get_out_trade_no)<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/order/personal_order/&#x27;</span>)<br><br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>① 首先创建alipay对象，获取前端传过来的基本数据，生成订单号（或者传过来订单号也行），创建订单基本表，以及订单详情表。</p><p>② 根据这些信息和使用的网关类型（沙箱or上线），拼接成新的url。</p><p>③ 将url返回给前端，前端进行重定向到相应的页面。</p><p>④ 用户进行付款，付款后，支付宝会回调两个请求，一个POST,一个GET只有项目正式上线，支付宝才会回调POST请求，不然只会回调GET请求（我用日志测试过，沙箱环境，接收不到POST请求）</p><p>⑤ 回调的POS或GET请求用于更新订单信息，最后返回给用户界面显示</p><p>如果还不是特别明白的话，我在网上找到了这张图，可以看下这张图</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%24L1%601S%5BA%602%7DMTRLMXM%60VQ%29P.png">{:width=90%}</p><p>参考文档：</p><p><a href="https://github.com/fzlee/alipay/blob/master/README.zh-hans.md#alipay.trade.page.pay">https://github.com/fzlee/alipay/blob/master/README.zh-hans.md#alipay.trade.page.pay</a></p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>AliPay</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax不同数据请求的类型，Django对应不同的解析</title>
    <link href="/2020/06/12/ajax%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8Cdjango%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    <url>/2020/06/12/ajax%E4%B8%8D%E5%90%8C%E6%95%B0%E6%8D%AE%E8%AF%B7%E6%B1%82%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%8Cdjango%E5%AF%B9%E5%BA%94%E4%B8%8D%E5%90%8C%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="ajax中不同数据类型对应着django不同的解析格式"><a href="#ajax中不同数据类型对应着django不同的解析格式" class="headerlink" title="ajax中不同数据类型对应着django不同的解析格式"></a><strong>ajax中不同数据类型对应着django不同的解析格式</strong></h3><p>ajax默认的数据类型为：<code>application/x-www-form-urlencoded; charset=UTF-8 </code></p><p>django默认接受前端的数据格式采用实例化生成<code>Querydict</code>实例，比如request.POST，和request.GET默认都会产生<code>Querydict</code>的实例，<code>Querydict</code>集成了字典所有的方法，但是也有一定的区别。</p><p><strong>举个例子：</strong></p><hr><h5 id="1-我前端没有加如下代码"><a href="#1-我前端没有加如下代码" class="headerlink" title="1. 我前端没有加如下代码"></a><strong>1. 我前端没有加如下代码</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">beforeSend:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req</span>)</span>&#123;<br>req.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/json&#x27;</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>比如我前端没有加这句话，意味着我默认使用<code>application/x-www-form-urlencoded</code>,这样我后端通过request.POST和request.GET进行接受，接受到的类型被转为<code>Querydict</code>实例。但是一般的话字典的键是不能重复的，因此如果遇到前端传来多个重复的键，那么<code>Querydict</code>实例会将这些键的值组合为一个列表。因此值的基本单位为列表，而不是以往的单个数值了。</p><p><strong>所以在解析的时候要注意：</strong> </p><p>① 通常要利用data.get(‘key’)[0]来获取第一个值</p><p>② 如果采用request.body来接受<code>application/x-www-form-urlencoded</code>的类型的数据的话，它会对其进行拆包成为一种二进制流的形式,形如<code>b&#39;id=2&#39;</code></p><hr><h5 id="2-我前端加指明数据类型，以及将数据转为json对象"><a href="#2-我前端加指明数据类型，以及将数据转为json对象" class="headerlink" title="2. 我前端加指明数据类型，以及将数据转为json对象"></a><strong>2. 我前端加指明数据类型，以及将数据转为json对象</strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> data = <span class="hljs-built_in">JSON</span>.stringify(&#123;<span class="hljs-string">&#x27;id&#x27;</span>:id_dom.text()&#125;);<br><br>...<br>beforeSend:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req</span>)</span>&#123;<br>req.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>,<span class="hljs-string">&#x27;application/json&#x27;</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>我前端加了这句话，意味着我的数据类型为<code>application/json</code>格式，因此我django后端解析的时候就不能使用<code>request.POST</code>了，因为它获取不到，可以使用<code>request.body</code>来获取二进制的json格式的字符串。，形如：<code>b&#39;&#123;&quot;id&quot;:&quot;2&quot;&#125;</code>毕竟数据都是以二进制流的方式在网络中传输。</p><hr><h4 id="基于django-restful-framework的数据解析方法"><a href="#基于django-restful-framework的数据解析方法" class="headerlink" title="基于django-restful-framework的数据解析方法"></a><strong>基于django-restful-framework的数据解析方法</strong></h4><p>drf中提供了一种适用于多种数据格式的中间件用来接收数据，<code>request.data</code>，他可以接收基本<code>application/x-www-form-urlencoded</code>类型的数据，采用<code>Querydict</code>实例化，或者接收<code>application/json</code>的数据格式，不过跟<code>request.body</code>结果存在着类型的差别，<code>request.data</code>获取到的json数据是已经通过<code>uft-8</code>解码好并转为python内置的字典对象了串，形如：{‘id’:’2’}而<code>request.body</code>是还未编码的<code>bytes</code>类型数据。</p><p><strong>注：</strong></p><p>如果基于<code>application/json</code>这种数据格式传输，要保证键不能相同，不然最终只会取最后一个键的值。这就相当于python字典的update方法了。</p><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><p>如果前端传过来的是POST，为了方便起见，前端通常转换成json对象，以<code>application/json</code>数据格式进行传输，drf接口开发采用request.data<br>来接收数据就行了，虽然都可以接收，但是还是要具体分清传过来的类型是什么样的，这样才好根据具体类型进行解码，解析等等！</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>前端</tag>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 查看进程的相关指令</title>
    <link href="/2020/06/12/Linux%20%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/"/>
    <url>/2020/06/12/Linux%20%E6%9F%A5%E7%9C%8B%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%9B%B8%E5%85%B3%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h4 id="1-查看总体内存消耗情况"><a href="#1-查看总体内存消耗情况" class="headerlink" title="1.查看总体内存消耗情况"></a><strong>1.查看总体内存消耗情况</strong></h4><p><code>free -h</code>  ，-h表示展现可读的格式</p><p><img src="https://javakeshe.oss-cn-beijing.aliyuncs.com/free.png">{:width=”100%”}</p><hr><h4 id="2-查看某个进程的具体情况"><a href="#2-查看某个进程的具体情况" class="headerlink" title="2.查看某个进程的具体情况"></a><strong>2.查看某个进程的具体情况</strong></h4><p>① <code>ps -ef|grep nginx</code></p><p><img src="https://javakeshe.oss-cn-beijing.aliyuncs.com/ps-ef.png">{:width=”100%”}</p><hr><p>② <code>ps aux|grep nginx</code></p><p><img src="https://javakeshe.oss-cn-beijing.aliyuncs.com/ps-aux.png">{:width=”100%”}</p><hr><p><strong>说明：</strong></p><p>ps：显示某个具体的进程<br>-ef: 显示格式化的进程内容，不包括CPU,内存占用率等<br>aux:显示完整的进程内容，包括CPU,内存占用率<br>nginx：表示具体的进程名<br>grep:表示搜索查找  </p><p><img src="https://javakeshe.oss-cn-beijing.aliyuncs.com/ps_all_ef.png">{:width=”100%”}</p><hr><p><img src="https://javakeshe.oss-cn-beijing.aliyuncs.com/ps_all_aux.png">{:width=”100%”}</p><p><strong>说明</strong></p><p>USER:表示当前的用户，root为最高级别<br>PID:为进程号<br>%CPU:表示该进程所占的CPU比例<br>%MEM:表示该进程所占的MEM比例<br>VSZ:表示进程被分配到的虚拟内存<br>RSS:表示常驻内存集的大小，也就是进程被分配到的实际内存大小，包括所有分配的堆内存和栈内存，不包括交换分区的内存<br>TTY：表示该进程运行在哪个终端上，如果与运行的终端无关，则为问号。<br>STAT:表示进程的状态<br>START:表示进程启动的时间<br>TIME:表示使用掉的CPU时间<br>COMMAND:表示启动进程所需要的命令  </p><p>由此可见aux显示的信息要比ef更丰富，aux显示的是BSD格式，而ef显示的标准格式，两者的差别不是很大，都可以用来查看进程的详细信息。</p><hr><h4 id="3-查看所有进程的信息"><a href="#3-查看所有进程的信息" class="headerlink" title="3.查看所有进程的信息"></a><strong>3.查看所有进程的信息</strong></h4><p>① <code>ps -ef</code></p><p>② <code>ps aux</code></p><p>③ <code>ps aux|grep -v pid</code></p><h4 id="4-查看前十个内存消耗最高的进程"><a href="#4-查看前十个内存消耗最高的进程" class="headerlink" title="4.查看前十个内存消耗最高的进程"></a><strong>4.查看前十个内存消耗最高的进程</strong></h4><p><img src="https://javakeshe.oss-cn-beijing.aliyuncs.com/ten-ps-memeroy.png">{:width=”100%”}</p><p>可以看得出来mysql占的内存还是多呀</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django-restful-framework的序列化器嵌套递归调用</title>
    <link href="/2020/06/11/django-restful-framework%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E5%B5%8C%E5%A5%97%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/"/>
    <url>/2020/06/11/django-restful-framework%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8%E5%B5%8C%E5%A5%97%E9%80%92%E5%BD%92%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="django接口开发，使用序列化器的嵌套调用返回Json格式数据"><a href="#django接口开发，使用序列化器的嵌套调用返回Json格式数据" class="headerlink" title="django接口开发，使用序列化器的嵌套调用返回Json格式数据"></a><strong>django接口开发，使用序列化器的嵌套调用返回Json格式数据</strong></h3><hr><h4 id="一、背景："><a href="#一、背景：" class="headerlink" title="一、背景："></a><strong>一、背景：</strong></h4><p>目前正在使用django的restful风格的接口开发，需求是实现数据流加载，后端写好接口，前端调用接口，解析json数据，动态的添加dom元素。我想要将不同的model整合在一起，进行序列化，那么如何整合这些不同的model呢？</p><hr><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a><strong>方法一：</strong></h4><p>根据官方文档找到的答案：</p><p>采用多个序列化进行嵌套：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProfileSerializer</span>(<span class="hljs-params">serializer,ModelSerializer</span>):</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>    model = profle<br>fields = <span class="hljs-string">&#x27;__all__&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserSerializer</span>(<span class="hljs-params">serializers.ModelSerializer</span>):</span><br>    profile = ProfileSerializer()  <span class="hljs-comment"># 这是为另一个序列化器</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = User<br>        fields = [<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>, <span class="hljs-string">&#x27;profile&#x27;</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span>(<span class="hljs-params">self, validated_data</span>):</span><br>        profile_data = validated_data.pop(<span class="hljs-string">&#x27;profile&#x27;</span>) <span class="hljs-comment"># 返回得是一个querydict，它继承了dict字典</span><br>        user = User.objects.create(**validated_data)<br>        Profile.objects.create(user=user, **profile_data)<br>        <span class="hljs-keyword">return</span> user<br><br></code></pre></td></tr></table></figure><hr><h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a><strong>法二：</strong></h4><p>常用的是以下这种嵌套，因为这种方法不仅可以嵌套，还可以递归调用序列化器，只需要在<code>get_commodity</code>中返回的是当前这个序列化器，就可以了，可以用于评论的多级递归序列化调用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order_detailsSerializer</span>(<span class="hljs-params">serializers.ModelSerializer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    订单商品详情序列化容器</span><br><span class="hljs-string">    The serializer of Order_details which used to combine with Order_basic</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    commodity = serializers.SerializerMethodField()  <span class="hljs-comment"># 商品细节</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_commodity</span>(<span class="hljs-params">self, obj</span>):</span><br>        commodity = Commodity.commodity_.<span class="hljs-built_in">filter</span>(order_details=obj.pk)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(commodity) &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> CommoditySerializer(commodity, many=<span class="hljs-literal">True</span>).data<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Order_details<br>        fields = (<span class="hljs-string">&#x27;price&#x27;</span>, <span class="hljs-string">&#x27;commodity&#x27;</span>, <span class="hljs-string">&#x27;commodity_counts&#x27;</span>)<br></code></pre></td></tr></table></figure><p>使用<code>serializers.SerializerMethodField()</code>指明所要嵌套的字段。然后重写<code>get_commodity</code>的方法，获取另一个序列化器的数据，作为该字段的值。</p><p>这样一来，我就可以序列化多个model，组成json格式的数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JSON">[<br>    &#123;<br>        <span class="hljs-attr">&quot;order_id&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;trade_number&quot;</span>: <span class="hljs-string">&quot;102301230213021&quot;</span>,<br>        <span class="hljs-attr">&quot;total_price&quot;</span>: <span class="hljs-string">&quot;9999.0&quot;</span>,<br>        <span class="hljs-attr">&quot;commodity_total_counts&quot;</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">&quot;generate_time&quot;</span>: <span class="hljs-string">&quot;2020-05-26T15:07:08&quot;</span>,<br>        <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>,<br>        <span class="hljs-attr">&quot;order_details&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;50.00&quot;</span>,<br>                <span class="hljs-attr">&quot;commodity&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">&quot;store_name&quot;</span>: <span class="hljs-string">&quot;店铺1&quot;</span>,<br>                        <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;貂皮大衣&quot;</span>,<br>                        <span class="hljs-attr">&quot;intro&quot;</span>: <span class="hljs-string">&quot;舒适的不要不要的&quot;</span>,<br>                        <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;衣服&quot;</span>,<br>                        <span class="hljs-attr">&quot;discounts&quot;</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">&quot;freight&quot;</span>: <span class="hljs-number">0</span>,<br>                        <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>                    &#125;<br>                ],<br>                <span class="hljs-attr">&quot;commodity_counts&quot;</span>: <span class="hljs-number">25</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;100.00&quot;</span>,<br>                <span class="hljs-attr">&quot;commodity&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">&quot;store_name&quot;</span>: <span class="hljs-string">&quot;店铺1&quot;</span>,<br>                        <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;貂皮大衣&quot;</span>,<br>                        <span class="hljs-attr">&quot;intro&quot;</span>: <span class="hljs-string">&quot;舒适的不要不要的&quot;</span>,<br>                        <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;衣服&quot;</span>,<br>                        <span class="hljs-attr">&quot;discounts&quot;</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">&quot;freight&quot;</span>: <span class="hljs-number">0</span>,<br>                        <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>                    &#125;<br>                ],<br>                <span class="hljs-attr">&quot;commodity_counts&quot;</span>: <span class="hljs-number">25</span><br>            &#125;<br>        ]<br>    &#125;,<br></code></pre></td></tr></table></figure><hr><h4 id="二、自定义序列化格式"><a href="#二、自定义序列化格式" class="headerlink" title="二、自定义序列化格式"></a><strong>二、自定义序列化格式</strong></h4><p>但问题又来了，我之前设计数据表的时候，针对choices字段的二元祖，我为了减少数据库的字段所使用的数据类型大小，采用1个字节的字符串来代替具体的汉子，比如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 订单状态</span><br>status_choice = (<br>    (<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&#x27;代付款&#x27;</span>),  <span class="hljs-comment"># 用户提交订单，尚未付款，此时会锁定库存</span><br>    (<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&#x27;代发货&#x27;</span>),  <span class="hljs-comment"># 用户付款后，等待商家接单前</span><br>    (<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&#x27;交易成功&#x27;</span>),  <span class="hljs-comment"># 用户确认收货之后，订单完成交易</span><br>    (<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&#x27;已取消&#x27;</span>),  <span class="hljs-comment"># 付款前取消订单</span><br>    (<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&#x27;售后中&#x27;</span>),  <span class="hljs-comment"># 商家发货或付款后，用户取消订单</span><br>    (<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&#x27;交易关闭&#x27;</span>),  <span class="hljs-comment"># 取消订单或售后结束都转移到交易关闭</span><br>)<br><br></code></pre></td></tr></table></figure><p>但是<code>status</code>在已经序列化JSON格式中为”1”，而不是可读的汉子，因此我还需要针对该字段进行自定义序列化。</p><p>具体的方法有两种：</p><hr><h5 id="法一："><a href="#法一：" class="headerlink" title="法一："></a><strong>法一：</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order_basicSerializer</span>(<span class="hljs-params">serializers.ModelSerializer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;订单序列化容器&quot;&quot;&quot;</span><br><br>    order_details = serializers.SerializerMethodField()  <span class="hljs-comment"># 递归嵌套序列化器，订单细节</span><br><br>    status = serializers.SerializerMethodField()  <span class="hljs-comment"># 获取可读的status</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_status</span>(<span class="hljs-params">self, obj</span>):</span><br>        <span class="hljs-keyword">return</span> obj.get_status_display()<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong>同样采用<code>serializers.SerializerMethodField()</code>方法指定字段，然后通过<code>get_status</code>方法获取可读字段。这种方法适用于不同的序列化器中，比较灵活，但如果多个序列化器都要获取某一个字段的可读形式，代码量就比较多了。因此还有第二种方法。</p><hr><h5 id="法二：-1"><a href="#法二：-1" class="headerlink" title="法二："></a><strong>法二：</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChoiceDisplayField</span>(<span class="hljs-params">serializers.ChoiceField</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">to_representation</span>(<span class="hljs-params">self, value</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;针对value(choice)转成我们需要的格式&quot;&quot;&quot;</span><br><span class="hljs-comment"># value为从数据库中读出来的序列化之前的值，比如“1”</span><br>        <span class="hljs-keyword">return</span> self.choices[value]<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Order_basicSerializer</span>(<span class="hljs-params">serializers.ModelSerializer</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;订单序列化容器&quot;&quot;&quot;</span><br><span class="hljs-comment"># 订单状态</span><br>    status_choice = (<br>        (<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&#x27;代付款&#x27;</span>),  <span class="hljs-comment"># 用户提交订单，尚未付款，此时会锁定库存</span><br>        (<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&#x27;代发货&#x27;</span>),  <span class="hljs-comment"># 用户付款后，等待商家接单前</span><br>        (<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&#x27;交易成功&#x27;</span>),  <span class="hljs-comment"># 用户确认收货之后，订单完成交易</span><br>        (<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&#x27;已取消&#x27;</span>),  <span class="hljs-comment"># 付款前取消订单</span><br>        (<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&#x27;售后中&#x27;</span>),  <span class="hljs-comment"># 商家发货或付款后，用户取消订单</span><br>        (<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&#x27;交易关闭&#x27;</span>),  <span class="hljs-comment"># 取消订单或售后结束都转移到交易关闭</span><br>    )<br>    status = ChoiceDisplayField(choices=status_choice)<br>   <br></code></pre></td></tr></table></figure><p>说明：这种方法通过自定义序列化，获取choice中的可读字段值。这种方法好处在于自定义的序列化类可以重用，但是需要冗余选择项，类似status_choice，特别是在继承了<code>serializers.ModelSerializer</code>后。</p><p>这样：经过序列化后，就可以返回可读的status。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs JSON">[<br>    &#123;<br>        <span class="hljs-attr">&quot;order_id&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;trade_number&quot;</span>: <span class="hljs-string">&quot;102301230213021&quot;</span>,<br>        <span class="hljs-attr">&quot;total_price&quot;</span>: <span class="hljs-string">&quot;9999.0&quot;</span>,<br>        <span class="hljs-attr">&quot;commodity_total_counts&quot;</span>: <span class="hljs-number">100</span>,<br>        <span class="hljs-attr">&quot;generate_time&quot;</span>: <span class="hljs-string">&quot;2020-05-26T15:07:08&quot;</span>,<br>        <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-string">&quot;代付款&quot;</span>,<br>        <span class="hljs-attr">&quot;order_details&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;50.00&quot;</span>,<br>                <span class="hljs-attr">&quot;commodity&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">&quot;store_name&quot;</span>: <span class="hljs-string">&quot;店铺1&quot;</span>,<br>                        <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;貂皮大衣&quot;</span>,<br>                        <span class="hljs-attr">&quot;intro&quot;</span>: <span class="hljs-string">&quot;舒适的不要不要的&quot;</span>,<br>                        <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;衣服&quot;</span>,<br>                        <span class="hljs-attr">&quot;discounts&quot;</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">&quot;freight&quot;</span>: <span class="hljs-number">0</span>,<br>                        <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>                    &#125;<br>                ],<br>                <span class="hljs-attr">&quot;commodity_counts&quot;</span>: <span class="hljs-number">25</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-string">&quot;100.00&quot;</span>,<br>                <span class="hljs-attr">&quot;commodity&quot;</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">&quot;store_name&quot;</span>: <span class="hljs-string">&quot;店铺1&quot;</span>,<br>                        <span class="hljs-attr">&quot;commodity_name&quot;</span>: <span class="hljs-string">&quot;貂皮大衣&quot;</span>,<br>                        <span class="hljs-attr">&quot;intro&quot;</span>: <span class="hljs-string">&quot;舒适的不要不要的&quot;</span>,<br>                        <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;衣服&quot;</span>,<br>                        <span class="hljs-attr">&quot;discounts&quot;</span>: <span class="hljs-literal">false</span>,<br>                        <span class="hljs-attr">&quot;freight&quot;</span>: <span class="hljs-number">0</span>,<br>                        <span class="hljs-attr">&quot;image&quot;</span>: <span class="hljs-literal">null</span><br>                    &#125;<br>                ],<br>                <span class="hljs-attr">&quot;commodity_counts&quot;</span>: <span class="hljs-number">25</span><br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>restful</tag>
      
      <tag>drf</tag>
      
      <tag>序列化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC使用Redis的get方法产生反序列化的异常（已解决））</title>
    <link href="/2020/06/09/springmvc%E4%BD%BF%E7%94%A8redis%E7%9A%84get%E6%96%B9%E6%B3%95%E4%BA%A7%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%BC%82%E5%B8%B8%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89%EF%BC%89/"/>
    <url>/2020/06/09/springmvc%E4%BD%BF%E7%94%A8redis%E7%9A%84get%E6%96%B9%E6%B3%95%E4%BA%A7%E7%94%9F%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E5%BC%82%E5%B8%B8%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="RedisTemplate的get方法的反序列化的异常处理"><a href="#RedisTemplate的get方法的反序列化的异常处理" class="headerlink" title="RedisTemplate的get方法的反序列化的异常处理"></a><strong>RedisTemplate的get方法的反序列化的异常处理</strong></h3><hr><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>使用redis的<strong>哈希表</strong>实现投票功能的统计，在get数据时，产生了反序列化的问题。</p><p>产生异常的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// get the number of praise and oppose and abandon of vote</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">statistic_vote</span><span class="hljs-params">(String pid)</span></span>&#123;<br>        HashOperations&lt;String,String,Object&gt; votes_redis = redisTemplate.opsForHash();<br>        Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">try</span>&#123;<br>            result.put(<span class="hljs-string">&quot;praise&quot;</span>,votes_redis.get(pid,<span class="hljs-string">&quot;praise&quot;</span>));<br>            result.put(<span class="hljs-string">&quot;oppose&quot;</span>,votes_redis.get(pid,<span class="hljs-string">&quot;oppose&quot;</span>));<br>            result.put(<span class="hljs-string">&quot;abandon&quot;</span>,votes_redis.get(pid,<span class="hljs-string">&quot;abandon&quot;</span>));<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>        <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">`org.springframework.data.redis.serializer.SerializationException: Cannot deserialize; nested exception is org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the <span class="hljs-keyword">byte</span> array a result of corresponding serialization <span class="hljs-keyword">for</span> DefaultDeserializer?; nested exception is java.io.EOFException<br>at org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize(JdkSerializationRedisSerializer.java:<span class="hljs-number">84</span>)<br>at org.springframework.data.redis.core.AbstractOperations.deserializeHashValue(AbstractOperations.java:<span class="hljs-number">354</span>)<br>at org.springframework.data.redis.core.DefaultHashOperations.get(DefaultHashOperations.java:<span class="hljs-number">55</span>)<br>at com.syz.util.RedisImpl.statistic_vote(RedisImpl.java:<span class="hljs-number">88</span>)<br>at com.syz.controller.MainsiteController.vote_result(MainsiteController.java:<span class="hljs-number">139</span>)<br>at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)<br>at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="hljs-number">62</span>)<br>at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="hljs-number">43</span>)<br>at java.lang.reflect.Method.invoke(Method.java:<span class="hljs-number">498</span>)<br>at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:<span class="hljs-number">190</span>)<br>at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:<span class="hljs-number">138</span>)<br>at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:<span class="hljs-number">105</span>)<br>at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:<span class="hljs-number">879</span>)<br>at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:<span class="hljs-number">793</span>)<br>at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:<span class="hljs-number">87</span>)<br>at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:<span class="hljs-number">1040</span>)<br>at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:<span class="hljs-number">943</span>)<br>at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:<span class="hljs-number">1006</span>)<br>at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:<span class="hljs-number">898</span>)<br>at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="hljs-number">634</span>)<br>at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:<span class="hljs-number">883</span>)<br>at javax.servlet.http.HttpServlet.service(HttpServlet.java:<span class="hljs-number">741</span>)<br>`<br></code></pre></td></tr></table></figure><p>根据异常，可以初步判断是由于spring使用了默认的<code>DefaultDeserializer</code>反序列化器，也就是使用了<code>org.springframework.data.redis.serializer.JdkSerializationRedisSerializer.deserialize</code>这个反序列器，产生了异常，使得序列化和反序列化的方法不一致。</p><hr><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><strong>解决方法：</strong></h4><p>在redis的xml配置文件中增加如下的序列化器</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;context:property-placeholder location=<span class="hljs-string">&quot;classpath:redis.properties&quot;</span> /&gt;<br>    &lt;bean id=<span class="hljs-string">&quot;redisTemplate&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.data.redis.core.RedisTemplate&quot;</span>&gt;<br>        &lt;property name=<span class="hljs-string">&quot;connectionFactory&quot;</span>  ref=<span class="hljs-string">&quot;jedisConnFactory&quot;</span> /&gt;<br>        &lt;!--序列化，不然报ERR hash value is not an integer;错，不能使用increment--&gt;<br>        &lt;property name=<span class="hljs-string">&quot;keySerializer&quot;</span>&gt;<br>            &lt;bean <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;<br>        &lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;valueSerializer&quot;</span>&gt;<br>            &lt;bean <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;<br>        &lt;/property&gt;<br>    &lt;/bean&gt;<br></code></pre></td></tr></table></figure><p>增加了之后，重启服务器运行，仍产报反序列化的异常，可是我上面明明改了呀。经过仔细的检查代码，发现我是用的是散列表存储，而不是简单的key-value键值对，哎哟，简单的key-value满足不了散列表，因此我们还得添加针对hash表的序列化器的配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>&lt;property name=<span class="hljs-string">&quot;hashKeySerializer&quot;</span>&gt;<br>            &lt;bean <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;<br>        &lt;/property&gt;<br>        &lt;property name=<span class="hljs-string">&quot;hashValueSerializer&quot;</span>&gt;<br>            &lt;bean <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;org.springframework.data.redis.serializer.StringRedisSerializer&quot;</span>/&gt;<br>        &lt;/property&gt;<br><br></code></pre></td></tr></table></figure><p>增加hashKey的序列化器，重启服务器后，运行正常~</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/redis1.png" alt="redis正确截图" title="redis正确截图"></p><p>如果正常的话，显示在redis中的将是正常的编码，否则序列化不对就会产生奇怪的符号。</p><hr><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结：</strong></h4><p>1、稍微总结一下，对于序列化和反序列化，一定要保证我用什么类型序列化，我就要用相对应的类型反序列化，不然类型不对，就会报错。</p><p>2、对于redis中increment的方法，获取其值时，它没有被反序列化，因此不会报错，但是使用get方法，获取值时，就需要反序列化了，不然就会报错。</p><p>3、对于put，get方法，键值对都要为String的类型，如果直接put的值为整型的话，会出现Long无法转换成String的异常。</p><p>4、要对键和值都进行序列化，这样才能获得正确的数据</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java使用Redis报ERR hash value is not an integer（已解决）</title>
    <link href="/2020/06/08/java%E4%BD%BF%E7%94%A8redis%E6%8A%A5ERR%20hash%20value%20is%20not%20an%20integer%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/06/08/java%E4%BD%BF%E7%94%A8redis%E6%8A%A5ERR%20hash%20value%20is%20not%20an%20integer%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC上传文件异常（已解决）</title>
    <link href="/2020/06/08/srpingmvc%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/06/08/srpingmvc%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E5%BC%82%E5%B8%B8%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="SpringMVC-文件上传报“由于没有提供multi-part配置，无法处理parts"><a href="#SpringMVC-文件上传报“由于没有提供multi-part配置，无法处理parts" class="headerlink" title="SpringMVC 文件上传报“由于没有提供multi-part配置，无法处理parts"></a><strong>SpringMVC 文件上传报“由于没有提供multi-part配置，无法处理parts</strong></h4><p><strong>解决方案：</strong></p><p>在<code>web.xml</code>的servlet的标签中添加<code>multipart-config</code>的配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;servlet&gt;<br>  &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;<br>  &lt;servlet-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;</span><br><span class="hljs-class">    <span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">servlet</span>.<span class="hljs-title">DispatcherServlet</span></span><br><span class="hljs-class">  &lt;/<span class="hljs-title">servlet</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">  &lt;<span class="hljs-title">init</span>-<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">param</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">contextConfigLocation</span>&lt;/<span class="hljs-title">param</span>-<span class="hljs-title">name</span>&gt;</span><br>    &lt;param-value&gt;classpath:springMVC.xml&lt;/param-value&gt;<br>  &lt;/init-param&gt;<br>  &lt;!--监听器，值越小，servlet的优先级越高--&gt;<br>  &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;<br><br>  &lt;!--添加如下配置--&gt;<br>  &lt;multipart-config&gt;<br>    &lt;max-file-size&gt;20848820&lt;/max-file-size&gt;<br>    &lt;max-request-size&gt;418018841&lt;/max-request-size&gt;<br>    &lt;file-size-threshold&gt;1048576&lt;/file-size-threshold&gt;<br>  &lt;/multipart-config&gt;<br><br>&lt;/servlet&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring和SpringMVC搭配注解扫描的冲突</title>
    <link href="/2020/06/07/spring%E5%92%8Cspringmvc%E6%90%AD%E9%85%8D%E6%B3%A8%E8%A7%A3%E6%89%AB%E6%8F%8F%E7%9A%84%E5%86%B2%E7%AA%81/"/>
    <url>/2020/06/07/spring%E5%92%8Cspringmvc%E6%90%AD%E9%85%8D%E6%B3%A8%E8%A7%A3%E6%89%AB%E6%8F%8F%E7%9A%84%E5%86%B2%E7%AA%81/</url>
    
    <content type="html"><![CDATA[<h4 id="spring和springmvc搭配时注解扫描的冲突问题"><a href="#spring和springmvc搭配时注解扫描的冲突问题" class="headerlink" title="spring和springmvc搭配时注解扫描的冲突问题"></a><strong>spring和springmvc搭配时注解扫描的冲突问题</strong></h4><p>因为两者是父子容器的关系，所以采用注解扫描的时候，应该区分不同层使用不同的扫描，一般spring扫描dao层和service层，而springmvc扫描controller层。</p><hr><p>因此有两种解决办法：</p><h5 id="法一"><a href="#法一" class="headerlink" title="法一:"></a><strong>法一:</strong></h5><p>在springMVC的配置文件中，只过滤其扫描controller层。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>&lt;contex:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.syz&quot;</span>&gt;<br>        &lt;contex:include-filter type=<span class="hljs-string">&quot;annotation&quot;</span> expression=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span> /&gt;<br>        &lt;contex:include-filter type=<span class="hljs-string">&quot;annotation&quot;</span> expression=<span class="hljs-string">&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot;</span> /&gt;<br>&lt;/contex:component-scan&gt;<br></code></pre></td></tr></table></figure><hr><h5 id="法二："><a href="#法二：" class="headerlink" title="法二："></a><strong>法二：</strong></h5><p>在spring的配置文件中，排除扫描controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;context:component-scan base-<span class="hljs-keyword">package</span>=<span class="hljs-string">&quot;com.syz&quot;</span>&gt;<br>    &lt;!--防止出现control无法拦截的情况,bean被多次加载--&gt;<br>    &lt;context:exclude-filter type=<span class="hljs-string">&quot;annotation&quot;</span> expression=<span class="hljs-string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;<br>    &lt;context:exclude-filter type=<span class="hljs-string">&quot;annotation&quot;</span> expression=<span class="hljs-string">&quot;org.springframework.web.bind.annotation.RestController&quot;</span>/&gt;<br><br>&lt;/context:component-scan&gt;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax异步动态增加dom元素，为其绑定事件的问题（已解决）</title>
    <link href="/2020/06/05/ajax%E5%BC%82%E6%AD%A5%E5%8A%A8%E6%80%81%E5%A2%9E%E5%8A%A0dom%E5%85%83%E7%B4%A0%EF%BC%8C%E4%B8%BA%E5%85%B6%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/06/05/ajax%E5%BC%82%E6%AD%A5%E5%8A%A8%E6%80%81%E5%A2%9E%E5%8A%A0dom%E5%85%83%E7%B4%A0%EF%BC%8C%E4%B8%BA%E5%85%B6%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="使用ajax异步请求，动态增加dom元素，然后为元素绑定事件失败的小问题"><a href="#使用ajax异步请求，动态增加dom元素，然后为元素绑定事件失败的小问题" class="headerlink" title="使用ajax异步请求，动态增加dom元素，然后为元素绑定事件失败的小问题"></a><strong>使用ajax异步请求，动态增加dom元素，然后为元素绑定事件失败的小问题</strong></h3><hr><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>采用layui的流加载后，动态添加dom元素，添加元素后，打算为其中的某个元素绑定click事件，一开始采用了普通的click事件进行处理，发现找不到该dom元素，难道是元素在绑定事件前还没有加载？</p><hr><h4 id="二、原因分析"><a href="#二、原因分析" class="headerlink" title="二、原因分析"></a><strong>二、原因分析</strong></h4><p>原因正和我猜的一样，在绑定事件的时候，找不到dom元素，因为它是后添加上去的。因此<code>$(dom).click(function()&#123;&#125;)</code>就找不到对应的dom元素，在网上找了一阵子，发现了两个函数可以解决。</p><hr><h4 id="三、解决方案"><a href="#三、解决方案" class="headerlink" title="三、解决方案"></a><strong>三、解决方案</strong></h4><p>1.<code>live()</code>函数，不过比较过时了，这里就不说了。</p><p>2.<code>on()</code>函数。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/jquery_on.png" alt="on函数的介绍" title="on函数的介绍"></p><p><strong>举个例子：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.order-list-all&quot;</span>).on(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-string">&#x27;.delete_order&#x27;</span>,<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">let</span> othis = $(<span class="hljs-built_in">this</span>);<br>delete_order(othis);<br>&#125;);<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p><code>.order-list-all</code>是本来就存在window对象中的dom元素，而<code>.delete_order</code>是我动态添加的一个dom元素。这样就可以为当前或者未来的元素绑定事件啦。而不应该用<code>$(&quot;.order-list-all&quot;).click(function()&#123;&#125;)</code>。</p><p><strong>注：</strong></p><p>这个函数主要用于ajax异步加载和js动态添加dom中。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ajax</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC中删除session的小问题</title>
    <link href="/2020/06/03/springmvc%E4%B8%AD%E5%88%A0%E9%99%A4session%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2020/06/03/springmvc%E4%B8%AD%E5%88%A0%E9%99%A4session%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="springmvc中使用-SessionAttributes后删除session失效的问题"><a href="#springmvc中使用-SessionAttributes后删除session失效的问题" class="headerlink" title="springmvc中使用@SessionAttributes后删除session失效的问题"></a><strong>springmvc中使用@SessionAttributes后删除session失效的问题</strong></h4><hr><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>继上篇文章使用<code>@SessionAttributes</code>后，获取相应的session的问题解决后，在项目中出现了登出删除session的需求，我使用了<code>sessionStatus.setComplete();</code>，这样做目的是清除该条记录，因为要删除<code>@SessionAttributes</code>中的session值，必须采用上述代码进行删除，但是很遗憾，我还是没有完全理解springmvc中的session，因为springmvc实现session的模块有很多。</p><hr><h4 id="二、解决方案"><a href="#二、解决方案" class="headerlink" title="二、解决方案"></a><strong>二、解决方案</strong></h4><p>尽管我是用<code>sessionStatus.setComplete();</code>，删除了<code>@SessionAttributes</code>中的session之后，在<code>HttpSession</code>中还是有session存在的，并没有删除HttpSession中的session，这就会导致我在jsp页面中使用EL表达式，仍然能获取session中的值，因此我必须彻底删除所有的session。</p><hr><h4 id="三：代码："><a href="#三：代码：" class="headerlink" title="三：代码："></a><strong>三：代码：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(value = &quot;/login_out&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">login_out</span><span class="hljs-params">(HttpSession session, SessionStatus sessionStatus)</span></span>&#123;<br>        session.removeAttribute(<span class="hljs-string">&quot;resident&quot;</span>);   <span class="hljs-comment">// remove session from HttpSession</span><br>        session.invalidate();    <span class="hljs-comment">// make HttpSession invalidate</span><br>        sessionStatus.setComplete();  <span class="hljs-comment">// clear all information in current session</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login&quot;</span>;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p><code>session.removeAttribute(&quot;resident&quot;); </code>用来移除HttpSession中的相应session键值。</p><p><code>session.invalidate();</code> 用来使HttpSession失效。</p><p><code>sessionStatus.setComplete();</code>最后执行，删除<code>@SessionAttributes</code>提供的session。</p><p>这样就可以彻底删除session了，在jsp中也获取不到相应的session值。</p><hr><p>参考博客：</p><p><a href="https://blog.csdn.net/s740556472/article/details/71275328?utm_source=blogxgwz9">https://blog.csdn.net/s740556472/article/details/71275328?utm_source=blogxgwz9</a></p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC请求中文出现乱码的问题（已解决)</title>
    <link href="/2020/06/03/springmvc%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%96%87%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3)/"/>
    <url>/2020/06/03/springmvc%E8%AF%B7%E6%B1%82%E4%B8%AD%E6%96%87%E5%87%BA%E7%8E%B0%E4%B9%B1%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3)/</url>
    
    <content type="html"><![CDATA[<h4 id="springmvc接受前端的POST和get请求的时候出现乱码问题"><a href="#springmvc接受前端的POST和get请求的时候出现乱码问题" class="headerlink" title="springmvc接受前端的POST和get请求的时候出现乱码问题"></a><strong>springmvc接受前端的POST和get请求的时候出现乱码问题</strong></h4><hr><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>springmvc的坑还是蛮多的，项目做着做着一不小心就掉坑里了，这次的坑就是编码的问题。</p><p>首先举个2个栗子吧~</p><p><strong>第一个例子：使用普通的Request接收参数</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">// Identity card verification registration</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/register_api&quot;, produces = &quot;application/json;charset=utf-8&quot;)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title">register</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;image&quot;)</span> MultipartFile image, HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException </span>&#123;<br>    Map&lt;String, Object&gt; result = <span class="hljs-keyword">new</span> HashMap&lt;String, Object&gt;();<br>    String district = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;district&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br>    String identity = <span class="hljs-keyword">new</span> String(request.getParameter(<span class="hljs-string">&quot;identity&quot;</span>).getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);;<br>    System.out.println(district);<br>    System.out.println(identity);<br>    ApplicationContext ac = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;springMVC.xml&quot;</span>);<br>    ocr = (OcrIdCard) ac.getBean(<span class="hljs-string">&quot;ocr&quot;</span>);<br>    register = (Register) ac.getBean(<span class="hljs-string">&quot;register&quot;</span>);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">byte</span>[] imageBytes = image.getBytes();<br>        <span class="hljs-keyword">boolean</span> is_success = ocr.identification(imageBytes);<br><br>        resident = ocr.set_resident(district,identity);<br>        <span class="hljs-keyword">boolean</span> add_success = register.register(resident);<br>        <span class="hljs-comment">// whether identify successfully</span><br>        <span class="hljs-keyword">if</span> (is_success &amp;&amp; add_success) &#123;<br>            result.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">20</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Exception();<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        result.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">500</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>第二个例子：使用@RequestBody封装成实体类的例子</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RequestMapping(value = &quot;/login_api&quot;,consumes=&quot;application/json&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Resident resident, HttpServletRequest request,ModelMap modelMap)</span></span>&#123;<br>        <span class="hljs-comment">//Accept data as entity class</span><br>        Map&lt;String,Object&gt; result = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>        ApplicationContext ac = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;springMVC.xml&quot;</span>);<br>        <span class="hljs-comment">// login interface</span><br>        encrypt(resident);<br>        Login login_ = (Login) ac.getBean(<span class="hljs-string">&quot;login&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> is_success = login_.login(modelMap,resident);<br>        <span class="hljs-keyword">if</span> (is_success)&#123;<br>            result.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">12</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            result.put(<span class="hljs-string">&quot;code&quot;</span>,-<span class="hljs-number">12</span>);<br>        &#125; <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.比较上述两个例子，相信细心的你肯定发现了区别，第一个例子中我采用<code>HttpServletRequest</code>来接收参数，此时，接受到的中文出现了乱码，于是我是用了utf-8进行编码。</p><p><code>String district = new String(request.getParameter(&quot;district&quot;).getBytes(&quot;ISO8859-1&quot;),&quot;utf-8&quot;);</code></p><p><code>String identity = new String(request.getParameter(&quot;identity&quot;).getBytes(&quot;ISO8859-1&quot;),&quot;utf-8&quot;);</code></p><p>2.第二个例子中，我采用<code>@Requestbody</code>注解的方式将参数封装成实体类，我猜想应该springmvc在底层在封装参数的时候应该为我们进行了编码，从而这个例子中中文不会出现乱码。</p><p>3.说道第一种解决乱码的方法，其实有3种，只不过博主我前两种使用后不知为何仍出现乱码，于是最终拿出了比较麻烦的方法，手动对每个参数进行编码调整。</p><p><strong>另外两种方法在这里说明一下，以便以后遇到可以参考。</strong></p><hr><h4 id="法一："><a href="#法一：" class="headerlink" title="法一："></a><strong>法一：</strong></h4><p>修改web.xml中的配置文件，将编码统一转化成’utf-8’的编码。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>&lt;filter&gt;<br>    &lt;filter-name&gt;characterEncodingFilter&lt;/filter-name&gt;<br>    &lt;filter-<span class="hljs-class"><span class="hljs-keyword">class</span>&gt;<span class="hljs-title">org</span>.<span class="hljs-title">springframework</span>.<span class="hljs-title">web</span>.<span class="hljs-title">filter</span>.<span class="hljs-title">CharacterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">class</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">init</span>-<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">param</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">encoding</span>&lt;/<span class="hljs-title">param</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">param</span>-<span class="hljs-title">value</span>&gt;<span class="hljs-title">UTF</span>-8&lt;/<span class="hljs-title">param</span>-<span class="hljs-title">value</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">init</span>-<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">init</span>-<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">param</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">forceEncoding</span>&lt;/<span class="hljs-title">param</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">      &lt;<span class="hljs-title">param</span>-<span class="hljs-title">value</span>&gt;<span class="hljs-title">true</span>&lt;/<span class="hljs-title">param</span>-<span class="hljs-title">value</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">init</span>-<span class="hljs-title">param</span>&gt;</span><br><span class="hljs-class">  &lt;/<span class="hljs-title">filter</span>&gt;</span><br><span class="hljs-class">  &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;<span class="hljs-title">characterEncodingFilter</span>&lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">name</span>&gt;</span><br><span class="hljs-class">    &lt;<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;/&lt;/<span class="hljs-title">url</span>-<span class="hljs-title">pattern</span>&gt;</span><br><span class="hljs-class">  &lt;/<span class="hljs-title">filter</span>-<span class="hljs-title">mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a><strong>法二：</strong></h4><p>这个方法是看网上博客的，不过有的博主说这个方法危险，有的认为这个方法有效，这里简单说明一下：就是修改tomcat安装路径下的conf文件夹中的server.xml配置文件，修改内容如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;Connector URIEncoding=<span class="hljs-string">&quot;utf-8&quot;</span> port=<span class="hljs-string">&quot;8080&quot;</span> protocol=<span class="hljs-string">&quot;HTTP/1.1&quot;</span><br>           connectionTimeout=<span class="hljs-string">&quot;20000&quot;</span><br>           redirectPort=<span class="hljs-string">&quot;8443&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>增添<code>URIEncoding=&quot;utf-8&quot;</code>这句代码。</p><p>以上就是我对中文编码问题出现的解决方案，选择自己最合适的就是最好的！加油！</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC的请求接口报HashMap为null的问题（已解决）</title>
    <link href="/2020/06/02/springmvc%E7%9A%84%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E6%8A%A5HashMap%E4%B8%BAnull%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/06/02/springmvc%E7%9A%84%E8%AF%B7%E6%B1%82%E6%8E%A5%E5%8F%A3%E6%8A%A5HashMap%E4%B8%BAnull%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="解决springmvc接收ajax的POST请求，返回HashMap对象时的问题"><a href="#解决springmvc接收ajax的POST请求，返回HashMap对象时的问题" class="headerlink" title="解决springmvc接收ajax的POST请求，返回HashMap对象时的问题"></a><strong>解决springmvc接收ajax的POST请求，返回HashMap对象时的问题</strong></h3><p>目前刚接触springmvc不久，在做项目的时候，请求接口出现了如下的异常。</p><hr><h4 id="错误："><a href="#错误：" class="headerlink" title="错误："></a><strong>错误：</strong></h4><p><code>No converter for [class java.util.HashMap] with preset Content-Type &#39;null&#39;</code></p><hr><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LoginController</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> ModelMap modelMap; <span class="hljs-comment">// base on @SessionAttributes, append instance into modelMap</span><br><br>    <span class="hljs-meta">@RequestMapping(value = &quot;/login_api&quot;,consumes=&quot;application/json&quot;,method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Map&lt;String,Object&gt; <span class="hljs-title">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Resident resident, HttpServletRequest request)</span></span>&#123;<br>        <span class="hljs-comment">//Accept data as entity class</span><br>        Map&lt;String,Object&gt; result = <span class="hljs-keyword">new</span> HashMap&lt;String,Object&gt;();<br>        ApplicationContext ac = <span class="hljs-keyword">new</span> ClassPathXmlApplicationContext(<span class="hljs-string">&quot;applicationContext.xml&quot;</span>);<br>        <span class="hljs-comment">// login interface</span><br>        encrypt(resident);<br>        Login login_ = (Login) ac.getBean(<span class="hljs-string">&quot;login&quot;</span>);<br>        <span class="hljs-keyword">boolean</span> is_success = login_.login(modelMap,resident);<br>        <span class="hljs-keyword">if</span> (is_success)&#123;<br>            result.put(<span class="hljs-string">&quot;code&quot;</span>,<span class="hljs-number">12</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            result.put(<span class="hljs-string">&quot;code&quot;</span>,-<span class="hljs-number">12</span>);<br>        &#125; <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">// encrypt password</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">encrypt</span><span class="hljs-params">(Resident resident)</span></span>&#123;<br>        resident.setPassword(OcrIdCardImpl.getMD5(resident.getPassword()));<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>说明：上述接收ajax的POST请求，然后以HashMap的形式返回给前端，仔细想想前端不可能接收HashMap的类型的数据吧，人家也没有这个类型，因此srpingmvc内部需要转换成JSON格式，发送给前端，问题就出在这里，产生异常的原因就是转化JSON格式失败。</p><hr><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><strong>解决方法：</strong></h4><p>通过度娘发现了几篇写的挺好的博客，这里记录一下，以免日后碰到同样的问题，不知所措。</p><p>主要原因是缺少jackson相关的包。</p><p>配置pom.xml如下，添加所需要的包：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!--json包--&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>      &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;<br>      &lt;version&gt;2.10.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>      &lt;version&gt;2.10.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>      &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;<br>      &lt;version&gt;2.10.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>      &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>      &lt;version&gt;2.10.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>      &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;<br>      &lt;version&gt;2.10.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.json&lt;/groupId&gt;<br>      &lt;artifactId&gt;json&lt;/artifactId&gt;<br>      &lt;version&gt;20160810&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;<br>      &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;<br>      &lt;version&gt;1.9.13&lt;/version&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>      &lt;groupId&gt;org.glassfish.jaxb&lt;/groupId&gt;<br>      &lt;artifactId&gt;jaxb-runtime&lt;/artifactId&gt;<br>      &lt;version&gt;2.3.2&lt;/version&gt;<br>    &lt;/dependency&gt;<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>添加之后，重启服务器发现还是出现了该异常，经过一番尝试，最终发现<code>produces =&quot;text/html;charset=UTF-8&quot;</code>这个属性是不能加在<code>RequestMapper</code>。至于为什么不能加，目前还不太清楚，过几天再去解决这个问题吧。去掉<code>produces =&quot;text/html;charset=UTF-8&quot;</code>，以及添加所需要的包。重启服务器后，就没有报异常了。</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中@classmethod和@staticmethod的区别</title>
    <link href="/2020/06/02/Python%E4%B8%AD@classmethod%E5%92%8C@staticmethod%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/06/02/Python%E4%B8%AD@classmethod%E5%92%8C@staticmethod%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="浅谈自己对-classmethod和-staticmethod区别的理解"><a href="#浅谈自己对-classmethod和-staticmethod区别的理解" class="headerlink" title="浅谈自己对@classmethod和@staticmethod区别的理解"></a><strong>浅谈自己对@classmethod和@staticmethod区别的理解</strong></h3><h4 id="一、-staticmethod的理解"><a href="#一、-staticmethod的理解" class="headerlink" title="一、@staticmethod的理解"></a><strong>一、@staticmethod的理解</strong></h4><p>staticmethod是一个类级别的装饰器，用于修饰类体内的函数，让实例方法编程静态方法，它和普通函数的调用作用一样，不同的是，他不需要self实例关键字，直接通过类名来进行调用。</p><p>一个简单的小例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>:</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_func</span>(<span class="hljs-params">name, age</span>):</span><br>        <span class="hljs-built_in">print</span>(name, age)<br><br><br>m = test()<br><br>m.test_func(<span class="hljs-string">&#x27;syz&#x27;</span>,<span class="hljs-number">20</span>)<br>test.test_func(<span class="hljs-string">&#x27;syz&#x27;</span>,<span class="hljs-number">20</span>)<br><br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p><code>m.test_func(&#39;syz&#39;,20)</code>和<code>test.test_func(&#39;syz&#39;,20)</code>效果是一样的。写成静态方法的时候往往是函数体里不需要用到实例的任何属性以及方法，这时候可以使用<code>@staticmethod</code>装饰器修饰，增强可读性</p><hr><h4 id="二、-classmethod的理解"><a href="#二、-classmethod的理解" class="headerlink" title="二、@classmethod的理解"></a><strong>二、@classmethod的理解</strong></h4><p><code>classmethod</code>的作用相比<code>staticmethod</code>来说，就非常大了。被<code>@classmethod</code>所修饰的方法，被称之为类方法，首先，我简单较少下<code>classmethod</code>和<code>staticmethod</code>装饰器的区别和共同点，然后在分析<code>@classmethod</code>所使用的一些场景。</p><p><strong>共同点：</strong></p><p><code>@classmethod</code>和<code>@staticmethod</code>方法都可以通过类名.方法名来调用。将所修饰的方法转变为类级别的方法。</p><p><strong>不同点</strong></p><p>1.<code>@classmethod</code>所修饰的方法的第一个参数必须为cls，也就是当前类。而<code>@staticmethod</code>修饰的方法的参数无需<code>cls</code>或者<code>self</code>。</p><p>2.<code>@classmethod</code>所修饰的方法所处的功能要比<code>@staticmethod</code>所修饰的方法多得多。比如单例模式，工厂模式中都可以使用<code>@classmethod</code>装饰器进行增强。<br>同时<code>@classmethod</code>还常用来定义备选构造方法，对<code>__init__</code>方法进行多样的增强，这点有点跟<code>__new__</code>方法类似。</p><p>举个<code>@classmethod</code>使用的单例模式中的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#日志模块</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Logging</span>:</span><br>    _instance = &#123;&#125;  <span class="hljs-comment"># 定义存放实例的字典</span><br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_logger</span>(<span class="hljs-params">cls, logger_name</span>):</span><br>        <span class="hljs-keyword">return</span> cls._instance[logger_name]<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">logger</span>(<span class="hljs-params">cls, logger_name</span>):</span><br>    <span class="hljs-comment"># 判断logger_name是否存在实例字典中，如果不存在，新生成日志实例，如果存在，直接取出，然后返回</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cls._instance.setdefault(logger_name, <span class="hljs-literal">None</span>):<br>            cls._instance[logger_name] = logging.getLogger(logger_name)<br>        <span class="hljs-keyword">return</span> cls._instance[logger_name]<br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>此代码截取自我的项目中的日志模块的配置，采用单例模式，因为我对某个模块定义了多个logger，而每个logger可能再不同的模块中使用，为了避免每个模块重新生成新的日志对象，消耗内存，因此采用<code>@classmethod</code>方法实现单例模式。当然单例模式也可以通过<code>__new__</code>内置方法实现。</p><hr><h5 id="如果修改了实例中与类属性同名的属性，那么类属性并不会改变！"><a href="#如果修改了实例中与类属性同名的属性，那么类属性并不会改变！" class="headerlink" title="如果修改了实例中与类属性同名的属性，那么类属性并不会改变！"></a><strong>如果修改了实例中与类属性同名的属性，那么类属性并不会改变！</strong></h5><p><strong>例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>:</span><br><br>    mm = <span class="hljs-string">&#x27;syz&#x27;</span><br><br><span class="hljs-meta">    @staticmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_func</span>(<span class="hljs-params">name, age</span>):</span><br>        <span class="hljs-built_in">print</span>(name, age)<br><br>m.mm = <span class="hljs-string">&#x27;zjw&#x27;</span><br><span class="hljs-built_in">print</span>(m.mm)<br><span class="hljs-built_in">print</span>(test.mm)<br></code></pre></td></tr></table></figure><p>结果：</p><p><code>&#39;zjw&#39;</code></p><p><code>&#39;syz&#39;</code></p><p><strong>说明：</strong></p><p>即使改变了实例中与类属性同名的属性值，但是类属性并不会变。</p><hr><p>当然了，有关<code>@classmethod</code>的使用还有很多，我所理解的只是其中一小部分，它其实还可以作为工厂类的接口，用来读取或者修改工厂类本身。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax请求报415错误，不支持媒体类型（已解决）</title>
    <link href="/2020/06/01/ajax%E8%AF%B7%E6%B1%82%E6%8A%A5415%E9%94%99%E8%AF%AF%EF%BC%8C%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/06/01/ajax%E8%AF%B7%E6%B1%82%E6%8A%A5415%E9%94%99%E8%AF%AF%EF%BC%8C%E4%B8%8D%E6%94%AF%E6%8C%81%E5%AA%92%E4%BD%93%E7%B1%BB%E5%9E%8B%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="HTTP请求415错误-–-不支持的媒体类型-Unsupported-media-type"><a href="#HTTP请求415错误-–-不支持的媒体类型-Unsupported-media-type" class="headerlink" title="HTTP请求415错误 – 不支持的媒体类型(Unsupported media type)"></a><strong>HTTP请求415错误 – 不支持的媒体类型(Unsupported media type)</strong></h4><p>报415的错误往往出现在ajax传输数据的时候，只要在头部添加<code>req.setRequestHeader(&#39;Content-Type&#39;, &#39;application/json&#39;);</code></p><p><strong>说明：</strong></p><p>在响应中，<code>Content-Type</code>标头告诉客户端实际返回的内容的内容类型，我当时是用springmvc使用HashMap作为相应结果，中间会进行Json格式转化，没有加<code>req.setRequestHeader(&#39;Content-Type&#39;, &#39;application/json&#39;);</code>这一样，所以报了415的错误，加上它就好了。</p><p><strong>前端代码：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.ajax(&#123;<br>                type:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>                url:url,<br>                data:data,<br>                beforeSend: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">req</span>)</span>&#123;<br>                  req.setRequestHeader(<span class="hljs-string">&#x27;Content-Type&#x27;</span>, <span class="hljs-string">&#x27;application/json&#x27;</span>);  <span class="hljs-comment">///加这一行解决问题415</span><br>                &#125;,<br>                success: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>                  <span class="hljs-keyword">if</span> (data.code === <span class="hljs-number">12</span>)&#123;<br>                    layer.msg(<span class="hljs-string">&#x27;登录成功,正在跳转&#x27;</span>,&#123;<span class="hljs-attr">icon</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">time</span>:<span class="hljs-number">1000</span>,<span class="hljs-attr">closeBtn</span>:<span class="hljs-number">0</span>&#125;);<br>                    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                      <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&#x27;/index&#x27;</span>;<br>                    &#125;,<span class="hljs-number">1200</span>);<br>                  &#125;<br>                  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data.code === -<span class="hljs-number">12</span>)&#123;<br>                    layer.msg(<span class="hljs-string">&#x27;用户名或密码不正确&#x27;</span>,&#123;<span class="hljs-attr">icon</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">time</span>:<span class="hljs-number">1200</span>,<span class="hljs-attr">closeBtn</span>:<span class="hljs-number">0</span>&#125;);<br>                  &#125;<br>                &#125;,<br>                error: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>                  layer.msg(<span class="hljs-string">&#x27;服务器无响应!&#x27;</span>,&#123;<span class="hljs-attr">icon</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">time</span>:<span class="hljs-number">1200</span>,<span class="hljs-attr">closeBtn</span>:<span class="hljs-number">0</span>&#125;);<br>                &#125;<br>              &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Jquery</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>ajax</tag>
      
      <tag>Jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC中使用@SessionAttributes获取session的小问题</title>
    <link href="/2020/06/01/springmvc%E4%B8%AD%E4%BD%BF%E7%94%A8@SessionAttributes%E8%8E%B7%E5%8F%96session%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2020/06/01/springmvc%E4%B8%AD%E4%BD%BF%E7%94%A8@SessionAttributes%E8%8E%B7%E5%8F%96session%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="Srpingmvc使用-SessionAttributes获取session的问题"><a href="#Srpingmvc使用-SessionAttributes获取session的问题" class="headerlink" title="Srpingmvc使用@SessionAttributes获取session的问题"></a><strong>Srpingmvc使用@SessionAttributes获取session的问题</strong></h4><h4 id="一、背景："><a href="#一、背景：" class="headerlink" title="一、背景："></a><strong>一、背景：</strong></h4><p>Springmvc中有很多中方式获取设置Session，有原始的HttpSession，有通过HttpServletRequest间接设置获取session，也有Springmvc独有的注解方式<code>@SessionAttributes(value = &quot;resident&quot;)</code>方式设置session。</p><p>我在项目中使用了注解的方式设置Session，采用ModelMap的形式设置Session，这里没有问题，但是当我从另一个Controller中打算获取Session的时候出现了问题，一开始，我是用的<code>@ModelAttribute(&quot;resident&quot;) Resident resident</code>的方式获取对应的对象，但失败了，获取到的值为null。</p><p>我看了网上的答案，五花八门，有的在某篇博客中可以的获取方式，在另外的博客中又变得不可以。因此也是一脸懵逼，好在我还是很有耐心的。最终也解决了如何获取<code>@SessionAttributes(value = &quot;resident&quot;)</code>注解形式所设置的session。</p><hr><h4 id="二、解决方案："><a href="#二、解决方案：" class="headerlink" title="二、解决方案："></a><strong>二、解决方案：</strong></h4><p>使用<code>HttpServletRequest</code>类，通过request间接获取<code>session</code>，然后获取其中的键值。</p><hr><h4 id="三、测试代码："><a href="#三、测试代码：" class="headerlink" title="三、测试代码："></a><strong>三、测试代码：</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@RequestMapping(value = &quot;/index&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">entr_index</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute(&quot;resident&quot;)</span> Resident resident, HttpServletRequest  httpServletRequest)</span></span>&#123;<br>    HttpSession session = httpServletRequest.getSession();<br>    Resident residents = (Resident) session.getAttribute(<span class="hljs-string">&quot;resident&quot;</span>);<br>    System.out.println(residents.getPassword());  <span class="hljs-comment">// 分别测试HttpServletRequest和ModelAttribute</span><br>    System.out.println(resident.getPassword());<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><p><code>44eb5b04af14d5b07c446ff9c6f1d403</code> 这是通过<code>HttpServletRequest</code>的实例获取的session值</p><p><code>null</code>  这是通过<code>@ModelAttribute</code>获取的session值，获取不到</p><p>至于其他设置获取session的方法，等我以后用到了，再做记录。</p>]]></content>
    
    
    <categories>
      
      <category>SpringMVC</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringMVC</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django调用阿里OCR身份识别验证的Image编码小问题</title>
    <link href="/2020/05/30/django%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8COCR%E8%BA%AB%E4%BB%BD%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%9A%84Image%E7%BC%96%E7%A0%81%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/30/django%E8%B0%83%E7%94%A8%E9%98%BF%E9%87%8COCR%E8%BA%AB%E4%BB%BD%E8%AF%86%E5%88%AB%E9%AA%8C%E8%AF%81%E7%9A%84Image%E7%BC%96%E7%A0%81%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="Django调用阿里OCR身份识别验证中Image编码的小问题"><a href="#Django调用阿里OCR身份识别验证中Image编码的小问题" class="headerlink" title="Django调用阿里OCR身份识别验证中Image编码的小问题"></a><strong>Django调用阿里OCR身份识别验证中Image编码的小问题</strong></h4><p>目前正在做的一个项目，打算在里面添加身份证图像识别，直接获取用户的姓名，生日，性别这些基本信息。所以采用了阿里的OCR的API,阿里的API要求传入的image必须为base64编码过得数值，要通过base64编码，首先要转为二进制。而我通过前端传进来的FILE对象为<code>InMemoryUploadedFile</code>对象。它无法直接通过<code>bytes()</code>转换类型,而是要通过<code>InMemoryUploadedFile</code>中文件属性来读取。</p><p><strong>出现的问题：</strong></p><p><strong><code>base64</code>所需的是二进制数据，而不是<code>InMemoryUploadedFile</code>对象!</strong></p><p><strong>解决方案</strong></p><p><code>InMemoryUploadedFile</code>拥有的一些属性:</p><p><code>image = request.data.get(&#39;image&#39;)</code></p><p><code>image.file, image.field_name, image.name, image.content_type,image.size, image.charset, image.content_type_extra</code></p><p>我要获取二进制的数据，主要通过<code>image.file.read()</code>，也就是以文件对象的方式<code>read()</code>出二进制数据。</p><p>获取其二进制数据后，我就可以对其进行base64编码。</p><p>以下的例子是我前端加后端实现身份证识别</p><h5 id="后端"><a href="#后端" class="headerlink" title="后端"></a><strong>后端</strong></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ocr_id_card</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;阿里api身份证识别&quot;&quot;&quot;</span><br><br>    AppCode = <span class="hljs-comment">#你的appcode</span><br>    url = <span class="hljs-string">&#x27;https://dm-51.data.aliyun.com/rest/160601/ocr/ocr_idcard.json&#x27;</span><br><br>    params = &#123;<br>        <span class="hljs-string">&#x27;image&#x27;</span>: <span class="hljs-literal">None</span>,<br>        <span class="hljs-string">&#x27;configure&#x27;</span>: &#123;&#125;,<br>    &#125;<br><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;Authorization&#x27;</span>: <span class="hljs-string">&#x27;APPCODE 你的appcode&#x27;</span>,  <span class="hljs-comment"># APPCODE +你的appcod,一定要有空格!</span><br>        <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json; charset=UTF-8&#x27;</span>  <span class="hljs-comment"># 根据接口的格式来</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, image, card_type</span>):</span><br>        image = <span class="hljs-built_in">str</span>(base64.b64encode(image), encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        configure = &#123;<span class="hljs-string">&quot;side&quot;</span>: card_type&#125;<br>        self.params.update(&#123;<span class="hljs-string">&#x27;image&#x27;</span>: image, <span class="hljs-string">&#x27;configure&#x27;</span>: configure&#125;)<br>        self.json_result = <span class="hljs-literal">None</span><br>        self.card_type = card_type<br><br>    <span class="hljs-string">&quot;&quot;&quot;def test(self, card_type):</span><br><span class="hljs-string">        path = &#x27;C:\\Users\\ASUS\\Desktop\\index.jpg&#x27;</span><br><span class="hljs-string">        with open(path, &#x27;rb&#x27;) as f:</span><br><span class="hljs-string">            data = f.read()</span><br><span class="hljs-string">            image = str(base64.b64encode(data), encoding=&#x27;utf-8&#x27;)</span><br><span class="hljs-string">            configure = &#123;&quot;side&quot;: card_type&#125;</span><br><span class="hljs-string">            self.body.update(&#123;&#x27;image&#x27;: image, &#x27;configure&#x27;: configure&#125;)&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_posturl_result</span>(<span class="hljs-params">self, card_type</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get result from aliyun api&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            params = json.dumps(self.params).encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>            req = urllib.request.Request(self.url, params, self.headers)  <span class="hljs-comment"># structure request</span><br>            r = urllib.request.urlopen(req)  <span class="hljs-comment"># post request</span><br>            result = r.read().decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>            self.json_result = json.loads(result)<br>            r.close()<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            consumer_logger.error(e)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">address</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get detail in dict&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.json_result.pop(<span class="hljs-string">&#x27;address&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">birth</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get birth in dict&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.json_result.pop(<span class="hljs-string">&#x27;birth&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">actual_name</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get name in dict&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.json_result.pop(<span class="hljs-string">&#x27;name&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">nationality</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get nationality in dict&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.json_result.pop(<span class="hljs-string">&#x27;nationality&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">id_card</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get id card in dict&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.json_result.pop(<span class="hljs-string">&#x27;num&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sex</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get sex in dict&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.json_result.pop(<span class="hljs-string">&#x27;sex&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_success</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get status to check whether this request is success&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.json_result.pop(<span class="hljs-string">&#x27;success&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Interface_identify</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, image, card_type</span>):</span><br>        self.user_instance = ocr_id_card(image, card_type)<br>        self.user_instance.get_posturl_result(card_type)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_detail</span>(<span class="hljs-params">self, infor_key</span>):</span><br>        func = <span class="hljs-built_in">getattr</span>(self.user_instance, infor_key)<br>        <span class="hljs-keyword">return</span> func()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_success</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get status to check whether this request is success&quot;&quot;&quot;</span><br>        has_result = <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> self.user_instance.json_result <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> has_result:<br>            is_success = self.get_detail(<span class="hljs-string">&#x27;is_success&#x27;</span>)<br>            <span class="hljs-keyword">return</span> is_success<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br></code></pre></td></tr></table></figure><p><strong>前端</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">//身份证件正面上传</span><br>  upload.render(&#123;<br>  elem: <span class="hljs-string">&#x27;#face&#x27;</span><br>  , <span class="hljs-attr">headers</span>:headers<br>  , <span class="hljs-attr">accept</span>:<span class="hljs-string">&#x27;images&#x27;</span><br>  , <span class="hljs-attr">auto</span>:<span class="hljs-literal">false</span><br>  , <span class="hljs-attr">size</span>:<span class="hljs-number">3000</span><br>  , <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;card_type&#x27;</span>:<span class="hljs-string">&#x27;face&#x27;</span>&#125;<br>  , <span class="hljs-attr">drag</span>:<span class="hljs-literal">true</span><br>  , <span class="hljs-attr">exts</span>:<span class="hljs-string">&#x27;jpg|png|jpeg&#x27;</span><br>  , <span class="hljs-attr">bindAction</span>:<span class="hljs-string">&#x27;#verified&#x27;</span><br>  , <span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;image&#x27;</span><br>  , <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/consumer/verification-name-chsc-api/&#x27;</span> <span class="hljs-comment">//改成您自己的上传接口</span><br>  , <span class="hljs-attr">choose</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-comment">//预读本地文件示例，不支持ie8</span><br>  obj.preview(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index, file, result</span>) </span>&#123;<br>  $(<span class="hljs-string">&#x27;#face&#x27;</span>).prop(<span class="hljs-string">&#x27;src&#x27;</span>, result); <span class="hljs-comment">//图片链接（base64）</span><br>  &#125;);<br>  &#125;<br>  , <span class="hljs-attr">done</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>  <span class="hljs-comment">//如果上传失败</span><br>  <span class="hljs-keyword">if</span> (res.code === <span class="hljs-number">21</span>) &#123;<br>  layer.msg(<span class="hljs-string">&#x27;认证成功!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  $(<span class="hljs-string">&quot;.step-2&quot;</span>).children().children().css(&#123;<span class="hljs-string">&#x27;opacity&#x27;</span>:<span class="hljs-number">1</span>&#125;);<br>  <span class="hljs-built_in">window</span>.location.href = <span class="hljs-string">&#x27;/consumer/personal_idcard&#x27;</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.code === -<span class="hljs-number">21</span>)&#123;<br>    layer.msg(<span class="hljs-string">&#x27;图像识别失败!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1200</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(res.code === <span class="hljs-number">500</span>)&#123;<br>  layer.msg(<span class="hljs-string">&#x27;服务器无响应!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1200</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  &#125;<br>  $(<span class="hljs-string">&#x27;#face&#x27;</span>).removeAttr(<span class="hljs-string">&#x27;src&#x27;</span>);<br>  <span class="hljs-comment">//上传成功</span><br>  &#125;<br>  , <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">//演示失败状态，并实现重传</span><br>  layer.msg(<span class="hljs-string">&#x27;服务器无响应!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1200</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  $(<span class="hljs-string">&#x27;#face&#x27;</span>).removeAttr(<span class="hljs-string">&#x27;src&#x27;</span>);<br>  &#125;<br>  &#125;);<br><br>         <span class="hljs-comment">//身份证件背面上传</span><br>  upload.render(&#123;<br>  elem: <span class="hljs-string">&#x27;#back&#x27;</span><br>  , <span class="hljs-attr">headers</span>:headers<br>  , <span class="hljs-attr">accept</span>:<span class="hljs-string">&#x27;images&#x27;</span><br>  , <span class="hljs-attr">size</span>:<span class="hljs-number">3000</span><br>  , <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;card_type&#x27;</span>:<span class="hljs-string">&#x27;back&#x27;</span>&#125;<br>  , <span class="hljs-attr">exts</span>:<span class="hljs-string">&#x27;jpg|png|jpeg&#x27;</span><br>  , <span class="hljs-attr">drag</span>:<span class="hljs-literal">true</span><br>  , <span class="hljs-attr">auto</span>:<span class="hljs-literal">false</span><br>  , <span class="hljs-attr">bindAction</span>:<span class="hljs-string">&#x27;#verified&#x27;</span><br>  , <span class="hljs-attr">field</span>:<span class="hljs-string">&#x27;image&#x27;</span><br>  , <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/consumer/verification-name-chsc-api/&#x27;</span> <span class="hljs-comment">//改成您自己的上传接口</span><br>  , <span class="hljs-attr">before</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>  <span class="hljs-comment">//预读本地文件示例，不支持ie8</span><br>  obj.preview(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">index, file, result</span>) </span>&#123;<br>  $(<span class="hljs-string">&#x27;#face&#x27;</span>).attr(<span class="hljs-string">&#x27;src&#x27;</span>, result); <span class="hljs-comment">//图片链接（base64）</span><br>  &#125;);<br>  &#125;<br>  , <span class="hljs-attr">done</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>  <span class="hljs-comment">//如果上传失败</span><br>  <span class="hljs-keyword">if</span> (res.code === <span class="hljs-number">21</span>) &#123;<br>  layer.msg(<span class="hljs-string">&#x27;认证成功!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  $(<span class="hljs-string">&quot;.step-2&quot;</span>).children().children().css(&#123;<span class="hljs-string">&#x27;opacity&#x27;</span>:<span class="hljs-number">1</span>&#125;);<br>  $(<span class="hljs-string">&quot;#verified&quot;</span>).text(<span class="hljs-string">&#x27;实名认证成功！&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (res.code === -<span class="hljs-number">21</span>)&#123;<br>    layer.msg(<span class="hljs-string">&#x27;图像识别失败!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1200</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(res.code === <span class="hljs-number">500</span>)&#123;<br>  layer.msg(<span class="hljs-string">&#x27;服务器无响应!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1200</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  &#125;<br>  $(<span class="hljs-string">&#x27;#back&#x27;</span>).removeAttr(<span class="hljs-string">&#x27;src&#x27;</span>);<br>  <span class="hljs-comment">//上传成功</span><br>  &#125;<br>  , <span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  layer.msg(<span class="hljs-string">&#x27;服务器无响应!&#x27;</span>, &#123;<span class="hljs-attr">icon</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">time</span>: <span class="hljs-number">1200</span>, <span class="hljs-attr">closeBtn</span>: <span class="hljs-number">0</span>&#125;);<br>  $(<span class="hljs-string">&#x27;#back&#x27;</span>).removeAttr(<span class="hljs-string">&#x27;src&#x27;</span>);<br>  &#125;<br>  &#125;);<br>  <br>  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>OCR</tag>
      
      <tag>OpenAPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django中request.POST不能修改属性值的问题</title>
    <link href="/2020/05/29/request.POST%E4%B8%8D%E8%83%BD%E4%BF%AE%E6%94%B9%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/29/request.POST%E4%B8%8D%E8%83%BD%E4%BF%AE%E6%94%B9%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>####** 对于提示不能修改request.POST,request.GET的错误**</p><p>最近，在玩drf开发，想要根据不同的需求对request.POST中添加user，发现报了错<code>This QueryDict instance is immutable</code>，发现这个<code>QueryDict</code>实例不能够修改。</p><p>经过查阅了官方文档和网上的博客，解决了问题。</p><p><strong>解决方法：</strong></p><h4 id="法一："><a href="#法一：" class="headerlink" title="法一："></a><strong>法一：</strong></h4><p>使用<code>request.POST.copy()</code>生成一份副本，对副本进行<code>validated</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>    data = request.data.copy()<br>    data[<span class="hljs-string">&#x27;user&#x27;</span>] = request.user<br>    <span class="hljs-comment"># request.data[&#x27;user&#x27;] = 2</span><br>    serializer = Serializers_address(data=request.data)<br>    <span class="hljs-keyword">if</span> serializer.is_valid():<br>        <span class="hljs-comment"># 会调用各字段的validators验证器</span><br>        <span class="hljs-comment"># 传入data数据实例化serializer对象，才可以调用is_valid()方法，才能校验获取validated_data</span><br>        is_true = serializer.create(**request.data)<br>        <span class="hljs-keyword">if</span> is_true:<br>            <span class="hljs-keyword">return</span> Response(response_code.address_add_success)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Response(response_code.server_error)<br>    <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></td></tr></table></figure><h4 id="法二"><a href="#法二" class="headerlink" title="法二:"></a><strong>法二:</strong></h4><p>法二是参见了网上博客的一种方式:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span>(<span class="hljs-params">request</span>):</span><br>    data=request.POST<br>    <span class="hljs-comment"># 记住旧的方式</span><br>    _mutable = data._mutable<br>    <span class="hljs-comment"># 设置_mutable为True</span><br>    data._mutable = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># 改变你想改变的数据</span><br>    data[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-string">&#x27;chenxinming&#x27;</span><br>    <span class="hljs-comment"># 恢复_mutable原来的属性</span><br>    data._mutable = _mutable<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">&#x27;login.html&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>这种方法中，<code>_mutable</code>相当于控制能否修改的开关，当<code>_mutable</code>为True时，可以修改，不过这种方式违背了“私有属性”的规则，类外是不能够访问<code>_mutable</code>的，所以尽量使用第一种方式，遵循python开发规则吧！！！</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>drf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 装饰器闭包详解（看这一篇就够了）</title>
    <link href="/2020/05/28/python%20%E8%A3%85%E9%A5%B0%E5%99%A8%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3%EF%BC%88%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86%EF%BC%89/"/>
    <url>/2020/05/28/python%20%E8%A3%85%E9%A5%B0%E5%99%A8%E9%97%AD%E5%8C%85%E8%AF%A6%E8%A7%A3%EF%BC%88%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="python装饰器与闭包详解（看着一篇就够了）"><a href="#python装饰器与闭包详解（看着一篇就够了）" class="headerlink" title="python装饰器与闭包详解（看着一篇就够了）"></a><strong>python装饰器与闭包详解（看着一篇就够了）</strong></h3><h4 id="什么是闭包？"><a href="#什么是闭包？" class="headerlink" title="什么是闭包？"></a><strong>什么是闭包？</strong></h4><p>闭包简单来说就是函数中嵌套函数。<br>复杂点讲其实是指延伸了作用于的函数，具备自由变量，在第一层函数中定义自由变量，在深入的函数中就可以调用该自由变量</p><hr><h4 id="关于闭包的核心关键点—-自由变量"><a href="#关于闭包的核心关键点—-自由变量" class="headerlink" title="关于闭包的核心关键点—-自由变量"></a><strong>关于闭包的核心关键点—-自由变量</strong></h4><p><strong>什么是自由变量？</strong></p><p>自由变量：指未在本地作用于中绑定的变量，可以将超函数中的本地作用域中的局部变量作为自由变量。</p><p><strong>对于可变序列类型（不可散列对象）：</strong>闭包中，可变序列类型的变量等价于自由变量，例如<code>list.append()</code>追加方法，并不会改变引用的对象，因而会一直保持自由变量特性。</p><p><strong>对于不可变序列类型（可散列对象）：</strong>闭包中，不可变序列类型的变量必须要用nonlocal声明其为自由变量。为什么呢？看下面这个例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">counts</span>():</span><br>    sums = <span class="hljs-number">0</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute</span>():</span><br>        sums += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br>    <span class="hljs-keyword">return</span> compute()<br>counts()<br></code></pre></td></tr></table></figure><p>报错：<code>UnboundLocalError: local variable &#39;sums&#39; referenced before assignment</code></p><p><strong>原因分析：</strong><br>因为在<code>counts()</code>定义了不可变序列类型sums，而在<code>compute()</code>中<code>sums+=1</code>等价于先对<code>sum + 1</code>,然后产生新的局部变量赋值给sum，会产生异常，原因是sums变成了局部变量，<code>sum + 1</code>赋值给了一个未初始化的不在内存的对象。</p><p>解决方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">counts</span>():</span><br>    sums = <span class="hljs-number">0</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute</span>():</span><br>    <span class="hljs-keyword">nonlocal</span> sums  <span class="hljs-comment"># 添加自由变量</span><br>        sums += <span class="hljs-number">1</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">sum</span>)<br>    <span class="hljs-keyword">return</span> compute()<br>counts()<br></code></pre></td></tr></table></figure><p>**注： **添加自由变量后，就可以将sums绑定为自由变量，具备自由变量特性。</p><hr><h4 id="什么是装饰器？"><a href="#什么是装饰器？" class="headerlink" title="什么是装饰器？"></a><strong>什么是装饰器？</strong></h4><p>是可调用的对象（一般通过实现类的__call__方法），其参数是另一个函数（被装饰的函数），装饰器可能会处理被装饰的函数，可能会返回被装饰的函数，也可能会返回另一个函数或者可调用的对象。</p><hr><h4 id="怎么使用装饰器"><a href="#怎么使用装饰器" class="headerlink" title="怎么使用装饰器?"></a><strong>怎么使用装饰器?</strong></h4><h4 id="不带参数的装饰器"><a href="#不带参数的装饰器" class="headerlink" title="不带参数的装饰器"></a><strong>不带参数的装饰器</strong></h4><p>首先举个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">counts</span>(<span class="hljs-params">func</span>):</span>  <span class="hljs-comment"># func（被装饰的函数）会传递过来</span><br>    sums = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;what is your name?&#x27;</span>)  <span class="hljs-comment"># 装饰器导入的时候会调用它</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute</span>(<span class="hljs-params">name</span>):</span><br>        <span class="hljs-keyword">nonlocal</span> sums            <span class="hljs-comment"># 声明自由变量</span><br>        sums += <span class="hljs-number">1</span>                <br>        func(name)               <span class="hljs-comment"># 调用被装饰的函数</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;sums:%d&#x27;</span> % sums)<br>    <span class="hljs-keyword">return</span> compute               <span class="hljs-comment"># 返回另一个函数或可调用的对象</span><br><br><span class="hljs-meta">@counts</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">name</span>):</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;my name is %s&#x27;</span>% name)<br>test(<span class="hljs-string">&#x27;syz&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">what is your name ?  # 运行时导入<br>my name <span class="hljs-keyword">is</span> syz  <span class="hljs-comment"># </span><br>sums:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>首先介绍下装饰器运行时和导入时的区别：</strong></p><p>在导入模块时，首先执行装饰器函数，而被装饰器装饰的函数或者装饰器返回的函数只在运行时调用，这也就是通常所说的导入时和运行时的区别。</p><p><code>test(&#39;syz&#39;)</code> &lt;==&gt;（等价于） <code>counts(test)(&#39;syz&#39;)</code></p><hr><h4 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a><strong>带参数的装饰器</strong></h4><p>接下来进阶一下，假设我们一个函数要根据不同的参数执行相应的业务逻辑（可能不会调用这个函数本身，也可能调用另外的函数），这时候我们就需要一个带参数的装饰器了。</p><p>先看一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">aim_or_wholes</span>(<span class="hljs-params">choice=<span class="hljs-literal">True</span></span>):</span>   <span class="hljs-comment"># 带默认值的参数True</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorate</span>(<span class="hljs-params">func</span>):</span>           <span class="hljs-comment"># 传入被装饰的函数</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">num1,num2,**m</span>):</span>      <span class="hljs-comment"># 接收被装饰函数的参数</span><br>            <span class="hljs-built_in">print</span>(num1,num2,m)         <span class="hljs-comment"># 可以看一下传递过来的参数</span><br>            <span class="hljs-comment">#print(args,kwargs)</span><br>            <span class="hljs-comment">#print(kwargs.pop(&#x27;m&#x27;))</span><br>            <span class="hljs-keyword">if</span> choice:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;6666&#x27;</span><br>            <span class="hljs-keyword">else</span>:<br>                m = func(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">return</span> m<br>        <span class="hljs-keyword">return</span> inner<br>    <span class="hljs-keyword">return</span> decorate<br><br>m = &#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;syz&#x27;</span>&#125;<br><br><span class="hljs-meta">@aim_or_wholes(<span class="hljs-params"><span class="hljs-literal">False</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">num1,num2,**m</span>):</span><br>    <span class="hljs-keyword">return</span> num1+num2<br><br>test(num1=<span class="hljs-number">1</span>,num2=<span class="hljs-number">3</span>,m=<span class="hljs-number">4</span>)<br><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span> <span class="hljs-number">3</span> &#123;<span class="hljs-string">&#x27;m&#x27;</span>: <span class="hljs-number">4</span>&#125;<br><span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>① <code>**</code>表示对字典拆包</p><p>② 通过三层函数组建的装饰器可以称之为装饰器工厂函数，可以表示带参数的装饰器，两层函数组键的装饰器为普通装饰器。</p><hr><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a><strong>类装饰器</strong></h4><p>类装饰器相对于函数装饰器的一大优点就是好拓展。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> functools<br> <br> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T1</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, name</span>):</span><br>        self.name = name<br> <br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span>(<span class="hljs-params">self, func</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;I am outer!&#x27;</span>)<br> <br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)    </span><span class="hljs-comment"># 这个装饰器用户获取func中除了参数以外的元属性</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dec</span>(<span class="hljs-params">*args, **kwargs</span>):</span><br>            t0 = time.time()<br>            result = func(*args, **kwargs)<br>            elapsed = time.time() - t0<br>            name = func.__name__  <span class="hljs-comment"># 获取函数名</span><br>            arg_lst = []<br>            <span class="hljs-keyword">if</span> args:<br>                arg_lst.append(<span class="hljs-string">&#x27;, &#x27;</span>.join(<span class="hljs-built_in">repr</span>(arg) <span class="hljs-keyword">for</span> arg <span class="hljs-keyword">in</span> args))<br>            <span class="hljs-keyword">if</span> kwargs:<br>                pairs = [<span class="hljs-string">&#x27;%s=%r&#x27;</span> % (k, w) <span class="hljs-keyword">for</span> k, w <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(kwargs.items())]<br>                arg_lst.append(<span class="hljs-string">&#x27;, &#x27;</span>.join(pairs))<br>            arg_str = <span class="hljs-string">&#x27;, &#x27;</span>.join(arg_lst)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[%0.8fs] %s(%s) -&gt; %r &#x27;</span> % (elapsed, name, arg_str, result))<br>        <span class="hljs-keyword">return</span> dec<br><br><br><br><span class="hljs-meta">@T1(<span class="hljs-params"><span class="hljs-string">&#x27;test&#x27;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">t2</span>():</span><br>    l = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br>    ff = [x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> l]<br>    <span class="hljs-built_in">print</span>(ff)<br><br>t2()<br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>I am outer!<br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>]<br>[0.00000000s] t2() -&gt; None<br><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>① 两层函数+一层类体或三层函数可以构成装饰器工厂函数，装饰器工厂函数说白了就是带参数的装饰器，装饰器工厂函数返回的是真正的装饰器。</p><p>② <code>t2()</code> &lt;=&gt;（等价于）<code>T1(&#39;test&#39;)(t2)()</code></p><p>③ 这里使用了<code>__call__</code>函数，而<code>T1(&#39;test&#39;)</code>&lt;=&gt;<code>obj</code>，这样就转变为<code>obj(t2)()</code>,是不是很眼熟，没错，这个就是函数的调用方式，秘诀就在于<code>__call__</code>函数，可以让类实例函数化。</p><hr><h4 id="最后再来一个我的查重项目中的一个带参数装饰器，被装饰的函数在类中定义"><a href="#最后再来一个我的查重项目中的一个带参数装饰器，被装饰的函数在类中定义" class="headerlink" title="最后再来一个我的查重项目中的一个带参数装饰器，被装饰的函数在类中定义"></a><strong>最后再来一个我的查重项目中的一个带参数装饰器，被装饰的函数在类中定义</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 装饰器</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">aim_or_whole</span>(<span class="hljs-params">choice=<span class="hljs-literal">True</span></span>):</span><br>    pattern = get_content_regex(<span class="hljs-literal">False</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decorate</span>(<span class="hljs-params">func</span>):</span><br><span class="hljs-meta">        @functools.wraps(<span class="hljs-params">func</span>)</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span>(<span class="hljs-params">obj, row=<span class="hljs-literal">None</span>, whole=choice</span>):</span><br>            <span class="hljs-comment"># 因为被装饰函数在类中定义，所以inner需要额外一个参数作为类实例obj</span><br>            <span class="hljs-keyword">global</span> dict_context<br>            <span class="hljs-keyword">if</span> choice:<br>                message = <span class="hljs-string">&#x27;全体匹配&#x27;</span><br>                dict_context = func(obj, row, <span class="hljs-literal">True</span>)<br>                sums = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> key, values <span class="hljs-keyword">in</span> dict_context.items():<br>                    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> values:<br>                        value = re.sub(pattern, <span class="hljs-string">&#x27;&#x27;</span>, value)<br>                        sums += <span class="hljs-built_in">len</span>(value)<br>                <span class="hljs-keyword">return</span> sums<br>            <span class="hljs-keyword">else</span>:<br>                message = <span class="hljs-string">&#x27;主体匹配&#x27;</span><br>                <span class="hljs-keyword">pass</span>  <span class="hljs-comment"># 自定义choice = True时的情况</span><br><br>        <span class="hljs-keyword">return</span> inner<br><br>    <span class="hljs-keyword">return</span> decorate<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>这里需要关注的是，<code> def inner(obj, row=None, whole=choice):</code>中需要多一个obj实例，相当于self，<code>func(obj, row, True)</code>同样func也需要。因此我们可以总结一下，如果参数不需要动态变化(<code>*args,**kwargs</code>),那么装饰器函数中的函数的参数最好被装饰的函数的参数一致。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python实现设计模式之抽象工厂</title>
    <link href="/2020/05/28/python%E5%AE%9E%E7%8E%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/"/>
    <url>/2020/05/28/python%E5%AE%9E%E7%8E%B0%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82/</url>
    
    <content type="html"><![CDATA[<h4 id="python实现设计模式中的抽象工厂模式"><a href="#python实现设计模式中的抽象工厂模式" class="headerlink" title="python实现设计模式中的抽象工厂模式"></a><strong>python实现设计模式中的抽象工厂模式</strong></h4><p>再讲到抽象工厂模式之前，先简要谈一谈自己对于简单工厂和工厂模式的理解。</p><hr><h4 id="一、简单工厂"><a href="#一、简单工厂" class="headerlink" title="一、简单工厂"></a><strong>一、简单工厂</strong></h4><p><strong>简单工厂：</strong>简单工厂只有一个工厂存在，让子类决定实例化哪一个类，通常接住if判断条件，实例化不同的类。</p><p><strong>优点：</strong>思想简单易行，通过用户来控制实例化的类，适用于简单的场景</p><p><strong>缺点：</strong>违背了软件工程中的开闭原则，当增添额外的条件时候，需要修改工厂类。</p><p><strong>例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">factory</span>(<span class="hljs-params">self, request, password, verification_code, way</span>):</span><br>      <span class="hljs-string">&quot;&quot;&quot;set factory to manage all functions in this class&quot;&quot;&quot;</span><br><span class="hljs-comment"># 如果增添了产品，需要修改该工厂类</span><br>      func_list = &#123;<br>          <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;register_email&#x27;</span>,<br>          <span class="hljs-string">&#x27;phone&#x27;</span>: <span class="hljs-string">&#x27;register_phone&#x27;</span><br>      &#125;<br>      func = func_list.pop(way)<br>      result = <span class="hljs-built_in">getattr</span>(self, func)  <span class="hljs-comment"># use reflection based on str to get function </span><br>      <span class="hljs-keyword">return</span> result(request, password, verification_code)<br><br></code></pre></td></tr></table></figure><hr><h4 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式"></a><strong>二、工厂模式</strong></h4><p>工厂模式：相对于简单工厂来说，将逻辑判断分割到不同的子类中进行实现，一定程度上，降低了耦合性。假如某一个工厂中生产多个商品，这样的话，工厂模式就可以将这些商品分成不同的子类，然后再封装一层接口，实例化这些子类。此时工厂模式并不需要提供实例化子类的逻辑，而将这些交给公用接口去实现。</p><p><strong>优点：</strong>一定程度上降低了耦合度。在针对多个商品，一家公司作为一个工厂的情况下遵循了开闭原则，无须修改工厂类。</p><p><strong>缺点：</strong>在针对一维模型下适用，但是如果存在多家公司，多种商品的二维模型下，想要扩展多个工厂的话，就要修改工厂类代码，此时违反了开闭原则。</p><p><strong>例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeFactory</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;工厂类&#x27;&#x27;&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getShape</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.shape_name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Circle</span>(<span class="hljs-params">ShapeFactory</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.shape_name = <span class="hljs-string">&quot;Circle&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;draw circle&#x27;</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rectangle</span>(<span class="hljs-params">ShapeFactory</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        self.shape_name = <span class="hljs-string">&quot;Retangle&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">draw</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;draw Rectangle&#x27;</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeInterfaceFactory</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;接口基类&#x27;&#x27;&#x27;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;把要创建的工厂对象装配进来&#x27;&#x27;&#x27;</span><br>        <span class="hljs-keyword">raise</span>  NotImplementedError<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeCircle</span>(<span class="hljs-params">ShapeInterfaceFactory</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Circle()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShapeRectangle</span>(<span class="hljs-params">ShapeInterfaceFactory</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Rectangle()<br><br><span class="hljs-comment"># 属于同一个工厂</span><br>shape_interface = ShapeCircle()<br>obj = shape_interface.create()<br>obj.getShape()<br>obj.draw()<br><br>shape_interface2 = ShapeRectangle()<br>obj2 = shape_interface2.create()<br><br><br></code></pre></td></tr></table></figure><hr><h4 id="三、抽象工厂模式"><a href="#三、抽象工厂模式" class="headerlink" title="三、抽象工厂模式"></a><strong>三、抽象工厂模式</strong></h4><p>抽象工厂模式：抽象工厂模式相较于工厂模式来说，主要区别在于抽象工厂模式可以实现多工厂结构，也就是多家公司，而工厂模式<br>针对的单工厂结构。</p><p>优点：有效的降低了耦合度，分离接口和实现，切换工厂方便，选择不同的工厂。</p><p>缺点：存在一定的限制性，比如一家公司的产品，只能由这家公司生产，同时如果将给某一家公司中添加新的产品，仍需要修改工厂类。</p><p>可以适用于自定义支付系统，自定义不同app的日志系统等</p><p><strong>例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># -*- coding: utf-8 -*- </span><br><span class="hljs-comment"># @Time : 2020/5/9 8:50 </span><br><span class="hljs-comment"># @Author : 司云中 </span><br><span class="hljs-comment"># @File : loggings.py </span><br><span class="hljs-comment"># @Software: PyCharm</span><br><br><span class="hljs-keyword">import</span> abc<br><span class="hljs-keyword">import</span> logging<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Abstract_logger_factory</span>(<span class="hljs-params">metaclass=abc.ABCMeta</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;抽象工厂&quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">common_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">specific_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer_factory</span>(<span class="hljs-params">Abstract_logger_factory</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;the factory with consumer&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">common_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> django_logger().create_logger()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">specific_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Consumer().create_logger()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shopper_factory</span>(<span class="hljs-params">Abstract_logger_factory</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;the factory with shopper&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">common_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> django_logger().create_logger()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">specific_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> Shopper().create_logger()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">App_base</span>(<span class="hljs-params">metaclass=abc.ABCMeta</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;abstact app&quot;&quot;&quot;</span><br><br><span class="hljs-meta">    @abc.abstractmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">django_logger</span>(<span class="hljs-params">App_base</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;最基本的INFO日志&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, logger_name=<span class="hljs-string">&#x27;django&#x27;</span></span>):</span><br>        self.logger = logging.getLogger(logger_name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.logger<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Consumer</span>(<span class="hljs-params">App_base</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;the logger come from consumer&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, logger_name=<span class="hljs-string">&#x27;consumer_&#x27;</span></span>):</span><br>        self.logger = logging.getLogger(logger_name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.logger<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shopper</span>(<span class="hljs-params">App_base</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;the logger come from shopper&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, logger_name=<span class="hljs-string">&#x27;shopper_&#x27;</span></span>):</span><br>        self.logger = logging.getLogger(logger_name)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.logger<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Interface_logger</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;expose interface&quot;&quot;&quot;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, factory</span>):</span><br>        self.common_logger = factory.common_logger()<br>        self.specific_logger = factory.specific_logger()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_common_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.common_logger<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_specific_logger</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> self.specific_logger<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>设计模式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC中@RedisTemplate的装配的问题</title>
    <link href="/2020/05/27/SpringMVC%E4%B8%AD@RedisTemplate%E7%9A%84%E8%A3%85%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/27/SpringMVC%E4%B8%AD@RedisTemplate%E7%9A%84%E8%A3%85%E9%85%8D%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="RedisTemplate的装配的问题"><a href="#RedisTemplate的装配的问题" class="headerlink" title="RedisTemplate的装配的问题"></a><strong>RedisTemplate的装配的问题</strong></h4><p>把项目中遇见的问题记下来，做个笔记，比敲一阵子代码要更有成就！</p><h4 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><strong>一、背景</strong></h4><p>初入Springmvc，使用redis，不像django给你封装的挺好。就踩了一些坑，什么版本不对的问题，什么通过注解方式无法创建redis的bean对象（装载到容器失败），子容器父容器扫描冲突等等。</p><p>这次遇到的是常见bean对象失败的错误。</p><hr><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h4><p><strong>不要使用@Autowired按类型注解自动装配<code>RedisTemplate</code>对象，而使用@Resource按名字进行装配对象。！！！</strong></p><p><strong>不要使用@Autowired按类型注解自动装配<code>RedisTemplate</code>对象，而使用@Resource按名字进行装配对象。！！！</strong></p><p><strong>不要使用@Autowired按类型注解自动装配<code>RedisTemplate</code>对象，而使用@Resource按名字进行装配对象。！！！</strong></p><p>重要的事情说三遍</p><p>官网原话：<code>If you add your own @Bean of any of the auto-configured types, it replaces the default (except in the case of RedisTemplate, when the exclusion is based on the bean name, redisTemplate, not its type).</code></p><p>告诉我们<code>RedisTemplate</code>要依赖名称注入，而不是对象注入！</p><p>但是我使用了@Resource注解后，仍然出错。经过一番差错，最终找到了原因，就是Spring父容器，和Springmvc子容器的冲突，最好让springmvc只扫描controller层，而Spring可以扫描service，dao，util等其他层。</p><p>假如spring父容器扫了全部的层，那么此时springmvc想扫描controller层，就扫描不到该层，从而创建不了该对象。所以一定要注意配置好容器所扫描的层。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>SpringMVC</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>SpringMVC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django的login_required装饰器与ajax搭配的小技巧</title>
    <link href="/2020/05/24/Django%E7%9A%84login_required%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8Eajax%E6%90%AD%E9%85%8D%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/05/24/Django%E7%9A%84login_required%E8%A3%85%E9%A5%B0%E5%99%A8%E4%B8%8Eajax%E6%90%AD%E9%85%8D%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h4 id="login-required是什么？"><a href="#login-required是什么？" class="headerlink" title="login_required是什么？"></a>login_required是什么？</h4><p>login_required是django提供的装饰器之一，主要用于检验用户进入该页面前，是否已经登录，如果用户没有认证，重定向到<code>setting.py</code>中LOGIN_URL字段值的路由。采用<code>?next=</code>连接登录后跳转的页面。重定向登录页面，登录后，将会跳转到<code>?next=</code>后面所接的路由。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 使用装饰器</span><br><br><span class="hljs-meta">@login_required</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 不使用装饰器</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test2</span>(<span class="hljs-params">request</span>):</span><br>   <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.user.is_authenticated:<br>      <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;%s?next=%s&#x27;</span> % (settings.LOGIN_URL, request.path))<br><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>如果想自定义重定向的路径，可以这样写装饰器，<code>@login_required(login_url=&#39;/consumer/login/&#39;)</code></p><p>这样就会重定向到<code>/consumer/login</code>了。</p><hr><h4 id="重点来了：上面所说的login-required登录之后跳转到原界面只是适用于form等其他页面跳转的情况，不适用于ajax异步请求"><a href="#重点来了：上面所说的login-required登录之后跳转到原界面只是适用于form等其他页面跳转的情况，不适用于ajax异步请求" class="headerlink" title="重点来了：上面所说的login_required登录之后跳转到原界面只是适用于form等其他页面跳转的情况，不适用于ajax异步请求"></a><strong>重点来了：上面所说的login_required登录之后跳转到原界面只是适用于form等其他页面跳转的情况，不适用于ajax异步请求</strong></h4><p>原因:ajax请求不会自动跳转页面，login_required需针对可跳转的页面才能够返回之前的页。所以我们需要手动调用<code>window.location.href</code>进行跳转。因此我需要获取?next后面的资源地址，然后传给前端（或者前端解析），成功登录后location.href重定向。</p><p>部分代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 后端</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_previous_page</span>(<span class="hljs-params">self,path</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;get previous page which User just visited&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> path == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;/&#x27;</span>  <span class="hljs-comment"># root directory</span><br>        path_list = path.split(<span class="hljs-string">&#x27;?next=&#x27;</span>)<br>        common_logger.info(path_list[-<span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span> path_list[-<span class="hljs-number">1</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self, request</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;消费者登录&quot;&quot;&quot;</span><br>        login_id = request.data.get(<span class="hljs-string">&#x27;login_id&#x27;</span>)<br>        password = request.data.get(<span class="hljs-string">&#x27;password&#x27;</span>)<br>        path = request.data.get(<span class="hljs-string">&#x27;next&#x27;</span>)<br>        previous_page = self.get_previous_page(path)<br>        <span class="hljs-keyword">try</span>:<br>            consumer = email_or_username_auth.authenticate(request, login_id, password)<br>            <span class="hljs-keyword">if</span> consumer:<br>                login(request, consumer,backend=<span class="hljs-string">&#x27;e_mall.authentication_consumer.Email_or_Username&#x27;</span>)<br>                result = response_code.login_success<br>                result.update(&#123;<span class="hljs-string">&#x27;previous_page&#x27;</span>:previous_page&#125;)<br>                <span class="hljs-keyword">return</span> Response(result)<br>            <span class="hljs-keyword">return</span> Response(response_code.login_error)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            consumer_logger.error(<span class="hljs-string">&#x27;login_error:&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">str</span>(e)))<br>            <span class="hljs-keyword">return</span> Response(response_code.server_error)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//前端</span><br><span class="hljs-keyword">let</span> data = &#123;<span class="hljs-string">&#x27;login_id&#x27;</span>:username,<span class="hljs-string">&#x27;password&#x27;</span>:password,<span class="hljs-string">&#x27;next&#x27;</span>:next&#125;;<br>                 <span class="hljs-keyword">let</span> headers = &#123;<span class="hljs-string">&#x27;token&#x27;</span>:csrftoken&#125;;<br>                 <span class="hljs-keyword">let</span> url = <span class="hljs-string">&#x27;/consumer/login-chsc-api/&#x27;</span>;<br>                 layer.load(<span class="hljs-number">0</span>, &#123;<span class="hljs-attr">time</span>: <span class="hljs-number">1</span>*<span class="hljs-number">10000</span>&#125;);<br>                 $.ajax(&#123;<br>                   url:url,<br>                   type:<span class="hljs-string">&#x27;POST&#x27;</span>,<br>                   data:data,<br>                   headers:headers,<br>                   success:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>)</span>&#123;<br>                       <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">11</span>)&#123;<br>                          layer.msg(<span class="hljs-string">&#x27;登录成功，正在跳转...&#x27;</span>,&#123;<span class="hljs-attr">icon</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">time</span>:<span class="hljs-number">500</span>,<span class="hljs-attr">closeBtn</span>:<span class="hljs-number">0</span>&#125;);<br>                          <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;   <span class="hljs-comment">//延迟500ms执行</span><br>                                layer.closeAll(<span class="hljs-string">&#x27;msg&#x27;</span>);<br>                                alert(data.previous_page);<br>                                location.href = data.previous_page;  <span class="hljs-comment">//父页采用parent，当前页采用window，最外层页采用top，实现重定向</span><br>                            &#125;,<span class="hljs-number">500</span>);<br>                          &#125;<br>                       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data.code == -<span class="hljs-number">10</span>)&#123;<br>                          layer.msg(<span class="hljs-string">&#x27;登录名或登录密码不正确！&#x27;</span>,&#123;<span class="hljs-attr">icon</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">time</span>:<span class="hljs-number">1200</span>,<span class="hljs-attr">closeBtn</span>:<span class="hljs-number">0</span>&#125;);<br>                          &#125;<br>                       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(data.code == <span class="hljs-number">500</span>)&#123;<br>                          layer.msg(<span class="hljs-string">&#x27;服务器无响应&#x27;</span>,&#123;<span class="hljs-attr">icon</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">time</span>:<span class="hljs-number">1200</span>,<span class="hljs-attr">closeBtn</span>:<span class="hljs-number">0</span>&#125;);<br>                          &#125;<br>                       layer.closeAll(<span class="hljs-string">&#x27;loading&#x27;</span>);<br>                   &#125;,<br>                   error:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>                       layer.msg(<span class="hljs-string">&#x27;服务器无响应！&#x27;</span>,&#123;<span class="hljs-attr">icon</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">time</span>:<span class="hljs-number">1200</span>,<span class="hljs-attr">closeBtn</span>:<span class="hljs-number">0</span>&#125;);<br>                       layer.closeAll(<span class="hljs-string">&#x27;loading&#x27;</span>);<br>                      &#125;,<br>                 &#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django中的pk和id的关系</title>
    <link href="/2020/05/23/Django%E4%B8%AD%E7%9A%84pk%E5%92%8Cid%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2020/05/23/Django%E4%B8%AD%E7%9A%84pk%E5%92%8Cid%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<p>① django中的pk代表了每一个model中的主键，也就是只要model中存在主键，不管主键字段名是什么，都可以用pk来获取主键值。</p><p>② django中的id，只有在默认使用django创建的主键，或者自己创建的主键叫做id（这样反而画蛇添足），而不自己创建其他名字的主键，那么此时pk==id，但是如果自己创建了其他情况下，就要使用相应的主键名来获取值，但是，pk此时同样也可以获得到自定义的主键名。</p><p>举个简单的例子：</p><p>加入我创建了某个model的my_id的主键，我要获取该model的主键，此时有两种写法，<code>model.objects.get(pk=1)</code>或者<code>model.objects.get(my_id=1)</code>，而不能再是默认的id作为名字了。</p><p>总结：大多数情况下，使用pk就行了。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 使用celery实现定时任务</title>
    <link href="/2020/05/23/python%20%E4%BD%BF%E7%94%A8celery%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <url>/2020/05/23/python%20%E4%BD%BF%E7%94%A8celery%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<h3 id="python使用celery实现定时任务"><a href="#python使用celery实现定时任务" class="headerlink" title="python使用celery实现定时任务"></a><strong>python使用celery实现定时任务</strong></h3><p>celery是python的第三方包，在django中也可以使用，只不过需要手动进行配置相关配置信息。</p><p>很多情况下需要定时的执行某些任务，例如我的博客中，需要每天凌晨5点更新当天的笔记记录情况，主要用于热点图的可视化工作。选定某一个时间更新，加上增加缓存就可以有效的降低服务器的压力。</p><p>或者在其他业务中也经常用到定时任务进行数据库的维护或者定时爬虫，生日定时消息推送等等。接下来就一起学习一下celery的定时任务的实现。</p><p>假设你已经写好了celery任务函数。</p><h4 id="对定时任务代码简单实现"><a href="#对定时任务代码简单实现" class="headerlink" title="对定时任务代码简单实现"></a><strong>对定时任务代码简单实现</strong></h4><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> celery.schedules <span class="hljs-keyword">import</span> crontab<br><span class="hljs-comment"># 以下是我每天凌晨自动更新文章发布数量的定时任务的配置，在setting.py中进行配置</span><br><br><span class="hljs-comment"># celery时区设置，使用settings中TIME_ZONE同样的时区，关系到定时任务是否能够准确触发</span><br>CELERY_TIME_ZONE = TIME_ZONE<br><br><span class="hljs-comment"># 定时任务</span><br>CELERYBEAT_SCHEDULE = &#123;<br>    <span class="hljs-string">&#x27;update_note&#x27;</span>: &#123;     <span class="hljs-comment"># 每天零点触发的任务函数</span><br>        <span class="hljs-string">&#x27;task&#x27;</span>: <span class="hljs-string">&#x27;mainsite.tasks.update_daily_note&#x27;</span>,<br>        <span class="hljs-string">&#x27;schedule&#x27;</span>: crontab(minute=<span class="hljs-number">0</span>, hour=<span class="hljs-number">0</span>),<br>    &#125;,<br>    <span class="hljs-string">&#x27;add-every-30-seconds&#x27;</span>: &#123;     <span class="hljs-comment"># 每个30s触发的测试函数</span><br>        <span class="hljs-string">&#x27;task&#x27;</span>: <span class="hljs-string">&#x27;mainsite.tasks.tests_Periodic&#x27;</span>,<br>        <span class="hljs-string">&#x27;schedule&#x27;</span>: <span class="hljs-number">30.0</span>,<br>        <span class="hljs-string">&#x27;args&#x27;</span>: (),<br>    &#125;,<br>&#125;<br><br></code></pre></td></tr></table></figure><p>说明：为了让任务能够一直被监听到，我们需要一直与celery保持连接，所以我们需要启动一个心跳包（beat）。</p><p>启动指令：<code>celery beat -A project -l info</code></p><p>启动成功，会显示如下信息：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cmd">celery beat v4.<span class="hljs-number">4</span>.<span class="hljs-number">2</span> (cliffs) is starting.<br>__    -    ... __   -        _<br>LocalTime -&gt; <span class="hljs-number">2020</span>-<span class="hljs-number">04</span>-<span class="hljs-number">25</span> <span class="hljs-number">21</span>:<span class="hljs-number">16</span>:<span class="hljs-number">39</span><br>Configuration -&gt;<br>    . broker -&gt; redis://:**@<span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">6379</span>/<span class="hljs-number">0</span><br>    . loader -&gt; celery.loaders.app.AppLoader<br>    . scheduler -&gt; celery.beat.PersistentScheduler<br>    . db -&gt; celerybeat-schedule<br>    . logfile -&gt; [stderr]@%INFO<br>    . maxinterval -&gt; <span class="hljs-number">5</span>.<span class="hljs-number">00</span> minutes (<span class="hljs-number">300</span>s)<br><br></code></pre></td></tr></table></figure><p>beat心跳包的原理是每隔一段时间告诉服务器，我还活着，不要断开我哦。</p><p>因为服务器一般会在一个Timer事件中，向客户端发送一个很小的数据包，然后启动一个低级别的线程，这个线程的作用是不断监听这个客户端是否还在连接中，客户端需要告知这个线程我还活着，这样就可以一直保持着连接。</p><p><strong>注：</strong>启动成功后，一旦定时任务触发，如果有输出结果的话，会在celery的日志中出现。</p><h4 id="Crontab-schedules的各种形式"><a href="#Crontab-schedules的各种形式" class="headerlink" title="Crontab schedules的各种形式"></a><strong>Crontab schedules的各种形式</strong></h4><p><code>from celery.schedules import crontab</code></p><p>通过crontab设定不同时间的定时任务</p><p>下面是取自官方的example</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">crontab() <span class="hljs-comment"># Execute every minute.</span><br>crontab(minute=<span class="hljs-number">0</span>, hour=<span class="hljs-number">0</span>) <span class="hljs-comment"># Execute daily at midnight.</span><br>crontab(minute=<span class="hljs-number">0</span>, hour=<span class="hljs-string">&#x27;*/3&#x27;</span>) <span class="hljs-comment"># Execute every three hours: midnight, 3am, 6am, 9am, noon, 3pm, 6pm, 9pm.</span><br><br>crontab(minute=<span class="hljs-number">0</span>,hour=<span class="hljs-string">&#x27;0,3,6,9,12,15,18,21&#x27;</span>)<br>crontab(minute=<span class="hljs-string">&#x27;*/15&#x27;</span>) <span class="hljs-comment"># Execute every 15 minutes.</span><br>crontab(day_of_week=<span class="hljs-string">&#x27;sunday&#x27;</span>) <span class="hljs-comment"># Execute every minute (!) at Sundays.</span><br><br>crontab(minute=<span class="hljs-string">&#x27;*&#x27;</span>, hour=<span class="hljs-string">&#x27;*&#x27;</span>, day_of_week=<span class="hljs-string">&#x27;sun&#x27;</span>) <span class="hljs-comment"># Same as previous.</span><br><br>crontab(minute=<span class="hljs-string">&#x27;*/10&#x27;</span>, hour=<span class="hljs-string">&#x27;3,17,22&#x27;</span>, day_of_week=<span class="hljs-string">&#x27;thu,fri&#x27;</span>) <span class="hljs-comment"># Execute every ten minutes, but only between 3-4 am, 5-6 pm, and 10-11 pm on Thursdays or Fridays.</span><br>crontab(minute=<span class="hljs-number">0</span>, hour=<span class="hljs-string">&#x27;*/2,*/3&#x27;</span>) <span class="hljs-comment"># Execute every even hour, and every hour divisible by three. This means: at every hour except: 1am, 5am, 7am, 11am, 1pm, 5pm, 7pm, 11pm</span><br>crontab(minute=<span class="hljs-number">0</span>, hour=<span class="hljs-string">&#x27;*/5&#x27;</span>) <span class="hljs-comment"># Execute hour divisible by 5. This means that it is triggered at 3pm, not 5pm (since 3pm equals the 24-hour clock value of “15”, which is divisible by 5).</span><br>crontab(minute=<span class="hljs-number">0</span>, hour=<span class="hljs-string">&#x27;*/3,8-17&#x27;</span>) <span class="hljs-comment"># Execute every hour divisible by 3, and every hour during office hours (8am-5pm).</span><br>crontab(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, day_of_month=<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-comment"># Execute on the second day of every month.</span><br><br>crontab(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, day_of_month=<span class="hljs-string">&#x27;2-30/2&#x27;</span>) <span class="hljs-comment"># Execute on every even numbered day.</span><br><br>crontab(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, day_of_month=<span class="hljs-string">&#x27;1-7,15-21&#x27;</span>) <span class="hljs-comment"># Execute on the first and third weeks of the month.</span><br><br>crontab(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, day_of_month=<span class="hljs-string">&#x27;11&#x27;</span>, month_of_year=<span class="hljs-string">&#x27;5&#x27;</span>) <span class="hljs-comment"># Execute on the eleventh of May every year.</span><br><br>crontab(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, month_of_year=<span class="hljs-string">&#x27;*/3&#x27;</span>) <span class="hljs-comment"># Execute every day on the first month of every quarter.</span><br></code></pre></td></tr></table></figure><p>还有些其他的要点，可以参考官方文档：</p><p><a href="https://docs.celeryproject.org/en/stable">https://docs.celeryproject.org/en/stable</a></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Celery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Celery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python批量将word文档转换类型</title>
    <link href="/2020/05/22/Python%E6%89%B9%E9%87%8F%E5%B0%86word%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/05/22/Python%E6%89%B9%E9%87%8F%E5%B0%86word%E6%96%87%E6%A1%A3%E8%BD%AC%E6%8D%A2%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="python将word文档转为需要的格式"><a href="#python将word文档转为需要的格式" class="headerlink" title="python将word文档转为需要的格式"></a>python将word文档转为需要的格式</h3><hr><p>比如在查重时候，要求文档格式统一，那么就可以批量对文档进行转化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> win32com <span class="hljs-keyword">import</span> client <span class="hljs-keyword">as</span> wc<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_doc_to_docx</span>(<span class="hljs-params">raw_path, new_path</span>):</span>  <span class="hljs-comment"># doc转docx</span><br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    :param rawpath: 传入和传出文件夹的路径</span><br><span class="hljs-string">    :return: None</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    word = wc.Dispatch(<span class="hljs-string">&quot;Word.Application&quot;</span>)<br>    <span class="hljs-comment"># 不能用相对路径，老老实实用绝对路径</span><br>    <span class="hljs-comment"># 需要处理的文件所在文件夹目录</span><br>    filenamelist = os.listdir(raw_path)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.isdir(new_path):<br>        os.makedirs(new_path)<br>    <span class="hljs-keyword">for</span> filename <span class="hljs-keyword">in</span> filenamelist:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span>  <span class="hljs-keyword">not</span> filename.startswith(<span class="hljs-string">&#x27;~$&#x27;</span>) <span class="hljs-keyword">and</span> (filename.endswith(<span class="hljs-string">&#x27;.doc&#x27;</span>) <span class="hljs-keyword">or</span> filename.endswith(<span class="hljs-string">&#x27;.docx&#x27;</span>)):<br>                doc = word.Documents.Open(raw_path + filename)<br>                rename = os.path.splitext(filename)  <span class="hljs-comment"># 将文件名与后缀分开</span><br>                new_file_path = <span class="hljs-string">&#x27;&#123;new_path&#125;&#123;filename&#125;.docx&#x27;</span>.<span class="hljs-built_in">format</span>(new_path=new_path, filename=rename[<span class="hljs-number">0</span>])<br>                <span class="hljs-comment"># doc.SaveAs(new_file_path, 12)  # 12表示docx格式，16表示doc格式</span><br>                doc.SaveAs(new_path + rename[<span class="hljs-number">0</span>] + <span class="hljs-string">&#x27;.docx&#x27;</span>, <span class="hljs-number">12</span>)  <span class="hljs-comment"># 12表示docx格式，16表示doc格式</span><br>                doc.Close()  <span class="hljs-comment"># 关闭文件</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(filename)<br>            <span class="hljs-keyword">continue</span><br>    word.Quit()<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    path = <span class="hljs-string">&quot;C:\\Users\\ASUS\\Desktop\\软件1705班编译原理实验一\\&quot;</span><br>    new_path = <span class="hljs-string">&quot;C:\\Users\\ASUS\\Desktop\\软件工程1705班汇编原理实验一\\&quot;</span><br>    save_doc_to_docx(path,new_path)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx 上传文件过大的问题</title>
    <link href="/2020/05/22/nginx%20%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/22/nginx%20%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6%E8%BF%87%E5%A4%A7%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="文件上传过大被nginx拦截的问题解决"><a href="#文件上传过大被nginx拦截的问题解决" class="headerlink" title="文件上传过大被nginx拦截的问题解决"></a><strong>文件上传过大被nginx拦截的问题解决</strong></h3><p>花了半小时最近了个上传文件的功能，有效的解决了qq收作业，各种消息轰炸的局面，但是针对一些上传文件过大的内容，nginx会限制报错，例如充满图片的ppt。</p><p><strong>出现错误：</strong></p><p><code>2020/05/21 15:27:58 [error] 1701#1701: *26 client intended to send too large body: 10998982 bytes, client:</code></p><p>主要是由于上传文件过大导致的问题。</p><p><strong>解决方案：</strong></p><p>只需要修改nginx种上传文件body的最大限度就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>http &#123;<br><span class="hljs-comment">##</span><br><span class="hljs-comment"># Basic Settings</span><br><span class="hljs-comment">##</span><br>                <span class="hljs-comment"># 默认请求报文的最大限量</span><br>                client_max_body_size 20M;  <br>        <span class="hljs-comment"># 下载应用时需要off</span><br>sendfile on;<br> <br>tcp_nopush on;<br>tcp_nodelay on;<br>keepalive_timeout <span class="hljs-number">65</span>;<br>types_hash_max_size <span class="hljs-number">2048</span>;<br><span class="hljs-comment"># server_tokens off;</span><br><br><span class="hljs-comment"># server_names_hash_bucket_size 64;</span><br><span class="hljs-comment"># server_name_in_redirect off;</span><br>        <br>        <span class="hljs-comment"># 包含的类型</span><br>include /etc/nginx/mime.types;<br>         <br></code></pre></td></tr></table></figure><p>说明： 只要添加<code>client_max_body_size 20M; </code>这行就可以了。</p><p>最后，重启nginx服务器。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django使用多个backends的小问题</title>
    <link href="/2020/05/19/Django%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAbackends%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/"/>
    <url>/2020/05/19/Django%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AAbackends%E7%9A%84%E5%B0%8F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>用户面临登录的时候，可以有不同的登入方式，可以手机号，邮箱，用户名，第三方登录等。那么我们就需要重写后端认证类。但是有些情况下会出现多个backend认证。使用login()方法的时候，会报错。</p><p>具体错误：</p><p><code>You have multiple authentication backends configured and therefore must provide the </code>backend<code>argument or set the</code>backend<code> attribute on the user.</code></p><p>该错误指明了我在配置文件中配置了多个backend，那么我在使用login()的时候需要指定使用哪一个backend。</p><p><code>AUTHENTICATION_BACKENDS = [&#39;e_mall.authentication_consumer.Email_or_Username&#39;, &#39;e_mall.authentication_consumer.Phone&#39;]</code></p><p>解决方案：</p><p><code> login(request,consumer,backend=&#39;django.contrib.auth.backends.ModelBackend&#39;)</code></p><p>指定backend就好了。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django 如何加载settings.py 的源码分析</title>
    <link href="/2020/05/19/django%20%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDsettings.py%20%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <url>/2020/05/19/django%20%E5%A6%82%E4%BD%95%E5%8A%A0%E8%BD%BDsettings.py%20%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="Django加载setting-py的核心过程的源码分析"><a href="#Django加载setting-py的核心过程的源码分析" class="headerlink" title="Django加载setting.py的核心过程的源码分析"></a>Django加载setting.py的核心过程的源码分析</h3><p>先简单总结一下大致的过程：</p><p>django项目启动编译，先加载<code>global_settings.py</code>中的配置，然后再加载根目录下的settings.py并利用反射机制进行覆盖。</p><p>原理步骤分析：</p><h4 id="首先从入口manage-py分析："><a href="#首先从入口manage-py分析：" class="headerlink" title="首先从入口manage.py分析："></a>首先从入口manage.py分析：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 将根目录下的setting.py文件利用基于字符串驱动的反射机制，添加到os.environ的字典中，以DJANGO_SETTINGS_MODULE作为键值。</span><br>    os.environ.setdefault(<span class="hljs-string">&#x27;DJANGO_SETTINGS_MODULE&#x27;</span>, <span class="hljs-string">&#x27;mblog.settings&#x27;</span>)<br>    <span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 获取控制台启动命令，会检查是否导入所需要的模块</span><br>        <span class="hljs-keyword">from</span> django.core.management <span class="hljs-keyword">import</span> execute_from_command_line<br>    <span class="hljs-keyword">except</span> ImportError <span class="hljs-keyword">as</span> exc:<br>        <span class="hljs-keyword">raise</span> ImportError(<br>            <span class="hljs-string">&quot;Couldn&#x27;t import Django. Are you sure it&#x27;s installed and &quot;</span><br>            <span class="hljs-string">&quot;available on your PYTHONPATH environment variable? Did you &quot;</span><br>            <span class="hljs-string">&quot;forget to activate a virtual environment?&quot;</span><br>        ) <span class="hljs-keyword">from</span> exc<br>    execute_from_command_line(sys.argv)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># 项目入口处</span><br>    main()<br></code></pre></td></tr></table></figure><h4 id="进入到django-conf中"><a href="#进入到django-conf中" class="headerlink" title="进入到django.conf中"></a>进入到django.conf中</h4><p><code>settings = LazySettings()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LazySettings</span>(<span class="hljs-params">LazyObject</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    A lazy proxy for either global Django settings or a custom settings object.</span><br><span class="hljs-string">    The user can manually configure settings prior to using them. Otherwise,</span><br><span class="hljs-string">    Django uses the settings module pointed to by DJANGO_SETTINGS_MODULE.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><span class="hljs-comment"># 启动项</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_setup</span>(<span class="hljs-params">self, name=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Load the settings module pointed to by the environment variable. This</span><br><span class="hljs-string">        is used the first time settings are needed, if the user hasn&#x27;t</span><br><span class="hljs-string">        configured settings manually.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># 利用反射机制字典中DJANGO_SETTINGS_MODULE键对应的根目录下的settings.py</span><br>        settings_module = os.environ.get(ENVIRONMENT_VARIABLE)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> settings_module:<br>            desc = (<span class="hljs-string">&quot;setting %s&quot;</span> % name) <span class="hljs-keyword">if</span> name <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;settings&quot;</span><br>            <span class="hljs-keyword">raise</span> ImproperlyConfigured(<br>                <span class="hljs-string">&quot;Requested %s, but settings are not configured. &quot;</span><br>                <span class="hljs-string">&quot;You must either define the environment variable %s &quot;</span><br>                <span class="hljs-string">&quot;or call settings.configure() before accessing settings.&quot;</span><br>                % (desc, ENVIRONMENT_VARIABLE))<br>        <span class="hljs-comment"># 配置settings.py文件内容，进行文件的覆盖和初始化</span><br>        self._wrapped = Settings(settings_module)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># Hardcode the class name as otherwise it yields &#x27;Settings&#x27;.</span><br>        <span class="hljs-keyword">if</span> self._wrapped <span class="hljs-keyword">is</span> empty:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;LazySettings [Unevaluated]&gt;&#x27;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;LazySettings &quot;%(settings_module)s&quot;&gt;&#x27;</span> % &#123;<br>            <span class="hljs-string">&#x27;settings_module&#x27;</span>: self._wrapped.SETTINGS_MODULE,<br>        &#125;<br>...<br><br></code></pre></td></tr></table></figure><h4 id="进入到setting中"><a href="#进入到setting中" class="headerlink" title="进入到setting中"></a>进入到setting中</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Settings</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, settings_module</span>):</span><br>        <span class="hljs-comment"># update this dict from global settings (but only for ALL_CAPS settings)</span><br>        <span class="hljs-comment"># dir()获取当前模块的属性,方法列表</span><br>        <span class="hljs-keyword">for</span> setting <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(global_settings):<br>            <span class="hljs-keyword">if</span> setting.isupper():<br>                <span class="hljs-comment"># 通过反射机制获取global_settings的配置内让能够</span><br>                <span class="hljs-built_in">setattr</span>(self, setting, <span class="hljs-built_in">getattr</span>(global_settings, setting))<br><br>        <span class="hljs-comment"># store the settings module in case someone later cares</span><br>        <span class="hljs-comment"># 将根目录下的settings文件赋给self.SETTINGS_MODULE</span><br>        self.SETTINGS_MODULE = settings_module<br><br>        <span class="hljs-comment"># 导入该配置模块</span><br>        mod = importlib.import_module(self.SETTINGS_MODULE)<br><br>        tuple_settings = (<br>            <span class="hljs-string">&quot;INSTALLED_APPS&quot;</span>,<br>            <span class="hljs-string">&quot;TEMPLATE_DIRS&quot;</span>,<br>            <span class="hljs-string">&quot;LOCALE_PATHS&quot;</span>,<br>        )<br>        self._explicit_settings = <span class="hljs-built_in">set</span>()<br>        <span class="hljs-keyword">for</span> setting <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(mod):<br>            <span class="hljs-keyword">if</span> setting.isupper():<br>                <span class="hljs-comment"># 获取settings.py中的每项配置</span><br>                setting_value = <span class="hljs-built_in">getattr</span>(mod, setting)<br><br>                <span class="hljs-keyword">if</span> (setting <span class="hljs-keyword">in</span> tuple_settings <span class="hljs-keyword">and</span><br>                        <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(setting_value, (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>))):<br>                    <span class="hljs-keyword">raise</span> ImproperlyConfigured(<span class="hljs-string">&quot;The %s setting must be a list or a tuple. &quot;</span> % setting)<br>                <span class="hljs-comment"># 利用反射将setting_value添加到self._explicit_settings集合中去</span><br>                <span class="hljs-built_in">setattr</span>(self, setting, setting_value)<br>                self._explicit_settings.add(setting)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.SECRET_KEY:<br>    <span class="hljs-comment"># 检查是否存在密钥，每个django项目都有唯一的密钥</span><br>            <span class="hljs-keyword">raise</span> ImproperlyConfigured(<span class="hljs-string">&quot;The SECRET_KEY setting must not be empty.&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> self.is_overridden(<span class="hljs-string">&#x27;DEFAULT_CONTENT_TYPE&#x27;</span>):<br>            warnings.warn(DEFAULT_CONTENT_TYPE_DEPRECATED_MSG, RemovedInDjango30Warning)<br>        <span class="hljs-keyword">if</span> self.is_overridden(<span class="hljs-string">&#x27;FILE_CHARSET&#x27;</span>):<br>            warnings.warn(FILE_CHARSET_DEPRECATED_MSG, RemovedInDjango31Warning)<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(time, <span class="hljs-string">&#x27;tzset&#x27;</span>) <span class="hljs-keyword">and</span> self.TIME_ZONE:<br>    <span class="hljs-comment"># 配置self.TIME_ZONE</span><br>            <span class="hljs-comment"># When we can, attempt to validate the timezone. If we can&#x27;t find</span><br>            <span class="hljs-comment"># this file, no check happens and it&#x27;s harmless.</span><br>            zoneinfo_root = Path(<span class="hljs-string">&#x27;/usr/share/zoneinfo&#x27;</span>)<br>            zone_info_file = zoneinfo_root.joinpath(*self.TIME_ZONE.split(<span class="hljs-string">&#x27;/&#x27;</span>))<br>            <span class="hljs-keyword">if</span> zoneinfo_root.exists() <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> zone_info_file.exists():<br>                <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&quot;Incorrect timezone setting: %s&quot;</span> % self.TIME_ZONE)<br>            <span class="hljs-comment"># Move the time zone info into os.environ. See ticket #2315 for why</span><br>            <span class="hljs-comment"># we don&#x27;t do this unconditionally (breaks Windows).</span><br>            os.environ[<span class="hljs-string">&#x27;TZ&#x27;</span>] = self.TIME_ZONE<br>            time.tzset()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_overridden</span>(<span class="hljs-params">self, setting</span>):</span><br>        <span class="hljs-comment"># 判断是否覆盖了默认的配置文件</span><br>        <span class="hljs-keyword">return</span> setting <span class="hljs-keyword">in</span> self._explicit_settings<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__repr__</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-comment"># 直接调用对象的话就会调用__repr__内置方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&lt;%(cls)s &quot;%(settings_module)s&quot;&gt;&#x27;</span> % &#123;<br>            <span class="hljs-string">&#x27;cls&#x27;</span>: self.__class__.__name__,<br>            <span class="hljs-string">&#x27;settings_module&#x27;</span>: self.SETTINGS_MODULE,<br>        &#125;<br></code></pre></td></tr></table></figure><p>总结：主要的初始化还是在Setting类中实现，我们还可以发先大多是的框架底层源码都会使用反射机制，<br><code>getattr,hasattr,setattr,delattr</code>方法。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL底层索引结构分析</title>
    <link href="/2020/05/17/mysql%E5%BA%95%E5%B1%82%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/"/>
    <url>/2020/05/17/mysql%E5%BA%95%E5%B1%82%E7%B4%A2%E5%BC%95%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="Mysql底层索引结构分析"><a href="#Mysql底层索引结构分析" class="headerlink" title="Mysql底层索引结构分析"></a><strong>Mysql底层索引结构分析</strong></h3><p>mysql数据库底层所采用的是B+树，那么B+树的索引结构，又是怎么推导出来的呢？为什么Mysql选用B+树作为索引结构，而不是二叉树，平衡二叉树，红黑树或是B树呢？今天来分别学习一下这些树的结构。</p><h4 id="一、二叉树"><a href="#一、二叉树" class="headerlink" title="一、二叉树"></a><strong>一、二叉树</strong></h4><p>二叉树应该是我们学习数据结构的一开始就接触的树结构。二叉树的性质就是左子树的所有节点的值小于当前根结点，右子树的所有节点的值大于当前根结点。假设二叉树作为索引结构，要比一条一条遍历要效率要高不少。</p><p>举个简单的例子：</p><p><img src="/media/editor/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91_20200503171756313469.png">{width=90%}</p><p>说明：假设根据用户的id创建索引，从小到大，那么现在我要查找id为20的用户信息，通过二叉树，我们只需要比较4次，就可以找到该用户，而如果不建立索引，通过一条一条数据行遍历，那么就会需要9次，由此我们可以看出建立索引要比不建立索引至少效率提高一倍。</p><p>注：但是二叉树也会存在弊端，就是遇见最坏的情况，所有的结点变成了一条线性链表。因此平衡二叉树可以有效的防止这种最坏的情况出现。尽管如此，mysql却并没有选择平衡二叉树作为索引结构，那么说明还有更好的索引结构。请继续往下看~</p><hr><h4 id="二、红黑树"><a href="#二、红黑树" class="headerlink" title="二、红黑树"></a><strong>二、红黑树</strong></h4><p>红黑树是一种自平衡二叉树，因为伴随着某一个结点的增加删除，会自适应的调整当前树的结构，使之满足任意两个节点之间的层次差不大于2，也就是小于等于2.我们应该知道平衡二叉树应该任意两个节点之间的层次不超过1，所以红黑树不能算是一棵严格的平衡二叉树。</p><p>红黑树的性质：</p><p>① 根结点为红色或者黑色。</p><p>② 所有的叶子结点都为黑色（叶子结点为Null）</p><p>③ 如果一棵二叉树为红黑树，那么其子树也为红黑树</p><p>④ 任意两个结点间的层次差不能大于2</p><p>⑤ 每条路径都包含相同的黑色结点个数</p><p><img src="/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20200503173027310615.png">{width=80%}</p><hr><p>为上图添加2个值为3的结点，红黑树会根据其性质做适当的翻转，调整，在插入和删除的情况下，效率要好于平衡二叉树。但是查找的情况下，因为红黑树在结点相同的情况下，层次要比平衡二叉树高，所以查询的效率要稍微低于平衡二叉树。通过翻转来提高查找删除效率。</p><p><img src="/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%912_20200503173051195543.png">{width=80%}</p><hr><h4 id="三、B树"><a href="#三、B树" class="headerlink" title="三、B树"></a><strong>三、B树</strong></h4><p>B树相较于二叉树，平衡二叉树，红黑树来说，结构发生了一些改变。B树允许一个结点中存放多个关键字，而这些结点中多了一个空间域，存放data，可以是当前行所在的磁盘文件指针地址，也可以是当前行的数据。为什么要要存放多个结点呢？我们应该晓得一棵树的层次越浅，查找的性能就越高。如果存在千万级的数据量，使用平衡二叉树的话，树的深度会非常深，所需要读取磁盘IO的次数将会非常多，因为读取数据会以磁盘块的形式读取，而不是一条一条的读取，这就导致查找的效率也不是很高。而B树就很好的弥补了平衡二叉树的这种缺陷。</p><p><img src="/media/editor/B%E6%A0%91_20200503174312079300.png">{width=80%}</p><p><img src="/media/editor/B%E6%A0%912_20200503174352504810.png">{width=80%}</p><p>我们通过图可以看见，我设定了每个结点中的关键字最大不超过4，每个关键字都会带上data域。</p><p><strong>说明：</strong></p><p>假设我要查找88这个元素，那么首先将0015关键字放进内存中与0088比较，在磁盘上找到0024和0076所在的结点，然后将其们放入内存与0088比较，比较得出0088和0089这个页，然后将其们放进内存，比较得出88，最后，找到88所对应的data，进入相应的磁盘文件读取该数据行，返回结果。</p><p>这个过程总共比较了3次，外加三次次磁盘IO读取，在B树中查找结点实在磁盘上进行的，而在结点中找关键字是在内存中进行的，因此相比于平衡二叉树来说效率会更高。那么为什么mysql选用的是B+树作为索引结构，而不是B树呢？别急，请看下面介绍B+树~</p><hr><h4 id="四、B-树"><a href="#四、B-树" class="headerlink" title="四、B+树"></a><strong>四、B+树</strong></h4><p>B+树听起来就像是B树的升级版，实事也是如此，B+树对B树的改进主要在于将所有非叶子节点中的data域去除了，这样做可以增加索引个数，这里给大家简单的计算下索引个数，假设我存储的索引类型为int整型，大小也就是4B（不包含data），而Mysql底层规定的指针大小为6B，每一页的大小为16k，那么索引个数为<code>16k/(6B+4B)</code>个索引，如果加上了data，会变得更小。</p><p><strong>注：</strong></p><p>每个结点中存放的关键字多了，层数自然就会相对于B树更浅了。同时一次磁盘IO读取的磁盘块中的索引结点也会更多，有效的减少了磁盘IO，提高了查找效率。</p><p><img src="/media/editor/B+%E6%A0%91_20200503175515038305.png">{width=80%}</p><p>通过图，我们可以清晰的看出B树和B+树的差异。</p><hr><h4 id="五、Mysql中的两种索引结构"><a href="#五、Mysql中的两种索引结构" class="headerlink" title="五、Mysql中的两种索引结构"></a><strong>五、Mysql中的两种索引结构</strong></h4><p>mysql中建立索引的时候，有两种可以选择的索引，分别为B+树和hash，通常我们选择B+树作为索引结构，而不是用hash，因为hash创建索引结构存在几个弊端：</p><p>① hash查找单个索引的时间复杂度为0(1),但无法查找范围内的数据</p><p>② 针对索引使用order by的时候，hash不支持排序</p><p>③ 当数据量非常大的时候，哈希冲突也就更加明显。</p><hr><h4 id="六、Mysql中的两种存储引擎"><a href="#六、Mysql中的两种存储引擎" class="headerlink" title="六、Mysql中的两种存储引擎"></a><strong>六、Mysql中的两种存储引擎</strong></h4><p>Mysql中同样穿在两种存储引擎，分别为innodb和mylsam，两者的区别主要是data域上的区别以及产生的不同的效果</p><p>mylsam的data域上存放的当前行的磁盘文件索引地址，也就是找到了该索引，要进行一次磁盘IO读取该行所对应的数据。</p><p>Innodb的data域上存放的是当前行的数据信息，将数据和索引放在了同一个文件下，因此减少了mylsam中的所需要的一次磁盘IO读写，也相应的提高了查找效率。毕竟磁盘的读取速度要比内存慢很多很多。</p><hr><h4 id="七、为什么要设计主键，并且为整型？主键为什么要自增？"><a href="#七、为什么要设计主键，并且为整型？主键为什么要自增？" class="headerlink" title="七、为什么要设计主键，并且为整型？主键为什么要自增？"></a><strong>七、为什么要设计主键，并且为整型？主键为什么要自增？</strong></h4><p>① 首先如果你不创建主键，mysql会自动为你创建一个主键，主键常常用作索引，因此在索引比较的时候，整型的数据比较大小要比字符串按位比较大小效率快得多。</p><p>② 主键自增带来的好处是范围查找以及插入的效率。主键自增的话，索引的排列顺序将会是依次增加的，根据上面的B+数中的图，我们也可以发现，所有的叶子节点之间用了指针相连，这样查找大于某个索引值的数据集的话，就很方便，因为它是按顺序排列的嘛。但是如果不是自增的话，加入我之前已经插入了50这个索引，现在我要插入46这个索引，假设一个页只能够存储4个字节，而之前50这个领域（包含自己）内已经存在了4个字节，此时我要插入46是不是得将这个已经满的页给分裂成两个子页，重新组合，这样就可能破坏了树的结构。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 如何去掉redis返回结果中的&#39;b&#39;</title>
    <link href="/2020/05/15/python%20%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89redis%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84&#39;b&#39;/"/>
    <url>/2020/05/15/python%20%E5%A6%82%E4%BD%95%E5%8E%BB%E6%8E%89redis%E8%BF%94%E5%9B%9E%E7%BB%93%E6%9E%9C%E4%B8%AD%E7%9A%84&#39;b&#39;/</url>
    
    <content type="html"><![CDATA[<h3 id="python-去掉redis返回结果中的’b’的三种方法"><a href="#python-去掉redis返回结果中的’b’的三种方法" class="headerlink" title="python 去掉redis返回结果中的’b’的三种方法"></a>python 去掉redis返回结果中的’b’的三种方法</h3><p>众所周知，redis是以二进制存储数据对象的，那么当我们要取出值的时候，是二进制形式的，因此是需要解码的。</p><h4 id="法一："><a href="#法一：" class="headerlink" title="法一："></a>法一：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>_code = _redis.get(key).decode()<br><br></code></pre></td></tr></table></figure><p>使用<code>decode()</code>进行解码</p><h4 id="法二："><a href="#法二：" class="headerlink" title="法二："></a>法二：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>_code = _redis.get(key)<br><br>_code = <span class="hljs-built_in">str</span>(_code,encoding=<span class="hljs-string">&#x27;uft-8&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h4 id="法三："><a href="#法三：" class="headerlink" title="法三："></a>法三：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>StrictRedis(host=<span class="hljs-string">&#x27;localhost&#x27;</span>, port=<span class="hljs-number">6379</span>, db=<span class="hljs-number">0</span>,decode_responses=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>这样在生成redis实例的时候设置自动解码为True</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 实现Redis操作类的单例模式</title>
    <link href="/2020/05/15/python%20%E5%AE%9E%E7%8E%B0redis%E6%93%8D%E4%BD%9C%E7%B1%BB%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2020/05/15/python%20%E5%AE%9E%E7%8E%B0redis%E6%93%8D%E4%BD%9C%E7%B1%BB%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="Python实现单例模式的使用—-redis和logging"><a href="#Python实现单例模式的使用—-redis和logging" class="headerlink" title="Python实现单例模式的使用—-redis和logging"></a>Python实现单例模式的使用—-redis和logging</h3><p>前几天刚学习了几个基本的设计模式，今天来实践下单例模式。</p><p>简单介绍一下单例模式：单例模式属于创建型模式，只能创建一个实例，而且只能存在一个实例，其他，其他对象调用该实例的话，也只能调用唯一的这个实例。</p><p>下面结合具体的例子来分析：</p><p><strong>reids实现单例模式：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Redis_operation</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;some operation about redis&quot;&quot;&quot;</span><br><br>    _instance = &#123;&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, redis_instance</span>):</span><br>        self._redis = redis_instance<br><br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">choice_redis_db</span>(<span class="hljs-params">cls, db</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;choice designated db in redis&quot;&quot;&quot;</span><br>        <span class="hljs-string">&quot;&quot;&quot;different redis db , but follow the single mode&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cls._instance.setdefault(db, <span class="hljs-literal">None</span>):<br>            cls._instance[db] = get_redis_connection(db)<br>        <span class="hljs-keyword">return</span> cls(cls._instance[db])<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_key_value</span>(<span class="hljs-params">self, key, value</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;compare key-value code and code in redis for equality &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> self._redis.exists(key):<br>                _value = self._redis.get(key).decode()<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> _value == value <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            consumer_logger.error(e)<br>        <span class="hljs-keyword">finally</span>:<br>            self._redis.close()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_key_value</span>(<span class="hljs-params">self, key, code, time</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;cache verification code for ten minutes&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">try</span>:<br>            self._redis.<span class="hljs-built_in">set</span>(key, code)<br>            self._redis.expire(key, time)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            consumer_logger.error(e)<br>        <span class="hljs-keyword">finally</span>:<br>            self._redis.close()<br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>上述例子中所使用@classmethod装饰器来实现，<code>@classmethod</code>装饰器可以帮助你在实例化类之前做一些特殊的操作。上述的例子中，我在实例化类之前首先判断是否类属性<code>_instance</code>存在某个特定的redis实例，如果存在，那么我直接返回这个<code>_instance</code>,如果不存在，将使用将创建相应的redis实例，然后存放到<code>_instance</code>字典中，最后创建该类的实例。通常最后返回的就是该类的实例对象。</p><p>注：因为我考虑到不同的数据存放到不同的redis的db中，只采用了一个redis，单线程下是线程安全的。此时单例模式是有效的，而如果有多个服务器负载均衡请求到不同的redis中，此时就要考虑使用redis分布式锁了。</p><p>最后，之前我的文章中提到logging系统采用了抽象工厂设计模式，其实针对django不同app下的logger也可以采用单例模式，节省内存创建对象的资源消耗</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的json.dumps自定义序列化操作</title>
    <link href="/2020/05/15/python%E7%9A%84json.dumps%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
    <url>/2020/05/15/python%E7%9A%84json.dumps%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h3 id="Python继承JSONEncoder类，重写default，实现自定义序列化操作"><a href="#Python继承JSONEncoder类，重写default，实现自定义序列化操作" class="headerlink" title="Python继承JSONEncoder类，重写default，实现自定义序列化操作"></a>Python继承JSONEncoder类，重写default，实现自定义序列化操作</h3><p>json支持python的类型转化对象类型如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">Supports the following objects <span class="hljs-keyword">and</span> types by default:<br><br>    +-------------------+---------------+<br>    | Python            | JSON          |<br>    +===================+===============+<br>    | <span class="hljs-built_in">dict</span>              | <span class="hljs-built_in">object</span>        |<br>    +-------------------+---------------+<br>    | <span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>       | array         |<br>    +-------------------+---------------+<br>    | <span class="hljs-built_in">str</span>               | string        |<br>    +-------------------+---------------+<br>    | <span class="hljs-built_in">int</span>, <span class="hljs-built_in">float</span>        | number        |<br>    +-------------------+---------------+<br>    | <span class="hljs-literal">True</span>              | true          |<br>    +-------------------+---------------+<br>    | <span class="hljs-literal">False</span>             | false         |<br>    +-------------------+---------------+<br>    | <span class="hljs-literal">None</span>              | null          |<br>    +-------------------+---------------+<br></code></pre></td></tr></table></figure><p>可以看到，大部分的类型都可以通过json.dumps进行序列化，但是有些特殊的对象，例如事件对象，decimal.Decimal，以及uuid.UUID类型等。此时我们就需要手动重写<code>default</code>方法，来实现对这些类型的序列化。</p><hr><p><strong>举个我的django项目中的一个例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime,date<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> decimal <span class="hljs-keyword">import</span> Decimal<br><span class="hljs-keyword">from</span> uuid <span class="hljs-keyword">import</span> UUID<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JsonCustomEncoder</span>(<span class="hljs-params">json.JSONEncoder</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;对时间序列等特殊序列进行编码序列化&quot;&quot;&quot;</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">default</span>(<span class="hljs-params">self, obj</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj,datetime):<br>            <span class="hljs-keyword">return</span> obj.strftime(<span class="hljs-string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(obj,date):<br>            <span class="hljs-keyword">return</span> obj.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(obj,(Decimal,UUID,)):<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(obj)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().default(obj)  <span class="hljs-comment"># 抛出父类的异常</span><br></code></pre></td></tr></table></figure><p>接下来调用一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">dict_ = &#123;<br><span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;syz&#x27;</span>,<br><span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">21</span>,<br><span class="hljs-string">&#x27;hobby&#x27;</span>:<span class="hljs-string">&#x27;zjw&#x27;</span>,<br>&#125;<br>m = json.dumps(dict_,cls=JsonCustomEncoder)  <span class="hljs-comment"># 通过cls参数传入类</span><br></code></pre></td></tr></table></figure><p>注：JSONEncoder应该会对传入的<code>dict_</code>对象判断是否是可迭代对象，如果是，那么就进行迭代，依次判断里面元素是否满足json格式，如果不是，是一个对象的话，就会通过这个对象obj，手动来对obj里的属性进行json转化。</p><p>例如下面这个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">name,age</span>):</span><br>     self.name = name<br> self.age = age<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transform</span>(<span class="hljs-params">obj</span>):</span><br>     <span class="hljs-keyword">return</span> &#123;<br>     <span class="hljs-string">&#x27;name&#x27;</span>:obj.name,<br> <span class="hljs-string">&#x27;age&#x27;</span>:obj.age,<br> &#125;<br><br>p = Person()<br><br>j = json.dumps(p,default=transform)  <span class="hljs-comment"># 函数通过default指定，p为自定义的对象，没有实现`__iter__`</span><br><br><br></code></pre></td></tr></table></figure><p>最后阅读了一点源码，稍微分享一下阅读心得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 以下是json.dumps中的一段代码：</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dumps</span>(<span class="hljs-params">obj, *, skipkeys=<span class="hljs-literal">False</span>, ensure_ascii=<span class="hljs-literal">True</span>, check_circular=<span class="hljs-literal">True</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        allow_nan=<span class="hljs-literal">True</span>, cls=<span class="hljs-literal">None</span>, indent=<span class="hljs-literal">None</span>, separators=<span class="hljs-literal">None</span>,</span></span><br><span class="hljs-function"><span class="hljs-params">        default=<span class="hljs-literal">None</span>, sort_keys=<span class="hljs-literal">False</span>, **kw</span>):</span><br>    <span class="hljs-comment"># cached encoder</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">not</span> skipkeys <span class="hljs-keyword">and</span> ensure_ascii <span class="hljs-keyword">and</span><br>        check_circular <span class="hljs-keyword">and</span> allow_nan <span class="hljs-keyword">and</span><br>        cls <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> indent <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> separators <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span><br>        default <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> sort_keys <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> kw):<br>        <span class="hljs-keyword">return</span> _default_encoder.encode(obj)<br>    <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        cls = JSONEncoder<br>    <span class="hljs-keyword">return</span> cls(<br>        skipkeys=skipkeys, ensure_ascii=ensure_ascii,<br>        check_circular=check_circular, allow_nan=allow_nan, indent=indent,<br>        separators=separators, default=default, sort_keys=sort_keys,<br>        **kw).encode(obj)<br></code></pre></td></tr></table></figure><p>我们看这个cls参数，如果cls为None，就为cls打上默认的JSONEncoder猴子补丁，如果不为空，就说明有子类继承了JSONEncoder，传过来了参数，此时就调用JSONEncoder子类。</p><p><strong>总结：其实不管是框架还是开源包，这样做的做法到处可见，最大的好处就是拓展性强，有效的实现解耦合。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云部署Django项目</title>
    <link href="/2020/05/14/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/"/>
    <url>/2020/05/14/%E9%98%BF%E9%87%8C%E4%BA%91%E9%83%A8%E7%BD%B2Django%E9%A1%B9%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a><strong>环境</strong></h3><hr><h4 id="基于Ubuntu16-04-Python3（虚拟环境）-nginx-mysql-Django"><a href="#基于Ubuntu16-04-Python3（虚拟环境）-nginx-mysql-Django" class="headerlink" title="基于Ubuntu16.04 + Python3（虚拟环境） + nginx + mysql + Django"></a>基于Ubuntu16.04 + Python3（虚拟环境） + nginx + mysql + Django</h4><hr><h4 id="一、安装必要的软件，配置python环境"><a href="#一、安装必要的软件，配置python环境" class="headerlink" title="一、安装必要的软件，配置python环境"></a><strong>一、安装必要的软件，配置python环境</strong></h4><hr><h4 id="1-安装python："><a href="#1-安装python：" class="headerlink" title="1.安装python："></a><strong>1.安装python：</strong></h4><p>阿里云Ubuntu 16.04服务器自带python版本是2.7的，PIP版本也非常落户，到手后一定要升级Python和PIP， 命令如下。</p><p><code>sudo apt-get install python3.5</code><br><code>sudo apt-get update</code><br><code>sudo apt-get install python3-pip</code><br><code>pip3 --version</code></p><p>升级pip:</p><p><code>pip3 install --upgrade pip</code></p><hr><h4 id="2-安装pillow"><a href="#2-安装pillow" class="headerlink" title="2.安装pillow"></a><strong>2.安装pillow</strong></h4><p><code>pip3 install pillow</code>   图像处理库</p><hr><h4 id="3-安装virtualenv和virtualenvwrapper虚拟环境"><a href="#3-安装virtualenv和virtualenvwrapper虚拟环境" class="headerlink" title="3.安装virtualenv和virtualenvwrapper虚拟环境"></a><strong>3.安装virtualenv和virtualenvwrapper虚拟环境</strong></h4><p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以方便实现以下功能：</p><p>①将所有虚拟环境整合在一个目录下</p><p>②管理（新增，删除，复制）虚拟环境</p><p>③切换虚拟环境</p><p><strong>推荐使用pip安装</strong></p><p><code>pip3 install virtualenv</code><br><code>pip3 install virtualenvwrapper</code></p><p>创建虚拟环境：<br><code>virtualenv MyDjango</code></p><p>激活环境<br><code>source MyDjango/bin/activate</code></p><hr><h4 id="4-安装django"><a href="#4-安装django" class="headerlink" title="4.安装django"></a><strong>4.安装django</strong></h4><p><code>pip3 install django</code></p><hr><h4 id="5-查看linux的ip-方便连接到Xftp传输文件"><a href="#5-查看linux的ip-方便连接到Xftp传输文件" class="headerlink" title="5.查看linux的ip,方便连接到Xftp传输文件"></a><strong>5.查看linux的ip,方便连接到Xftp传输文件</strong></h4><p><code>建立会话输入云服务器的公网ip和root账户密码</code></p><p><code>采用root登录，密码需要去网站设置。</code></p><hr><h4 id="6-安装mysql"><a href="#6-安装mysql" class="headerlink" title="6.安装mysql"></a><strong>6.安装mysql</strong></h4><p>输入以下安装命令：<br><code>sudo apt-get install mysql-server mysql-client</code></p><p><strong>注：</strong>Ubuntu自带的版本是5.07的，如果本地是8.0以上的，在数据迁移的时候，会出现编码的问题，下面会提及到，<br>所以最好服务器上的版本和本地的版本一直。下载方法，通过本地下载安装包，然后通过Xftp上传到服务器，进行安装。</p><p><strong>记住输入的密码</strong></p><p>安装完后，输入 <code>mysql -u root -p</code></p><p>输入密码<br><code>create database ***</code></p><p><strong>注：创建数据库，这里我为了部署django项目，所以要和django项目采用的数据库名相同</strong></p><p>接下来进行数据的迁移：</p><p>数据的迁移：把本地数据库中的数据复制到阿里云上的数据库中。先在本地生成备份文件，syz_user是要备份的数据库，mysqls.sql是生成的备份文件。然后用Xftp把mysqls.sql文件上传到阿里云。</p><p><code>mysqldump -u root -p syz_user&gt; mysqls.sql</code><br>用来生成迁移文件</p><p>数据还原：阿里云终端 cd到mysqls.sql所在目录，输入以下命令</p><p><code>mysql -u root -p syz_user &lt; mysqls.sql</code></p><p><strong>注：</strong><br>在我部署的时候出现了一下几个问题：</p><hr><h4 id="错误1："><a href="#错误1：" class="headerlink" title="错误1："></a><strong>错误1：</strong></h4><p>如果两个数据库的mysql版本不一致，例如mysql8和mysql5，那么就会错：<code>&#39;utf8mb4_0900_ai_ci&#39;</code></p><p>问题的原因是两个数据库待转移的表的字符格式不能被被转移数据库识别。</p><p>例如mysql8的utf8mb4_0900_ai_ci格式再mysql5中就不支持。就需要更改数据库字符编码和各个varchar等字段的编码方式。</p><p>在云服务器上打开导入的sql文件</p><hr><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a><strong>解决方法：</strong></h4><p>• 把文件中的所有的utf8mb4_0900_ai_ci替换为utf8_general_ci</p><p>• 以及utf8mb4替换为utf8</p><p>最后找到mysqld.cnf文件注释掉<code>bind-address</code>这一行</p><p>命令：<code>/etc/mysql/mysql.conf.d/mysqld.cnf </code>   #配置文件路径</p><p><code>#bind-address = 127.0.0.1 </code>#注释掉这一行</p><p>这样做让mysql可以绑定云服务器ip</p><hr><h4 id="错误2："><a href="#错误2：" class="headerlink" title="错误2："></a><strong>错误2：</strong></h4><p><code>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39; (2)</code></p><p>连接mysql时出错，由于linux特性，window没有</p><p><strong>解决方法：</strong></p><p><code>cd /ect/mysql</code><br><code>sudo vim my.cnf</code></p><p>会发现文件被重定向到其他地方了</p><p><img src="/media/editor/linux_%E9%83%A8%E7%BD%B2django_20200317182339102971.png"></p><p>因此 <code>cd /ect/mysql/mysql.conf.d</code><br><code>sudo vim mysqld.cnf</code></p><p><img src="/media/editor/linux%E9%83%A8%E7%BD%B2django_20200317182431809212.png"></p><p>增加<code>protocol = tcp</code></p><p>之后重启mysql服务可能又会遇到问题</p><p><strong>错误原因：</strong><br><code>Job for mysql.service failed because the control process exited with error code. See &quot;systemctl status mysql.service&quot; and &quot;journalctl -xe&quot; for details.</code></p><p>服务mysql启动失败，可能是端口被占用</p><p><strong>解决方案：</strong></p><p><code>sudo vim mysqld.cnf</code></p><p>将bind-address的注释去掉</p><p>或者可能端口被占用，修改为3307,原来端口号是3306</p><p>最后<br>systemctl enable mysql.service</p><p>确保mysql服务开启</p><p>启动mysql</p><p>systemctl start mysql</p><p>可以看到 ps -ef|grep mysql</p><p><img src="/media/editor/mysql%E5%90%AF%E5%8A%A8_20200317185916881515.png"></p><p>mysql已经正常运行</p><p><strong>注意：在生产环境中千万不要有rm -rf /var/lib/mysql的想法。</strong></p><p>博主我就试过结果gameover，很多配置都没了，需要重装数据库，泪奔~</p><hr><h4 id="6-收集本地上项目的安装包清单"><a href="#6-收集本地上项目的安装包清单" class="headerlink" title="6.收集本地上项目的安装包清单"></a><strong>6.收集本地上项目的安装包清单</strong></h4><p>进入本地虚拟环境中</p><p><code>pip freeze &gt; list.txt</code></p><p>将list.txt通过Xftp上传到服务器，然后进入服务器</p><p><code>pip install -r list.txt</code></p><p>按照清单上一个一个装，不过如果报错无非是版本不对，自己调整版本就行了。</p><hr><h4 id="7-修改Django的settings"><a href="#7-修改Django的settings" class="headerlink" title="7.修改Django的settings"></a><strong>7.修改Django的settings</strong></h4><p>将<code>DEBUG = False</code></p><p>取消DEBUG模式，否则会暴露源码出去</p><p><code>ALLOW_HOST = [&#39;*****&#39;]</code></p><p>这个改成阿里云服务器主机,所有的主机访问项目会访问这个ip</p><p>到此为止，项目文件迁移，环境搭建，数据库数据迁移完成，启动python manage.py runserver 观察项目是否能够启动，如果能启动则说明配置正确。</p><p>接下来就通过uwsgi，wsgi和nginx来实现浏览器ip或域名访问</p><p>注：Permission denied: ‘/home/admin/mblog/mainsite/info_login.log’</p><p>可能在启动python3 manage.py runserver时会报错，只要给它权限，采用sudo启动，即sudo python manage.py runserver就可以了</p><hr><h4 id="8-安装nginx反向代理服务器-用户不需要知道目标服务器的地址-通过反向代理服务器作为目的地址"><a href="#8-安装nginx反向代理服务器-用户不需要知道目标服务器的地址-通过反向代理服务器作为目的地址" class="headerlink" title="8.安装nginx反向代理服务器 (用户不需要知道目标服务器的地址,通过反向代理服务器作为目的地址)"></a><strong>8.安装nginx反向代理服务器 (用户不需要知道目标服务器的地址,通过反向代理服务器作为目的地址)</strong></h4><p><code>pip3 install nginx</code></p><p>去阿里云查看自己IP地址</p><p>在浏览器输入IP地址：查看是否成功安装nginx</p><p><strong>正向代理:</strong></p><p>正向代理（forward proxy） ，一个位于客户端和原始服务器之间的服务器，为了从原始服务器取得内容，客户端向代理发送一个请求并制定目标（原始服务器），然后代理向原始服务器转发请求并将获得的内容返回给客户端，客户端才能使用正向代理。我们平时说的代理就是指正向代理。 </p><p>简单一点：A向C借钱，由于一些情况不能直接向C借钱，于是A想了一个办法，他让B去向C借钱，这样B就代替A向C借钱，A就得到了C的钱，C并不知道A的存在，B就充当了A的代理人的角色。 </p><p><img src="/media/editor/%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86_20200317204617763054.png"></p><p><strong>反向代理:</strong></p><p>反向代理（Reverse Proxy），以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求的客户端，此时代理服务器对外表现为一个反向代理服务器。 </p><p>理解起来有些抽象，可以这么说：A向B借钱，B没有拿自己的钱，而是悄悄地向C借钱，拿到钱之后再交给A,A以为是B的钱，他并不知道C的存在。 </p><p><img src="/media/editor/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_20200317204629904796.png"></p><p>本项目中的nginx就是反向代理，原始服务器就是遵循wsgi协议的uwsgi服务器。</p><hr><h4 id="9-安装uwsgi"><a href="#9-安装uwsgi" class="headerlink" title="9.安装uwsgi"></a><strong>9.安装uwsgi</strong></h4><p>在你的本地电脑访问<a href="https://uwsgi-docs.readthedocs.io/en/latest/Download.html">https://uwsgi-docs.readthedocs.io/en/latest/Download.html</a>，下载Stable/LTS版本的源文件。</p><p>本地下解压这个源文件，然后用xftp把文件拖放到阿里云的Ubuntu的家目录(home)下，使用cd命令进入到该文件夹下，按顺序依次输入下面三条命令：</p><p><code>sudo apt-get install python3-setuptools</code><br><code>apt-get install build-essential python3</code><br><code>sudo apt-get install python3-dev</code><br><code>sudo python3 setup.py install</code></p><p>上面四条命令为uwsgi的依赖环境</p><p><code>pip3 install uwsgi</code></p><p><strong>注：</strong></p><p>①如果安装不小心中途退出，会出现另一个进程锁死的结果，因此需要手动杀死进程</p><p>这是因为有另外一个程序在运行，导致锁不可用。原因可能是上次运行更新或安装没有正常完</p><p><code>sudo rm -rf/var/cache/apt/archives/lock</code></p><p><code>sudo rm -rf/var/lib/dpkg/lock</code></p><p>②安装uwsgi时可能会报错：plugins/python/uwsgi_python.h:2:20: fatal error: Python.h: No such file or directory</p><p>原因为python版本错误</p><p>解决方法：<code>sudo apt-get install libpython3.6-dev</code></p><p>然后再次执行<code>pip3 install uwsgi</code></p><hr><h4 id="10-配置nginx"><a href="#10-配置nginx" class="headerlink" title="10.配置nginx"></a><strong>10.配置nginx</strong></h4><p>部署到服务器的静态文件不会携带Django自带的static静态文件，因此需要先收集静态文件。</p><p>在<code>settings.py</code>中添加</p><p><code>STATIC_ROOT = &#39;d:/syz/virtualenvs/MyDjango/mblog/nginx/static/&#39;</code></p><p>然后输入<code>python manage.py collectstatic</code></p><p><strong>注：STATIC_ROOT 用于部署时候将项目所有的静态文件全部集中存放,根目录从盘区开始，所以要绝对路径</strong></p><p>将项目文件通过Xftp传输到服务器上</p><p>然后配置nginx文件</p><p><code>cd /etc/nginx/sites-available</code></p><p><code>sudo vim default</code></p><p>nginx配置：打开配置文件default，路径<code>/etc/nginx/sites-available/default</code>，设置以下内容。一个是server_name后面换成你的阿里云公网IP，有的文章说不换也行。关键是下面2个location，第一个location是设置的和uWSGI的关联。第二个location /static是设置的静态文件的路径。如果你的项目还有media文件夹，那还要加一个location /media，把路径设置上。注意：location 和alias后面有空格。</p><p><strong>注：如果没有加sudo执行vim，则保存时会报该文件为只读文件，因此将:wq改为:wq!强制保存就行了</strong></p><p>添加修改内容如下：</p><p><code>server_name 你的服务器IP地址;</code></p><p>配置自己的static静态文件和media媒体文件路径</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs gradle">location /<span class="hljs-keyword">static</span> &#123;<br>        # <span class="hljs-keyword">static</span>文件目录<br>         alias <span class="hljs-regexp">/home/</span>admin<span class="hljs-regexp">/MyPython/My</span>Django<span class="hljs-regexp">/mblog/</span><span class="hljs-keyword">static</span>;<br>       &#125;<br>       location /media &#123;<br>        # 静态media文件目录<br>         alias <span class="hljs-regexp">/home/</span>admin<span class="hljs-regexp">/MyPython/My</span>Django<span class="hljs-regexp">/mblog/m</span>edia;<br>       &#125;<br></code></pre></td></tr></table></figure><p>注：alias：用于设置指令的别名</p><p>alias[别名]=[指令名称]</p><p><strong>注意：location后面是有空格的，必须要有！alias后面也是有空格的；include上面那句话也是要注释掉的！</strong></p><p>最后重启nginx服务<br><code>service nginx start</code> #启动<br><code>service nginx stop</code> #停止<br><code>service nginx reload</code> #重启</p><p>重启服务： <code>service nginx restart</code></p><p>1.快速停止或关闭Nginx：nginx -s stop</p><p>2.正常停止或关闭Nginx：nginx -s quit</p><p>3.配置文件修改重装载命令：nginx -s reload</p><p>当然直接杀死进程也可以</p><p><code>sudo kill -9 pid</code></p><p><code>sudo killall -s INT processname</code></p><p><strong>注：上传图片时可能会出现上传文件报<code>413 Request Entity Too Large</code>错误。</strong></p><p>因为业务客户端请求是走HTTP的post方法提交数据，而提交请求数据nginx是有限制客户端请求主体大小，“content-length”，如果超过了设定值，则客户端会收到报错 413 Request Entity Too Large，导致前端浏览器不能正常显示数据。</p><p><strong>解决方法：</strong></p><p>进入<code>nginx.conf</code><br><code>cd /etc/nginx</code><br><code>sudo vim nginx.conf</code><br>加入这段代码：<br><code>client_max_body_size 20M;</code><br>然后重启nginx。</p><p><strong>额外增加点知识：</strong></p><p>可以选择在http{ }中设置：client_max_body_size 20m;</p><p>也可以选择在server{ }中设置：client_max_body_size 20m;</p><p>还可以选择在location{ }中设置：client_max_body_size 20m;</p><p><strong>三者有区别</strong></p><p>设置到http{}内，控制全局nginx所有请求报文大小</p><p>设置到server{}内，控制该server的所有请求报文大小</p><p>设置到location{}内，控制满足该路由规则或目录下的请求报文大小</p><p>这里之前查看端口占用时用到了提一下：<code>netstat -ltunp</code>指令查看端口号使用详情</p><hr><h4 id="11-配置uwsgi："><a href="#11-配置uwsgi：" class="headerlink" title="11 配置uwsgi："></a><strong>11 配置uwsgi：</strong></h4><p>安装完成后，配置uWSGI：在django项目的根目录下，新建两个文件，<code>uwsgi.ini和run.log</code> 。第一个是uWSGI的配置文件，第二个是日志记录文件。设置uwsgi.ini文件如下：</p><p><strong>这地方真的卡了好久，一定要写processes和threads，不然一直报找不到应用的错误！！</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[uwsgi]</span><br><span class="hljs-attr">chdir</span> = /home/admin/mblog  <span class="hljs-comment"># 项目目录</span><br><span class="hljs-attr">module</span> = mblog.wsgi:application   <span class="hljs-comment"># wsgi应用模块</span><br><span class="hljs-attr">socket</span> = <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">8002</span>           <span class="hljs-comment"># 通信地址</span><br><span class="hljs-attr">master</span> = <span class="hljs-literal">true</span>  <span class="hljs-comment"># 使用主线程</span><br><span class="hljs-attr">processes</span> = <span class="hljs-number">4</span>  <span class="hljs-comment"># 分4条进程</span><br><span class="hljs-attr">threads</span> = <span class="hljs-number">2</span><br><span class="hljs-attr">daemonize</span> = /home/admin/mblog/run.log <span class="hljs-comment"># 后台运行日志</span><br><span class="hljs-attr">disable-logging</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">wsgi-file</span> = /home/admin/mblog/mblog/wsgi.py<br><span class="hljs-attr">pidfile</span> = /home/admin/mblog/uwsgi.pid<br></code></pre></td></tr></table></figure><p><strong>解释：</strong><br>①chdir是django项目所在目录。</p><p>②socket后面的地址是和上面nginx配置文件中的地址uwsgi_pass  127.0.0.1:8002对应的，规定nginx和uWSGI之间的通信端口。</p><p>③daemonize就是日志文件的路径。</p><p>④disable-logging = true 表示不记录正常信息，只记录错误信息。</p><p>⑤wsgi-file是你django项目根目录下项目同名目录中有一个wsgi.py文件的路径。</p><p>⑥pidfile是记录uwsgi.pid文件的路径，这个文件是uWSGI运行后自动生成的，里面记录了uWSGI的进程号，可以用来重启uWSGI。</p><p><strong>uWSGI基本命令：</strong></p><p>启动：<code>uwsgi --ini uwsgi.ini</code><br>停止：<code>uwsgi --stop uwsgi.pid</code><br>重启：<code>uwsgi --reload uwsgi.pid</code></p><p><strong>启动后</strong></p><p><code>[uWSGI] getting INI configuration from uwsgi.ini</code></p><p>表示启动成功</p><p>通过<code>ps -ef|grep uwsgi</code>可以查看进程，判断uwsgi是否成功启动</p><p>杀死进程的方式：</p><p><code>killall -s INT uwsgi</code>（最后一个为进程名）</p><p>查看了run.log发现许多错误，这里记录一下</p><p>注：当运行uwsgi时， !!! no internal routing support, rebuild with pcre support !!!的解决方法<br>报错意思是：! ! !没有内部路由支持，使用pcre支持重新构建!!</p><p><code>pip uninstall uwsgi</code><br><code>sudo apt-get install libpcre3 libpcre3-dev</code><br><code>pip install uwsgi</code></p><hr><h4 id="12-将celery作为后台守护进程运行："><a href="#12-将celery作为后台守护进程运行：" class="headerlink" title="12.将celery作为后台守护进程运行："></a><strong>12.将celery作为后台守护进程运行：</strong></h4><p>①首先安装进程管理工具supervisord<br>    <code>pip install supervisor</code></p><p>②cd 我的项目</p><p>③然后创建    管理celery的配置文件</p><p><code> mkdir /etc/supervisor</code></p><p><code>echo_supervisord_conf &gt; /etc/supervisor/supervisord.conf</code></p><p><strong>注：一定要将配置文件放在/etc目录下，也就是存放系统配置文件的地方</strong></p><p>否则会报错：</p><p><strong>错误：</strong></p><p><code>supervisorctl status</code>报错</p><p><code>error: &lt;class &#39;socket.error&#39;&gt;, [Errno 110] Connection timed out: file: /usr/local/lib/python2.7/socket.py line: 571</code></p><p>发现启动的方式是<code>usr/local/bin/supervisord -c /usr/local/supervisor/supervisord.conf</code></p><p>配置文件不在默认的<code>/etc/supervisor/supervisord.conf</code></p><p>那么要指定配置文件路径后正常</p><p><code>supervisorctl -c /usr/local/supervisor/supervisord.conf status</code></p><p>运行<code>supervisorctl</code>时指定配置文件才可以正常运行<code>supervisorctl</code>,否则supervisorctl默认去/etc/supervisord.conf去读取配置，导致错误，因此最好放在/etc/中</p><p>④编辑.conf配置文件</p><p><strong>linux中：</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs ini"><br><span class="hljs-section">[program:celery]</span><br><br><span class="hljs-comment">;运行目录下执行命令</span><br><span class="hljs-attr">command</span>=sudo celery -A mblog.celery worker -l info<br><span class="hljs-comment">;指定运行目录</span><br><span class="hljs-attr">directory</span>=/home/admin/mblog/<br><br><span class="hljs-comment">;启动设置</span><br><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span>      <span class="hljs-comment">;当supervisor启动时，程序将会自动启动</span><br><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span>   <span class="hljs-comment">;自动重启</span><br><span class="hljs-attr">startsecs</span>=<span class="hljs-number">10</span><br><span class="hljs-attr">numprocs</span>=<span class="hljs-number">1</span>        <span class="hljs-comment">;初始的进程</span><br><br><br><span class="hljs-attr">user</span>=admin   <span class="hljs-comment">;脚本运行的用户</span><br><span class="hljs-comment">;输出日志</span><br><span class="hljs-attr">stdout_logfile</span>=/var/log/celery_worker.log<br><span class="hljs-attr">stdout_logfile_maxbytes</span>=<span class="hljs-number">10</span>MB      <span class="hljs-comment">;默认最大50M</span><br><span class="hljs-attr">stdout_logfile_backups</span>=<span class="hljs-number">10</span>               <span class="hljs-comment">;默认日志文件备份数，默认为10</span><br><br><span class="hljs-comment">;错误日志</span><br><span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">false</span>                         <span class="hljs-comment">;为true表示禁止监听错误</span><br><span class="hljs-attr">stderr_logfile</span>=/var/log/celery_worker_err.log<br><span class="hljs-attr">stderr_logfile_maxbytes</span>=<span class="hljs-number">10</span>MB<br><span class="hljs-attr">stderr_logfile_backups</span>=<span class="hljs-number">10</span><br><br><br><span class="hljs-comment">;停止信号,默认TERM </span><br><span class="hljs-comment">;中断:INT (类似于Ctrl+C)(kill -INT pid)，退出后会将写文件或日志(推荐) </span><br><span class="hljs-comment">;终止:TERM (kill -TERM pid) </span><br><span class="hljs-comment">;挂起:HUP (kill -HUP pid),注意与Ctrl+Z/kill -stop pid不同 </span><br><span class="hljs-comment">;从容停止:QUIT (kill -QUIT pid) </span><br><span class="hljs-attr">stopsignal</span>=INT<br></code></pre></td></tr></table></figure><p>⑤启动supervisord</p><p>在配置文件目录输入以下指令：</p><p><code>supervisord -c + .conf</code></p><p>⑥ 关闭重启supervisord</p><p>关闭supervisord需要通过supervisor控制器</p><p><code>supervisorctl -c supervisord.conf shutdown</code></p><p>重启supervisord也需要supervisor控制器</p><p><code>supervisortl -c supervisord.conf restart</code></p><p>⑦查看进程是否启动成功</p><p><code>ps -ef|grep supervisord</code></p><p> ③supervisorctl 操作</p><p><code>supervisorctl</code> 是 <code>supervisord</code> 的命令行客户端工具，使用的配置和 supervisord 一样，这里就不再说了。下面，主要介绍 supervisorctl 操作的常用命令：</p><p>输入命令 <code>supervisorctl</code> 进入 <code>supervisorctl</code> 的 shell 交互界面，就可以在下面输入命令了。：</p><p><code>help</code> # 查看帮助</p><p><code>status</code> # 查看程序状态</p><p><code>stop program_name</code> # 关闭 指定的程序</p><p><code>start program_name</code> # 启动 指定的程序</p><p><code>restart program_name</code> # 重启 指定的程序</p><p><code>tail -f program_name</code> # 查看 该程序的日志</p><p>update # 重启配置文件修改过的程序（修改了配置，通过这个命令加载新的配置)</p><p>也可以直接通过 shell 命令操作：</p><p><code>supervisorctl status</code><br><code>supervisorctl update</code></p><p>错误：<br>①.<code>INFO spawnerr: unknown error making dispatchers for &#39;celery&#39;: EACCES（supervisord.log）</code></p><p>主要是没有权限操作日志文件</p><p><strong>解决方案：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">chown youruser:youruser -R <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/supervisor/</span><br>chown youruser:youruser -R <span class="hljs-regexp">/var/</span>run<span class="hljs-regexp">/supervisor/</span><br>chown youruser:youruser -R <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/celery/</span><br>chown youruser:youruser -R <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/celery/</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong>chown时修改日志文件的权限从文件的拥有者到指定的用户或组，这个权限一般为用户管理者root使用。<br>也可以采用Xftp的方法将日志文件权限修改：</p><p><strong>注：</strong><br>①<code>sudo supervisorctl tail programname stdout</code> //查看programname的日志)该命令是动态的输出启动进程时的输出，主要用于动态差错</p><p>②<code>tail -f filename</code> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容，再改错时很有用。</p><p>其实如果使用命令行的方式 只需要设定–logfile，一切的运行log都会放在一个log文件里，而使用子进程托管的方式，执行的log也只会放在一个log中，我的是放在celery_worker_err.log中，前提是设置了redirect_stderr=false  ，来监听错误。</p><p>部署成功后，如果安装了ufw防火墙管理工具，那么需要手动允许端口号80的的访问</p><p><code>sudo ufw allow 80</code></p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>部署</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>部署</tag>
      
      <tag>云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python 使用channels实现websocket从编码到部署详解</title>
    <link href="/2020/05/13/python%20%E4%BD%BF%E7%94%A8channels%E5%AE%9E%E7%8E%B0websocket%E4%BB%8E%E7%BC%96%E7%A0%81%E5%88%B0%E9%83%A8%E7%BD%B2%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/05/13/python%20%E4%BD%BF%E7%94%A8channels%E5%AE%9E%E7%8E%B0websocket%E4%BB%8E%E7%BC%96%E7%A0%81%E5%88%B0%E9%83%A8%E7%BD%B2%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="python使用channels实现websocket的推送信息功能"><a href="#python使用channels实现websocket的推送信息功能" class="headerlink" title="python使用channels实现websocket的推送信息功能"></a>python使用channels实现websocket的推送信息功能</h3><p><strong>想法来源：</strong></p><p>之前刷Leetcode的时候嘛，右上角都会有全服的刷题消息推送以及个人的收到的回复和关注消息推送。</p><p>因此就去查了查如何实现这种消息推送的功能。</p><p>在阅读了一番官方文档后，有了大致的一个理解和思路，毕竟阅读纯英文文档还是没有读中文文档那么直观（哈哈哈，就当考研锻炼英语阅读了，好了接下来进入正题！）</p><p>以下是我使用channels从消息推送功能实现到云服务器部署daphne（asgi服务器）的全过程，以及中间遇到的一些BUG.</p><hr><h3 id="一、什么是websocket"><a href="#一、什么是websocket" class="headerlink" title="一、什么是websocket"></a><strong>一、什么是websocket</strong></h3><p>websocket是一个全双工的通信协议，它和HTTP协议存在交集，但不完全相同，可以用“对HTTP协议的一种升级”来解释websocket。它的诞生主要用于弥补AJAX段轮询，HTTP长轮询的不足，它可以有效的减小带宽资源的浪费。</p><hr><h3 id="二、AJAX短轮询和HTTP长轮询，websocket的区别"><a href="#二、AJAX短轮询和HTTP长轮询，websocket的区别" class="headerlink" title="二、AJAX短轮询和HTTP长轮询，websocket的区别"></a><strong>二、AJAX短轮询和HTTP长轮询，websocket的区别</strong></h3><p>1.AJAX短轮询：使用ajax技术，http协议，采用poll方式进行轮询，其轮询时间间隔较短，可以缩小到1s，但是细想，这种方法，每次都要建立TCP连接，而且HTTP协议有着无连接，无状态的特性，那么每次建立TCP连接，发送HTTP请求，所传输的数据报会非常多，这样很占用带宽资源。</p><p>2.HTTP长轮询:long poll指的是通过ajax发送请求，服务器在相应头中会包含Connection：keep-alive。这样会客户端发起请求后，服务器端保持一段时间，直到有数据了，再将数据发送给客户端。期间，客户端和服务端的连接会一直保持。这种方法，虽然后请求的次数可能减少，但是还是会占用很多带宽，同时，因为还是基于HTTP的，所以还是会不断建立连接，断开连接，建立连接，每次建立连接都会进行3次握手，断开连接进行4次握手。</p><p><strong>注：</strong>对于HTTP请求的缺点，我们可以看出，服务端只能被动的处理客户端发来的信息，而不能主动的向客户端发送数据。当然可以通过ajax长短轮询实现，但是弊端还是很明显的：浪费带宽。因此就诞生了基于全双工协议通信的websocket。</p><p>3.websocket协议:websocket协议很大程度上解决了HTTP协议中服务端无法主动发送数据给客户端的问题。websocket好处在于只需要依赖一次HTTP的握手，就可以建立websocket通信，这样服务端和客户端就可以创建持久性的连接，并可以相互发送消息。</p><h3 id="三、F12分析协议的升级过程"><a href="#三、F12分析协议的升级过程" class="headerlink" title="三、F12分析协议的升级过程"></a><strong>三、F12分析协议的升级过程</strong></h3><p><img src="/media/editor/websocket1_20200424220929811581.png">{width=80%}</p><p><strong>分析：</strong></p><p>这是我博客建立websocket的一张图，我所用红箭头指的地方都跟websocket协议有关，接下来依次分析。</p><p>① 请求URL:以ws开头表示采用websocket协议，当然这是一种协议规定，我在nginx中还需要反向代理到相应能够支持处理websocket协议的异步框架的服务器上。</p><p>② 状态码为101表示切换协议成功。</p><p>③ upgrade：表示我要从HTTP协议升级到Websocket协议。</p><p>④ sec-WebSocket-Key:在Request中请求头中添加该行，表示对websocket协议的一种加密，服务端接收请求信息后，会对其进行再次加密，然后放到Response的Sec-webScoket-Accept，最后客户端对sec-WebSocket-Key加密和Sec-webScoket-Accept比较，相同的话表示建立websocket协议成功。</p><p>⑤ sec-WebSocket-Version:这个表示websocket的版本，固定为13。</p><h3 id="四、python使用channels实现websocket协议"><a href="#四、python使用channels实现websocket协议" class="headerlink" title="四、python使用channels实现websocket协议"></a><strong>四、python使用channels实现websocket协议</strong></h3><p>首先附上channels的官方文档（虽然都是英文）</p><p><a href="https://channels.readthedocs.io/en/latest">https://channels.readthedocs.io/en/latest</a></p><p>以我的例子作为讲解：</p><h4 id="1-首先安装channels和channels-redis"><a href="#1-首先安装channels和channels-redis" class="headerlink" title="1.首先安装channels和channels_redis"></a><strong>1.首先安装channels和channels_redis</strong></h4><p><code>pip install channels</code></p><p><code>pip install channels_redis</code></p><h4 id="2-配置asgi应用程序，方便云服务器部署使用"><a href="#2-配置asgi应用程序，方便云服务器部署使用" class="headerlink" title="2.配置asgi应用程序，方便云服务器部署使用"></a><strong>2.配置asgi应用程序，方便云服务器部署使用</strong></h4><p>因为我是的django3.0降级下来的。所以会自带<code>asgi.py</code>,没有的话可以在根目录创建一个文件。</p><p>在其中加入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> django<br><span class="hljs-keyword">from</span> channels.routing <span class="hljs-keyword">import</span> get_default_application<br><br>os.environ.setdefault(<span class="hljs-string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="hljs-string">&quot;mblog.settings&quot;</span>)<br><br>django.setup()   <span class="hljs-comment"># 加载异步application</span><br><br>application = get_default_application()<br></code></pre></td></tr></table></figure><p><strong>注：</strong>主要作用就是启动django时候，同时创建asgi的application。</p><h4 id="3-配置项目总routing"><a href="#3-配置项目总routing" class="headerlink" title="3.配置项目总routing"></a><strong>3.配置项目总routing</strong></h4><p>项目总routing，官方推荐放在根目录中，跟urls.py靠在一起，其实他们俩的用处类似，同样是经过中间件，然后匹配路由进入相应的处理函数。只不过遵守的是不同的协议，各自的叫法也不一样。</p><p>我这里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> channels.routing <span class="hljs-keyword">import</span> ProtocolTypeRouter,URLRouter<br><span class="hljs-keyword">from</span> channels.auth <span class="hljs-keyword">import</span> AuthMiddlewareStack,AuthMiddleware<br><span class="hljs-keyword">from</span> chat <span class="hljs-keyword">import</span> routing <span class="hljs-keyword">as</span> chat_routing<br><span class="hljs-keyword">from</span> mainsite <span class="hljs-keyword">import</span> routing <span class="hljs-keyword">as</span> inform_routing<br><br>application = ProtocolTypeRouter(&#123;<br>    <span class="hljs-comment"># (http-&gt;django views is added by default)</span><br>    <span class="hljs-comment"># 下面跟着不同协议路由,可以支持多个协议</span><br>    <span class="hljs-string">&#x27;websocket&#x27;</span>: AuthMiddlewareStack(<br>        URLRouter(<br>            <span class="hljs-comment"># chat_routing.websocket_urlpatterns,</span><br><span class="hljs-comment"># 这里的路由路径只能有一个</span><br>            inform_routing.websocket_urlpatterns,<br>        )<br>    ),<br>&#125;)<br><br><br></code></pre></td></tr></table></figure><p><strong>注：</strong>如果里面没有，它会默认自动添加django视图所支持HTTP的协议。</p><h4 id="4-配置具体app中的子路由"><a href="#4-配置具体app中的子路由" class="headerlink" title="4.配置具体app中的子路由"></a><strong>4.配置具体app中的子路由</strong></h4><p>子路由是分布在不同的app中，如上所示，我的子routing添加在<code>inform_routing.websocket_urlpatterns</code>中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path, re_path<br><span class="hljs-keyword">from</span> mainsite <span class="hljs-keyword">import</span> consumers<br><br>websocket_urlpatterns = [<br>    <span class="hljs-comment"># 官方解释path可能存在某种bug，用re_path既可以支持正则，也可以支持path路由匹配规则</span><br>    re_path(<span class="hljs-string">r&#x27;inform/&#x27;</span>,consumers.InformConsumer),<br>]<br><br></code></pre></td></tr></table></figure><h4 id="5-编写Consumer"><a href="#5-编写Consumer" class="headerlink" title="5.编写Consumer"></a><strong>5.编写Consumer</strong></h4><p>Consumer的主要作用类似django的视图，不过可以运行编写异步代码或者多线程。</p><p>以往使用async/await的时候，通常会将他们放到<code>asyncio.get_event_loop()</code>建立的循环事件队列中，然后调用<code>loop.run_until_complete(asyncio.wait(tasks))</code>循环执行异步程序。</p><p>而Consumer提供了一种一种机制，可以在其中编写任何异步函数，当事件发生时，这些函数将会被回调。</p><p>我的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">from</span> asgiref.sync <span class="hljs-keyword">import</span> async_to_sync<br><span class="hljs-keyword">from</span> channels.generic.websocket <span class="hljs-keyword">import</span> AsyncWebsocketConsumer<br><span class="hljs-keyword">from</span> channels.layers <span class="hljs-keyword">import</span> get_channel_layer<br><br><span class="hljs-keyword">import</span> logging<br><br>common_log = logging.getLogger(<span class="hljs-string">&#x27;django&#x27;</span>) <span class="hljs-comment"># 自制的logging系统</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InformConsumer</span>(<span class="hljs-params">AsyncWebsocketConsumer</span>):</span><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">connect</span>(<span class="hljs-params">self</span>):</span><br>        self.group_name = <span class="hljs-string">&#x27;yunbo_inform&#x27;</span><br><br>        <span class="hljs-comment"># 将用户加进组里</span><br>        <span class="hljs-keyword">await</span> self.channel_layer.group_add(  <span class="hljs-comment"># 所用的通道方法都必须是异步方法</span><br>            self.group_name,<br>            self.channel_name<br>        )<br><br>        <span class="hljs-keyword">await</span> self.accept()<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">disconnect</span>(<span class="hljs-params">self, code</span>):</span><br>        <span class="hljs-comment"># 将用户移除组</span><br>        <span class="hljs-keyword">await</span> self.channel_layer.group_discard(<br>            self.group_name,<br>            self.channel_name<br>        )<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">receive</span>(<span class="hljs-params">self, text_data=<span class="hljs-literal">None</span>, bytes_data=<span class="hljs-literal">None</span>, **kwargs</span>):</span><br>        <span class="hljs-comment"># 用于接收客户端的消息，可以保存到redis中</span><br>        text_data_json = json.loads(text_data)<br>        message = text_data_json[<span class="hljs-string">&#x27;message&#x27;</span>]<br><br>        <span class="hljs-comment"># 群发笔记相关消息</span><br>        <span class="hljs-keyword">await</span> self.channel_layer.group_send(<br>            self.group_name,<br>            <span class="hljs-comment"># 事件</span><br>            &#123;<br>                <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;web_update_inform&#x27;</span>,  <span class="hljs-comment"># 事件名</span><br>                <span class="hljs-string">&#x27;message&#x27;</span>: message  <span class="hljs-comment"># 参数</span><br>            &#125;<br>        )<br><br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">web_update_inform</span>(<span class="hljs-params">self, event</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;网站更新消息发送&quot;&quot;&quot;</span><br>        func = event[<span class="hljs-string">&#x27;func&#x27;</span>]<br>        username = event[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        article = event[<span class="hljs-string">&#x27;article&#x27;</span>]<br>        head_image = event[<span class="hljs-string">&#x27;head_image&#x27;</span>]<br>        trigger_username = event[<span class="hljs-string">&#x27;trigger_username&#x27;</span>]<br>        message = &#123;<br>            <span class="hljs-string">&#x27;func&#x27;</span>: func,<br>            <span class="hljs-string">&#x27;username&#x27;</span>: username,<br>            <span class="hljs-string">&#x27;article&#x27;</span>: article,<br>            <span class="hljs-string">&#x27;head_image&#x27;</span>: head_image,<br>            <span class="hljs-string">&#x27;trigger_username&#x27;</span>:trigger_username<br>        &#125;<br>        <span class="hljs-keyword">await</span> self.send(text_data=json.dumps(message))<br><br><br><span class="hljs-comment"># 外部发送消息到channels</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_inform</span>(<span class="hljs-params">func, username, article, head_image, trigger_username=<span class="hljs-literal">None</span>, group_name=<span class="hljs-literal">None</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;从外部发送消息到channels&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> group_name == <span class="hljs-literal">None</span>:<br>        group_name = <span class="hljs-string">&#x27;yunbo_inform&#x27;</span><br><br>    channel_layer = get_channel_layer()<br>    async_to_sync(channel_layer.group_send)(<br>        group_name,<br>        &#123;<br>            <span class="hljs-comment"># 事件跟随组名</span><br>            <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;web_update_inform&#x27;</span>,<br>            <span class="hljs-string">&#x27;func&#x27;</span>: func,<br>            <span class="hljs-string">&#x27;username&#x27;</span>: username,<br>            <span class="hljs-string">&#x27;article&#x27;</span>: article,<br>            <span class="hljs-string">&#x27;head_image&#x27;</span>: head_image,<br>            <span class="hljs-string">&#x27;trigger_username&#x27;</span>:trigger_username<br>        &#125;<br>    )<br><br><br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>群发消息的实现原理：receive消息 –&gt;发送到group中 –&gt;通过group广播出去</p><p>关于单独两个consumer互相发送消息的，我还没有用到，用到了我会做相关笔记。</p><p><code>AsyncWebsocketConsumer</code>表示继承了异步<code>AsyncConsumer</code>。还有些其他的例如<code>WebsocketConsumer</code>，<code>JsonWebsocketConsumer</code>（自动解码和解码成json格式的同步Consumer）<code>AsyncJsonWebsocketConsume</code>,<code>AsyncHttpConsumer</code>,具体的方法可以参考官方文档。</p><h4 id="前端创建websocket对象"><a href="#前端创建websocket对象" class="headerlink" title="前端创建websocket对象"></a><strong>前端创建websocket对象</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">//创建websocket对象</span><br>  <span class="hljs-keyword">const</span> informSocket = <span class="hljs-keyword">new</span> WebSocket(<span class="hljs-string">&#x27;ws://&#x27;</span> + <span class="hljs-built_in">window</span>.location.host + <span class="hljs-string">&#x27;/inform/&#x27;</span>);<br>        <span class="hljs-comment">// 第一次建立websocket连接成功执行</span><br>        informSocket.onopen = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> data_get_inform = &#123;<br>                <span class="hljs-string">&#x27;username&#x27;</span>: username<br>            &#125;<br>            $.ajax(&#123;<br>                url: notes_add_url,<br>                type: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>                headers: &#123;<br>                    <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: csrftoken,<br>                &#125;,<br>           ....<br><span class="hljs-comment">//当服务器端推送数据过来的时候执行</span><br>        informSocket.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>&#123;<br>            <span class="hljs-keyword">let</span> message_ = <span class="hljs-built_in">JSON</span>.parse(e.data);<br>            <span class="hljs-keyword">var</span> head_image = message_.head_image;<br>            cur_notice = $(<span class="hljs-string">&quot;.badge&quot;</span>).text();<br>            cur_notice = <span class="hljs-built_in">parseInt</span>(cur_notice) + <span class="hljs-number">1</span>;<br>            $(<span class="hljs-string">&quot;.badge&quot;</span>).text(cur_notice);<br>            <span class="hljs-keyword">var</span> data_get_inform = &#123;<br>                <span class="hljs-string">&#x27;username&#x27;</span>: username<br>            &#125;<br>            $.ajax(&#123;<br>                url: notes_add_url,<br>                type: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>                headers: &#123;<br>                    <span class="hljs-string">&quot;X-CSRFToken&quot;</span>: csrftoken,<br>                &#125;,<br>                data: data_get_inform,<br>...<br></code></pre></td></tr></table></figure><p>以上是部分Js代码。</p><p>其他主要方法：</p><p>websocket四大事件：</p><p>open    <code>Socket.onopen</code>    连接建立时触发</p><p>message    <code>Socket.onmessage</code>    客户端接收服务端数据时触发</p><p>error    <code>Socket.onerror</code>    通信发生错误时触发</p><p>close    <code>Socket.onclose</code>    连接关闭时触发</p><p>websocket两大方法：</p><p><code>Socket.send()</code>        使用连接发送数据</p><p><code>Socket.close()</code>    关闭连接</p><h3 id="五、Ubuntu16-supervisor-daphne-nginx部署asgi"><a href="#五、Ubuntu16-supervisor-daphne-nginx部署asgi" class="headerlink" title="五、Ubuntu16+supervisor+daphne+nginx部署asgi"></a><strong>五、Ubuntu16+supervisor+daphne+nginx部署asgi</strong></h3><p>在云服务器上安装daphne<br><code>pip install daphne</code></p><p>我安装的daphne默认在<code>/home/admin/.local/bin/</code>下了，会提示<code>script daphne ... not on path</code>,意思是你不能直接在中断输入<code>daphne</code>，运行command，我试了网上的一些方法，什么<code>export PATH=/home/admin/.local/bin:$PATH</code>作用只能是暂时的。因此我直接写了绝对路径。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cmd">[program:daphne]<br>directory=/home/admin/mblog<br># 这里的<span class="hljs-number">8006</span>要和nginx中代理的服务器端口一致<br>command=/home/admin/.local/bin/daphne -b <span class="hljs-number">127</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span> -p <span class="hljs-number">8006</span> --proxy-headers mblog.asgi:application<br>user=admin<br>autostart=true<br>autorestart=true<br>startsecs=<span class="hljs-number">10</span><br>stdout_logfile=/var/log/websockets.log<br>stdout_logfile_maxbytes=<span class="hljs-number">10</span>MB<br>stdout_logfile_backups=<span class="hljs-number">10</span><br>redirect_stderr=True<br>stderr_logfile=/var/log/websocket_worker_err.log<br>stderr_logfile_maxbytes=<span class="hljs-number">10</span>MB<br>stderr_logfile_backups=<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>配置完毕后，通过supervisorctl启动，<code>sudo supervisorcd -c /etc/supervisor/supervisord.conf</code></p><p><code>sudo supervisorctl start dephna</code></p><p><strong>注意：注释要单独一行，不要有拼写错误</strong></p><hr><p>配置好了daphne后，接下来配置nginx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 首先配置在nginx.conf中配置代理节点，配置在upstream好处是，以后如果想要部署集群的话，就很方便了</span><br>  upstream websockets&#123;<br>        server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8006</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 然后进入到default.conf中配置具体的server，设置具体的location路由匹配</span><br> <span class="hljs-comment"># 这里的/表示从根路径起的匹配，这里要配置正确，不然前端就算建立websocket通信，还是会返回404错误</span><br> location /inform &#123;<br>                          proxy_pass http://websockets;<br>                          <span class="hljs-comment"># proxy_connect_timeout 2s</span><br>                          proxy_http_version <span class="hljs-number">1.1</span>;<br>                          proxy_set_header Upgrade $http_upgrade;<br>                          proxy_set_header Connection <span class="hljs-string">&#x27;upgrade&#x27;</span>;<br>                          proxy_redirect off;<br>                          proxy_set_header Host $host;<br>                         <span class="hljs-comment"># proxy_set_header X-Real_IP $remote_addr_IP;   </span><br>                          proxy_set_header X-Real_IP $remote_addr;   <br>                          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>                          proxy_set_header X-Forwarded-Host $server_name;<br>                          <span class="hljs-comment"># proxy_read_timeout 60s;#默认为60s</span><br>                          <span class="hljs-comment"># proxy_send_timeout 60s;#默认为60s</span><br>      &#125;<br></code></pre></td></tr></table></figure><p>配置完后，重启nginx就可以了，<code>sudo service nginx restart</code></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>websocket</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>websocket</tag>
      
      <tag>部署</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pip镜像源</title>
    <link href="/2020/05/13/pip%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2020/05/13/pip%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h3 id="好东西当然要分享出来呀"><a href="#好东西当然要分享出来呀" class="headerlink" title="好东西当然要分享出来呀"></a>好东西当然要分享出来呀</h3><p>pip高速镜像源（默认源太low）好东西啊~~~~~~~~</p><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a></p><p>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>豆瓣(douban) <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><p>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a></p><p>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/">http://pypi.mirrors.ustc.edu.cn/simple/</a></p><p>在镜像源最后添加 –trusted-host mirrors.aliyun.com，主要意思就是位于pypi.douban.com的存储库不是受信任的或安全的主机，添加上述代码允许此警告</p><p><code>pip install -i  http://mirrors.aliyun.com/pypi/simple/  --trusted-host mirrors.aliyun.com  包</code></p><p>例如：<br><code>pip install -i https://pypi.tuna.tsinghua.edu.cn/simple gensim</code></p><p>-i: 指定库的安装源</p><p><strong>如果要对已存在的包进行升级的话，带上U</strong></p><p>-U:升级 原来已经安装的包，不带U不会装新版本，带上U才会更新到最新版本。</p>]]></content>
    
    
    <categories>
      
      <category>pip</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx 和 uwsgi 实现简易负载均衡</title>
    <link href="/2020/05/12/nginx%20%E5%92%8C%20uwsgi%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    <url>/2020/05/12/nginx%20%E5%92%8C%20uwsgi%20%E5%AE%9E%E7%8E%B0%E7%AE%80%E6%98%93%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    
    <content type="html"><![CDATA[<h4 id="nginx-uwsgi-实现简易负载均衡"><a href="#nginx-uwsgi-实现简易负载均衡" class="headerlink" title="nginx+uwsgi 实现简易负载均衡"></a><strong>nginx+uwsgi 实现简易负载均衡</strong></h4><p>之前使用django+nginx+uwsgi开发部署的博客，只使用了一台uwsgi内部服务器，对于博客网站访问量不是特别大的时候其实够用了。但是，如果对于高并发的应用来说，一台服务器肯定不够，这样不仅会导致一台服务器压力过大，严重的话，会产生单点故障，唯一的一台服务器挂了，那么整个应用也就game over了，这是就需要多台服务器实现负载均衡，一台挂了，另一台接着顶上去，这样几乎使用户察觉不到有台服务器挂了。</p><hr><h4 id="简单介绍下nginx和uwsgi"><a href="#简单介绍下nginx和uwsgi" class="headerlink" title="简单介绍下nginx和uwsgi"></a><strong>简单介绍下nginx和uwsgi</strong></h4><p><strong>nginx</strong>:是一个反向代理服务器。反向代理的好处是外网客户端如果要访问内部服务器（uwsgi,tomcat，文件服务器等）,客户端是不知道真正的内部服务器是谁，在哪，它只知道用来做反向代理的服务器—nginx，通过向nginx发出请求，nginx再将请求分发给内部服务器，内部服务器处理请求，再将响应返回给nginx，nginx最后将响应结果返回给客户端。</p><p>或许看到这里，你可能有点迷糊，为什么需要nginx作为中间人呢？</p><p><strong>原因如下：</strong></p><p>① nginx自身具备一定的缓存能力。它对静态资源的处理性能特别高，因此当某个用户发送多次同样的请求，如果nginx中存了之前相应的结果缓存，就直接将响应的缓存发送给客户端。减少了访问服务器的次数，降低服务器处理的压力。</p><p>注：nginx对静态资源处理性能很高，但是对于动态资源，很难处理，还是要发送给内部服务器进行处理响应返回结果。</p><p>② 有了nginx，就可以对不同的请求分发到不同的内部服务器中，因而内部服务器就可以组件一个集群。至于讲请求转发到集群中的哪个服务器，就需要看<code>nginx.conf</code>中配置的各个内部服务器权重了。</p><p><strong>我用nginx，uwsgi，client举个例子：</strong></p><p>1.client发送给nginx一个请求：”hey boy~,what’s your name?”</p><p>2.nginx收到请求，思考：”i have a mass of sons? who is client asking?”,（如果内部服务器是集群的话），就会按照各个服务器的<code>weigth</code>来发送给<code>weight</code>最高的服务器。</p><p>3.某个uwsgi收到了请求，回答道：”my name is syz”，并将它响应给nginx，nginx接收到响应，将响应发送给client。</p><p>4.紧接着，client又来发送请求了”hey boy~,what’s your name?”</p><p>5.此时nginx收到请求，哟嚯，我知道答案（缓存数据尚未过期），于是将缓存数据发送个client，而不用去请求内部服务器，使得内部服务器性能更加稳定。</p><p><strong>注：</strong>实现负载均衡可以有效的增加并发量，假如一台uwsgi服务器1000个并发，那么5个uwsgi组成的集群，就可以达到5000个并发量。</p><hr><h4 id="nginx-uwsgi实现负载均衡"><a href="#nginx-uwsgi实现负载均衡" class="headerlink" title="nginx+uwsgi实现负载均衡"></a><strong>nginx+uwsgi实现负载均衡</strong></h4><p>之前我是用了nginx+1个uwsgi部署项目，现在我多增加1个uwsgi，实现负载均衡。</p><hr><h4 id="具体步骤如下："><a href="#具体步骤如下：" class="headerlink" title="具体步骤如下："></a><strong>具体步骤如下：</strong></h4><p>1.配置第二个uwsgi服务器的配置文件uwsgi2.ini</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">[uwsgi]<br>chdir = /home/admin/mblog<br><span class="hljs-comment"># wsgi应用</span><br>module = mblog.wsgi:application<br><span class="hljs-comment">#使用nginx做反向代理的服务器地址</span><br>socket = <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8004</span><br><span class="hljs-comment"># 使用主线程</span><br>master = true<br><span class="hljs-comment"># 分4条进程</span><br>processes = <span class="hljs-number">4</span><br>threads = <span class="hljs-number">2</span><br><span class="hljs-comment"># 运行日志</span><br>daemonize = /home/admin/mblog/run2.log<br><span class="hljs-comment"># 只记录发生错误的日志</span><br>disable-logging = true<br>wsgi-file = /home/admin/mblog/mblog/wsgi.py<br><span class="hljs-comment"># 记录进程pid</span><br>pidfile = /home/admin/mblog/uwsgi2.pid<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>① 指令前后不能有空格</p><p>② 不同uwsgi服务器之间只需要修改<code>socket</code>,<code>daemonize</code>,<code>pidfile</code>就可以了，还有一些配置我没有使用。</p><p>配置完后，<code>sudo uwsgi --ini uwsgi.ini</code>启动服务器。</p><p>到此为止，2个服务器组件的集群就创建好并启动好了，接下来是配置nginx，使得进入nginx的请求进行反向代理到集群中的不同服务器上。</p><hr><h4 id="配置nginx反向代理"><a href="#配置nginx反向代理" class="headerlink" title="配置nginx反向代理"></a>配置nginx反向代理</h4><hr><h4 id="具体步骤如下：-1"><a href="#具体步骤如下：-1" class="headerlink" title="具体步骤如下："></a>具体步骤如下：</h4><p>1.进入<code>etc/nginx/nginx.conf</code>,增加内部服务器集群。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">include /etc/nginx/conf.d/*.conf;<br>include /etc/nginx/sites-enabled/*;<br><span class="hljs-comment"># 在这里添加 服务器集群，集群名字叫做SYZ,weight表示每个服务器的接收请求所占的权重，权重高的一般为主服务器。</span><br>               upstream SYZ&#123;<br>                     server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8002</span> weight=<span class="hljs-number">10</span>;<br>                     server <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">8004</span> weight=<span class="hljs-number">10</span>;<br>               &#125;<br></code></pre></td></tr></table></figure><p>2.进入<code>sites-available</code>的<code>default</code>配置文件中，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">location / &#123;<br> <span class="hljs-comment"># First attempt to serve request as file, then</span><br> <span class="hljs-comment"># as directory, then fall back to displaying a 404.</span><br> <span class="hljs-comment"># try_files $uri $uri/ =404;</span><br>               <span class="hljs-comment"># 包含uwsgi的参数</span><br>               include uwsgi_params; <span class="hljs-comment">#</span><br>               <span class="hljs-comment"># uwsgi_pass 127.0.0.1:8002;</span><br><span class="hljs-comment"># 反向代理到uwsgi的集群上</span><br>               uwsgi_pass SYZ;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置完毕后，重启nginx服务器，<code>sudo service nginx restart</code>。</p><hr><h4 id="说个题外话"><a href="#说个题外话" class="headerlink" title="说个题外话"></a><strong>说个题外话</strong></h4><p>阿里的学生机其实是带不动2个uwsgi组成的集群的，我用我的博客做实验，2G的云服务器上跑了redis，nginx，supervisord管理的celery，mysql，2个uwsgi，会导致mysql被挤掉。</p><p>跑mysql所占的内存至少在512M（官网给出的解释），1个uwsgi占了600+M内存，2个就是1200+M内存，nginx估摸着也要500+M，redis+celery估摸着300+M，这样算来已经超过了2G。</p><p>我跑了一个uwsgi+redis+celery+mysql+nginx，就花费了约1.8G。所以要想玩集群有两种建议：</p><p>① 买一个内存大点的服务器。</p><p>② 将mysql分出去，单独买一个云数据库。</p><p>这样就可以开心的玩集群了。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
      <category>uwsgi</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>uwsgi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python中的鸭子类型，协议和接口</title>
    <link href="/2020/05/11/python%E4%B8%AD%E7%9A%84%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
    <url>/2020/05/11/python%E4%B8%AD%E7%9A%84%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B%EF%BC%8C%E5%8D%8F%E8%AE%AE%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="详谈Python中的鸭子类型，协议（不正式的接口）"><a href="#详谈Python中的鸭子类型，协议（不正式的接口）" class="headerlink" title="详谈Python中的鸭子类型，协议（不正式的接口）"></a><strong>详谈Python中的鸭子类型，协议（不正式的接口）</strong></h3><p>这些天在搞javaweb，面向接口编程嘛，尤其玩spring的时候，在写接口的时候，脑海中总是浮现python，一想起还没有好好总结一下python中的鸭子类型，于是乎有了这边笔记。</p><h4 id="一、python中协议和接口的区别"><a href="#一、python中协议和接口的区别" class="headerlink" title="一、python中协议和接口的区别"></a><strong>一、python中协议和接口的区别</strong></h4><p>协议：被称作为“不正式的接口”，因为协议不像java的接口那样施加严格的规范</p><p>（java中的接口规范：关键要看子类是否是抽象类。</p><p>如果子类是非抽象类，则必须实现接口中的所有方法；</p><p>如果子类是抽象类，则可以不实现接口中的所有方法，因为抽象类中允许有抽象方法的存在。）</p><p>而协议可以不用只实现部分方法，同时，最重要的是协议和继承没有半毛钱关系哦！</p><p>这里先举一个简单的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">foo</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span>(<span class="hljs-params">self,index</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>,<span class="hljs-number">100</span>,<span class="hljs-number">10</span>)[index]<br><br>f = foo()<br><span class="hljs-built_in">print</span>(f[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">20</span>   <span class="hljs-comment"># f[1]</span><br><br><span class="hljs-number">10</span>   <span class="hljs-comment"># 循环f</span><br><span class="hljs-number">20</span><br><span class="hljs-number">30</span><br><span class="hljs-number">40</span><br><span class="hljs-number">50</span><br><span class="hljs-number">60</span><br><span class="hljs-number">70</span><br><span class="hljs-number">80</span><br><span class="hljs-number">90</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>由上面这个简单的例子我们可以发现，只要实现了<code>__getitem__</code>方法，那么python解释器会将该类当做序列类即使没有继承也没有关系。这也就是鸭子类型的特征之一。同时，当类中没有实现<code>__iter__</code>和<code>__contain__</code>,解释器会设法让迭代和in运算符有效。</p><hr><p>接下来，在举一个自定义的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;i love python&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Monkey</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;i love python too&#x27;</span><br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Fish</span>():</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;i also love python&#x27;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span>():</span><br>    <span class="hljs-keyword">pass</span><br>    <br>person = Person()<br>monkey = Monkey()<br>fish = Fish()<br>dog = Dog()<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">interface</span>(<span class="hljs-params">animal</span>):</span><br>    func = <span class="hljs-built_in">getattr</span>(animal,<span class="hljs-string">&#x27;say&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(func())<br><br>interface(person)<br>interface(monkey)<br>interface(fish)<br>interface(dog)<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>i love python<br>i love python too<br>i also love python<br><br><br>AttributeError Traceback (most recent call last)<br><br>AttributeError: <span class="hljs-string">&#x27;Dog&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;say&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>说明：</strong>可以看见，定义的<code>Person,Monkey,Fisn</code>三个类之间并没有出现继承，但是都实现了相同的say方法，然后定义一个类似接口的函数<code>interface</code>,只要实例满足存在<code>say</code>方法就可以调用，而不会去检查这个<code>animal</code>参数是不是特定类型的对象。</p><p>这就是鸭子类型的典型特征：不需要知道这个类对象是否是我们想要的对象，不需要继承，只要这个类对象，满足我们需要的方法，那么就可以执行其中相应的函数。</p><p>换言之就是只在乎其行为，不在乎其类型。</p><p><strong>这也就是为什么编写类和方法的时候Python的参数不需要指明类型，而是通过鸭子类型的协议机制来判断传进来的对象是否满足我们所要求的行为！</strong></p><hr><h4 id="最后谈一谈白鹅类型："><a href="#最后谈一谈白鹅类型：" class="headerlink" title="最后谈一谈白鹅类型："></a><strong>最后谈一谈白鹅类型：</strong></h4><p>白鹅类型（针对抽象基类）：只要cls是抽象类型，即cls的元类是abc.ABCMeta或者abc.ABC,就可以使用isinstance（obj，cls）。cls尽量用抽象基类，来增强其拓展性。对于某些抽象基类来说，有时只要子类实现了序列，那么抽象基类就可以把它作为自己的子类。原因在于抽象基类设定了一些权限，子类满足了这些权限，那么就成为抽象基类的子类。通过issubclass（obj，cls）来判断。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux中 python版本更替</title>
    <link href="/2020/05/09/Linux%E4%B8%AD%20python%E7%89%88%E6%9C%AC%E6%9B%B4%E6%9B%BF/"/>
    <url>/2020/05/09/Linux%E4%B8%AD%20python%E7%89%88%E6%9C%AC%E6%9B%B4%E6%9B%BF/</url>
    
    <content type="html"><![CDATA[<h4 id="python版本优先级设置"><a href="#python版本优先级设置" class="headerlink" title="python版本优先级设置"></a>python版本优先级设置</h4><p>很多情况下，一个操作系统中可能会存在多个不同版本的软件，针对不同的情况，我们可能需要使用不同的软件版本，因此如果当需要时候进行替换，是很麻烦的，而且还不是持久存在的。debian推出了一个软件版本管理的工具update-alternatives，下面我用它来管理我的python版本（这样的做的原因是我的云服务器重启后，每次都要进行版本替换，至于为什么会这样，目前还没有去弄懂，不过这里先不谈这个）</p><hr><h4 id="简单介绍下update-alternatives"><a href="#简单介绍下update-alternatives" class="headerlink" title="简单介绍下update-alternatives"></a><strong>简单介绍下update-alternatives</strong></h4><p><code>update-alternatives</code>主要用于linux中的软件版本切换。alternatives 实际上是通过软链接的方式对版本进行管理。</p><p><code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 100</code></p><p><code>sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 200</code></p><p>原理：将<code>/usr/bin/python</code>软连接到<code>/etc/alternatives/python</code>,然后<code>/etc/alternatives/python</code>软连接到<code>/usr/bin/python2 100</code>上。</p><p>添加进版本组指令的含义解析：</p><p>&lt;链接&gt; 是指向 /etc/alternatives/&lt;名称&gt; 的符号链接。(如 /usr/bin/python)<br>&lt;名称&gt; 是该链接替换组的主控名。(如 python)<br>&lt;路径&gt; 是软连接目的项目标文件的位置。(如 /usr/bin/python3)<br>&lt;优先级&gt; 是一个整数，在自动模式下，<strong>这个数字越高的选项，其优先级也就越高</strong>。</p><hr><h4 id="对不同的版本进行选择"><a href="#对不同的版本进行选择" class="headerlink" title="对不同的版本进行选择"></a><strong>对不同的版本进行选择</strong></h4><p><code>update-alternatives --config python</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>  Selection    Path                Priority   Status<br>------------------------------------------------------------<br>  <span class="hljs-number">0</span>            /usr/<span class="hljs-built_in">bin</span>/python2<span class="hljs-number">.7</span>   <span class="hljs-number">2</span>         auto mode<br>  <span class="hljs-number">1</span>            /usr/<span class="hljs-built_in">bin</span>/python2<span class="hljs-number">.7</span>   <span class="hljs-number">2</span>         manual mode<br>* <span class="hljs-number">2</span>            /usr/<span class="hljs-built_in">bin</span>/python3<span class="hljs-number">.6</span>   <span class="hljs-number">1</span>         manual mode<br></code></pre></td></tr></table></figure><p>选择不同的版本，*表示当前选中的版本。</p><p>这样输入python，就进入了相应版本的shell</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django的缓存机制</title>
    <link href="/2020/05/08/Django%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <url>/2020/05/08/Django%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h4 id="Django中的缓存机制"><a href="#Django中的缓存机制" class="headerlink" title="Django中的缓存机制"></a><strong>Django中的缓存机制</strong></h4><p>django中的缓存机制一共分为4中类型：</p><p>① 视图缓存装饰器</p><p>② 模板中使用缓存</p><p>③ urls中添加缓存</p><p>④ 使用自定义缓存，如redis（单核），mysql，memcache（支持多核）</p><h4 id="模板层面上的缓存"><a href="#模板层面上的缓存" class="headerlink" title="模板层面上的缓存"></a><strong>模板层面上的缓存</strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&#123;% load cache %&#125;<br>&#123;% cache 500 sidebar request.user.username%&#125;<br>    &#123;&#123;something&#125;&#125;<br>&#123;% endcache %&#125;<br></code></pre></td></tr></table></figure><p>注：首先加载cache的标签，然后设定缓存，500的单位为s，<code>sidebar</code>表示存储于缓存的键值,<code>request.user.username</code>用来进行过滤，唯一性表示不同用户所缓存的不同内容。</p><p>同时这个500也可以使用参数形式进行传递</p><h4 id="视图层面上的缓存"><a href="#视图层面上的缓存" class="headerlink" title="视图层面上的缓存"></a><strong>视图层面上的缓存</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views.decorators.cache <span class="hljs-keyword">import</span> cache_page<br><span class="hljs-meta">@cache_page(<span class="hljs-params"><span class="hljs-number">30</span>,cache=<span class="hljs-string">&quot;special_cache&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_view</span>(<span class="hljs-params">request</span>):</span><br></code></pre></td></tr></table></figure><p>注： 用装饰器修饰函数，超时时间30s，cache用来指定所选的缓存，默认使用默认缓存</p><h4 id="urls层面上的缓存"><a href="#urls层面上的缓存" class="headerlink" title="urls层面上的缓存"></a><strong>urls层面上的缓存</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.views.decorators.cache <span class="hljs-keyword">import</span> cache_page<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;test/&lt;int:code&gt;/&#x27;</span>, cache_page(<span class="hljs-number">60</span> * <span class="hljs-number">15</span>)(my_view)),<br>]<br></code></pre></td></tr></table></figure><p>注：请求的url例如，<code>test/1</code>和<code>test/2</code>会被分别缓存，下一次请求url时，则会直接请求缓存。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python  将csv 转 json</title>
    <link href="/2020/05/08/python%20%20%E5%B0%86csv%20%E8%BD%AC%20json/"/>
    <url>/2020/05/08/python%20%20%E5%B0%86csv%20%E8%BD%AC%20json/</url>
    
    <content type="html"><![CDATA[<h3 id="python处理csv转换为json"><a href="#python处理csv转换为json" class="headerlink" title="python处理csv转换为json"></a>python处理csv转换为json</h3><p>下面是我爬取的拉钩网数据转化成json，然后传递给前端绘制可视化接口。因为我采用了scrapy爬取数据以csv的文件形式存储，这样便于使用pandas进行数据清理，而为了将最终清理的数据编程前端可读的数据，将csv转化成json。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># csv转json</span><br>csv_file = <span class="hljs-string">&#x27;lagou_new.csv&#x27;</span><br>json_file = <span class="hljs-string">&#x27;lagou_json.json&#x27;</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(csv_file,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> csv_f:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(json_file,<span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> json_f:<br>    <span class="hljs-comment"># 设定键名</span><br>        filednames=(<span class="hljs-string">&#x27;index&#x27;</span>,<span class="hljs-string">&#x27;city&#x27;</span>,<span class="hljs-string">&#x27;education&#x27;</span>,<span class="hljs-string">&#x27;industry&#x27;</span>,<span class="hljs-string">&#x27;job_keyword&#x27;</span>,<span class="hljs-string">&#x27;publish_time&#x27;</span>,<span class="hljs-string">&#x27;salary&#x27;</span>,<span class="hljs-string">&#x27;scale&#x27;</span>,<span class="hljs-string">&#x27;technology_keyword&#x27;</span>,<span class="hljs-string">&#x27;treatment&#x27;</span>)<br>        <span class="hljs-comment"># 以字典形式读取csv文件内容，每一个字典中的键名对应filednames</span><br><span class="hljs-comment"># 有两个参数，第一个为文件描述符，第二个为字典对应的键名</span><br>    reader = csv.DictReader(csv_f,filednames)<br><span class="hljs-comment"># 将字典序列化为json字符串，DictReader返回的可迭代的对象</span><br>        out = json.dumps([i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> reader],ensure_ascii=<span class="hljs-literal">False</span>)  <span class="hljs-comment"># 不让中文显示成ascii</span><br>        <span class="hljs-comment"># 将序列化后的文件写入文件中</span><br>json_f.write(out)<br></code></pre></td></tr></table></figure><p><strong>说明：</strong>最后两句也可以写成<code>json.dump([i for i in reader],json_f,ensure_ascii=False)</code></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>csv</tag>
      
      <tag>json</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python中不同下划线类型的含义</title>
    <link href="/2020/05/05/python%E4%B8%AD%E4%B8%8D%E5%90%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%90%AB%E4%B9%89/"/>
    <url>/2020/05/05/python%E4%B8%AD%E4%B8%8D%E5%90%8C%E4%B8%8B%E5%88%92%E7%BA%BF%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%90%AB%E4%B9%89/</url>
    
    <content type="html"><![CDATA[<h3 id="python共有5中不同的下划线类型含义"><a href="#python共有5中不同的下划线类型含义" class="headerlink" title="python共有5中不同的下划线类型含义"></a><strong>python共有5中不同的下划线类型含义</strong></h3><p>这五种下划线共同遵守了PEP8的规则，分别是：</p><p>① 单前导下划线:<code>_test</code><br>② 单末尾下划线：<code>test_</code><br>③ 双前导下划线：<code>__test</code><br>④ 双前导和双末尾下划线：<code>__test__</code><br>⑤ 单下划线：<code>_</code>  </p><hr><p><strong>下面分别介绍不同下划线类型代表的含义</strong></p><hr><h4 id="单前导下划线-test"><a href="#单前导下划线-test" class="headerlink" title="单前导下划线:_test"></a><strong>单前导下划线:<code>_test</code></strong></h4><p>该下划线旨在表明该修饰的变量或方法仅供内部使用，表示不属于公共接口的部分，因为python中的“私有变量”和“公有变量”没有java分的那么清楚。因此单前导下划线是人为制定的一种规则，需要共同遵守。</p><p>通俗来讲这是一个保护成员（属性或者方法），只有类对象和子类对象自己能访问到这些变量，是用来指定私有变量和方法的一种方式(约定而已)</p><p>注：对于前导下划线修饰的方法来说，<code>import *</code> 并不会导入以单下划线开头的方法，需要注意！</p><hr><h4 id="单末尾下划线test"><a href="#单末尾下划线test" class="headerlink" title="单末尾下划线test_"></a><strong>单末尾下划线<code>test_</code></strong></h4><p>这个下划线也是一种人为制定的规则，主要用于解决与python关键字冲突的参数命名。</p><hr><h4 id="双前导下划线：-test"><a href="#双前导下划线：-test" class="headerlink" title="双前导下划线：__test"></a><strong>双前导下划线：<code>__test</code></strong></h4><p>因为python中没有严格意义上的“私有变量”，以双前导下划线命名的变量或方法，不能直接调用，通过<code>dir(obj)</code>，我们可以发现会加上python解释器重新命名了该属性，通常以<code>_类__变量</code>的格式命名。</p><p>注：既然不是真正的“私有变量”，那么其实是可以通过obj.__dict__来访问这些“私有变量”。不过一般不会这么做，都会遵守约定。</p><hr><h4 id="双前导和双末尾下划线：-test"><a href="#双前导和双末尾下划线：-test" class="headerlink" title="双前导和双末尾下划线：__test__"></a><strong>双前导和双末尾下划线：<code>__test__</code></strong></h4><p>这个下划线往往出现在python内置的魔法方法中，所以除非重写这些魔法方法，否则尽量不要自定义这种下划线的方法，避免和python语法冲突</p><hr><h4 id="单下划线："><a href="#单下划线：" class="headerlink" title="单下划线：_"></a><strong>单下划线：<code>_</code></strong></h4><p>该下划线往往针对不是很重要的索引或变量使用匿名，作为一个临时值。<br><strong>同时，它作为一个特殊变量，表示有解释器评估的最近的一个结果。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">person= (<span class="hljs-string">&#x27;syz&#x27;</span>,<span class="hljs-string">&#x27;20&#x27;</span>,<span class="hljs-string">&#x27;male&#x27;</span>,<span class="hljs-string">&#x27;computer&#x27;</span>)<br>name, _, _, hobby = person<br></code></pre></td></tr></table></figure><p>结果：<br>`&gt;&gt;&gt; _</p><p><code>male</code></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 的 async, await（协程）理解</title>
    <link href="/2020/05/05/python%20%E7%9A%84%20async,%20await%EF%BC%88%E5%8D%8F%E7%A8%8B%EF%BC%89%E7%90%86%E8%A7%A3/"/>
    <url>/2020/05/05/python%20%E7%9A%84%20async,%20await%EF%BC%88%E5%8D%8F%E7%A8%8B%EF%BC%89%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="python中的async-await-and-yield-以及yield-from-的概念"><a href="#python中的async-await-and-yield-以及yield-from-的概念" class="headerlink" title="python中的async/await and yield 以及yield from 的概念"></a><strong>python中的async/await and yield 以及yield from 的概念</strong></h3><p>首先说明以下：</p><p>① yield from 诞生于python3.3版本</p><p>② async/await 关键字 诞生于python3.5版本</p><p>以上两种都可以称为协程，也就是异步的实现方式之一。</p><p>我的版本为python3.6</p><hr><h4 id="一、yield-from"><a href="#一、yield-from" class="headerlink" title="一、yield from"></a><strong>一、yield from</strong></h4><p>首先最简单最原始的一种协程关键字</p><p>1.<code>yield</code>：等价于return，只不过yield具备惰性特性，惰性特性，有效的节省内存控件，当需要输出的时候才会输出。存在yield关键字的函数，被称作生成器函数。</p><p>2.<code>yield from </code>：yield关键字的升级版，<strong>后面可以接任何的可迭代对象(和下面的await有区别哦，下面会讲）</strong>，表示要从哪里generate 元素出来，<code>yield from generate</code>,返回一个生成器。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">func</span>():</span><br>    <span class="hljs-comment"># 通过循环产出i</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>        <span class="hljs-keyword">if</span> i &gt;<span class="hljs-number">8</span>:       <span class="hljs-comment"># 当i=8，就不在产出值了，此时会抛出StopIteration异常，如果用next(obj)产值的话，StopIteration后面会接&#x27;stop`</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;stop&#x27;</span><br>        <span class="hljs-keyword">yield</span> i<br><br><span class="hljs-built_in">print</span>(func())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> func():<br>    <span class="hljs-built_in">print</span>(i)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test</span>():</span><br>    <span class="hljs-comment"># 相当对可迭代对象m的循环产出值</span><br>m = [<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">yield</span> <span class="hljs-keyword">from</span> m<br><br><span class="hljs-built_in">print</span>(test())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> test():<br>    <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p><strong>结果：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">&lt;generator <span class="hljs-built_in">object</span> func at <span class="hljs-number">0x000001EFAD21CF10</span>&gt;  <span class="hljs-comment"># 拥有yield关键字的生成器函数</span><br><span class="hljs-number">0</span><br><span class="hljs-number">1</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span><br><span class="hljs-number">4</span><br><span class="hljs-number">5</span><br><span class="hljs-number">6</span><br><span class="hljs-number">7</span><br><span class="hljs-number">8</span><br>&lt;generator <span class="hljs-built_in">object</span> test at <span class="hljs-number">0x000001EFAD21CF10</span>&gt;  <span class="hljs-comment"># yield from 的生成器函数</span><br><span class="hljs-number">9</span><br><span class="hljs-number">8</span><br><span class="hljs-number">7</span><br><span class="hljs-number">6</span><br><span class="hljs-number">5</span><br><span class="hljs-number">4</span><br><span class="hljs-number">3</span><br><span class="hljs-number">2</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>注：<code>yield from</code>相当于一层for循环，它会处理最后的异常<code>StopIteration</code>,如果函数中有return返回的话（需要next()显示抛出异常），通过yield from 会隐式处理该异常，因此并不会输出return 后的内容。因此如果要输入return 后的内容，则需要手动不断next()了~</p><p>最后for循环print(i),会内部循环调用<code>next()</code>方法，同时最后处理StopIteration异常。</p><p><strong>在《流畅的python》一书中这样介绍了yield from：</strong></p><p>选择书中的一幅图<br><img src="/media/editor/yield_from_20200422151945816806.png">{width=”100%”}</p><p><strong>解释：</strong></p><p>1.委派生成器在 yield from 表达式处暂停时，调用方可以直接把数据发给子生成器。</p><p>2.子生成器再把产出的值发给调用方。</p><p>3.子生成器返回之后，解释器会抛出 StopIteration 异常，并把返回值附加到异常对象上，此时委派生成器会恢复。</p><p><strong>yield from 的主要作用：</strong></p><p>是打开双向通道，把最外层的调用方与最内层的子生成器连接起来，这样二者可以直接发送和产出值，还可以直接传入异常，而不用在位于中间的协程中添加大量处理异常的样板代码。</p><hr><h4 id="二、async-await"><a href="#二、async-await" class="headerlink" title="二、async/await"></a><strong>二、async/await</strong></h4><p>async/await是一套的关键字，也就是他们俩一般一起使用。</p><p>async：用来声明一个函数为异步函数的关键字。</p><p>await：用来对程序进行挂起，转到其他异步程序中执行。然后执行完（也可能另外的异步程序也需要挂起）</p><p>简单的做菜小案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">clean_vegetable</span>():</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我洗好了菜&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_rice</span>():</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">8</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我做好了米饭&quot;</span>)<br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">cook</span>():</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">11</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;我炖好了肉&quot;</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">async_eat</span>():</span><br>    start_time = time.clock()<br>    loop = asyncio.get_event_loop()<br>    tasks = [<br>        clean_vegetable(),<br>        make_rice(),<br>        cook(),<br>    ]<br>    loop.run_until_complete(asyncio.wait(tasks))<br>    loop.close()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;我花了%s时间做好了一顿饭,可以吃饭了~&#x27;</span>%(time.clock()-start_time))<br></code></pre></td></tr></table></figure><p><strong>运行结果：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dns">异步执行：<br><br>我做好了米饭<br>我洗好了菜<br>我炖好了肉<br>我花了<span class="hljs-number">11.0029621</span>时间做好了一顿饭<br></code></pre></td></tr></table></figure><p><strong>说明：</strong><br>上述例子可以发现，采用异步执行只花了11s就做好了一顿饭，而如果我们采用同步执行，我们需要花费10+8+11=29s，快了一倍多。因为，我在做淘完米后，我就可以去洗菜，而不是在那一直等米饭熟。</p><p><strong>注：</strong></p><p>① 使用async关键字修饰的函数为指明为异步函数，执行到await将当前执行的程序挂起来，不经过系统调用切换到其他函数进行执行（这是与线程区别不同之一）。</p><p>② 这里使用了<code>async.sleep()</code>，而不是<code>time.sleep()</code>,因为<code>async.sleep()</code>的时间是可等待的，也就是”假睡眠”,可以进行函数间的切换而<code>time.sleep()</code>是真睡眠。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>异步</tag>
      
      <tag>协程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jquery实现发送验证码定时器</title>
    <link href="/2020/05/04/jquery%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <url>/2020/05/04/jquery%E5%AE%9E%E7%8E%B0%E5%8F%91%E9%80%81%E9%AA%8C%E8%AF%81%E7%A0%81%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="jquery实现发送验证码定时器"><a href="#jquery实现发送验证码定时器" class="headerlink" title="jquery实现发送验证码定时器"></a>jquery实现发送验证码定时器</h3><p>验证码定时器常用于再发送验证码时候设定时间间隔，通常为60s。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">count = <span class="hljs-number">60</span>;  <span class="hljs-comment">//声明一个全局变量，将其挂载到window对象中</span><br><span class="hljs-comment">// 声明一个倒计时函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SetRemainTime1</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (curCount1 == <span class="hljs-number">0</span>) &#123;<br>     <span class="hljs-built_in">window</span>.clearInterval(InterValObj1); <span class="hljs-comment">//停止计时器</span><br>     $(<span class="hljs-string">&quot;#dyEmailButton&quot;</span>).removeAttr(<span class="hljs-string">&quot;disabled&quot;</span>); <span class="hljs-comment">//启用按钮</span><br>     $(<span class="hljs-string">&quot;#dyEmailButton&quot;</span>).val(<span class="hljs-string">&quot;重新发送&quot;</span>);<br>     $(<span class="hljs-string">&quot;#dyEmailButton&quot;</span>).removeClass(<span class="hljs-string">&quot;verify_ing&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>     curCount1--;<br>     $(<span class="hljs-string">&quot;#dyEmailButton&quot;</span>).val(+curCount1 + <span class="hljs-string">&quot;秒再获取&quot;</span>);<br>     &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Javascript"><span class="hljs-comment">//触发定时函数</span><br>curCount1 = count;  <span class="hljs-comment">//声明全局变量curCount1</span><br>$(<span class="hljs-string">&quot;#dyEmailButton&quot;</span>).attr(<span class="hljs-string">&quot;disabled&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br>$(<span class="hljs-string">&quot;#dyEmailButton&quot;</span>).addClass(<span class="hljs-string">&quot;verify_ing&quot;</span>);<br>$(<span class="hljs-string">&quot;#dyEmailButton&quot;</span>).val(+curCount1 + <span class="hljs-string">&quot;秒再获取&quot;</span>);<br>InterValObj1 = <span class="hljs-built_in">window</span>.setInterval(SetRemainTime1, <span class="hljs-number">1000</span>); <span class="hljs-comment">//启动计时器，1秒执行一次</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Jquery</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>542. 01矩阵  动态规划+BFS解</title>
    <link href="/2020/05/04/542.%2001%E7%9F%A9%E9%98%B5%20%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92+BFS%E8%A7%A3/"/>
    <url>/2020/05/04/542.%2001%E7%9F%A9%E9%98%B5%20%20%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92+BFS%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h4 id="题目-：Leetcode-542-01矩阵-一刷-（中等）"><a href="#题目-：Leetcode-542-01矩阵-一刷-（中等）" class="headerlink" title="题目 ：Leetcode 542.  01矩阵   一刷 （中等）"></a><strong>题目 ：Leetcode 542.  01矩阵   一刷 （中等）</strong></h4><hr><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h4><p>两种思路：</p><p>① 动态规划</p><p>② BFS</p><p>我一开始想到的是动态规划，这道题就好比机器人寻路那道题，下一步所得到的值，依赖于上一步的所有值的一个比较判断。</p><p>因为这道题要求上下给定的元素会在上下左右这四个方向进行判断。而机器人寻路只能向下向右走。</p><p>因此我们运用动态规划的思路就可以解题了。</p><h4 id="法一"><a href="#法一" class="headerlink" title="法一"></a><strong>法一</strong></h4><hr><h4 id="具体步骤："><a href="#具体步骤：" class="headerlink" title="具体步骤："></a><strong>具体步骤：</strong></h4><p><strong>① 定义元素状态：</strong>我们要求某个元素距离某1个0（题目中会出现多个0），距离要求最短。而题目中的矩阵是二维的，因此我们<br>就可以定义一个二维数组dp。</p><p><strong>② 建立状态转移方程：</strong>我们这里要考虑边界的情况，上下左右四周，因此我们需要对方程分段一下。</p><p>首先考虑向右向下的情况：此时每一步的距离都会由其左和上的位置的距离比较。</p><p>但这里为了使得边界的比较容易理解一些：将状态转移分为两个比较。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">if</span> col &gt;= <span class="hljs-number">1</span>:<br>    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row][col-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> row &gt;= <span class="hljs-number">1</span>:<br>    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row-<span class="hljs-number">1</span>][col]+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>当列大于等于第二列的时候，才会考虑比较其左边。当行大于等于第二列的时候，才会考虑其上边，因为这里并没有加上边界条件，<br>添加边界条件最后还得删掉边界条件太麻烦了。因此就拆分成两个判断。</p><p>如果光是考虑左上的话，就有可能到这各个角落处的距离出现问题。因此还需要考虑右下。</p><p>那么此时就有可能有人问一个问题，是否还需要考虑左下和右上呢？其实我们可以仔细分析一下，<br>其实只要考虑左上和右下就行了，这里举个简单直观的小例子。</p><p>   1<br>0  1  0<br>   1</p><p>我们观察中间这个值，只需要左上和右下两次动态规划就可以满足其上下左右4中情况了。</p><p>因此右下同理。</p><p>因此状态转移公式：</p><p>① 左上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> col &gt;= <span class="hljs-number">1</span>:<br>    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row][col-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> row &gt;= <span class="hljs-number">1</span>:<br>    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row-<span class="hljs-number">1</span>][col]+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>② 右下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> col &lt; n-<span class="hljs-number">1</span>:<br>    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row][col+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> row &lt; m-<span class="hljs-number">1</span>:<br>    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row+<span class="hljs-number">1</span>][col]+<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>③ 初始化状态</strong>为了求解最小距离，我们可以将dp数组全部赋值为<code>float(inf)</code>(无穷，或者大于10000的任何数)，同时找出matrix中为0的位置i,j，将dp中相应的<br>位置置0。如果不设置为大于10000的任何数，就有可能产生误差（会导致该位置的值不会依赖左上或右下两个方向的值来取得最小值）</p><p><strong>④ 选取结果</strong> 结果要求返回数组，因此本题的结果可以用dp替代。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">updateMatrix</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        <span class="hljs-comment"># 动态规划,分2部分建立状态转移方程</span><br>        <span class="hljs-comment"># 创建二位dp数组</span><br>        m = <span class="hljs-built_in">len</span>(matrix)<br>        n = <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        dp = [[<span class="hljs-built_in">float</span>(inf) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">if</span> matrix[row][col] == <span class="hljs-number">0</span>:<br>                    dp[row][col] = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 向右向下</span><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                <span class="hljs-keyword">if</span> col &gt;= <span class="hljs-number">1</span>:<br>                    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row][col-<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> row &gt;= <span class="hljs-number">1</span>:<br>                    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row-<span class="hljs-number">1</span>][col]+<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 向左向上</span><br>        <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> col <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> col &lt; n-<span class="hljs-number">1</span>:<br>                    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row][col+<span class="hljs-number">1</span>]+<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">if</span> row &lt; m-<span class="hljs-number">1</span>:<br>                    dp[row][col] = <span class="hljs-built_in">min</span>(dp[row][col],dp[row+<span class="hljs-number">1</span>][col]+<span class="hljs-number">1</span>)<br><br>        <span class="hljs-keyword">return</span> dp<br></code></pre></td></tr></table></figure><p>或者直接在原矩阵上进行判断修改，这样就无须多开辟一个二维空间：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">updateMatrix</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        m = <span class="hljs-built_in">len</span>(matrix)<br>        n = <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                max_i,max_j = <span class="hljs-number">10001</span>,<span class="hljs-number">10001</span><br>                <span class="hljs-keyword">if</span> matrix[i][j] != <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">if</span> i&gt;=<span class="hljs-number">1</span>:<br>                        max_i = matrix[i-<span class="hljs-number">1</span>][j]<br>                    <span class="hljs-keyword">if</span> j&gt;=<span class="hljs-number">1</span>:<br>                        max_j = matrix[i][j-<span class="hljs-number">1</span>]<br>                    matrix[i][j] = <span class="hljs-built_in">min</span>(max_i,max_j)+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>                max_i,max_j = <span class="hljs-number">10001</span>,<span class="hljs-number">10001</span><br><span class="hljs-comment"># 对不为0的值进行修改</span><br>                <span class="hljs-keyword">if</span> matrix[i][j] != <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">if</span> i &lt;= m-<span class="hljs-number">2</span>:<br>                        max_i = matrix[i+<span class="hljs-number">1</span>][j]<br>                    <span class="hljs-keyword">if</span> j &lt;= n-<span class="hljs-number">2</span>:<br>                        max_j = matrix[i][j+<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 因为最终要比较3个值，分别为当前位置，当前位置的下方，当前位置的右方。</span><br>                    matrix[i][j] = <span class="hljs-built_in">min</span>(matrix[i][j], <span class="hljs-built_in">min</span>(max_i,max_j)+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> matrix<br></code></pre></td></tr></table></figure><h4 id="法二"><a href="#法二" class="headerlink" title="法二"></a><strong>法二</strong></h4><p>DFS深度优先遍历，首先选出所有不为0的值，将这些0的位置坐标放入队列中。同时维护一个集合，用于装载<br>所有已经运算过一次的位置。防止多次运算重复，造成死循环。</p><p>本题中DFS的过程就是由内向外不断扩展的过程。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">updateMatrix</span>(<span class="hljs-params">self, matrix: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]</span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]]:</span><br>        <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br>        m = <span class="hljs-built_in">len</span>(matrix)<br>        n = <span class="hljs-built_in">len</span>(matrix[<span class="hljs-number">0</span>])<br>        list_zero = [(i,j) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m) <span class="hljs-keyword">if</span> matrix[i][j] == <span class="hljs-number">0</span>]<br>        q = deque(list_zero)<br>        set_ = <span class="hljs-built_in">set</span>(list_zero)<br><br>        <span class="hljs-keyword">while</span>(q):<br>            row,col = q.popleft()<br>            <span class="hljs-keyword">for</span> i,j <span class="hljs-keyword">in</span> [(row-<span class="hljs-number">1</span>,col),(row+<span class="hljs-number">1</span>,col),(row,col-<span class="hljs-number">1</span>),(row,col+<span class="hljs-number">1</span>)]:<br>                <span class="hljs-keyword">if</span> <span class="hljs-number">0</span> &lt;= i &lt;= m-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">0</span> &lt;= j &lt;= n-<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (i,j) <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> set_ <span class="hljs-keyword">and</span> matrix[i][j] != <span class="hljs-number">0</span>:<br>                    matrix[i][j] = matrix[row][col] + <span class="hljs-number">1</span><br>                    set_.add((i,j))<br>                    q.append((i,j))<br>        <span class="hljs-keyword">return</span> matrix<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat安装教程</title>
    <link href="/2020/05/03/Tomcat%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/"/>
    <url>/2020/05/03/Tomcat%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>一、去官网<a href="https://tomcat.apache.org/download-90.cgi%E4%B8%8B%E8%BD%BD%E7%AC%A6%E5%90%88%E8%87%AA%E5%B7%B1jdk%E7%89%88%E6%9C%AC%E7%9A%84tomcat%E5%AE%89%E8%A3%85%E5%8C%85">https://tomcat.apache.org/download-90.cgi下载符合自己jdk版本的tomcat安装包</a></p><p>我这里选择了下载<code>64-bit Windows zip (pgp, sha512)</code></p><p>下载好后，进行解压，只需要配置环境变量，使得从cmd可以直接启动。</p><p><strong>进入环境变量</strong></p><p>①选择系统变量，新建，输入<code>CATALINA_BASE</code>，值为tomcat的bin目录所在的目录</p><p>我这里是<code>D:\syz\Tomact\apache-tomcat-9.0.31</code></p><p>②再新建一个，输入<code>CATALINA_HOME</code>，值同为包含bin所在的目录</p><p>③将这些变量添加到path路径中,<code>%CATALINA_HOME%\bin</code>,点击保存，重启cmd。</p><p>④测试tomcat是否安装完成，输入<code>startup</code>，tomcat默认的端口是8080，所以网址中输入127.0.0.1:8080，即可跳转到tomcat官网，表明<br>安装成功</p>]]></content>
    
    
    <categories>
      
      <category>Tomcat</category>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tomcat</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>云服务器重启，出现mysql连接失败的原因（已解决）</title>
    <link href="/2020/05/03/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%EF%BC%8C%E5%87%BA%E7%8E%B0mysql%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/05/03/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%87%8D%E5%90%AF%EF%BC%8C%E5%87%BA%E7%8E%B0mysql%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8E%9F%E5%9B%A0%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-run-mysqld-mysqld-sock’"><a href="#ERROR-2002-HY000-Can’t-connect-to-local-MySQL-server-through-socket-‘-var-run-mysqld-mysqld-sock’" class="headerlink" title="ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’"></a><strong>ERROR 2002 (HY000): Can’t connect to local MySQL server through socket ‘/var/run/mysqld/mysqld.sock’</strong></h4><p>以上是连接mysql时报的错。（云服务器重启后产生的问题）</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h4><p>连接不到<code>/var/run/mysqld/mysqld.sock</code>，可能是因为重启丢失这个文件了。因此我们需要找到相应的位置创建该文件，然后重启mysql就行了。</p><p>① 执行 <code>vi   /etc/mysql/my.cnf</code></p><p>可以看到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">!includedir /etc/mysql/conf.d/  <span class="hljs-comment"># 被重定向到这个文件下了</span><br>!includedir /etc/mysql/mysql.conf.d/<br></code></pre></td></tr></table></figure><p>因此我们打开<code> vi /etc/mysql/conf.d/</code> ，可以看到<code>socket = /var/run/mysqld/mysqld.sock</code>这个信息，表明连接指向这个文件。</p><p>接下来我们去<code>/var/run</code>中找这个文件，发现没有该文件，到这里我们基本上明白了，因为缺失了改文件，所以会导致连接失败。</p><p>执行以下步骤</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">sudo mkdir -p /var/run/mysqld<br>sudo chown mysql /var/run/mysqld/  <span class="hljs-comment"># 设置 文件所属的用户或组</span><br>sudo service mysql restart<br></code></pre></td></tr></table></figure><p>重启后基本就好了。</p><p><strong>注：除非万不得已，尽量不要重启云服务器</strong></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>云服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Myeclipse连接mysql的编码问题255（已解决）</title>
    <link href="/2020/05/03/Myeclipse%E8%BF%9E%E6%8E%A5mysql%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98255%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    <url>/2020/05/03/Myeclipse%E8%BF%9E%E6%8E%A5mysql%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98255%EF%BC%88%E5%B7%B2%E8%A7%A3%E5%86%B3%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>使用Myeclipse连接mysql的时候出现了如下错误：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/myeclipse_mysql.png">{width=”80%” align=”center”}</p><p><strong>主要是编码问题。</strong></p><p>?useUnicode=true&amp;characterEncoding=utf8`</p><p><code>jdbc:mysql://localhost:3306/javadb?useUnicode=true&amp;characterEncoding=utf8</code></p><p>在数据库名后面添加<code>?useUnicode=true&amp;characterEncoding=utf8</code></p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu的防火墙---ufw</title>
    <link href="/2020/05/02/Ubuntu%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99---ufw/"/>
    <url>/2020/05/02/Ubuntu%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99---ufw/</url>
    
    <content type="html"><![CDATA[<h4 id="Ubuntu的防火墙ufw"><a href="#Ubuntu的防火墙ufw" class="headerlink" title="Ubuntu的防火墙ufw"></a><strong>Ubuntu的防火墙ufw</strong></h4><p>由于Ubuntu原始的防火墙iptables比较繁琐，所以额外提供了基于iptables之上的防火墙工具。ufw操作起来也比较简单。</p><p>因为我的云服务器是Ubuntu版本的，所以就选择了ufw作为防火墙工具，因为阿里的轻量应用服务器默认会拦截一些端口，这些端口需要自己去开启，通过安全组开启后，再通过ufw进行管理。也就是相当于使用了两层防火墙，安全组作为一道虚拟防火墙，设置在云端。</p><p>1.安装ufw</p><p><code>sudo apt-get install ufw</code></p><p>注：ufw需要root最高权限下使用，云服务器一般会提示<code>sudo su root</code>进入root权限</p><p>2.常用的ufw命令：</p><p>① 添加端口</p><p>例举一些我常用的端口：</p><p><code>ufw allow 3690</code>  # svn的端口</p><p><code>ufw allow 22122</code>  # fastdfs的tracker追踪器的端口</p><p><code>ufw allow 23000</code>  # fastdfs的storage存储器的端口</p><p><code>ufw allow 465</code>   # 用于发送qq邮件的端口</p><p><code>ufw allow 80</code>  # nginx的端口</p><p>以上是添加端口的指令</p><p>③ 拒绝访问端口</p><p><code>ufw deny 3690</code></p><p>③ 查看端口状态</p><p><code>ufw status</code></p><p>④ 启动ufw防火墙</p><p><code>ufw enable</code></p><p>⑤ 关闭ufw防火墙</p><p><code>ufw disable</code></p><p>⑥ 删除端口</p><p><code>ufw delete allow 3690</code></p><p>⑦ 允许某个特定的ip可以访问所有的端口</p><p><code>ufw allow from 某个ip</code></p><p>⑧ 转换日志状态</p><p><code>ufw logging on/off</code></p><p><strong>注：使用云服务器的时候，如果遇到连接超时或者拒绝访问，这时候就要去看相应的端口是否启动了。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>ufw</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django实现haystack和whoosh实现全局搜索的采坑之旅</title>
    <link href="/2020/05/02/Django%E5%AE%9E%E7%8E%B0haystack%E5%92%8Cwhoosh%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E7%9A%84%E9%87%87%E5%9D%91%E4%B9%8B%E6%97%85/"/>
    <url>/2020/05/02/Django%E5%AE%9E%E7%8E%B0haystack%E5%92%8Cwhoosh%E5%AE%9E%E7%8E%B0%E5%85%A8%E5%B1%80%E6%90%9C%E7%B4%A2%E7%9A%84%E9%87%87%E5%9D%91%E4%B9%8B%E6%97%85/</url>
    
    <content type="html"><![CDATA[<h3 id="haystack接口-Whoosh引擎后端实现搜索详解："><a href="#haystack接口-Whoosh引擎后端实现搜索详解：" class="headerlink" title="haystack接口+Whoosh引擎后端实现搜索详解："></a><strong>haystack接口+Whoosh引擎后端实现搜索详解：</strong></h3><h4 id="1-为什么选择使用搜索引擎？"><a href="#1-为什么选择使用搜索引擎？" class="headerlink" title="1.为什么选择使用搜索引擎？"></a><strong>1.为什么选择使用搜索引擎？</strong></h4><p>目前基本所有的网站都有搜索功能，过去主要是通过模糊查询like，但是like的效率不过，特别是针对关键字在多个字段中搜索的时候，很麻烦，而且在数据量特别大的时候，会给数据库带来特别大的压力，因此我们选择使用搜索引擎来处理。</p><h4 id="2-搜索引擎工作原理"><a href="#2-搜索引擎工作原理" class="headerlink" title="2.搜索引擎工作原理"></a><strong>2.搜索引擎工作原理</strong></h4><p>搜索引擎的工作原理并不是直接在数据库中进行搜索，而是先对数据库的数据进行一边预处理，建立一份索引结构数据。这样以后搜索的时候，将直接在索引结构数据中搜索关键字，进而找到真实的存储位置，大大提高了效率，减小数据库的压力。</p><h4 id="3-如何使用ElasticSearch？"><a href="#3-如何使用ElasticSearch？" class="headerlink" title="3.如何使用ElasticSearch？"></a><strong>3.如何使用ElasticSearch？</strong></h4><p>①安装django对接Whoosh的接口haystack包</p><p><code>pip install django-haystack</code></p><p><code>pip install drf-haystack</code>  # 类似drf规则的借口</p><p><code>pip install jieba</code>   # 中文分词包</p><p><code>pip install whoosh</code>   # 纯python编写的全文搜索引擎，虽然性能不高，但错误少。</p><p>如果python版本过高，drf-haystack会自动降低你的版本为django2.2，之前的项目为django3.0不过降低到2.2,只要不涉及wsgi的问题就都没关系。</p><p>注：<code>django-haystack</code>和<code>haystack</code>会冲突，报错</p><p> <code>from haystack import connections</code></p><p><code>ImportError: cannot import name &#39;connections&#39;</code></p><p>因此需要删掉haystack</p><hr><p>②将app添加到INSTALLED_APP中</p><p>`python<br>INSTALLED_APPS = [  </p><pre><code>&#39;simpleui&#39;,  &#39;django.contrib.admin&#39;,  &#39;django.contrib.admindocs&#39;,  &#39;django.contrib.auth&#39;,  &#39;django.contrib.contenttypes&#39;,  &#39;django.contrib.sessions&#39;,  &#39;django.contrib.messages&#39;,  &#39;django.contrib.staticfiles&#39;,  &#39;django.contrib.humanize&#39;,  # 人性化标签  &#39;haystack&#39;,  </code></pre><p>`</p><hr><p><strong>③添加haystack的搜索引擎</strong></p><p>这个地方根据官方文档的介绍，有多种全文搜索引擎</p><p>（1）.这是一种基于elasticserach的搜索引擎</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">HAYSTACK_CONNECTIONS = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine&#x27;</span>,<br>        <span class="hljs-string">&#x27;URL&#x27;</span>: <span class="hljs-string">&#x27;http://127.0.0.1:9200/&#x27;</span>,  <span class="hljs-comment"># 指定运行搜索引擎的服务器ip地址</span><br>        <span class="hljs-string">&#x27;INDEX_NAME&#x27;</span>: <span class="hljs-string">&#x27;haystack&#x27;</span>,  <span class="hljs-comment"># 指定elasticsearch所建立的索引库的名字</span><br>    &#125;,<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）.这是一种基于Whoosh的搜索引擎，这个引擎是纯python写的，速度虽然没有elasticsearch等搜索引擎快，但是报错少呀~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">HAYSTACK_CONNECTIONS = &#123;<br>    <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>        <span class="hljs-comment"># 指定使用的搜索引擎</span><br>        <span class="hljs-string">&#x27;ENGINE&#x27;</span>: <span class="hljs-string">&#x27;haystack.backends.whoosh_backend.WhooshEngine&#x27;</span>,<br>        <span class="hljs-comment"># 指定索引文件存放位置</span><br>        <span class="hljs-string">&#x27;PATH&#x27;</span>: os.path.join(BASE_DIR, <span class="hljs-string">&#x27;whoosh_index&#x27;</span>),<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要同步更新索引，添加如下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 新增的数据自动生成索引</span><br>HAYSTACK_SIGNAL_PROCESSOR = <span class="hljs-string">&#x27;haystack.signals.RealtimeSignalProcessor&#x27;</span><br></code></pre></td></tr></table></figure><p>如果需要设置每页显示的数目，因为它同时内置了django的分页器功能，添加如下配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 设置每页显示的数目，默认为20，可以自己修改</span><br>HAYSTACK_SEARCH_RESULTS_PER_PAGE = <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><hr><p><strong>④添加SerachIndexes</strong></p><p>SerachIndex对象指的是应该在搜索索引中放置什么样的数据和怎样处理数据流的一个对象。</p><p>其次我们需要子类化indexs.SearchIndex和indexes.Indexable类。</p><p>包含get_model（）获取模型方法，以及定义查询关键字的index_queryset()方法。</p><p><strong>注：该py最好放在要搜索的model的app下。因为haystack会自动进行搜索。</strong></p><p>在自己的app下创建py文件，<code>search_indexes.py</code>（注意名称固定，方便haystack查找到）不要随意替换目录！</p><p><strong>例子：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NoteIndex</span>(<span class="hljs-params">indexes.SearchIndex, indexes.Indexable</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    定义关于Note的haystack搜索引擎</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># document 表示该字段主要用于关键字查询的主要字段</span><br>    <span class="hljs-comment"># use_Template表示该字段将从模板中指明</span><br>    text = indexes.CharField(document=<span class="hljs-literal">True</span>, use_template=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># model_attr表明能让搜索引擎识别的额外字段，用来检索参照数据表中的字段值</span><br>    title = indexes.CharField(model_attr=<span class="hljs-string">&#x27;title&#x27;</span>)<br>    note_author = indexes.CharField(model_attr=<span class="hljs-string">&#x27;note_author&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_model</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-comment"># 返回建立索引的模型类</span><br>        <span class="hljs-keyword">return</span> Note<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index_queryset</span>(<span class="hljs-params">self, using=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-comment"># 返回建立索引的数据查询集</span><br>        <span class="hljs-keyword">return</span> self.get_model().note_.<span class="hljs-built_in">all</span>()<br></code></pre></td></tr></table></figure><p><strong>这里稍微说明一下：</strong></p><p>1.搜索引擎要查找对应的数据肯定需要关键字，而这个关键字可能有多个，所以text字段代表了这些关键字，</p><p>2.document=True必须出现在主关键字中</p><p>3.use_template=True，需要新建一个txt文档来存放索引关键字。</p><p>4.model_attr标记的关键字，用作额外关键字。</p><hr><p><strong>⑤创建搜索引擎文档：</strong></p><p>名命格式：<code>templates/search/indexes/&lt;appname&gt;/&lt;model&gt;_text.txt</code></p><p>写入以下内容索引字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123; <span class="hljs-built_in">object</span>.<span class="hljs-built_in">id</span> &#125;&#125;<br>&#123;&#123; <span class="hljs-built_in">object</span>.title &#125;&#125;<br>&#123;&#123; <span class="hljs-built_in">object</span>.note_author.username &#125;&#125;<br>&#123;&#123; <span class="hljs-built_in">object</span>.<span class="hljs-built_in">type</span> &#125;&#125;<br></code></pre></td></tr></table></figure><p>作用是构建搜索引擎所索引的文档，其中text字段的索引值可以由多个字段组成，具体由哪些模型类字段组成，将存在于搜索引擎文档中。</p><p>例如我这里的关键字字段有4个，那么转化为url的时候，这些关键字将通过text参数名传递此模板指明当将关键词通过text参数名传递时</p><p>（即127.0.0.1:8080/notes/search/?text=2</p><p>或127.0.0.1:8080/goods/search/?text=’syz’</p><p>或127.0.0.1:8080/goods/search/?text=’python笔记(1)’</p><p>或127.0.0.1:8080/goods/search/?text=’celery类别’</p><p>可以通过Note(model)的id、title、note_author.username、type来进行关键字索引查询。</p><hr><p><strong>⑥最后别忘了添加url路由</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;search/&#x27;</span>, include(<span class="hljs-string">&#x27;haystack.urls&#x27;</span>)),<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> haystack.views <span class="hljs-keyword">import</span> SearchView<br>urlpatterns = [<br>    url(<span class="hljs-string">r&#x27;^$&#x27;</span>, SearchView(), name=<span class="hljs-string">&#x27;haystack_search&#x27;</span>),<br>]<br></code></pre></td></tr></table></figure><p><strong>说明：include(haystack.urls)实际是include第二种子urlpatterns</strong></p><hr><p><strong>⑦使用中文分词包jieba进行词组分析</strong></p><p>因为whoosh默认使用的分词功能依赖于正侧表达式，所以对英文的分词比较有用，但是对于中文分词效果不好。因此我们就需要一个具备中文字典的分词包—-jieba。</p><p>jieba的关键词提取主要运用了两种算法：texttank，TF-IDF。这里超出了本篇笔记的范围，暂时不做介绍。（主要是作者我深入接触哈哈哈）</p><p>使用jieba作为分词包，我们就需要修改whoosh的后端。</p><p>找到<code>site-packages</code>中的<code>whoosh_backend.py</code></p><p>修改配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#import最后一行加入jieba分词器</span><br><span class="hljs-keyword">from</span> jieba.analyse <span class="hljs-keyword">import</span> ChineseAnalyzer<br><br>schema_fields[field_class.index_fieldname] = TEXT(stored=<span class="hljs-literal">True</span>, analyzer=ChineseAnalyzer(), field_boost=field_class.boost, sortable=<span class="hljs-literal">True</span>)<br><span class="hljs-comment"># 将analyzer替换成jieba的ChineseAnalyzer</span><br><br></code></pre></td></tr></table></figure><p>以上基本的配置及搜索索引已经搭建好，接下来就需要生成索引表了</p><hr><p><strong>⑧手动更新索引：</strong></p><p><code>python manage.py rebuild_index</code> # 更新数据库的数据到es中</p><hr><p><strong>⑨搭配restful api 传递数据</strong></p><p>做下一个项目的时候完善这里</p><hr><p>详情参考haystack官方文档：<br><a href="https://django-haystack.readthedocs.io/en/v2.5.1/tutorial.html">https://django-haystack.readthedocs.io/en/v2.5.1/tutorial.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>搜索</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决 Linux 上安装的script不在path</title>
    <link href="/2020/05/02/%E8%A7%A3%E5%86%B3%20linux%20%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84script%E4%B8%8D%E5%9C%A8path/"/>
    <url>/2020/05/02/%E8%A7%A3%E5%86%B3%20linux%20%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84script%E4%B8%8D%E5%9C%A8path/</url>
    
    <content type="html"><![CDATA[<h3 id="sudo提示-commend-not-found"><a href="#sudo提示-commend-not-found" class="headerlink" title="sudo提示  commend not found"></a>sudo提示  commend not found</h3><p>我在部署dephna服务器的时候，运行指令出现<code>daphne commend not found </code>的问题。</p><p>我删掉了该包后，重新安装了，出现了如下的警告。</p><p><code>WARNING: The script daphne is installed in &#39;/home/admin/.local/bin&#39; which is not on PATH.</code></p><p><strong>注：</strong>该警告表明该daphne被安装在了另外的地方，不在PATH上，也就是需要到指定目录才能打开。</p><p>这种情况下，要记住很长的目录很麻烦，因此可以再终端输入命令</p><p><code>export PATH=/home/admin/.local/bin:$PATH</code></p><p>输入后，直接在输入daphne，就可以出现其相关的指令集。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>环境变量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTTP协议详解</title>
    <link href="/2020/05/01/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/05/01/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="一、什么是HTTP协议"><a href="#一、什么是HTTP协议" class="headerlink" title="一、什么是HTTP协议"></a><strong>一、什么是HTTP协议</strong></h3><p><strong>总结一下：</strong></p><p>①超文本传输协议（英文：HyperText Transfer Protocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的应用层协议。HTTP是万维网的数据通信的基础，用于从万维网向本地浏览器传送数据的协议。</p><p>②HTTP协议是基于TCP/IP通信协议来传送数据（图片，视频，文字等媒体资源）</p><h3 id="二、HTTP特点"><a href="#二、HTTP特点" class="headerlink" title="二、HTTP特点"></a><strong>二、HTTP特点</strong></h3><p>① 简单快速，客户端向服务端请求服务时，只需要发送请求和url路径。通常使用的HTTP请求有GET,POST,PUT,PATCH等。（下面会介绍下GET和POST两种请求的区别）同时由于，HTTP比较简单，因此HTTP的服务器程序一般较小，使得通信速度也很快。</p><p>② 数据对象灵活：HTTP可以允许传递任意类型的对象，由Content-Type决定，类型有<code>text/html</code>,<code>text/xml</code>,<code>text/png</code>,<code>application/json</code>等,post主流的类型为Json格式，目前用于前后端分离，接口开发。</p><p>③ 无连接：当服务器完成响应后，客户端收到相应后，就会释放连接，这样可以节省传输时间。</p><p>④ 无状态：无状态是指服务端处理了上一次的信息后，并不会记忆，当发送下一次请求后，需要重新处理，所以再次请求需要包含全部的数据。这样可能就会导致每次发送请求报文中的数据包很大。</p><h3 id="三、url介绍"><a href="#三、url介绍" class="headerlink" title="三、url介绍"></a>三、url介绍</h3><p>url别名统一资源定位符，就拿我的博客写笔记的url举例吧</p><p><code>http://syz.cn/home_page</code></p><p>(暂时没用上域名)</p><p>说明：</p><p>① http :表示使用的HTTP协议，在传输过程中没有对数据加密，而HTTPS协议会对数据传输时进行加密，然后发送到服务器，相对于HTTP来说更加安全。</p><p>③ syz.cn :这里是域名，syz.cn,当然也可以使用ip进行访问，不过为了安全还是买一个域名，用DNS进行解析绑定到ip上。</p><p>③ home_page:该部分是路由，虚拟目录部分，从第一个’/‘到最后一个’/‘为止。</p><p>另外还有些比如？后面跟着get传递来的参数。</p><h3 id="四、HTTP的Request请求"><a href="#四、HTTP的Request请求" class="headerlink" title="四、HTTP的Request请求"></a><strong>四、HTTP的Request请求</strong></h3><p>客户端发送一个HTTP请求到服务器的请求过程：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/http_request.png">{width=”100%” align=”center”}</p><p>利用网上一个一段request内容，自己想要获取的话可以使用<code>wireshark</code>抓包工具，或者使用<code>charles</code>（曾经我使用它爬过微信的小程序）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">GET /562f25980001b1b106000338.jpg HTTP/1.1<br>Host    img.mukewang.com<br>User-Agent    Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.106 Safari/537.36<br>Accept    image/webp,image/*,*/*;q=0.8<br>Referer    http://www.imooc.com/<br>Accept-Encoding    gzip, deflate, sdch<br>Accept-Language    zh-CN,zh;q=0.8<br></code></pre></td></tr></table></figure><p>我们可以分析一下：<br>第一行：请求方法，目前的HTTP版本都为1.1<br>第二行：请求目的地<br>第三行：浏览器的一些基本配置，标志什么浏览器等等<br>第四行：接收的类型<br>第五行：参考的地址<br>第六行：接受的编码类型<br>第七行：接受的语言  </p><p>主要分为四个部分：<br>①请求行（第一行，包括请求方法，请求的资源和HTTP版本）<br>②请求报文头（包括一些额外的附加信息，在爬虫中一般复制浏览器中的相应部分就行了）<br>③空行：请求头后面必须要有空行<br>④请求报文主体：指的是数据，上面例子中因为get方法，可能不需要带参数  </p><h3 id="五、HTTP的Response相应"><a href="#五、HTTP的Response相应" class="headerlink" title="五、HTTP的Response相应"></a><strong>五、HTTP的Response相应</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html">HTTP/1.1 200 OK<br>Date: Jan, 22 May 2020 06:07:21 GMT<br>Content-Type: text/html; charset=UTF-8<br><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <br>      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>同样的相应也分成四个部分：<br>① 状态行：即包含了协议类型HTTP/1.1，状态码200，表示成功返回<br>② 消息报头:包含了日期和响应数据类型以及编码方式<br>③ 空行：必须要有空行<br>④ 相应主体：即响应返回的html内容。  </p><h3 id="六、HTTP状态码"><a href="#六、HTTP状态码" class="headerlink" title="六、HTTP状态码"></a><strong>六、HTTP状态码</strong></h3><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:<br><strong>1xx</strong>：指示信息–表示请求已接收，继续处理<br><strong>2xx</strong>：成功–表示请求已被成功接收、理解、接受<br><strong>3xx</strong>：重定向–要完成请求必须进行更进一步的操作，比如301永久重定向，302临时重定向<br><strong>4xx</strong>：客户端错误–请求有语法错误或请求无法实现，权限不够等<br><strong>5xx</strong>：服务器端错误–服务器未能实现合法的请求  </p><p>具体的响应码参考文档：</p><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html</a></p><h3 id="七、HTTP请求方法"><a href="#七、HTTP请求方法" class="headerlink" title="七、HTTP请求方法"></a><strong>七、HTTP请求方法</strong></h3><p>上面的HTTP特点中刚才提到了HTTP请求方法：主要有<code>GET</code>,<code>POST</code>,<code>PUT</code>,<code>PATCH</code>,<code>DELETE</code>等</p><p><code>GET</code>主要用来获取数据.<br><code>POST</code>主要用来提交表单，或者提交数据进行处理，用的比较多，主要用于新建<br><code>PUT</code>主要用来更新全部的数据字段，主要用于更新<br><code>PATHC</code>主要用于局部更新<br><code>DELETE</code>主要用于删除数据  </p><h3 id="八、HTTP的工作原理"><a href="#八、HTTP的工作原理" class="headerlink" title="八、HTTP的工作原理"></a><strong>八、HTTP的工作原理</strong></h3><p><strong>HTTP请求的相应步骤：</strong></p><p><strong>1.建立TCP套接字</strong></p><p> 客户端与服务端之间建立TCP套接字连接。</p><p><strong>2.发送HTTP请求报文</strong></p><p>通过TCP套接字，客户端向服务端发送HTTP请求。请求报文主要由4部分组成：请求行，请求头，空白行，请求主体</p><p><strong>3.服务器处理请求返回HTTP响应</strong></p><p>这里举个django的请求例子：web服务器解析请求—-&gt;中间件处理—–&gt;定位到相应的路由—–&gt;调用视图函数—–&gt;返回响应。<br>同样响应报文段也由4部分组成：状态行，相应头，空白行，相应主体</p><p><strong>4.释放TCP连接</strong></p><p>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;<br>若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p><p><strong>客户端解析HTML内容</strong></p><hr><p>之前网上看到一些面试的题目，很多面试题都会考察有关HTTP协议的问题，以及在求职的要求时，都需要熟悉HTTP协议，<br>下面主要记录两道面试的常见题目:</p><h3 id="九、分析GET和POST请求的区别："><a href="#九、分析GET和POST请求的区别：" class="headerlink" title="** 九、分析GET和POST请求的区别：**"></a>** 九、分析GET和POST请求的区别：**</h3><h4 id="请求服务的url表示及安全性"><a href="#请求服务的url表示及安全性" class="headerlink" title="请求服务的url表示及安全性"></a><strong>请求服务的url表示及安全性</strong></h4><p>①GET请求会将参数放到url中传递，在?后分割url和参数，会以16进制的形式传递，而且只允许是ASCII格式,<br>中文的话会通过BASE64加密成ASCII格式，如果是敏感的信息，那么就会很不安全。</p><p>②POST请求的参数会包含在HTTP请求包的数据包中，所以并不会暴露早url中，常用于提交隐私数据。</p><p>③GET的安全性比POST低，GET请求可以可以从历史记录或缓存中查看。而POST不会</p><h4 id="长度限制"><a href="#长度限制" class="headerlink" title="长度限制"></a><strong>长度限制</strong></h4><p>HTTP协议对数据的大小和url的长度不会有限制，主要的限制由不同的浏览器指定的</p><p>① GET是通过url传值的，所以对url的长度有限制，不同的浏览器有不同的限制</p><p>② POST因为不是通过url传递数据，因此不会有对url产生长度限制。</p><h4 id="浏览器回退问题"><a href="#浏览器回退问题" class="headerlink" title="浏览器回退问题"></a><strong>浏览器回退问题</strong></h4><p>① GET方法进行浏览器回退，是无害的，因为GET可以从缓存中拿出数据。</p><p>② POST回退浏览器会再次发送请求，每次都要创建新的资源。</p><h3 id="十、当你敲好URL回车，会发生什么？"><a href="#十、当你敲好URL回车，会发生什么？" class="headerlink" title="十、当你敲好URL回车，会发生什么？"></a><strong>十、当你敲好URL回车，会发生什么？</strong></h3><p>1.浏览器首先向DNS服务器请求解析出域名所对应的IP地址</p><p>2.根据解析出的IP地址，加上端口号，与服务端建立TCP套接字连接</p><p>3.客户端发送HTTP请求报文段，经过三次握手，在第三次的时候将请求报文段发送给服务端</p><p>4.服务器接收HTTP请求，进行解析处理，进行资源定位，经过中间件，调用相应的视图函数，做出响应返回给客户端。</p><p>5.服务端根据connection的模式，决定是否主动释放TCP连接。</p><p>5.客户端接收服务端响应的响应报文段，并进行解析，依次解析状态行，看状态码是否请求成功，然后解析响应头，响应头<br>会告诉客户端html文本和字符集，接着客户端根据字符集和html文本，格式化html，最后呈现给用户</p>]]></content>
    
    
    <categories>
      
      <category>HTTP</category>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django 使用memcache缓存</title>
    <link href="/2020/05/01/Django%20%E4%BD%BF%E7%94%A8memcache%E7%BC%93%E5%AD%98/"/>
    <url>/2020/05/01/Django%20%E4%BD%BF%E7%94%A8memcache%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h3 id="django-使用memcache分布式缓存-官方推荐的一款分布式缓存系统"><a href="#django-使用memcache分布式缓存-官方推荐的一款分布式缓存系统" class="headerlink" title="django 使用memcache分布式缓存(官方推荐的一款分布式缓存系统)"></a><strong>django 使用memcache分布式缓存(官方推荐的一款分布式缓存系统)</strong></h3><hr><h4 id="五一节快乐-，每天都要进步一点点"><a href="#五一节快乐-，每天都要进步一点点" class="headerlink" title="五一节快乐~，每天都要进步一点点"></a><strong>五一节快乐~，每天都要进步一点点</strong></h4><hr><p>之前的博客项目使用的是redis，没有使用memcache，所有的和worker都是存储在redis中，感觉像有些安全性不是很高的的缓存也可以存储在memcache中。因此在目前这个项目中，我打算使用两种缓存结合使用，结合两者各自的优势使用</p><hr><h4 id="一、什么是memcache？"><a href="#一、什么是memcache？" class="headerlink" title="一、什么是memcache？"></a><strong>一、什么是memcache？</strong></h4><p>memcache是一款分布式的缓存系统，其目的是减小用户等待时间，降低RDBMS的访问压力,动态的提高web服务器请求性能。其特点有协议简单，基于内存存储方式，访问速度快。</p><hr><h4 id="二、django中如何使用memcache和redis"><a href="#二、django中如何使用memcache和redis" class="headerlink" title="二、django中如何使用memcache和redis"></a><strong>二、django中如何使用memcache和redis</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 缓存</span><br>CACHES = &#123;<br>    <span class="hljs-string">&#x27;redis&#x27;</span>:<br>        &#123;<br>            <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django_redis.cache.RedisCache&#x27;</span>,<br>            <span class="hljs-string">&#x27;LOCATION&#x27;</span>: <span class="hljs-string">&#x27;redis://:password@127.0.0.1:6379/2&#x27;</span>,<br>            <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;CLIENT_CLASS&#x27;</span>: <span class="hljs-string">&#x27;django_redis.client.DefaultClient&#x27;</span>,<br>            &#125;<br>        &#125;,<br>    <span class="hljs-string">&#x27;default&#x27;</span>:<br>        &#123;<br>            <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.core.cache.backends.memcached.MemcachedCache&#x27;</span>,<br>            <span class="hljs-string">&#x27;LOCATION&#x27;</span>: <span class="hljs-string">&#x27;127.0.0.1:11211&#x27;</span>,<br>            <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>                <span class="hljs-string">&#x27;server_max_value_length&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">2</span>,  <span class="hljs-comment"># 支持对象的最大大小的容量</span><br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>说明：</strong>cache配置中必须配置<code>default</code>,因为</p><p><code>from django.core.cache import cache</code></p><p><code>from django.core.cache import caches</code></p><p>cache就等价于<code>caches[&#39;default&#39;]</code>，而caches就是setting.py中配置的缓存集。</p><p>当要是用某一种缓存的话，<code>cache = caches[&#39;redis&#39;]</code>就可以获取该缓存的客户端。</p><h4 id="memcache和redis的区别？"><a href="#memcache和redis的区别？" class="headerlink" title="memcache和redis的区别？"></a><strong>memcache和redis的区别？</strong></h4><p>共同点：都是基于内存的缓存系统。</p><p>不同点：</p><p>① redis支持的数据类型更加丰富，有常用的5中数据类型，set，zset，list，hash，string。而memcache只支持键值对</p><p>② 过期策略，memcache可以在set时就指定，例如set key1 0 0 8,即永不过期。而Redis可以通过例如expire 设定，例如expire name 10。</p><p>③ memcache可以缓存图片，视频等其他东西</p><p>③ 分布式，设定memcache集群，利用magent做一主多从;redis可以做一主多从，也可以一主一从。 </p><p>④ 恢复能力，主机断电后，redis可以通过AOF恢复丢失的数据，数据完整性较高，即具备持久化能力，而memcache不具备，数据丢失了就真的丢失了。</p><p>⑤ redis中的键的值最大可以达到512M，而memcache中的键的值最大可以达到1M。</p><h4 id="memcache和redis使用的不同场景"><a href="#memcache和redis使用的不同场景" class="headerlink" title="memcache和redis使用的不同场景"></a><strong>memcache和redis使用的不同场景</strong></h4><p>① 因为memcache是多核的，而redis是单核的，所以平均下来，redis在每一个核上存储的性能要比memcache更高一点，但是当数据超过100k的时候，memcache的性能将变得更高。</p><p>② memcache适合多读少些的操作，对于查询信息来说性能比较高，例如用户信息，文章信息，商品信息等而redis适合对读写效率都很高的操作，对数据的安全性也要求较高，常用于处理复杂的业务，如用户登录次数统计等。</p><p>③ 当考虑到数据需要安全存储的时候，redis将会是不错的选择。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>memcache</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>memcache</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 快速排序 + 一行实现</title>
    <link href="/2020/05/01/python%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%20+%20%E4%B8%80%E8%A1%8C%E5%AE%9E%E7%8E%B0/"/>
    <url>/2020/05/01/python%20%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%20+%20%E4%B8%80%E8%A1%8C%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Python-快速排序-一行实现"><a href="#Python-快速排序-一行实现" class="headerlink" title="Python 快速排序 + 一行实现"></a><strong>Python 快速排序 + 一行实现</strong></h3><p>快排往往是面试中出现频率最高的一个算法。当然，不仅仅考快排实现，还会问快排适用的场景呀，如何优化快排呀，它的时间复杂度和空间复杂度呀等等…</p><p>首先来看一下快排的实现原理：</p><p><strong>简而言之：</strong>首先任意选择一个基准值，可以为首位，中间，甚至是尾部，把基准值从列表中分离出去，然后遍历列表元素，依次比较，如果当前值小于基准值的话，就放到基准值的左边，如果大于等于基准值的话，就放到基准值的右边。这样一轮下来，就可以确定基准值的位置了。接着分别对左边和右边部分进行同样的递归处理。</p><p>运用的是分而治之的思想，将问题分成小问题解决。采用递归，先分解后合并。</p><p><strong>代码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quicksort</span>(<span class="hljs-params"><span class="hljs-type">List</span></span>):</span><br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-type">List</span>) &lt; <span class="hljs-number">2</span>:<br>      <span class="hljs-keyword">return</span> <span class="hljs-type">List</span><br>   mid = <span class="hljs-type">List</span>[<span class="hljs-built_in">len</span>(<span class="hljs-type">List</span>)//<span class="hljs-number">2</span>]<br>   <span class="hljs-type">List</span>.remove(mid)<br>   left,right = [],[]<br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-type">List</span>:<br>      <span class="hljs-keyword">if</span> i &lt; mid:<br>     left.append(i)<br>  <span class="hljs-keyword">else</span>:<br>     right.append(i)<br>   <span class="hljs-keyword">return</span> quicksort(left)+[mid]+quicksort(right)<br></code></pre></td></tr></table></figure><h4 id="一行实现"><a href="#一行实现" class="headerlink" title="一行实现"></a><strong>一行实现</strong></h4><p><code>test = [2,5,1,2,7,3,9,4]</code></p><p><code>quicksort = lambda test : test if len(test) &lt; 2 else quicksort([item for item in test[1:] if item &lt; test[0]]) + [test[0]] + quicksort([item for item in test[1:] if item &gt;= test[0]])</code></p><p><strong>注：使用lambda+列表推导一行实现</strong></p><p><strong>调用方式:<code>quicksort(test)</code>,lambda相当于匿名函数，test为它所接受的参数</strong></p><p>快速排序的时间复杂度：O（nlogn)</p><p>快速排序的空间复杂度：O（nlogn)，排序时需要另外申请空间，并且随着数列规模增大而增大。</p><h4 id="快速排序的优缺点："><a href="#快速排序的优缺点：" class="headerlink" title="快速排序的优缺点："></a><strong>快速排序的优缺点：</strong></h4><p>1.再面对特别大量的数据时，使用快排比较好，但随着分治次数增多，分区规模越来越小时，则应该替换为插入排序，插入排序在面对数据量小的时候有接近线性的时间复杂度。</p><p>2.快速排序时不稳定的排序，比如基准值的前后都存在与基准值相同的元素，那么相同值就会被放在一边，这样就打乱了之前的相对顺序。</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>快速排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>22.括号生成</title>
    <link href="/2020/05/01/22%20.%20%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/"/>
    <url>/2020/05/01/22%20.%20%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90/</url>
    
    <content type="html"><![CDATA[<h4 id="题目：Leetcode-22-括号生成-（一刷）-（中等）"><a href="#题目：Leetcode-22-括号生成-（一刷）-（中等）" class="headerlink" title="题目：Leetcode 22.括号生成 （一刷） （中等）"></a><strong>题目：Leetcode 22.括号生成 （一刷） （中等）</strong></h4><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a>解题思路：</h4><p>括号对称组合等问题，一般可以使用动态规划或DFS或BFS。</p><h4 id="一、动态规划"><a href="#一、动态规划" class="headerlink" title="一、动态规划"></a>一、动态规划</h4><p>因为题目给出了n，要求满足n对有效括号的组合。所以我们可以以<code>()</code>为整体进行动态添加，那么问题来了，我们该如何添加？</p><p><strong>举个简单的例子：</strong></p><p>假设 n = 2</p><p>当 i = 1（i表示存在有效括号的对数），此时只有一种可能<code>()</code>;</p><p>当 i = 2时，我们有3中添加括号对的位置，分别为左，中，右,为了避免有效括号对的组合中存在重复对。因此我们只需要<br>在左和右中任选一个位置。在我的代码中，我选择了中和右两个位置。</p><p><strong>注：</strong></p><p>三种位置分别为：<code>(右)(中)</code>, <code>((中中))</code>,<code>(中)(右)</code></p><hr><p><strong>选定了思路之后，我们接下来就可以动态规划的步骤一步步实现：</strong></p><p>① 定义状态:dp[i] 表示i个括号对组合列表</p><p>② 状态转移方程：状态转移方程: 分为两个部分,形如’(‘+dp[j]+’)’+dp[i-j-1]，这样就实现了在中间和右边添加。</p><p>注意到 j +(i-j-1) = i-1，因为最终的组合括号对是上一个i个括号对的组合在加上<code>()</code>。</p><p>③ 初始化:dp = dp = [[‘’,] for _ in range(n+1)]，dp[1] = [‘()’,]，空间复杂度可能有点高，需要优化</p><p>④ 选取结果：选取dp[-1],也就是n对组合的列表</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateParenthesis</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:</span><br>        <span class="hljs-comment"># 动态规划</span><br>        <span class="hljs-comment"># 定义状态:dp[i] 表示i个括号组合列表</span><br>        <span class="hljs-comment"># 状态转移方程: 分为两个部分,形成&#x27;(&#x27;+dp[j]+&#x27;)&#x27;+dp[i-j-1]。</span><br>        <span class="hljs-comment"># 初始化:dp = dp = [[&#x27;&#x27;,] for _ in range(n+1)]，dp[1] = [&#x27;()&#x27;,]</span><br>        <span class="hljs-comment"># 选取结果dp[-1]</span><br>        <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;&#x27;</span>]<br>        dp = [[<span class="hljs-string">&#x27;&#x27;</span>,] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n+<span class="hljs-number">1</span>)]<br>        dp[<span class="hljs-number">1</span>] = [<span class="hljs-string">&#x27;()&#x27;</span>,]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>    <span class="hljs-comment"># 从2开始</span><br>            cur = []<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i):<br>    <span class="hljs-comment"># 分出左右两个部分</span><br>                left = dp[j]<br>                right = dp[i-j-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 进行排列组合</span><br>                <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> left:<br>                    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> right:<br>                        cur.append(<span class="hljs-string">&#x27;(&#x27;</span>+m+<span class="hljs-string">&#x27;)&#x27;</span>+n)<br>            dp[i] = cur<br>        <span class="hljs-keyword">return</span> dp[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><strong>注：分析代码，我们可以看出后一次的组合的括号对数会依赖于前一次的组合括号对数。这就是动态规划的特征之一，得到了全局最优解，将大的问题拆分成小的问题进行解决</strong></p><hr><h4 id="二、深度优先遍历"><a href="#二、深度优先遍历" class="headerlink" title="二、深度优先遍历"></a>二、深度优先遍历</h4><p>深度优先遍历主要有两种方式：</p><p>① 利用系统栈的回溯递归</p><p>② 利用栈来实现DFS</p><p>截取一位大佬的DFS过程图：</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/%E7%AC%AC%2022%20%E9%A2%98%EF%BC%9A%E2%80%9C%E6%8B%AC%E5%8F%B7%E7%94%9F%E5%87%BA%E2%80%9D%E9%A2%98%E8%A7%A3%E9%85%8D%E5%9B%BE.png">{width=”90%” align=”center”}</p><p>这里主要使用了回溯方法实现DFS,首先安装括号类型分为两部分，当左和右都同时为0，说明到了最底下，此时添加到result中，<br>在程序中，我们可以看到这是一种减法操作，每次进入一层递归函数，就会减去1，直到最后为0。</p><p>但是回溯方法往往需要剪枝来减小时间复杂度，因此剪枝的条件：left &gt; right。因为是按照从左向右依次添加括号，所以左边剩余的括号总是比右边剩余的括号小，除了叶子结点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">generateParenthesis</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]:</span><br>        result = []<br>        cur_str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment"># dfs深度优先遍历</span><br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">cur_str,left,right</span>):</span><br>            <span class="hljs-keyword">if</span> left == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> right == <span class="hljs-number">0</span>:<br>                result.append(cur_str)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">if</span> left &gt; right:<br>                <span class="hljs-comment"># 剪枝</span><br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-comment">#递归左子树</span><br>            <span class="hljs-keyword">if</span> left &gt; <span class="hljs-number">0</span>:<br>                dfs(cur_str+<span class="hljs-string">&#x27;(&#x27;</span>,left-<span class="hljs-number">1</span>,right)<br>            <span class="hljs-comment">#递归右子树</span><br>            <span class="hljs-keyword">if</span> right &gt; <span class="hljs-number">0</span>:<br>                dfs(cur_str+<span class="hljs-string">&#x27;)&#x27;</span>,left,right-<span class="hljs-number">1</span>)<br>        dfs(cur_str,n,n)<br>        <span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p><strong>总结一下：</strong></p><p>本题中dfs比dp的效率要高，原因在于回溯加了剪枝。在面对dfs或者bfs时候，最好能够数形结合。动态规划在于将问题分解为小问题进行求解。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
      <tag>DFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django的validator验证器</title>
    <link href="/2020/04/29/django%E7%9A%84validator%E9%AA%8C%E8%AF%81%E5%99%A8/"/>
    <url>/2020/04/29/django%E7%9A%84validator%E9%AA%8C%E8%AF%81%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="django的-validator验证器-和-model的full-clean-回调的三种方法"><a href="#django的-validator验证器-和-model的full-clean-回调的三种方法" class="headerlink" title="django的 validator验证器 和 model的full_clean()回调的三种方法"></a><strong>django的 validator验证器 和 model的full_clean()回调的三种方法</strong></h3><h4 id="一、验证模型model的三种方法"><a href="#一、验证模型model的三种方法" class="headerlink" title="一、验证模型model的三种方法"></a><strong>一、验证模型model的三种方法</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">Model.clean_fields() <span class="hljs-comment"># 验证模型的字段</span><br>Model.clean()  <span class="hljs-comment"># 验证整个模型</span><br>Model.validate_unique()   <span class="hljs-comment"># 验证字段的唯一</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>① 这三种方法会在<code>full_clean</code>中依次回调，如果validate_unique = True，则会调用第三个方法。</p><p>② <code>full_clean</code>方法不会再<code>model.save()</code>中回调，因此我们在调用基类的<code>save()</code>方法时，需要先手动回调<code>full_clean()</code>方法。</p><h4 id="full-clean-的源码"><a href="#full-clean-的源码" class="headerlink" title="full_clean()的源码"></a><strong>full_clean()的源码</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">full_clean</span>(<span class="hljs-params">self, exclude=<span class="hljs-literal">None</span>, validate_unique=<span class="hljs-literal">True</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Call clean_fields(), clean(), and validate_unique() on the model.</span><br><span class="hljs-string">    Raise a ValidationError for any errors that occur.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    errors = &#123;&#125;<br>    <span class="hljs-keyword">if</span> exclude <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        exclude = []<br>    <span class="hljs-keyword">else</span>:<br>        exclude = <span class="hljs-built_in">list</span>(exclude)<br><br>    <span class="hljs-keyword">try</span>:<br>        self.clean_fields(exclude=exclude)<br>    <span class="hljs-keyword">except</span> ValidationError <span class="hljs-keyword">as</span> e:<br>        errors = e.update_error_dict(errors)<br><br>    <span class="hljs-comment"># Form.clean() is run even if other validation fails, so do the</span><br>    <span class="hljs-comment"># same with Model.clean() for consistency.</span><br>    <span class="hljs-keyword">try</span>:<br>        self.clean()<br>    <span class="hljs-keyword">except</span> ValidationError <span class="hljs-keyword">as</span> e:<br>        errors = e.update_error_dict(errors)<br><br>    <span class="hljs-comment"># Run unique checks, but only for fields that passed validation.</span><br>    <span class="hljs-keyword">if</span> validate_unique:<br>        <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> errors:<br>            <span class="hljs-keyword">if</span> name != NON_FIELD_ERRORS <span class="hljs-keyword">and</span> name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> exclude:<br>                exclude.append(name)<br>        <span class="hljs-keyword">try</span>:<br>            self.validate_unique(exclude=exclude)<br>        <span class="hljs-keyword">except</span> ValidationError <span class="hljs-keyword">as</span> e:<br>            errors = e.update_error_dict(errors)<br><br>    <span class="hljs-keyword">if</span> errors:<br>        <span class="hljs-keyword">raise</span> ValidationError(errors)<br></code></pre></td></tr></table></figure><p><strong>说明：</strong>观察源码可以发现，会依次调用上述的三个验证方法，如果触发了异常，首先会挨个捕捉异常，将errors写进<code>NON_FIELD_ERRORS</code>字典中，然后最后会统一抛出异常。</p><h4 id="二、自定义验证器validator"><a href="#二、自定义验证器validator" class="headerlink" title="二、自定义验证器validator"></a><strong>二、自定义验证器validator</strong></h4><p>自定义的验证器validator不会再model中进行回调，会在modelForm中进行回调，所以一般搭配modelForm使用。</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PhoneValidator</span>(<span class="hljs-params">validators.RegexValidator</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;正则表达式验证&quot;&quot;&quot;</span><br>    regex = <span class="hljs-string">&#x27;^13[0-9]&#123;1&#125;[0-9]&#123;8&#125;|^15[0-9]&#123;1&#125;[0-9]&#123;8&#125;&#x27;</span>  <span class="hljs-comment"># 正则表达式</span><br>    message = _(<span class="hljs-string">&#x27;请输入正确的手机号格式&#x27;</span>) <span class="hljs-comment"># 错误提示消息</span><br>    flags = <span class="hljs-number">0</span>  <span class="hljs-comment"># 修饰符</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, regex=regex, message=message, code=<span class="hljs-literal">None</span>, inverse_match=<span class="hljs-literal">None</span>, flags=flags</span>):</span><br>        <span class="hljs-built_in">super</span>().__init__(regex,message,flags)<br></code></pre></td></tr></table></figure><p>我们可以子类化<code>RegexValidator</code>类来实现自定义验证，<code>RegexValidator</code>类主要用于复杂的正则匹配。</p><p>当然了，django还提供了一些验证器。</p><p>比如：</p><h4 id="MinValueValidator"><a href="#MinValueValidator" class="headerlink" title="MinValueValidator"></a><strong><code>MinValueValidator</code></strong></h4><p>class MinValueValidator(_minvalue, message=None)[source]</p><p>如果value小于min_value，抛出带有’min_value’代码的ValidationError异常。</p><hr><h4 id="MaxValueValidator"><a href="#MaxValueValidator" class="headerlink" title="MaxValueValidator"></a><strong><code>MaxValueValidator</code></strong></h4><p>class MaxValueValidator(_maxvalue, message=None)[source]</p><p>如果value 大于 max_value，抛出带有’max_value’代码的ValidationError 异常。</p><hr><h4 id="MinLengthValidator"><a href="#MinLengthValidator" class="headerlink" title="MinLengthValidator"></a><strong><code>MinLengthValidator</code></strong></h4><p>class MinLengthValidator(_minlength, message=None)[source]</p><p>如果value的长度小于min_length，抛出带有’min_length’代码的ValidationError异常。</p><hr><h4 id="MaxLengthValidator"><a href="#MaxLengthValidator" class="headerlink" title="MaxLengthValidator"></a><strong><code>MaxLengthValidator</code></strong></h4><p>class MaxLengthValidator(_maxlength, message=None)[source]</p><p>如果value的长度大于max_length，抛出带有’max_length’代码的ValidationError 异常。</p><p>等等，具体的可以去看源码<code>from django.core import validators</code></p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>redis5大基本类型</title>
    <link href="/2020/04/28/redis5%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    <url>/2020/04/28/redis5%E5%A4%A7%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="Redis介绍："><a href="#Redis介绍：" class="headerlink" title="Redis介绍："></a><strong>Redis介绍：</strong></h3><p>redis worker是单线程，采用epoll多路复用技术，而不是轮询，通过事件驱动，通过内核告诉epoll，然后epoll告诉服务器，需要处理哪条路的数据，然后服务器会去访问它，取数据，减少服务器压力，最后是由服务器去访问。</p><p>select，poll，epoll的共性是告诉服务器有没有数据，和服务器去读取数据分开。</p><p>redis利用io多线程实现，worker单线程协调工作。</p><h3 id="redis主要用途："><a href="#redis主要用途：" class="headerlink" title="redis主要用途："></a><strong>redis主要用途：</strong></h3><p>①缓存</p><p>②统计分析，bitmap，布隆过滤器。</p><p><strong>注：一个client所建立的connections发送数据的顺序是有序的!</strong>,因此io读写后，放到worker工作线程上执行该client的什么增删改查的顺序也会是有序的。</p><h3 id="一、String基本类型"><a href="#一、String基本类型" class="headerlink" title="一、String基本类型"></a><strong>一、String基本类型</strong></h3><h5 id="1-字符串"><a href="#1-字符串" class="headerlink" title="1.字符串"></a><strong>1.字符串</strong></h5><p>采用redis-cli –row，对十六进制的汉子格式化，默认16进制存储。</p><p>gbk：1个汉子两字节。</p><p>uft-8:1个汉子三字节。</p><p>主要方法有：<code>strlen</code>,<code>append</code></p><h5 id="2-数值"><a href="#2-数值" class="headerlink" title="2.数值"></a><strong>2.数值</strong></h5><p><strong>单线程原子性</strong></p><p>主要方法：<code>incr</code>,<code>decr</code>（加，减）</p><p>主要适用场景：秒杀限流</p><p>3.二进制（位图bitmap）</p><p>主要方法：<code>bitcount</code>,<code>setbit</code>。</p><p>主要是用场景：</p><p>①统计一个用户一段时间内容内登录的天数</p><p><strong>思想：</strong>k看做一个用户，每一天作为offect，value设置为1，最后bitcount求出[0,-1]一个用户固定时间登录的天数。</p><p>②统计某一天登录的用户总数，或一段时间登录的用户总数</p><p><strong>思想：</strong>k看做一个日期，每一个用户作为offect，value设置为1，最后或运算<code>bittop or res k1 k2 </code> ，bitcount求出[0,-1]。</p><p><code>bitcount</code>计算某个字节区间内含1的个数</p><p>举个例子：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">setbit k <span class="hljs-number">1</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>①setbit：设置bit指令<br>②k：key，键<br>③1：offect，偏移量<br>③1：value，值</p><p><code>get k1</code></p><p>我们来查看一下结果：<code>@</code></p><p><code>strlen k1</code></p><p><code>1</code></p><p><strong>说明：</strong>因为设置的是字节为单位。所以有8个bit，从左往右，在offect为1的位置，设置值为1，因此成为<code>0100000</code>,而在ASCII中<code>0100000</code>正好对应的是<code>@</code>。</p><p><strong>注：</strong><br>①如果偏移量大于1个节点大小，则会扩容，新增一个字节。<br>②setbit不会覆盖，会在原始字节上继续set。</p><p>通过help指令,可以去学习有哪些具体方法</p><p>注：redis存在二进制安全，所以存入redis的需要序列化!</p><h3 id="二、list类型"><a href="#二、list类型" class="headerlink" title="二、list类型"></a><strong>二、list类型</strong></h3><p>同样help查看指令集</p><p>主要用途：</p><p>①同向指令：栈，后进先出</p><p>②异向指令：队列，先进先出</p><p>③index</p><h3 id="三、hash类型"><a href="#三、hash类型" class="headerlink" title="三、hash类型"></a><strong>三、hash类型</strong></h3><p>同样help查看指令集</p><p>主要适用场景：</p><p>对散列表中的键值对进行操作</p><p>①详情页</p><p>②聚合</p><h3 id="四、set类型"><a href="#四、set类型" class="headerlink" title="四、set类型"></a><strong>四、set类型</strong></h3><p>① 可用于随机事件</p><p>② 验证码</p><p>③ 推荐系统，共同的好友推荐，例如qq的好友推荐</p><h3 id="五、zset类型"><a href="#五、zset类型" class="headerlink" title="五、zset类型"></a><strong>五、zset类型</strong></h3><p>底层类型依靠skiplist</p><p>① 动态翻页（动态维护顺序）</p><p>② 排行榜</p><p><strong>注：</strong></p><p>redis还可以做限流和封杀恶意刷次数ip</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux上安装python的虚拟环境</title>
    <link href="/2020/04/27/Linux%E4%B8%8A%E5%AE%89%E8%A3%85python%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <url>/2020/04/27/Linux%E4%B8%8A%E5%AE%89%E8%A3%85python%E7%9A%84%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h4 id="Linux上安装python的虚拟环境"><a href="#Linux上安装python的虚拟环境" class="headerlink" title="Linux上安装python的虚拟环境"></a><strong>Linux上安装python的虚拟环境</strong></h4><p>我的之前的一篇笔记已经介绍了window上安装python的虚拟环境，这篇来介绍下Linux上如何安装python的虚拟环境。</p><h4 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a><strong>安装步骤</strong></h4><p>① 更新下pip</p><p><code>pip install upgrade pip</code></p><p>② 安装virtualenv</p><p><code>pip install virtualenv</code></p><p>③ 创建虚拟环境</p><p><code>virtualenv myvenv</code></p><p>注：默认情况下, 虚拟环境中不包括系统的site-packages，如果要使用系统的包</p><p><code>virtualenv --system-site-packages myvenv</code></p><p>④ 激活进入虚拟环境</p><p>我的activate在虚拟环境下的bin目录下</p><p>因此执行<code>source MyBlog/bin/activate</code>就可以激活虚拟环境</p><p>⑤ 退出虚拟环境</p><p><code>deactivate</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Linux</tag>
      
      <tag>虚拟环境</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django搭建适用于自己项目的logging系统</title>
    <link href="/2020/04/23/Django%E6%90%AD%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E%E8%87%AA%E5%B7%B1%E9%A1%B9%E7%9B%AE%E7%9A%84logging%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/04/23/Django%E6%90%AD%E5%BB%BA%E9%80%82%E7%94%A8%E4%BA%8E%E8%87%AA%E5%B7%B1%E9%A1%B9%E7%9B%AE%E7%9A%84logging%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="django的日志系统是基于python的Logging模块来搭建的"><a href="#django的日志系统是基于python的Logging模块来搭建的" class="headerlink" title="django的日志系统是基于python的Logging模块来搭建的"></a><strong>django的日志系统是基于python的Logging模块来搭建的</strong></h4><h4 id="日志系统分为4个部分"><a href="#日志系统分为4个部分" class="headerlink" title="日志系统分为4个部分"></a><strong>日志系统分为4个部分</strong></h4><p>① loggers：用户使用的一个日志接口，将日志传递给handlers进行处理</p><p>② handlers：用于处理loggers的程序，控制日志输出到哪里，可以是文件，也可以是console。</p><p>③ Filters：过滤日志等级的程序，控制一定等级的日志进入handlers进行处理</p><p>④ Formatters ：用于格式化日志</p><p><strong>他们的级别排序：CRITICAL &gt; ERROR &gt; WARNING &gt; INFO &gt; DEBUG</strong></p><hr><p><strong>下面来分别学习下这四个部分：</strong></p><h4 id="一、loggers："><a href="#一、loggers：" class="headerlink" title="一、loggers："></a><strong>一、loggers：</strong></h4><p>主要有5中基本的日志等级，当然也可以自己定义一个日志等级</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">DEBUG: Low level system information <span class="hljs-keyword">for</span> debugging purposes<br><br>INFO: General system information<br><br>WARNING: Information describing a minor problem that has occurred.<br><br>ERROR: Information describing a major problem that has occurred.<br><br>CRITICAL: Information describing a critical problem that has occurred.<br></code></pre></td></tr></table></figure><h4 id="二、Handlers"><a href="#二、Handlers" class="headerlink" title="二、Handlers"></a><strong>二、Handlers</strong></h4><p>它是一个处理日志的引擎，描述了日志的行为，将日志可以输出到文件或者控制台上。</p><p><strong>注:如果日志的等级不符合（低于）处理日志程序的等级，那么处理程序将会忽略该日志。</strong></p><h4 id="三、Filters"><a href="#三、Filters" class="headerlink" title="三、Filters"></a><strong>三、Filters</strong></h4><p>它主要用来提供额外的控制条件限制，比如控制该日志只能来源于某一个源的错误消息，将该错误消息发送给Handlers，<br>而其他的消息将被过滤掉。同时，它也可以对满足一定条件的错误日志，过滤降级为警告日志。</p><h4 id="四、Formatters"><a href="#四、Formatters" class="headerlink" title="四、Formatters"></a><strong>四、Formatters</strong></h4><p>因为最终日志是以文本的形式展现给开发者，所以必须对日志进行格式化，精确的记录日志行为。</p><p>具体的格式化属性参考官方文档：</p><p><a href="https://docs.python.org/3/library/logging.html">https://docs.python.org/3/library/logging.html</a></p><hr><p><strong>介绍完日志的四个部分，接下来就是如何使用日志</strong></p><p>比较简单的一种使用行为：</p><p>例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 错误日志文件夹</span><br>BASE_DIR_LOG = os.path.join(BASE_DIR, <span class="hljs-string">&#x27;Logs&#x27;</span>)<br><br>LOGGING = &#123;<br>    <span class="hljs-string">&#x27;version&#x27;</span>: <span class="hljs-number">1</span>,  <span class="hljs-comment"># 指明dictConfig的版本，目前就只有一个版本</span><br>    <span class="hljs-string">&#x27;disable_existing_loggers&#x27;</span>: <span class="hljs-literal">True</span>,  <span class="hljs-comment"># 禁用所有的已经存在的日志配置</span><br>    <span class="hljs-string">&#x27;formatters&#x27;</span>: &#123;  <span class="hljs-comment"># 格式器</span><br>        <span class="hljs-string">&#x27;verbose&#x27;</span>: &#123;  <span class="hljs-comment"># 详细的，包括日志等级名，时间，模块，进程，线程和消息</span><br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;%(levelname)s - %(asctime)s - %(module)s - %(funcName)s - %(process)d - %(thread)d - %(message)s&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;simple&#x27;</span>: &#123;  <span class="hljs-comment"># 简单的格式化</span><br>            <span class="hljs-string">&#x27;format&#x27;</span>: <span class="hljs-string">&#x27;%(levelname)s - %(funcName)s - %(message)s&#x27;</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-string">&#x27;filters&#x27;</span>: &#123;  <span class="hljs-comment"># 过滤器</span><br>        <span class="hljs-string">&#x27;require_debug_true&#x27;</span>: &#123;  <span class="hljs-comment"># 当debug为True的时候，记录</span><br>            <span class="hljs-string">&#x27;()&#x27;</span>: <span class="hljs-string">&#x27;django.utils.log.RequireDebugTrue&#x27;</span>,<br>        &#125;,<br>    &#125;,<br>    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;  <span class="hljs-comment"># 处理器，在这里定义了三个处理器</span><br>        <span class="hljs-string">&#x27;console&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.StreamHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;simple&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;consumer_handlers&#x27;</span>: &#123;  <span class="hljs-comment"># 将error等级的日志写到error文件中</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;verbose&#x27;</span>,  <span class="hljs-comment"># 详细记录</span><br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR_LOG, <span class="hljs-string">&#x27;consumer_error.log&#x27;</span>),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,  <span class="hljs-comment"># 日志大小50M</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">3</span>,  <span class="hljs-comment"># 备份数量</span><br>        &#125;,<br>        <span class="hljs-string">&#x27;shopper_handlers&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-comment"># &#x27;filters&#x27;: [&#x27;require_debug_true&#x27;],</span><br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;verbose&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR_LOG, <span class="hljs-string">&#x27;shopper_error.log&#x27;</span>),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,  <span class="hljs-comment"># 日志大小50M,</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">3</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;order_handlers&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-comment"># &#x27;filters&#x27;: [&#x27;require_debug_true&#x27;],</span><br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;verbose&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR_LOG, <span class="hljs-string">&#x27;order_error.log&#x27;</span>),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,  <span class="hljs-comment"># 日志大小50M,</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">3</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;trolley_handlers&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-comment"># &#x27;filters&#x27;: [&#x27;require_debug_true&#x27;],</span><br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;verbose&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR_LOG, <span class="hljs-string">&#x27;trolley_error.log&#x27;</span>),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,  <span class="hljs-comment"># 日志大小50M,</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">3</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;commodity_handlers&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-comment"># &#x27;filters&#x27;: [&#x27;require_debug_true&#x27;],</span><br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;verbose&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: os.path.join(BASE_DIR_LOG, <span class="hljs-string">&#x27;commodity_error.log&#x27;</span>),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">50</span>,  <span class="hljs-comment"># 日志大小50M,</span><br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">3</span>,<br>        &#125;,<br><br>    &#125;,<br>    <span class="hljs-string">&#x27;loggers&#x27;</span>: &#123;  <span class="hljs-comment"># 定义了二个记录器</span><br>        <span class="hljs-comment"># 默认的logger配置，捕捉一切debug即以上的信息</span><br>        <span class="hljs-string">&#x27;django&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;console&#x27;</span>,],<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;DEBUG&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;consumer_&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;consumer_handlers&#x27;</span>,],<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,  <span class="hljs-comment"># 是否向更高级别的logger传递</span><br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;shopper_&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;shopper_handlers&#x27;</span>,],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;order_&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;order_handlers&#x27;</span>,],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;trolley_&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;trolley_handlers&#x27;</span>,],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>        <span class="hljs-string">&#x27;commodity_&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;handlers&#x27;</span>: [<span class="hljs-string">&#x27;commodity_handlers&#x27;</span>,],<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;ERROR&#x27;</span>,<br>            <span class="hljs-string">&#x27;propagate&#x27;</span>: <span class="hljs-literal">False</span>,<br>        &#125;,<br>    &#125;,<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="测试日志"><a href="#测试日志" class="headerlink" title="测试日志"></a><strong>测试日志</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span>(<span class="hljs-params">APIView</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span>(<span class="hljs-params">self,request</span>):</span><br>        name = request.data.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&#x27;syz&#x27;</span>:<br>            logger.error(<span class="hljs-string">&#x27;eee&#x27;</span>)<br>            <span class="hljs-keyword">return</span> JsonResponse(response_code.server_error)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span>(<span class="hljs-params">self,request</span>):</span><br>        common_logger.info(<span class="hljs-string">&#x27;rr&#x27;</span>)<br>        <span class="hljs-keyword">return</span> JsonResponse(response_code.server_error)<br></code></pre></td></tr></table></figure><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a><strong>结果：</strong></h4><p><strong>日志文件里的信息</strong></p><p>ERROR:</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">ERROR </span>- 2020<span class="hljs-string">-04</span><span class="hljs-string">-08</span> 09:33:53,288 - shppoer_register_api - post - 13652 - 16904 - eee<br><span class="hljs-keyword">ERROR </span>- 2020<span class="hljs-string">-04</span><span class="hljs-string">-08</span> 09:35:12,561 - shppoer_register_api - post - 10880 - 19536 - eee<br></code></pre></td></tr></table></figure><p><strong>控制台的信息：</strong></p><p>DEBUG即以上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">INFO - log_message - <span class="hljs-string">&quot;GET /shopper/test HTTP/1.1&quot;</span> <span class="hljs-number">301</span> <span class="hljs-number">0</span><br>INFO - log_message - <span class="hljs-string">&quot;GET /shopper/test/ HTTP/1.1&quot;</span> <span class="hljs-number">200</span> <span class="hljs-number">67</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>日志</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0-1背包问题的解法（动态规划、回溯算法）</title>
    <link href="/2020/04/22/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/"/>
    <url>/2020/04/22/0-1%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E6%B3%95%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>0-1 背包问题：给定 n 种物品和一个容量为 C 的背包，物品 i 的重量是 wi，其价值为 vi</p><p>问：应该如何选择装入背包的物品，使得装入背包中的物品的总价值最大？</p><p><strong>假设：</strong></p><p>n = 5</p><p>w = [2,5,1,3,6]</p><p>v = [2,4,5,2,3]</p><p>c = 9</p><p>按照动态规划的五大步骤进行分析：</p><p>① 状态定义：要计算背包物品的总价值，我们可以设定一个空间来存储该总价值</p><p>② 状态转移方程：建模，创建一个二维数组<code>dp[i][j]</code>,来表示第i个物品，背包容量为j的时候时候的最大价值。</p><p>③ 初始化值：默认我们将dp整个数组初始化为0，同时给w和v添加边界条件0，使得<code>w = [0,2,5,1,3,6]</code>,<br><code>v = [0,2,4,5,2,3]</code>，那么为什么要这样做呢？</p><p>我们尝试分情况讨论一下：</p><p>（1）当 <code>j&lt;w[i]</code>,此时表示第i个物品的重量大于总背包容量，那么此时是无法装进该物品的。因此方程：<code>dp[i][j]=dp[i-1][j]</code></p><p>（2）当<code>j&gt;=w[i]</code>,此时表示第i个物品的重量小于等于总背包量，这时候就需要根据最优性质原理，方程：<code>dp[i][j]=max(dp[i-1][j],dp[i-1][j-w[i]]+v[i])</code><br>因为当前物品的总价值，可能决定于前一个物品的总价值大，也可能决定于加上这个物品后得到的总价值。</p><p>（3）我们要从第i=1开始，所以需要添加一个边界0，防止越出异常。</p><p>④ 选取结果，选取<code>dp[-1][-1]</code>。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 回溯算法： 算法</span><br><br><span class="hljs-comment"># 使用备忘录来避免重复计算</span><br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><br>item = [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bag_0_1</span>(<span class="hljs-params">something_i: <span class="hljs-built_in">int</span>, total_in: <span class="hljs-built_in">int</span>, total_bag: <span class="hljs-built_in">int</span>, something_total: <span class="hljs-built_in">int</span></span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    递归树模型，第i个物品不放入背包----左子树，  第i个物品放入背包----右子树</span><br><span class="hljs-string">    递归找到最后一个物品，从最后一个物品开始</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    :param total_in: 表示当前已经装进去物品的重量和</span><br><span class="hljs-string">    :param something_i: 表示装入到第几个物品</span><br><span class="hljs-string">    :param something_total: 表示总共有几个物品</span><br><span class="hljs-string">    :param total_bag: 表示背包总重量</span><br><span class="hljs-string"></span><br><span class="hljs-string">    剪枝</span><br><span class="hljs-string">    空间复杂度:O(n*m)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    max_num = <span class="hljs-number">0</span><br>    memorial: t.<span class="hljs-type">List</span> = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(total_bag)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(something_total)]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dfs</span>(<span class="hljs-params">i: <span class="hljs-built_in">int</span>, total_inner: <span class="hljs-built_in">int</span></span>):</span><br>        <span class="hljs-keyword">nonlocal</span> max_num<br>        <span class="hljs-keyword">if</span> total_inner == total_bag <span class="hljs-keyword">or</span> i == something_total:<br>            <span class="hljs-keyword">if</span> total_inner &gt; max_num:<br>                max_num = total_inner<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-comment"># 模拟右子树</span><br>        <span class="hljs-keyword">if</span> memorial[i][total_inner]:<br>            <span class="hljs-keyword">return</span><br>        memorial[i][total_inner] = <span class="hljs-number">1</span><br>        dfs(i + <span class="hljs-number">1</span>, total_inner)<br>        <span class="hljs-keyword">if</span> total_inner + item[i] &lt;= total_bag:<br>            <span class="hljs-comment"># 模拟左子树</span><br>            dfs(i + <span class="hljs-number">1</span>, total_inner + item[i])<br><br>    dfs(something_i, total_in)<br><br>    <span class="hljs-keyword">return</span> max_num<br><br><br>res = bag_0_1(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(res)<br><br></code></pre></td></tr></table></figure><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment"># 动态规划</span><br><span class="hljs-keyword">import</span> typing <span class="hljs-keyword">as</span> t<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">advance_bag_0_1_dp</span>(<span class="hljs-params">items: t.<span class="hljs-type">List</span>, items_value: t.<span class="hljs-type">List</span>, number: <span class="hljs-built_in">int</span>, total_bag: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    背包问题，求物品满足最大容量下时，物品价值也最大</span><br><span class="hljs-string">    动态规划求解</span><br><span class="hljs-string">        1.划分阶段：将问题划分为多个阶段</span><br><span class="hljs-string">        2.定义状态变量，起始值和返回值：在发展到每个阶段时的情况用状态变量表示出来</span><br><span class="hljs-string">        *3.状态转移方程：状态变化的参照，状态转移要根据前一阶段的状态推导出本阶段的状态。</span><br><span class="hljs-string">        4.寻找边界跳出条件：状态结束的条件</span><br><span class="hljs-string">        5.寻找是否能优化压缩空间</span><br><span class="hljs-string">        6.返回最终最优解</span><br><span class="hljs-string">    :param items: 物品重量</span><br><span class="hljs-string">    :param items_value: 物品价值集</span><br><span class="hljs-string">    :param number: 物品个数</span><br><span class="hljs-string">    :param total_bag: 背包总重量</span><br><span class="hljs-string">    :return: 可容纳最大容量</span><br><span class="hljs-string"></span><br><span class="hljs-string">    时间复杂度为0(m*n), 空间复杂度为O(m*n)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    m为商品数量, n为包的大小</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> items <span class="hljs-keyword">or</span> number == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">min</span>(items) &gt; total_bag:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br><br>    <span class="hljs-comment"># 定义状态变量</span><br>    dp = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(total_bag)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number)]<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>], dp[<span class="hljs-number">0</span>][items[<span class="hljs-number">0</span>]] = <span class="hljs-number">0</span>, items_value[<span class="hljs-number">0</span>]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, number):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(total_bag):<br>            <span class="hljs-keyword">if</span> j &lt; items[i]:<br>                <span class="hljs-comment"># 如果位置小于物品重量，不将物品i加入背包，不计算其最大价值</span><br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j]<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 取不加和加入背包后中的最大值</span><br>                dp[i][j] = <span class="hljs-built_in">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i - <span class="hljs-number">1</span>][j - items[i]] + items_value[i])<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(dp[number - <span class="hljs-number">1</span>])<br><br><br>res = advance_bag_0_1_dp([<span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>], [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>], <span class="hljs-number">5</span>, <span class="hljs-number">9</span>)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><p><strong>注：j从1开始，从0开始没有意义，因为初始化dp全为0，减小了m次循环的时间复杂度。</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django-redis使用原生客户端</title>
    <link href="/2020/04/21/django-redis%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <url>/2020/04/21/django-redis%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="django-redis使用redis的原生接口"><a href="#django-redis使用redis的原生接口" class="headerlink" title="django-redis使用redis的原生接口"></a><strong>django-redis使用redis的原生接口</strong></h3><p>django-redis所暴露的接口相比于原生redis客户端的api肯定不是完全的，如果我们需要在项目中使用redis原生客户端的话，django-redis提供了一种方式来返回一个Redis对象，以此来调用api。这样有效的避免了使用原生接口再次配置一次</p><p>使用方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 我们首先需要导入一个创建连接的类</span><br><span class="hljs-keyword">from</span> django_redis <span class="hljs-keyword">import</span> get_redis_connection<br><br>con = get_redis_connection(<span class="hljs-string">&quot;default&quot;</span>)<br><br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>con返回的对象：<code>Out[14]: Redis&lt;ConnectionPool&lt;Connection&lt;host=127.0.0.1,port=6379,db=2&gt;&gt;&gt;</code></p><p>可以看出con还是使用了<code>settings.py</code>中cache的配置，这样一来就可以通过con调用redis的所有api了。</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django中的Queryset的两大特性---惰性 and  缓存</title>
    <link href="/2020/04/21/django%E4%B8%AD%E7%9A%84Queryset%E7%9A%84%E4%B8%A4%E5%A4%A7%E7%89%B9%E6%80%A7---%E6%83%B0%E6%80%A7%20and%20%20%E7%BC%93%E5%AD%98/"/>
    <url>/2020/04/21/django%E4%B8%AD%E7%9A%84Queryset%E7%9A%84%E4%B8%A4%E5%A4%A7%E7%89%B9%E6%80%A7---%E6%83%B0%E6%80%A7%20and%20%20%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[<h4 id="①惰性"><a href="#①惰性" class="headerlink" title="①惰性"></a><strong>①惰性</strong></h4><h4 id="②缓存"><a href="#②缓存" class="headerlink" title="②缓存"></a><strong>②缓存</strong></h4><p>Queryset是可迭代的查询集，而不是简单的列表，查询集中包含了多个查询结果对象。解析来来一下这两大特性。</p><h3 id="一、惰性"><a href="#一、惰性" class="headerlink" title="一、惰性"></a>一、惰性</h3><p><code>results = Test.objects.all()</code>  # 此时并不会进行实际的数据库查询</p><p><code>list_results = [for result in results] </code> # 只有在实际使用迭代的时候才会进行数据库的查询</p><h3 id="二、缓存"><a href="#二、缓存" class="headerlink" title="二、缓存"></a>二、缓存</h3><p>根据上面实际查询数据库后返回的<code>list_results</code>列表对象。Django会将结果集缓存在<code>list_results</code>之中。</p><p>下次如果仍然查询相关数据时，就会访问<code>list_results</code>,而不会进行数据库的交互。</p><p><strong>举个Rest-framework框架中的一个<code>get_queryset</code>的例子：</strong></p><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span>(<span class="hljs-params">self</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Get the list of items for this view.</span><br><span class="hljs-string">    This must be an iterable, and may be a queryset.</span><br><span class="hljs-string">    Defaults to using `self.queryset`.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    This method should always be used rather than accessing `self.queryset`</span><br><span class="hljs-string">    directly, as `self.queryset` gets evaluated only once, and those results</span><br><span class="hljs-string">    are cached for all subsequent requests.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    You may want to override this if you need to provide different</span><br><span class="hljs-string">    querysets depending on the incoming request.</span><br><span class="hljs-string"></span><br><span class="hljs-string">    (Eg. return a list of items that is specific to the user)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">assert</span> self.queryset <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>, (<br>        <span class="hljs-string">&quot;&#x27;%s&#x27; should either include a `queryset` attribute, &quot;</span><br>        <span class="hljs-string">&quot;or override the `get_queryset()` method.&quot;</span><br>        % self.__class__.__name__<br>    )<br>    <span class="hljs-comment"># 只需要调用一次self.queryset</span><br>    queryset = self.queryset<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(queryset, QuerySet):<br>        <span class="hljs-comment"># Ensure queryset is re-evaluated on each request.</span><br>        queryset = queryset.<span class="hljs-built_in">all</span>()<br>    <span class="hljs-keyword">return</span> queryset<br></code></pre></td></tr></table></figure><p>说明：源码中的提示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">This method should always be used rather than accessing `self.queryset`<br>directly, <span class="hljs-keyword">as</span> `self.queryset` gets evaluated only once, <span class="hljs-keyword">and</span> those results<br>are cached <span class="hljs-keyword">for</span> <span class="hljs-built_in">all</span> subsequent requests.<br></code></pre></td></tr></table></figure><p>上述这句话告诉我们get查询集的时候尽量调用<code>get_queryset</code>方法，而不是<code>self.queryset</code>属性，这样可以充分利用django提供的Queryset的缓存特性，防止多次交互数据库，增大数据库压力，封装方法只需要访问一次数据库，以后的访问直接从缓存中读取。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>缓存</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu上安装fastdfs分布式文件系统</title>
    <link href="/2020/04/19/Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85fastdfs%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <url>/2020/04/19/Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85fastdfs%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="Unbutu-16-04上安装fastdfs分布式文件系统"><a href="#Unbutu-16-04上安装fastdfs分布式文件系统" class="headerlink" title="Unbutu 16.04上安装fastdfs分布式文件系统"></a><strong>Unbutu 16.04上安装fastdfs分布式文件系统</strong></h3><p>2020年4月19号日晚，由于自己太蠢，手抖，快要写完了，不小心关闭了，网站，没有保存。写了将近两个多小时的详细配置教程，就这样没了，不想再重写了。</p><p>等我有时间了再补上吧</p><p><strong>这里附上安装过程中参考的挺不错的博主的文章：</strong></p><p><a href="https://www.jianshu.com/p/300faeb62a9e">https://www.jianshu.com/p/300faeb62a9e</a></p><p><a href="https://www.cnblogs.com/handsomeye/p/9451568.html">https://www.cnblogs.com/handsomeye/p/9451568.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>fastdfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5. 最大回文子串</title>
    <link href="/2020/04/17/5.%20%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
    <url>/2020/04/17/5.%20%E6%9C%80%E5%A4%A7%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h4 id="题目：-Leetcode-5-最大回文子串-（中等）-（二刷）"><a href="#题目：-Leetcode-5-最大回文子串-（中等）-（二刷）" class="headerlink" title="题目： Leetcode 5.最大回文子串   （中等） （二刷）"></a><strong>题目： Leetcode 5.最大回文子串   （中等） （二刷）</strong></h4><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h4><p>该题目使用暴力法肯定是不行的哦<br>（Leetcode给出的测试案例，我是用动态规划都达到了4000+ms，更别提暴力法了，时间复杂度都爆掉了）</p><p><strong>接下来我们来看一下动态规划如何解题</strong></p><hr><h4 id="一、何为动态规划？（DP）"><a href="#一、何为动态规划？（DP）" class="headerlink" title="一、何为动态规划？（DP）"></a>一、何为动态规划？（DP）</h4><p>动态规划：简而言之，就是当前的值需要依赖前一个值计算求得，进而求得<strong>全局最优解</strong>。</p><p><strong>注：全局最优，局部可不一定最优哦，要和贪心算法有所区别开来</strong></p><hr><h4 id="二、如何使用动态规划？"><a href="#二、如何使用动态规划？" class="headerlink" title="二、如何使用动态规划？"></a>二、如何使用动态规划？</h4><p><strong>我总结了5大步骤：</strong></p><p>① 定义状态：首先，要明白我要求什么，需要哪些参数值。即定义元素的基本含义，不如我要求最大个数，最多路径走法等等</p><p>② 建立状态转移方程： 这一步，要明确两个状态之间的关系，一般数学建模转化成二维数组（有些题目可以优化空间复杂度，一维数组就够了），</p><p>写法一般为<code>dp[i][j] = ?</code> ,这个问号就是需要跟前面求得的值进行联系。</p><p>③ 设定初始值（考虑边界情况）：这一步就是将特殊情况和一般情况分开来。</p><p>④ 选出结果：根据我要求的东西，计算得出最后的结果。</p><p>⑤ 状态压缩：这一步一般是优化空间复杂度的，比如将O(n²) =&gt; O(n)或者O(n) =&gt; O(1)。</p><br><br>---#### **三、结合本题进行分析**<p>① <strong>定义状态 ：</strong> 根据题目要求，要求最长的回文子串，所以我需要设定一个长度值<code>max_count</code>,<br>其次，为了切出该子串，我还需要知道该子串的起始索引，因此还需设定一个起始位置索引值<code>start_index</code>。<br>这样子串长度就等于 <code>s[start_index:start_index+max_count]</code></p><p>② <strong>建立状态转移方程：</strong> 求一个子串，可以切分其首尾，首：<code>j</code>,尾：<code>i</code>，那么如果表示呢？我们就可以根据<code>i</code>,<code>j</code>来建模，<br>新建一个二维数组<code>dp[j][i]</code>,表示以<code>j</code>为首，<code>i</code>为尾的字符串，用<code>bool</code>类型来表示它是否是回文子串。</p><p>③<strong>设定初始值</strong>：默认的，我们将dp所有元素设置为<code>False</code>，这里我采用列表推导，相比for循环效率要高很多。具体原因这里提一下：<br>主要是因为列表推导中直接使用了<code>LIST_APPEND</code>字节码，实现append追加功能，而for，每次循环都要先载入<code>append</code>的属性，然后再回调其方法，肯定会慢一些。</p><p>④<strong>选出结果：</strong> 根据题目要求，求子串，那么使用切片就行了<code>s[start_index:start_index+max_count]</code>。</p><hr><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        <span class="hljs-comment"># 动态规划</span><br>        m = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">if</span> m &lt;= <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> s<br>        dp = [[<span class="hljs-literal">False</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)]<br>        max_count = <span class="hljs-number">1</span><br>        start_index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,m):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,i):<br>                <span class="hljs-keyword">if</span> s[j] == s[i]:<br>                    <span class="hljs-keyword">if</span> i-j+<span class="hljs-number">1</span> &lt;= <span class="hljs-number">3</span>:<br>                        dp[j][i] = <span class="hljs-literal">True</span><br>                    <span class="hljs-keyword">else</span>:<br>                        dp[j][i] = dp[j+<span class="hljs-number">1</span>][i-<span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">else</span>:<br>                    dp[j][i] = <span class="hljs-literal">False</span><br>                <span class="hljs-keyword">if</span> dp[j][i]:<br>                    <span class="hljs-keyword">if</span> i-j+<span class="hljs-number">1</span> &gt; max_count:<br>                        max_count = i-j+<span class="hljs-number">1</span><br>                        start_index = j<br>        <span class="hljs-keyword">return</span> s[start_index:start_index+max_count]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>42. 接雨水</title>
    <link href="/2020/04/16/42.%20%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    <url>/2020/04/16/42.%20%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h4 id="题目：-Leetcode-42-接雨水-二刷-（困难）"><a href="#题目：-Leetcode-42-接雨水-二刷-（困难）" class="headerlink" title="题目： Leetcode 42.接雨水  (二刷) （困难）"></a><strong>题目： Leetcode 42.接雨水  (二刷) （困难）</strong></h4><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h4><p>本题的一个核心之一是木桶效应：取一个柱子两端较短的那个用作积水的参考。</p><p>核心之二是先选出最高的一个木板，然后分别从两边向最高木板过度，根据条件计算出积水量。</p><p><strong>采用动态规划：</strong></p><p>① 状态定义：即定义我们需要的参数，本地需要求最大积水量，可以看出是求全局最优解。因此我们定义一个<br><code>total_water</code>来存储积水的最大值。<code>left</code>记录了每次动态计算的当前柱子左边的最高值，<code>right</code>记录了每次动态计算的当前<br>柱子右边的最高值。</p><p>② 状态转移方程：<code>left = max(left,height[i-1])</code>,<code>right = max(right,height[i+1])</code></p><p>③ 初始化:首先去除首尾为0的值，计算出最高的柱子的索引。<code>left=0</code>,<code>right=0</code></p><p>④ 选取结果：选取<code>total_water</code>作为最高的积水量</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">trap</span>(<span class="hljs-params">self, height: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;木桶效应&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> height:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 求得最高的那一个大柱子的索引</span><br>        top_column = height.index(<span class="hljs-built_in">max</span>(height))<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top_column):<br>            <span class="hljs-keyword">if</span> height[i] != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">del</span> height[:i]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(height)-<span class="hljs-number">1</span>,top_column,-<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> height[j] != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">del</span> height[j+<span class="hljs-number">1</span>:]<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-comment"># 遍历最高值左边</span><br>        top_column = height.index(<span class="hljs-built_in">max</span>(height))<br>        total_water = <span class="hljs-number">0</span><br>        left = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 动态计算最大值</span><br>        <span class="hljs-comment"># 遍历最高值左边</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,top_column):<br>            <span class="hljs-comment"># 当前位置的前一个柱子的和其前面的最大值比较</span><br>            left = <span class="hljs-built_in">max</span>(height[i-<span class="hljs-number">1</span>],left)<br>            <span class="hljs-keyword">if</span> height[i] &lt; left:<br>                total_water += left-height[i]<br>        <span class="hljs-comment"># 遍历最高值右边</span><br>        right = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(height)-<span class="hljs-number">2</span>,top_column,-<span class="hljs-number">1</span>):<br>            right = <span class="hljs-built_in">max</span>(height[i+<span class="hljs-number">1</span>],right)<br>            <span class="hljs-keyword">if</span> height[i] &lt; right:<br>                total_water += right-height[i]<br>        <span class="hljs-keyword">return</span> total_water<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1. 两数之和</title>
    <link href="/2020/04/15/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <url>/2020/04/15/1.%20%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
    
    <content type="html"><![CDATA[<h4 id="题目：Leetcode-1-两数之和-（简单）-（二刷）"><a href="#题目：Leetcode-1-两数之和-（简单）-（二刷）" class="headerlink" title="题目：Leetcode  1.两数之和  （简单） （二刷）"></a><strong>题目：Leetcode  1.两数之和  （简单） （二刷）</strong></h4><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h4><p>如何提高效率，字典映射相对于列表来说能够有效提高搜索的速率，而惰性生成相对于list来说也会减少内存的消耗。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], target: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]:</span><br>        m = <span class="hljs-built_in">len</span>(nums)<br>        list_ = &#123;&#125;<br>        <span class="hljs-keyword">for</span> i,data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums):<br>            list_[data] = i<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            j = list_.get(target-nums[i],<span class="hljs-literal">None</span>)<br>            <span class="hljs-keyword">if</span> j!=i <span class="hljs-keyword">and</span> j:<br>                <span class="hljs-keyword">return</span> [i,j]<br>        <span class="hljs-keyword">return</span> []<br></code></pre></td></tr></table></figure><p><strong>注：</strong>本题中使用enumerate惰性添加字典元素。</p><p><strong>此题不能使用setdefault()，</strong>因为题目中要求了，不能使用相同的元素，也就是所有元素应该相互独立。<br>而如果使用setdefault()的话，那么相同的元素，例如[3,3,3]，再使用setdefault()后就会变成{3:0},<br>而不是{3:0,3:1,3:2}。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>字典</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2. 两数相加</title>
    <link href="/2020/04/15/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
    <url>/2020/04/15/2.%20%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    
    <content type="html"><![CDATA[<h4 id="题目：-Leetcode-2-两数相加-（中等）-（二刷）"><a href="#题目：-Leetcode-2-两数相加-（中等）-（二刷）" class="headerlink" title="题目： Leetcode 2.两数相加  （中等） （二刷）"></a><strong>题目： Leetcode 2.两数相加  （中等） （二刷）</strong></h4><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路:"></a><strong>解题思路:</strong></h4><p>这道题考察了链表的递归，以及进位如何处理。</p><p>通过仔细阅读题目，我们可以发现，进位是往后进的。所以递归的时候，我们在返回的时候需要判断是否有进位，<br>如果有的话，我们需要重新修正后面的结点。</p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">addTwoNumbers</span>(<span class="hljs-params">self, l1: ListNode, l2: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> l2:<br>            <span class="hljs-keyword">return</span> l1<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> l1:<br>            <span class="hljs-keyword">return</span> l2<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> l1 <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> l2:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        l3_val = (l2.val+l1.val)%<span class="hljs-number">10</span><br>        l3 = ListNode(l3_val)<br>        l3.<span class="hljs-built_in">next</span> = self.addTwoNumbers(l1.<span class="hljs-built_in">next</span>,l2.<span class="hljs-built_in">next</span>)<br>        <span class="hljs-keyword">if</span> l2.val+l1.val &gt;= <span class="hljs-number">10</span>:<br>            l3.<span class="hljs-built_in">next</span> = self.addTwoNumbers(ListNode(<span class="hljs-number">1</span>),l3.<span class="hljs-built_in">next</span>)<br>        <span class="hljs-keyword">return</span> l3<br></code></pre></td></tr></table></figure><p><strong>注：一定要观察进位的方向，是朝前进，还是朝后进，本题是朝链表后移的方向进位。</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
      <tag>递归</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>github使用详解 --- 接受pull request</title>
    <link href="/2020/04/15/github%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%20---%20%E6%8E%A5%E5%8F%97pull%20request/"/>
    <url>/2020/04/15/github%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%20---%20%E6%8E%A5%E5%8F%97pull%20request/</url>
    
    <content type="html"><![CDATA[<h3 id="GitHub中会有贡献者提交代码上来，也就是pull-request，那么我们如何处理提交的代码呢？"><a href="#GitHub中会有贡献者提交代码上来，也就是pull-request，那么我们如何处理提交的代码呢？" class="headerlink" title="GitHub中会有贡献者提交代码上来，也就是pull_request，那么我们如何处理提交的代码呢？"></a>GitHub中会有贡献者提交代码上来，也就是pull_request，那么我们如何处理提交的代码呢？</h3><p>一般通过fork其他人的项目，然后修改代码，最后<code>pull_request</code>给项目的原始创建者。</p><h4 id="处理别人提交上来的的pull-request步骤如下："><a href="#处理别人提交上来的的pull-request步骤如下：" class="headerlink" title="处理别人提交上来的的pull_request步骤如下："></a><strong>处理别人提交上来的的pull_request步骤如下：</strong></h4><p>1.收到别人的<code>pull_request</code>,首先需要在本地创建一个分支</p><p><code>git branch test_user</code></p><p>通过 <code>git branch</code> 可以查看目前本地所拥有的分支，绿色的表示当前所在分支</p><p>2.创建完分支后，我们需要切换到该分支上</p><p><code>git checkout test_user</code></p><p>3.接下来我们就需要pull提交者的项目</p><p><code>git pull https://github.com/BiBoBi250/syz_e_mall.git</code></p><p>4.如果文件没有任何冲突的话，git会自动帮你commit，如果出现冲突的话，你就需要手动合并了</p><p>5.假如没有冲突的话，接下来需要切换到master主分支,然后合并<code>test_user</code>分支</p><p><code>git checkout master</code></p><p><code>git merge test_user</code></p><p>6.加入有冲突的话，可以采用<code>git diff</code>查看冲突的地方，然后使用编辑器打开，进行修改。</p><p>修改完毕后<code>git add -A </code>加入到工作区，接着<code>git commit -m &quot;注释&quot;</code>提交到<code>test_user</code>分支。</p><p>7.合并完成后，最后由master分支push到GitHub仓库。</p><p><code>git push origin master</code></p><p>8.最后如果想要再次更新自己本地的项目的话</p><p><code>git pull origin master</code></p><p>就ok了~</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Navicat for MySQL 连接报错</title>
    <link href="/2020/04/15/Navicat%20for%20MySQL%20%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99/"/>
    <url>/2020/04/15/Navicat%20for%20MySQL%20%E8%BF%9E%E6%8E%A5%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<p><code>Navicat for MySQL</code>连接mysql提示</p><p><code>Client does not support authentication protocol requested by server; consider upgrading MySQL client</code></p><p>意思是：客户端不支持服务器请求的身份验证协议;考虑升级MySQL客户端</p><p><strong>解决方案：</strong></p><p>进入mysql</p><p>1、use mysql;</p><p>2、alter user ‘root’@’localhost’ identified with mysql_native_password by ‘密码’;</p><p>3、flush privileges;</p><p>最后重新测试连接Navicat for MySQL，就可以了.</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django搭配swagger编写接口文档</title>
    <link href="/2020/04/15/django%E6%90%AD%E9%85%8Dswagger%E7%BC%96%E5%86%99%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    <url>/2020/04/15/django%E6%90%AD%E9%85%8Dswagger%E7%BC%96%E5%86%99%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="Swagger-django接口文档生成"><a href="#Swagger-django接口文档生成" class="headerlink" title="Swagger+django接口文档生成"></a><strong>Swagger+django接口文档生成</strong></h3><p>无论是前端人员还是后端人员，都需要熟悉接口的使用和开发，当接口开发好了，该怎么去具体正确的编写接口文档呢？这可能会使一个很头痛的问题</p><p>因为接口可能后期需要变动，如果手动修改接口文档的话，还是比较麻烦的。因此就诞生了很多生成接口文档的工具</p><p>目前有很多优秀的api接口文档sdk，不过本篇文章主要介绍一下swagger。</p><h4 id="什么是Swagger"><a href="#什么是Swagger" class="headerlink" title="什么是Swagger?"></a><strong>什么是Swagger?</strong></h4><p>摘录Swagger官方文档的介绍：</p><p>1.Swagger UI是一个开源项目，用于可视化地呈现使用OpenAPI (Swagger)规范定义的API的文档。Swagger UI允许您可视化并与API的资源进行交互，而不需要任何适当的实现逻辑，这使得后端实现和客户端消耗变得很容易。</p><h4 id="Swagger的优点？"><a href="#Swagger的优点？" class="headerlink" title="Swagger的优点？"></a><strong>Swagger的优点？</strong></h4><p>1.改变了以往的word文档编写接口不易修改升级的缺点，使得接口的变化能及时同步更新注释信息。</p><p>2.具备多语言的sdk，可以适用于python，java等。</p><p>3.Swagger还具备一个具有互动性的api控制台。</p><h4 id="django如何集成Swagger"><a href="#django如何集成Swagger" class="headerlink" title="django如何集成Swagger"></a><strong>django如何集成Swagger</strong></h4><p>1.安装依赖包</p><p><code>pip install django-rest-swagger</code></p><p>2.配置文件</p><p>在settings.py的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><br>INSTALLED_APPS = [<br>     ···<br>    <span class="hljs-string">&#x27;rest_framework_swagger&#x27;</span>, <span class="hljs-comment"># api生成文档</span><br> ···<br>]<br><br><span class="hljs-comment"># 配置swagger-ui</span><br>SWAGGER_SETTINGS = &#123;<br>    <span class="hljs-comment"># 基础样式</span><br>    <span class="hljs-string">&#x27;SECURITY_DEFINITIONS&#x27;</span>: &#123;<br>        <span class="hljs-string">&quot;basic&quot;</span>:&#123;<br>            <span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;basic&#x27;</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-comment"># 如果需要登录才能够查看接口文档, 登录的链接使用restframework自带的.</span><br>    <span class="hljs-comment"># &#x27;LOGIN_URL&#x27;: &#x27;rest_framework:login&#x27;,</span><br>    <span class="hljs-comment"># &#x27;LOGOUT_URL&#x27;: &#x27;rest_framework:logout&#x27;,</span><br>    <span class="hljs-comment"># &#x27;DOC_EXPANSION&#x27;: None,</span><br>    <span class="hljs-comment"># &#x27;SHOW_REQUEST_HEADERS&#x27;:True,</span><br>    <span class="hljs-comment"># &#x27;USE_SESSION_AUTH&#x27;: True,</span><br>    <span class="hljs-comment"># &#x27;DOC_EXPANSION&#x27;: &#x27;list&#x27;,</span><br>    <span class="hljs-comment"># 接口文档中方法列表以首字母升序排列</span><br>    <span class="hljs-string">&#x27;APIS_SORTER&#x27;</span>: <span class="hljs-string">&#x27;alpha&#x27;</span>,<br>    <span class="hljs-comment"># 如果支持json提交, 则接口文档中包含json输入框</span><br>    <span class="hljs-string">&#x27;JSON_EDITOR&#x27;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-comment"># 方法列表字母排序</span><br>    <span class="hljs-string">&#x27;OPERATIONS_SORTER&#x27;</span>: <span class="hljs-string">&#x27;alpha&#x27;</span>,<br>    <span class="hljs-string">&#x27;VALIDATOR_URL&#x27;</span>: <span class="hljs-literal">None</span>,<br>&#125;<br><br><span class="hljs-comment"># 接口框架实例，coreapi.Document的instance</span><br>REST_FRAMEWORK = &#123;<br><span class="hljs-string">&#x27;DEFAULT_SCHEMA_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework.schemas.AutoSchema&#x27;</span>,<br>&#125;<br><br></code></pre></td></tr></table></figure><p>配置完以上内容后，接下来就是通过restful-framework写自己的api了。</p><p>api写完之后，需要配置doc的路由。</p><p>在<code>urls.py</code>（具体是在app下还是根项目下都行)中配置路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.schemas <span class="hljs-keyword">import</span> get_schema_view<br><span class="hljs-keyword">from</span> rest_framework_swagger.renderers <span class="hljs-keyword">import</span> SwaggerUIRenderer, OpenAPIRenderer<br>schema_view = get_schema_view(title=<span class="hljs-string">&#x27;云逸电子商城开发接口文档&#x27;</span>, renderer_classes=[OpenAPIRenderer, SwaggerUIRenderer])<br><br>urlpatterns = [<br>      ···<br>      path(<span class="hljs-string">&#x27;docs/&#x27;</span>,schema_view,name=<span class="hljs-string">&#x27;接口文档&#x27;</span>),<br>  ···<br>  <br></code></pre></td></tr></table></figure><p>上述完成后，就可以访问<a href="127.0.0.1:8000/docs">127.0.0.1:8000/docs</a>进行访问</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/swagger.png">{width=”100%” align=”center”}</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>swagger</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu上安装git及配置ssh</title>
    <link href="/2020/04/14/Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85git%E5%8F%8A%E9%85%8D%E7%BD%AEssh/"/>
    <url>/2020/04/14/Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85git%E5%8F%8A%E9%85%8D%E7%BD%AEssh/</url>
    
    <content type="html"><![CDATA[<h3 id="Ubuntu下安装git"><a href="#Ubuntu下安装git" class="headerlink" title="Ubuntu下安装git"></a><strong>Ubuntu下安装git</strong></h3><p><strong>安装步骤：</strong></p><p>① 安装git</p><p><code>sudo apt-get install git</code></p><p>② 1.首先设定git仓库的本地全局管理者</p><p><code>git config --global user.nam &quot;syz&quot;</code></p><p><code>git config --global user.email &quot;247179876@qq.com&quot;</code></p><p>③ 检测是否可以连接到github</p><p><code>ssh -T git@github.com</code></p><p>如果出现</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Are you sure you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> connecting (<span class="hljs-literal">yes</span>/<span class="hljs-literal">no</span>)? <span class="hljs-literal">yes</span><br>Warning: Permanently added <span class="hljs-string">&#x27;github.com,13.229.188.59&#x27;</span> (RSA) <span class="hljs-keyword">to</span> the <span class="hljs-keyword">list</span> <span class="hljs-keyword">of</span> known hosts.<br>Permission denied (publickey).<br></code></pre></td></tr></table></figure><p>这说明可以连接到github</p><p>④ 安装SSH keys<br>首先查看是否已经存在keys<br><code>cd ~/.ssh</code></p><p><code>ls</code></p><p>如果没有安装，则会没有<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）这两个文件，接下来安装ssh keys</p><p><code>ssh-keygen -t rsa -C &quot;自己的github对应的邮箱地址&quot;</code></p><p>⑤ 安装成功后，可以<code>ls</code>看到目录下<code>id_rsa</code>（私钥）和<code>id_rsa.pub</code>（公钥）这两个文件,然后进入github（如果没有就自己创一个）添加公钥，打开自己的Github首页，点击<code>设置-&gt;SSH and GPG Keys-&gt;new SSH key</code>进行添加即可。</p><p>⑥ 重新测试</p><p><code>ssh -T git@github.com</code></p><p>如果成功，可以看到如下结果:</p><p><code>Hi 这里是你的用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p><p>以上就是在Ubuntu上安装git的详细教程，谢谢浏览！</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3. 无重复字符的最长子串</title>
    <link href="/2020/04/13/3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
    <url>/2020/04/13/3.%20%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h4 id="题目：Leetcode-3-无重复字符的最长子串-中等-二刷"><a href="#题目：Leetcode-3-无重复字符的最长子串-中等-二刷" class="headerlink" title="题目：Leetcode 3.无重复字符的最长子串  (中等)  (二刷)"></a><strong>题目：Leetcode 3.无重复字符的最长子串  (中等)  (二刷)</strong></h4><h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a><strong>解题思路</strong></h4><p>这道题目可以采用滑动窗口的思想，有一点点类似TCP的滑动窗口协议的算法思想。</p><p>在移动中会根据是否子串内存在重复的字符，来决定是否丢弃一段字符子串。</p><p>换句话来说，当列表中出现相同的两个字符时，丢弃第一个字符自身和其前面的所有字。<br>把第二个字符加进来，更新count。</p><p>最后因为最后一个字符可能是重复，也可能是不重复，因此只要去max(temp_count,count)<br>就可以了。</p><p><strong>时间复杂度O(n)</strong></p><p><strong>空间复杂度O(k),最坏的情况下O(n)</strong></p><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lengthOfLongestSubstring</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        count = <span class="hljs-number">0</span><br>        temp_count = <span class="hljs-number">0</span><br>        result  = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> result:<br>                result.append(i)<br>                count+=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> temp_count&lt;count:<br>                    temp_count = count<br>                <span class="hljs-keyword">del</span> result[<span class="hljs-number">0</span>:result.index(i)+<span class="hljs-number">1</span>]<br>                result.append(i)<br>                count = <span class="hljs-built_in">len</span>(result)<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(count,temp_count)<br></code></pre></td></tr></table></figure><p><strong>注：</strong>看到有个老哥使用动态规划来解此题，我分析了下它的时间复杂度最坏的情况下<br>O(n²),其实本题使用动态规划来解并不好。后面会有一题求回文子串的话用动态规划解比较好。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>滑动窗口</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用git上传项目到GitHub</title>
    <link href="/2020/04/11/%E4%BD%BF%E7%94%A8git%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/"/>
    <url>/2020/04/11/%E4%BD%BF%E7%94%A8git%E4%B8%8A%E4%BC%A0%E9%A1%B9%E7%9B%AE%E5%88%B0GitHub/</url>
    
    <content type="html"><![CDATA[<h3 id="使用git将项目push到GitHub上"><a href="#使用git将项目push到GitHub上" class="headerlink" title="使用git将项目push到GitHub上"></a>使用git将项目push到GitHub上</h3><p>假设git已经装好，没有装好的话,去官网下载，然后一路下去就行了~没什么难度<br>我们从安装完毕开始</p><p>1.去GitHub官网创建账号，建立一个仓库，然后找到绿色的按钮<code>clone or download</code>，赋值其下面的url，以便下面我们clone项目。</p><p>2.利用<code>git bash</code>进入自己本地的项目所在目录，然后运行指令<code>git clone &lt;url&gt;</code>，将GitHub项目克隆到本地。</p><p>3.此时需要将项目commit到本地的仓库中,然后push到GitHub仓库中去，因此需分别运行命令</p><p>`git remote add orgin  <url>‘</p><p><code>git add -f &lt;project&gt;</code></p><p><code>git commit &lt;project&gt; [-m &quot;annotation&quot;]</code></p><p><code>git push -u orign master</code></p><p>注：其中因为第一次GitHub仓库里啥也没有，所以带上-u,以后的话就不用带上-u了。<br>-u主要用来指定分支</p><p><strong>例如:</strong></p><p>截取了某乎里面的一个关于-u参数的例子：</p><p>当有两个分支需要提交项目的时候，如果不加-u,可能git就不知道项目来自哪个分支，就会报错。</p><p>所以在添加-u后，在.git目录下就能够看到不同branch提交</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd">[branch &quot;master&quot;]<br>remote = origin<br>merge = refs/heads/master<br>[branch &quot;test&quot;]<br>remote = origin<br>merge = refs/heads/test<br></code></pre></td></tr></table></figure><p>4.push完毕后，刷新GitHub，就可以看到上传成功地项目了</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Celery学习</title>
    <link href="/2020/04/11/Celery%E5%AD%A6%E4%B9%A0/"/>
    <url>/2020/04/11/Celery%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<p>Celery实现异步执行任务，拥有分布式的任务队列！！！</p><hr><p>灵活且高效，不用担心高并发量导致过重的系统负担，有效处理复杂的逻辑任务，提高性能。</p><p>celery架构由三部分组成，消息中间件，任务执行单元和任务执行结果存储组成。</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/celery_2.png" alt="celery2">{:width=”100%” align=”center”}</p><p>celery任务队列是一种跨线程、跨机器工作的一种机制.任务队列中包含称作任务的工作单元。有专门的工作进程持续不断的监视任务队列，并从中获得新的任务并处理.celery通过消息进行通信，通常使用一个叫Broker(中间人)来协client(任务的发出者)和worker(任务的处理者). clients发出消息到队列中，broker将队列中的信息派发给worker来处理。一个celery系统可以包含很多的worker和broker，可增强横向扩展性和高可用性能。</p><p>我们将耗时任务放到后台异步执行。不会影响用户其他操作。除了注册功能，例如上传，图形处理等等耗时的任务，都可以按照这种思路来解决。 如何实现异步执行任务呢？我们可使用celery. celery除了刚才所涉及到的异步执行任务之外，还可以实现定时处理某些任务。</p><p>Celery是一个功能完备即插即用的任务队列。它使得我们不需要考虑复杂的问题，使用非常简单。celery看起来似乎很庞大，本章节我们先对其进行简单的了解，然后再去学习其他一些高级特性。 celery适用异步处理问题，当发送邮件、或者文件上传, 图像处理等等一些比较耗时的操作，我们可将其异步执行，这样用户不需要等待很久，提高用户体验。 celery的特点是：</p><p>简单，易于使用和维护，有丰富的文档。</p><p>高效，单个celery进程每分钟可以处理数百万个任务。</p><p>灵活，celery中几乎每个部分都可以自定义扩展。</p><h4 id="1-普通方式启动Celery-Worker"><a href="#1-普通方式启动Celery-Worker" class="headerlink" title="1.普通方式启动Celery Worker"></a><strong>1.普通方式启动Celery Worker</strong></h4><p>在当前目录，使用如下方式启动Celery Worker:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">celery worker -A tasks --loglevel=info   <span class="hljs-comment"># 以默认方式prefork多进程启动celery</span><br></code></pre></td></tr></table></figure><p>其中：</p><p>①参数 -A 指定了 Celery 实例的位置，本例是在 tasks.py 中，Celery 会自动在该文件中寻找 Celery 对象实例，当然，我们也可以自己指定，在本例，使用-A tasks.app；</p><p>②参数 –loglevel 指定了日志级别，默认为 warning，也可以使用 -l info 来表示；</p><p>③在生产环境中，我们通常会使用 Supervisor 来控制 Celery Worker 进程。</p><hr><h4 id="2-绿色协程启动celery："><a href="#2-绿色协程启动celery：" class="headerlink" title="2.绿色协程启动celery："></a><strong>2.绿色协程启动celery：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">celery -A mblog.celery worker -l info (-P eventlet) <span class="hljs-comment">#最后是启动绿色协程</span><br></code></pre></td></tr></table></figure><p>分析：添加了eventlet可能会导致django的db对数据库操作在关闭数据库时，会对创建这个连接进行验证是否是同一个线程所做的，如果不是同一个线程，则会报错。eventlet是支持wsgi的异步框架</p><p><a href="https://www.cnblogs.com/giotto95827/p/8761055.html">https://www.cnblogs.com/giotto95827/p/8761055.html</a></p><p><strong>注：而就是因为eventlet会对Python原生模块（os，thread）进行修改，也就是运行时打上猴子不定，使得原生的get_ident（）取得的值和猴子补丁后的get_ident()取得的值不同。产生错误！为此，可以再Monkey_patch（thread=False）来取消其打补丁。但是有可能会影响eventlet带来的效果！</strong></p><hr><h4 id="3-单进程启动celery："><a href="#3-单进程启动celery：" class="headerlink" title="3.单进程启动celery："></a><strong>3.单进程启动celery：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">celery -A mblog.celery worker --pool=solo -l info  <span class="hljs-comment"># --pool=solo规定的单进程模式，以串行的方式执行任务队列</span><br></code></pre></td></tr></table></figure><p><strong>注：其中-A后面指定的是含有celery实例的py文件</strong></p><hr><h4 id="4-django中使用celery"><a href="#4-django中使用celery" class="headerlink" title="4.django中使用celery"></a><strong>4.django中使用celery</strong></h4><p>（1）单独配置一个py文件，用来配置celery</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals  <span class="hljs-comment"># 绝对导入，把下一个新版本的特性导入到当前版本，例如python3取消了python2.u前缀</span><br><br><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> Celery<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> path, environ<br><br>project_name = path.split(path.dirname(__file__))[-<span class="hljs-number">1</span>]  <span class="hljs-comment"># 当前目录的上一级==去掉文件名，返回目录</span><br>project_settings = <span class="hljs-string">&quot;&#123;&#125;.settings&quot;</span>.<span class="hljs-built_in">format</span>(project_name)<br><br><span class="hljs-comment"># 设置环境变量，让django能够识别启动celery.py这个文件</span><br>environ.setdefault(<span class="hljs-string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, project_settings)<br><br><span class="hljs-comment"># 实例化Celery</span><br>app = Celery(project_name)<br><br><span class="hljs-comment"># 使用django的settings文件配置celery，一些基础参数，比如任务队列存放的位置redis中，执行返回的结果保存的位置，BROKER_URL，CELERY_RESULT_BACKEND等</span><br>app.config_from_object(<span class="hljs-string">&quot;django.conf:settings&quot;</span>, namespace=<span class="hljs-string">&#x27;CELERY&#x27;</span>)<br><br><span class="hljs-comment"># Celery加载所有注册的应用</span><br>app.autodiscover_tasks(settings.INSTALLED_APPS)<br></code></pre></td></tr></table></figure><hr><p>（2）在setting.py文件中配置celery所需的属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># celery 设置,用于实例化</span><br><span class="hljs-comment"># celery 中间人 redis://redis服务所在的ip地址:端口号/数据库号</span><br>BROKER_URL = <span class="hljs-string">&#x27;redis://:&lt;password&gt;@127.0.0.1:6379/0&#x27;</span><br><br><span class="hljs-comment"># celery结果返回，可用于跟踪结果</span><br>CELERY_RESULT_BACKEND = <span class="hljs-string">&#x27;redis://:&lt;password&gt;@127.0.0.1:6379/1&#x27;</span><br>CELERY_TASK_SERIALIZER = <span class="hljs-string">&#x27;json&#x27;</span><br>CELERY_RESULT_SERIALIZER = <span class="hljs-string">&#x27;json&#x27;</span><br><br><span class="hljs-comment"># celery时区设置，使用settings中TIME_ZONE同样的时区</span><br>CELERY_TIME_ZONE = TIME_ZONE<br></code></pre></td></tr></table></figure><p><strong>注：其中的<password>为你的redis的密码</strong></p><p>task任务函数返回值参考</p><p><a href="https://www.cnblogs.com/wanghong1994/p/12144548.html">https://www.cnblogs.com/wanghong1994/p/12144548.html</a></p><p><a href="https://www.jianshu.com/p/66707b1e7787">https://www.jianshu.com/p/66707b1e7787</a></p><p><a href="https://www.cnblogs.com/zhaopanpan/p/10032853.html">https://www.cnblogs.com/zhaopanpan/p/10032853.html</a></p><p><strong>注：中间人broker采用json格式保存任务通过保存其任务函数标识，任务函数名，调用参数。</strong></p><p><strong>执行任务函数的返回值必须是序列化的对象！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Celery</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Celery</tag>
      
      <tag>分布式任务队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>206. 反转链表</title>
    <link href="/2020/04/10/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/04/10/206.%20%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="题目：Leetcode-206-反转链表-（简单）-（二刷）"><a href="#题目：Leetcode-206-反转链表-（简单）-（二刷）" class="headerlink" title="题目：Leetcode 206.反转链表  （简单） （二刷）"></a><strong>题目：Leetcode 206.反转链表  （简单） （二刷）</strong></h4><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h4><p>该题目有多种解法：</p><p>① 每次生成新结点，尾插法</p><p>② 采用队列，先进先出，尾插法</p><p>③ 采用三指针，局部翻转链表</p><p>④ 递归</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a><strong>代码</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-comment"># 三指针实现局部翻转链表</span><br>        <span class="hljs-keyword">if</span> head == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span> == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        sentry = <span class="hljs-literal">None</span><br>        cur = head.<span class="hljs-built_in">next</span><br>        pre = head<br>        pre.<span class="hljs-built_in">next</span> = sentry<br>        <span class="hljs-keyword">while</span> cur:<br>            temp = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            pre = cur<br>            cur = temp<br>        <span class="hljs-keyword">return</span> pre<br></code></pre></td></tr></table></figure><p><strong>时间复杂度O(n),空间复杂度O(1)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-comment"># 栈</span><br>        <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> deque<br>        <span class="hljs-keyword">if</span> head == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span> == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        deq = deque()<br>        <span class="hljs-keyword">while</span> head:<br>            deq.append(head)<br>            head = head.<span class="hljs-built_in">next</span><br>        sentry = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> deq:<br>            cur = deq.popleft()<br>            cur.<span class="hljs-built_in">next</span> = sentry<br>            sentry = cur<br>        <span class="hljs-keyword">return</span> cur<br></code></pre></td></tr></table></figure><p><strong>时间复杂度O(n),空间复杂度O(n)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-comment"># 每次生成新结点</span><br>        <span class="hljs-keyword">if</span> head == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span> == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        sentry = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">while</span> head:<br>            temp = ListNode(head.val)<br>            temp.<span class="hljs-built_in">next</span> = sentry<br>            sentry = temp<br>            head = head.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> temp<br></code></pre></td></tr></table></figure><p><strong>时间复杂度O(n),空间复杂度O(n)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseList</span>(<span class="hljs-params">self, head: ListNode</span>) -&gt; ListNode:</span><br>        <span class="hljs-comment"># 递归</span><br>        <span class="hljs-keyword">if</span> head == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> head.<span class="hljs-built_in">next</span> == <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        last = self.reverseList(head.<span class="hljs-built_in">next</span>)<br>        head.<span class="hljs-built_in">next</span>.<span class="hljs-built_in">next</span> = head<br>        head.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> last<br></code></pre></td></tr></table></figure><p>时间复杂度O(n),空间复杂度O(n)</p><p>主要说一下递归，虽然消耗内存，同时比较难以理解，但是还是能锻炼思维的。</p><p>向下寻找到最后一个非空的结点，然后向上返回的过程中实现翻转，注意翻转完毕要制定head.next为空，<br>不然就会造成死循环</p><p><strong>结论：我们可以看到三指针实现的局部反转的空间复杂度是O(1),是比较优的。但是不太好想到。</strong></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>链表</tag>
      
      <tag>双指针</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django session设置</title>
    <link href="/2020/04/10/django%20session%E8%AE%BE%E7%BD%AE/"/>
    <url>/2020/04/10/django%20session%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="一、Session一些基本用法："><a href="#一、Session一些基本用法：" class="headerlink" title="一、Session一些基本用法："></a><strong>一、Session一些基本用法：</strong></h3><p>1、在使用session之前必须在数据库创建相关的表(django_session)，一般会自动创建好</p><p>2、调用<code>request.session</code>首先会接收请求头部的cookie是否有sessionid，进行表查询对比</p><p>3、如果有（如果过期了）重新生成一个<code>sessionid</code>进行覆盖更新记录，并将随机生成的<code>sessionid</code>添加到<code>cookie</code>返回前端。</p><p>4、没有则新建存进表中的<code>session_key</code>,同时将字典信息加密自动存进表中的<code>session_data</code>字段,auth模块的login()函数中已经封装了这些操作。</p><p>5、删除Session：</p><p><code>request.session.flush()</code> #删除服务端的session，删除当前的会话数据并删除会话的Cookie。#这用于确保前面的会话数据不可以再次被用户的浏览器访问</p><p><code>request.session.clear_expired()</code> # 将所有Session失效日期小于当前日期的数据删除，将过期的删除</p><p><code>del request.session[&#39;k1&#39;]</code>  #django-session表里面同步删除session_data中k1这个键值对</p><p><code>request.session.delete()</code>  # 删除当前会话的所有Session数据,也就是当前会话的一整条数据</p><p>6、其他关于Session的设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 1.设置session值</span><br>request.session[<span class="hljs-string">&quot;session_name&quot;</span>]=<span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-comment"># 2.获取session值</span><br>session_name = request.session[<span class="hljs-string">&quot;session_name&quot;</span>]<br><span class="hljs-comment"># 3.删除session值</span><br><span class="hljs-keyword">del</span> request.session[<span class="hljs-string">&quot;session_name&quot;</span>]  删除一组键值对<br>request.session.flush()   删除一条记录<br> <span class="hljs-comment"># 删除当前的会话数据并删除会话的Cookie，django.contrib.auth.logout() 函数中就会调用它。</span><br><span class="hljs-comment"># 4. 检测是否操作session值</span><br>`<span class="hljs-keyword">if</span> <span class="hljs-string">&quot;session_name&quot;</span>  <span class="hljs-keyword">is</span> request.session:`<br><span class="hljs-comment"># 5. 取值</span><br>get(key, default=<span class="hljs-literal">None</span>)<br>fav_color = request.session.get(<span class="hljs-string">&#x27;fav_color&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>)<br><span class="hljs-comment"># 6.pop(key)</span><br>fav_color = request.session.pop(<span class="hljs-string">&#x27;fav_color&#x27;</span>)<br><span class="hljs-comment"># 7、keys()</span><br><span class="hljs-comment"># 8、items()</span><br><br><span class="hljs-comment">#9 用户session的随机字符串</span><br>request.session.session_key<br><span class="hljs-comment">#10 将所有Session失效日期小于当前日期的数据删除</span><br>request.session.clear_expired()<br><span class="hljs-comment">#11 检查 用户session的随机字符串 在数据库中是否</span><br>request.session.exists(<span class="hljs-string">&quot;session_key&quot;</span>)<br><span class="hljs-comment">#12 删除当前用户的所有Session数据</span><br>request.session.delete(<span class="hljs-string">&quot;session_key&quot;</span>)<br></code></pre></td></tr></table></figure><p>查询<code>django_session</code>表：</p><p>刚建立会话的<code>session</code>（第一行的数据）</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/session1.png">{:width=”100%” align=”center”}</p><p>在已经有会话的基础上，添加了一个新的<code>session</code></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/session2.png">{:width=”100%” align=”center”}</p><p>在已经有会话的基础上，删除了这个新的<code>session</code>，又回到了之前的<code>session_data</code>状态</p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/session3.png">{:width=”100%” align=”center”}</p><p>❤❤❤注意：<br>① <code>django session</code>表是针对浏览器的，不同的浏览器来 才会有不同的记录 ，也就是同一个浏览器不关闭情况下多次登录，对应的是同一个sessionid。</p><p>② 结束会话，del 会删除django_session表中对应会话的sessionid属性，而delete()则会删除整条会话属性。</p><p>③ 添加新的session并不会修改当前<code>sessionid</code>属性，只会修改<code>session data</code>，而通过del该关键字就会返回到添加新的<code>session</code>前的<code>session data</code>状态。<br>因此在已经存在会话时，新建新的session并不会修改当前<code>sessionid</code>，因此也不会影响包含<code>sessionid</code>的<code>cookie</code>向服务器请求的响应结果。</p><h3 id="二、setting-py中的session配置"><a href="#二、setting-py中的session配置" class="headerlink" title="二、setting.py中的session配置"></a><strong>二、setting.py中的session配置</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 会话session设置</span><br>SESSION_ENGINE = <span class="hljs-string">&#x27;django.contrib.sessions.backends.db&#x27;</span>  <span class="hljs-comment"># 引擎（默认）</span><br><br>SESSION_COOKIE_NAME = <span class="hljs-string">&quot;e_mall_sessionid&quot;</span><br><br><span class="hljs-comment"># Session的cookie保存在浏览器上时的key，session根据此key来生成，如果不支持cookie，那么也就不支持session</span><br><span class="hljs-comment"># 浏览器关闭之后清除的是cookie所保存的服务器传下来的sessionid，而不是session，一旦请求头中的sessionid匹配不上服务器中的sessionid，则请求失败。</span><br><span class="hljs-comment"># 当session过期后，服务器才会传递一个新的session</span><br><br>SESSION_COOKIE_PATH = <span class="hljs-string">&quot;/&quot;</span>  <span class="hljs-comment"># Session的cookie保存的路径（默认）</span><br><br>SESSION_COOKIE_DOMAIN = <span class="hljs-literal">None</span>  <span class="hljs-comment"># Session的cookie保存的域名（默认）</span><br><br>SESSION_COOKIE_SECURE = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否Https传输cookie（默认）</span><br><br>SESSION_COOKIE_HTTPONLY = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 是否Session的cookie只支持http传输（默认）</span><br><br>SESSION_COOKIE_AGE = <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">60</span>  <span class="hljs-comment"># Session的cookie失效日期（30min）（默认），和SESSION_EXPIRE_AT_BROWSER_CLOSE二选一</span><br><br>SESSION_EXPIRE_AT_BROWSER_CLOSE = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 是否关闭浏览器使得Session过期（默认）</span><br><br>SESSION_SAVE_EVERY_REQUEST = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 是否每次请求都保存Session，默认修改之后才保存</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python的单元测试模块---unittest</title>
    <link href="/2020/04/05/python%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%9D%97---unittest/"/>
    <url>/2020/04/05/python%E7%9A%84%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A8%A1%E5%9D%97---unittest/</url>
    
    <content type="html"><![CDATA[<h3 id="Python的Unittest单元测试"><a href="#Python的Unittest单元测试" class="headerlink" title="Python的Unittest单元测试"></a><strong>Python的Unittest单元测试</strong></h3><p>一个项目在最终发布前必须要进行测试，为了在测试中测试应用的安全性，正确性，有效性。需编写相应的测试代码来检测<br>所有功能是否符合要求。</p><p>Python中使用的单元测试模块最多的是unittest，包括一些主流web框架，例如Django中的单元测试django.test也是继承<br>于unittest模块的。</p><p>最近使用Django框架，想测试功能，发现django.test是继承与unittest的，所以今天学习下unittest模块的一些用法。</p><p><strong>unittest的官方文档：</strong></p><p><a href="https://docs.python.org/3/library/unittest.html#assert-methods">https://docs.python.org/3/library/unittest.html#assert-methods</a></p><p><strong>注：要多阅读阅读英文文档，很有帮助的。</strong></p><h3 id="一、Unittest的简要介绍"><a href="#一、Unittest的简要介绍" class="headerlink" title="一、Unittest的简要介绍"></a><strong>一、Unittest的简要介绍</strong></h3><p>unittest提供了自动化测试，共享测试的设置，关闭代码测试，集合的聚合测试以及独立于报告框架的测试。</p><h3 id="二、如何使用Unittest"><a href="#二、如何使用Unittest" class="headerlink" title="二、如何使用Unittest"></a><strong>二、如何使用Unittest</strong></h3><p>1.命名约束：所有的测试实例的命名要以<code>test_</code>开头,这样能让测试运行器识别哪些方法作为测试方法。</p><p>一个简单的测试案例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestMethods</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_upper</span>(<span class="hljs-params">self</span>):</span><br>        self.assertEqual(<span class="hljs-string">&#x27;my name is syz&#x27;</span>.upper(), <span class="hljs-string">&#x27;MY NAME IS SYZ&#x27;</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_isupper</span>(<span class="hljs-params">self</span>):</span><br>        self.assertTrue(<span class="hljs-string">&#x27;SYZ&#x27;</span>.isupper())<br>        self.assertFalse(<span class="hljs-string">&#x27;syz&#x27;</span>.isupper())<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_split</span>(<span class="hljs-params">self</span>):</span><br>        s = <span class="hljs-string">&#x27;I love zjw&#x27;</span><br>        self.assertEqual(s.split(<span class="hljs-string">&#x27; &#x27;</span>), [<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;love&#x27;</span>,<span class="hljs-string">&#x27;zjw&#x27;</span>])<br>        <span class="hljs-comment"># check that s.split fails when the separator is not a string</span><br>        <span class="hljs-keyword">with</span> self.assertRaises(TypeError):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;split error&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br></code></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>① 每一个测试的关键点是回调<code>assertEqual()</code>函数，来检查得到的结果和预期的结果是否符合</p><p>② <code>assertTrue()</code>和 <code>assertFalse()</code> 去验证是否满足条件。</p><p>③ <code>assertRaises()</code>用于验证当产生异常时，指定的异常是否被捕捉到。</p><p>④ 使用这些<code>assert</code>方法，而不是<code>assert</code>属性的好处在于可以生成多个异常结果形成一个报告，因为<code>assert</code>属性是针对一个表达式。</p><p>⑤ unittest.main()提供了一个命令行接口去测试脚本。</p><p>以上就是一个简单的测试用例，但也能够满足大多数测试场景。</p><h4 id="三、学习命令行接口调用测试"><a href="#三、学习命令行接口调用测试" class="headerlink" title="三、学习命令行接口调用测试"></a><strong>三、学习命令行接口调用测试</strong></h4><p>1.命令行启动测试案例有三种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">python -m unittest test_module1 test_module2<br>python -m unittest test_module.TestClass<br>python -m unittest test_module.TestClass.test_method<br>python -m unittest test/test_func.py<br>python -m unittest -v test_moudle1<br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>①<code>python -m</code>相当于import模块，执行的可以是一个模块。</p><p>② 后面可以接多个模块；也可以接模块中的类，或者类的测试方法，当然也可以是py脚本</p><p>③<code>-v</code>表示<code>verbosity</code>（冗余）,该指令表示详细的针对每一个测试用例显示其结果。</p><p>介绍几个常用的指令：</p><p>①<code>-c</code>,强制停着，产生<code> KeyboardInterrupt</code>异常</p><p>② <code>-f</code>，当遇见第一个失败的测试停止</p><p>③<code>-b</code>,主要用来在运行期间缓存错误的异常，当运行结束，输出结果后再清空缓存区。</p><p><strong>今天先学到这，先去结合django实践一下咯~</strong></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>单元测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue的安装即脚手架的搭建</title>
    <link href="/2020/04/05/vue%E7%9A%84%E5%AE%89%E8%A3%85%E5%8D%B3%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <url>/2020/04/05/vue%E7%9A%84%E5%AE%89%E8%A3%85%E5%8D%B3%E8%84%9A%E6%89%8B%E6%9E%B6%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="Vue一款适合单页面开发的轻量级的构建用户页面的渐进性的前端框架"><a href="#Vue一款适合单页面开发的轻量级的构建用户页面的渐进性的前端框架" class="headerlink" title="Vue一款适合单页面开发的轻量级的构建用户页面的渐进性的前端框架"></a>Vue一款适合单页面开发的轻量级的构建用户页面的渐进性的前端框架</h3><h4 id="安装步骤如下："><a href="#安装步骤如下：" class="headerlink" title="安装步骤如下："></a><strong>安装步骤如下：</strong></h4><p>① 安装node.js，百度官网：</p><p><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></p><p>尽量下载最稳定的版本。</p><p>② 安装完可以需要搭建环境变量，在cmd中输入<code>node -v</code>,查看是否安装完成，出现版本号则说明安装完成。</p><p>③ 安装cnmp，nmp是node安装自带的，用它来安装cnmp，可以使用镜像源进行快速安装。</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>④ 然后进行全局安装 vue-cli客户端， <code>npm install vue-cli -g</code>,通过cmd，<code>vue -V</code>查看是否安装完成</p><p>⑤ 接下来创建vue脚手架 :</p><p><code>vue init webpack vue_test</code></p><p>安装途中出现以下内容：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cmake">? <span class="hljs-keyword">Project</span> name vue_demo         <span class="hljs-comment"># 项目名</span><br><br>? <span class="hljs-keyword">Project</span> description vue学习    <span class="hljs-comment"># 项目描述</span><br><br>? Author syz                    <span class="hljs-comment"># 作者</span><br><br>? Vue build standalone          <span class="hljs-comment"># 单页面所需要的配置</span><br><br>? <span class="hljs-keyword">Install</span> vue-router? Yes<br><br>? Use ESLint to lint your code?  no  <span class="hljs-comment"># 建议关闭语法检测</span><br><br>? <span class="hljs-keyword">Set</span> up unit tests Yes   <span class="hljs-comment"># 启动单元测试</span><br><br>? Pick a <span class="hljs-keyword">test</span> runner jest<br><br>? Setup e2e tests with Nightwatch? Yes<br><br>? Should we run `npm <span class="hljs-keyword">install</span>` for you after the <span class="hljs-keyword">project</span> has been created? (recommended) yarn<br></code></pre></td></tr></table></figure><p><strong>解释下最后一个选择npm还是yarn，yarn的性能比npm块，弥补了npm的不足.但这里先试用npm</strong></p><p>yarn和npm的命令比较：</p><p><strong>nmp:</strong></p><p>`npm</p><p><code>npm install</code></p><p><code>npm install react --save</code></p><p><code>npm uninstall react --save </code></p><p><code>npm install react --save-dev</code></p><p><code>npm update --save </code></p><p><strong>yarn:</strong></p><p><code>yarn</code></p><p><code>yarn and rect</code></p><p><code>yarn remove react</code></p><p><code>yarn add react --dev</code></p><p><code>yarn upgrade</code></p><p>⑥最后</p><p><code>To get started:</code></p><p>  <code>cd vue_demo</code></p><p>  <code>npm run dev</code></p><p>⑦启动脚手架：</p><p>最后出现如下画面说明搭建脚手架成功~</p><p>⑧vue打包工具安装：</p><p>命令行：</p><p><code>npm i webpack@3.10.0 vue vue-loader css-loader vue-template-compiler</code></p><p>打包命令：</p><p><code>npm run build</code></p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/vue_success.png" title="vue_success" width="100%" />]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python 的__init__文件的小常识</title>
    <link href="/2020/04/05/python%20%E7%9A%84__init__%E6%96%87%E4%BB%B6%E7%9A%84%E5%B0%8F%E5%B8%B8%E8%AF%86/"/>
    <url>/2020/04/05/python%20%E7%9A%84__init__%E6%96%87%E4%BB%B6%E7%9A%84%E5%B0%8F%E5%B8%B8%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h3 id="python-的-init-文件的小常识"><a href="#python-的-init-文件的小常识" class="headerlink" title="python 的__init__文件的小常识"></a>python 的__init__文件的小常识</h3><p>我们阅读过源码的基本知道python的<code>__init__</code>的文件通常出现在一个模块中。</p><p>其主要有两个作用：</p><p>① 创建package的时候会默认带一个<code>__init__</code>文件,说明<code>__init__</code>是package的标识，不要误删了！</p><p>②<code>__init__.py</code>起到了一个模糊导入的作用，何为模糊导入？</p><p>我们一般导入某个包的方法是不是，<code>from package import *</code></p><p>那么，如果这个package中的<code>__init__.py</code>文件下设置了<code>__all__ = [py1,py2]</code>（假设py1,py2为两个py文件），那么<code>from package import * </code>就只会导入<code>__all__</code>里的py文件，而不是包里的全部py文件。</p><p>所以我们可以看出，<code>__init__.py</code>的作用是一种暴露接口。</p><p><strong>注:</strong></p><p>①<code>__init__.py</code>中通常需要使用<code>__all__</code>来控制所导入的模块、类或者函数，用来在项目中暴露接口。</p><p>②<code>__all__</code>必须是列表形式的。同时在非临时代码中应尽量少用<code>from 模块 import *</code></p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django和vue整合</title>
    <link href="/2020/04/04/django%E5%92%8Cvue%E6%95%B4%E5%90%88/"/>
    <url>/2020/04/04/django%E5%92%8Cvue%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h3 id="Django和vue整合"><a href="#Django和vue整合" class="headerlink" title="Django和vue整合"></a>Django和vue整合</h3><h5 id="Django和vue搭配实现前后端分离，区别于传统的web开发，提高了效率，让后端人员更专注于后端开发，让前端人员更专注于前端开发。"><a href="#Django和vue搭配实现前后端分离，区别于传统的web开发，提高了效率，让后端人员更专注于后端开发，让前端人员更专注于前端开发。" class="headerlink" title="Django和vue搭配实现前后端分离，区别于传统的web开发，提高了效率，让后端人员更专注于后端开发，让前端人员更专注于前端开发。"></a>Django和vue搭配实现前后端分离，区别于传统的web开发，提高了效率，让后端人员更专注于后端开发，让前端人员更专注于前端开发。</h5><h4 id="整合步骤如下："><a href="#整合步骤如下：" class="headerlink" title="整合步骤如下："></a><strong>整合步骤如下：</strong></h4><h5 id="一、创建django项目"><a href="#一、创建django项目" class="headerlink" title="一、创建django项目"></a><strong>一、创建django项目</strong></h5><p>1.<code>django-admin startproject test_django</code></p><p>这里我们创建了名为test的项目</p><p>2.<code>python manage.py startapp test_app</code></p><p>这里我们创建了名为test_app的app</p><h5 id="二、在django项目中创建vue项目，进行打包"><a href="#二、在django项目中创建vue项目，进行打包" class="headerlink" title="二、在django项目中创建vue项目，进行打包"></a><strong>二、在django项目中创建vue项目，进行打包</strong></h5><p>1.<code>vue init webpack vue_app </code></p><p>这里我们创建了名为vue_app的脚手架</p><p>2.<code>npm run build</code></p><p>这里对vue项目打包，会生成一个dist文件，其目录下有static，以及html文件。</p><h5 id="三、修改django配置文件"><a href="#三、修改django配置文件" class="headerlink" title="三、修改django配置文件"></a><strong>三、修改django配置文件</strong></h5><p><strong>1.修改<code>TEMPLATES</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">TEMPLATES = [<br>    &#123;<br>        <span class="hljs-string">&#x27;BACKEND&#x27;</span>: <span class="hljs-string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,<br>        <span class="hljs-comment"># &#x27;DIRS&#x27;: [os.path.join(BASE_DIR, &#x27;templates&#x27;)],</span><br>        <span class="hljs-string">&#x27;DIRS&#x27;</span>:[<span class="hljs-string">&#x27;vue_app/dist&#x27;</span>],  <span class="hljs-comment"># 该目录是vue项目的名称</span><br>        <span class="hljs-string">&#x27;APP_DIRS&#x27;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&#x27;OPTIONS&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;context_processors&#x27;</span>: [<br>                <span class="hljs-string">&#x27;django.template.context_processors.debug&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.template.context_processors.request&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,<br>                <span class="hljs-string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,<br>            ],<br>        &#125;,<br>    &#125;,<br>]<br></code></pre></td></tr></table></figure><p>说明：这里将dirs替换为vue中的存放html的目录，可以用存放到template中</p><p><strong>2.修改静态文件<code>STATICFILES_DIRS</code></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 静态文件</span><br>STATICFILES_DIRS = [<br><br>    <span class="hljs-comment"># 替换反斜杠</span><br>    os.path.join(BASE_DIR, <span class="hljs-string">&#x27;vue_app/dist/static&#x27;</span>).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>)<br>]<br></code></pre></td></tr></table></figure><p>说明：将静态文件目录替换成vue下的静态文件</p><p><strong>3.修改<code>urls</code></strong></p><p>这里使用<code>TemplateView</code>模板类视图，参数为模板html字符串<code>template_name</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">urlpatterns = [<br>    path(<span class="hljs-string">&#x27;admin/&#x27;</span>, admin.site.urls),<br>    path(<span class="hljs-string">&#x27;&#x27;</span>,TemplateView.as_view(template_name=<span class="hljs-string">&#x27;index.html&#x27;</span>))<br>]<br></code></pre></td></tr></table></figure><h5 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a><strong>四、测试</strong></h5><p>最后启动django项目</p><p><code>python manage.py runserver</code></p><p>成功的话会出现下面</p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/django_and_vue.png" width="100%">]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>Vue</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vue项目  从GitHub克隆下来的报错解决</title>
    <link href="/2020/04/04/vue%E9%A1%B9%E7%9B%AE%20%20%E4%BB%8EGitHub%E5%85%8B%E9%9A%86%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/"/>
    <url>/2020/04/04/vue%E9%A1%B9%E7%9B%AE%20%20%E4%BB%8EGitHub%E5%85%8B%E9%9A%86%E4%B8%8B%E6%9D%A5%E7%9A%84%E6%8A%A5%E9%94%99%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<h4 id="报错内容："><a href="#报错内容：" class="headerlink" title="报错内容："></a><strong>报错内容：</strong></h4><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs livescript">PS D:<span class="hljs-string">\syz\vue_projects\first_repository\web_vue&gt;</span> nmp run dev<br>nmp : 无法将“nmp”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如    <br>果包括路径，请确保路径正确，然后再试一次。<br>所在位置 行:<span class="hljs-number">1</span> 字符: <span class="hljs-number">1</span><br>+ nmp run dev<br>+ ~~~<br>    + CategoryInfo          : ObjectNotFound: (nmp:<span class="hljs-built_in">String</span>) [], CommandNotFoundException     <br>    + FullyQualifiedErrorId : CommandNotFoundException<br> <br>PS D:<span class="hljs-string">\syz\vue_projects\first_repository\web_vue&gt;</span> <span class="hljs-built_in">npm</span> run dev<br><br>&gt; webpack-dev-server --inline --progress --config build/webpack.dev.conf.js<br><br><span class="hljs-string">&#x27;webpack-dev-server&#x27;</span> 不是内部或外部命令，也不是可运行的程序<br>或批处理文件。<br><span class="hljs-built_in">npm</span> ERR! code ELIFECYCLE<br><span class="hljs-built_in">npm</span> ERR! errno <span class="hljs-number">1</span><br><span class="hljs-built_in">npm</span> ERR! web_vue@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> dev: `webpack-dev-server --inline --progress --config build/webpack.dev.conf.js`                                                                                 ev.conf.js`<br><span class="hljs-built_in">npm</span> ERR! Exit status <span class="hljs-number">1</span><br><span class="hljs-built_in">npm</span> ERR!<br><span class="hljs-built_in">npm</span> ERR! Failed at the web_vue@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> dev script.<br><span class="hljs-built_in">npm</span> ERR! This <span class="hljs-keyword">is</span> probably <span class="hljs-keyword">not</span> a problem <span class="hljs-keyword">with</span> <span class="hljs-built_in">npm</span>. There <span class="hljs-keyword">is</span> likely additional logging output above.<br>above.<br><span class="hljs-built_in">npm</span> WARN Local package.json exists, but node_modules missing, did you mean <span class="hljs-keyword">to</span> install?      <br><br><span class="hljs-built_in">npm</span> ERR! A complete log <span class="hljs-keyword">of</span> <span class="hljs-built_in">this</span> run can be found in:                                        g<br><span class="hljs-built_in">npm</span> ERR!     C:<span class="hljs-string">\Users\ASUS\AppData\Roaming\npm-cache\_logs\2020-03-28T03_35_29_956Z-debug.log</span><br>PS D:<span class="hljs-string">\syz\vue_projects\first_repository\web_vue&gt;</span> <span class="hljs-built_in">npm</span> run dev<br><br>&gt; web_vue@<span class="hljs-number">1.0</span>.<span class="hljs-number">0</span> dev D:<span class="hljs-string">\syz\vue_projects\first_repository\web_vue</span><br>&gt; webpack-dev-server --inline --progress --config build/webpack.dev.conf.js<br></code></pre></td></tr></table></figure><p><strong>注：同时我们可以看目录，观察发现可能少了我们原先的node_modules组件</strong></p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a><strong>解决方案：</strong></h4><p>项目是vue+django，单独运行vue也没问题。</p><p>1，进入项目目录，有<code>node_modules</code>的话，把<code>node_modules</code>文件夹删除，<code>package-lock.json</code>文件也删除</p><p>2，以管理员身份运行CMD！以管理员身份运行CMD！以管理员身份运行CMD！重要的事情说三表</p><p>3，cd到项目目录，先清除npm缓存：</p><p><code>npm cache clean --force</code></p><p>4，再进行<code>npm install</code></p><p>5，安装完毕会发现出现了<code>node_modules</code>和<code>package-lock.json</code>，最后测试<code>npm run dev</code>，可以发现成功启动。</p><p><strong>注：因为<code>npm install</code>重新安装的组件时vue默认自带的，所以如果你还安装了其他的，需要再将没有安装的包重新安装进去！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
      <category>前端</category>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>Git</tag>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>搭建python虚拟环境的两种方法</title>
    <link href="/2020/04/02/%E6%90%AD%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/"/>
    <url>/2020/04/02/%E6%90%AD%E5%BB%BApython%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="python-有两种建立虚拟目录的方式："><a href="#python-有两种建立虚拟目录的方式：" class="headerlink" title="python 有两种建立虚拟目录的方式："></a>python 有两种建立虚拟目录的方式：</h3><h3 id="一种是virtualenv命令-另一种是mkvirtualenv命令。"><a href="#一种是virtualenv命令-另一种是mkvirtualenv命令。" class="headerlink" title="一种是virtualenv命令,另一种是mkvirtualenv命令。"></a>一种是<code>virtualenv</code>命令,另一种是<code>mkvirtualenv</code>命令。</h3><h4 id="1-进入自己想要创建虚拟环境的目录cd……"><a href="#1-进入自己想要创建虚拟环境的目录cd……" class="headerlink" title="1.进入自己想要创建虚拟环境的目录cd……"></a>1.进入自己想要创建虚拟环境的目录cd……</h4><p><code>virtualenv +虚拟环境名</code>   ，不会保存在<code>workon</code>中，需要每次进去相应虚拟环境目录输入<code>Scripts\activate</code>(windows)/<code>source activate</code>(linux)用来激活虚拟环境并进入，使用<code>deactivate</code>离开虚拟环境</p><hr><h4 id="2-mkvirtualenv-虚拟环境名。"><a href="#2-mkvirtualenv-虚拟环境名。" class="headerlink" title="2. mkvirtualenv+虚拟环境名。"></a>2. mkvirtualenv+虚拟环境名。</h4><p>虚拟环境会保存在<code>workon</code>中（固定的目录中，需要配置<code>WORKON_HOME</code>环境，通过<code>workon</code>查看虚拟环境名目录表</p><p><code>workon+虚拟环境名</code>   激活并进入虚拟环境，删除的话通过<code>rmvirtualenv +虚拟环境名</code></p><p>但是呢，<code>mkvirtualenv</code>的默认虚拟环境目录在windows为<code>C:\Users\ASUA</code>，在linux上没有试放在那个默认目录，<br>直接用搭建好了virtualenvwrapper,因此我们需要修改配置文件和添加环境变量来实现在我们指定的目录下安装。</p><h4 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a><strong>步骤：</strong></h4><h5 id="windows："><a href="#windows：" class="headerlink" title="windows："></a><strong>windows：</strong></h5><p>1.首先进入到自己盘上的python文件的<code>scripts</code>文件中，找到<code>mkkvirtualenv.bat</code>文件，</p><p>找到这句 <code>set &quot;venvwrapper.default_workon_home=%USERPROFILE%\Envs&quot;</code>，将其修改为自己制定的虚拟环境目录。</p><p>2.添加环境变量 <code>WORKON_HOME</code>,将其自动映射到相应的目录创建虚拟环境，使之与配置文件中的目录一致。完成~</p><p>3.最后使用<code>mkvirtualenv</code>创建虚拟路径吧，通过<code>workon</code>激活进入，<code>deactivate</code>退出</p><p><strong>linux</strong>:</p><p>1.进入~/.bashrc 或者/etc/profile，具体区别在于前者针对某一个用户，后者针对所有用户的系统变量。</p><p>2.添加export配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">export WORKON_HOME=/home/syz/.workon_home<br>export VIRTUALENVWRAPPER_PYTHON=/opt/python3.6/bin/python3.6<br>export VIRTUALENVWRAPPER_VIRTUALENV=/opt/python3.6/bin/virtualenv<br></code></pre></td></tr></table></figure><p>​    <strong>注：我的virtualenv版本是20.0.27,大于20的版本，因此无需添加<code>export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=&#39;--no-site-packages&#39;</code><br>，默认安装纯净python的环境</strong></p><p>3.添加完毕后，找到virtualenvwrapper.sh的位置然后执行安装脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">whereis virtualenvwrapper<br>source /opt/python3.6/bin/virtualenvwrapper.sh  # 这里是我的路径，自己找到后修改<br></code></pre></td></tr></table></figure><p>4.安装成功后，使用mkvirtualenv的相关指令，创建修改进入退出虚拟环境等。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkvirtualenv test_env   # 创建一个虚拟环境，路径为上面的WORKON_HOME所指向的路径，python版本为上面制定的python版本<br><br>workon test_env          # 直接进入虚拟环境<br><br>deactivate               # 退出虚拟环境<br><br>rmvirtualenv  test_env          # 删除虚拟环境<br><br>...<br></code></pre></td></tr></table></figure><hr><h4 id="3-总结："><a href="#3-总结：" class="headerlink" title="3. 总结："></a>3. <strong>总结：</strong></h4><p>对比virtualenv 和 mkvirtualenv 创建虚拟环境，后者在配置好文件后更加便于管理，不用每次去寻找到虚拟环境的目录，直接通过workon选择进入</p><p>接下来就可以愉快的玩耍了～</p>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>虚拟环境(virtualenv)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django_admin详解（3）</title>
    <link href="/2020/03/28/django_admin%E8%AF%A6%E8%A7%A3%EF%BC%883%EF%BC%89/"/>
    <url>/2020/03/28/django_admin%E8%AF%A6%E8%A7%A3%EF%BC%883%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="重写formfield-for-dbfield-和save-model-和get-queryset-方法"><a href="#重写formfield-for-dbfield-和save-model-和get-queryset-方法" class="headerlink" title="** 重写formfield_for_dbfield()和save_model()和get_queryset()方法**"></a>** 重写formfield_for_dbfield()和save_model()和get_queryset()方法**</h4><p><strong>1.formfield_for_dbfield()方法：</strong></p><p>该方法主要用来针对不同的字段，不同的用户，过滤不同的选项</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">formfield_for_dbfield</span>(<span class="hljs-params">self, db_field, request, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;根据不同用户筛选其对应的数据，重新生成modelform&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># db_field.name 获取model的字段</span><br>    <span class="hljs-comment"># 查找出店家的所有信息</span><br>    <span class="hljs-keyword">if</span> db_field.name == <span class="hljs-string">&#x27;store&#x27;</span>:<br>        <span class="hljs-comment"># 店家</span><br>        user = User.objects.get(username=request.user.username)<br>        shopper = Shoppers.shoppers_.get(user=user)<br>        kwargs[<span class="hljs-string">&#x27;queryset&#x27;</span>] = Commodity.commodity_.<span class="hljs-built_in">filter</span>(shopper=shopper)<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>().formfield_for_dbfield(db_field,request,**kwargs)<br></code></pre></td></tr></table></figure><p><strong>2.save_model()方法：</strong></p><p>点击保存按钮，预填充某些字段，不需要让用户手动再次填写，比如预填充当前的用户等等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_model</span>(<span class="hljs-params">self, request, obj, form, change</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;保存对象后的自动添加商铺和用户&quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 使用多对一，1对1的select_related优化查询</span><br>    <span class="hljs-comment"># Commodity.commodity_.select_related(&#x27;shopper__user&#x27;)</span><br>    <span class="hljs-comment"># 使用多对多，1对多的prefetch_related优化查询</span><br>    <span class="hljs-comment"># Shoppers.shoppers_.prefetch_related(&#x27;commodity__store&#x27;)</span><br>    <span class="hljs-comment"># result = self.get_queryset(request).select_related(&#x27;shopper__user&#x27;).first()</span><br>    obj.store = Shoppers.shoppers_.get(user=request.user).store<br>    obj.shopper = request.user<br>    <span class="hljs-built_in">super</span>().save_model(request, obj, form, change)<br></code></pre></td></tr></table></figure><p><strong>3.get_queryset()方法：</strong></p><p>该方法主要针对不同的用户展现数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span>(<span class="hljs-params">self, request</span>):</span><br>      <span class="hljs-string">&quot;&quot;&quot;只显示当前用户名下的评论&quot;&quot;&quot;</span><br>      <span class="hljs-comment"># 如果指定了ordering，get_queryset中也需要重写</span><br>      result = <span class="hljs-built_in">super</span>().get_queryset(request).<span class="hljs-built_in">filter</span>(shopper=request.user)<br>      ordering = self.get_ordering(request)<br>      <span class="hljs-keyword">if</span> ordering:<br>          result = result.order_by(*ordering)<br><span class="hljs-keyword">return</span> result<br></code></pre></td></tr></table></figure><p>注：如果admin中有ordering,字段我们需要对查询机进行排序。</p><p><strong>get_queryset()源码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">  <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span>(<span class="hljs-params">self, request</span>):</span><br>      <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">      Return a QuerySet of all model instances that can be edited by the</span><br><span class="hljs-string">      admin site. This is used by changelist_view.</span><br><span class="hljs-string">      &quot;&quot;&quot;</span><br><span class="hljs-comment"># 获取默认管理员，一般为超级管理员的针对该模型的所有查询集</span><br>      qs = self.model._default_manager.get_queryset()<br>      <span class="hljs-comment"># <span class="hljs-doctag">TODO:</span> this should be handled by some parameter to the ChangeList.</span><br>      <span class="hljs-comment"># 针对默认管理者即超级管理员的数据进行排序</span><br>      ordering = self.get_ordering(request)<br><span class="hljs-comment"># 如果ordering字段不为None的话，进行排序</span><br>      <span class="hljs-keyword">if</span> ordering:<br>          qs = qs.order_by(*ordering)<br>      <span class="hljs-keyword">return</span> qs<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django_admin详解(2)</title>
    <link href="/2020/03/28/django_admin%E8%AF%A6%E8%A7%A3%EF%BC%882%EF%BC%89/"/>
    <url>/2020/03/28/django_admin%E8%AF%A6%E8%A7%A3%EF%BC%882%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="1-关于Admin的列表的基本设置"><a href="#1-关于Admin的列表的基本设置" class="headerlink" title="1.关于Admin的列表的基本设置"></a><strong>1.关于Admin的列表的基本设置</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotesAdmin</span>(<span class="hljs-params">admin.ModelAdmin</span>):</span><br>    list_display = (<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;note_author&#x27;</span>, <span class="hljs-string">&#x27;key_word&#x27;</span>, <span class="hljs-string">&#x27;praise&#x27;</span>, <span class="hljs-string">&#x27;read_counts&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span>, <span class="hljs-string">&#x27;publish_date&#x27;</span>)<br>    <span class="hljs-comment"># 按照type降序排列</span><br>    ordering = (<span class="hljs-string">&#x27;-type&#x27;</span>,)<br>    <span class="hljs-comment"># 绑定actions方法</span><br>    actions = [<span class="hljs-string">&#x27;make_published&#x27;</span>, <span class="hljs-string">&#x27;make_draft&#x27;</span>, <span class="hljs-string">&#x27;confirm_author&#x27;</span>]<br>    <span class="hljs-comment"># 动作按钮在上方</span><br>    actions_on_top = <span class="hljs-literal">True</span><br>    <span class="hljs-comment"># list_per_page设置每页显示多少条记录，默认是100条</span><br>    list_per_page = <span class="hljs-number">20</span><br>    <span class="hljs-comment"># 设置可以选择的编辑字段</span><br>    list_editable = (<span class="hljs-string">&#x27;type&#x27;</span>,)<br>    <span class="hljs-comment"># 搜索字段</span><br>    search_fields = (<span class="hljs-string">&#x27;type&#x27;</span>,)<br></code></pre></td></tr></table></figure><h4 id="2-筛选过滤器："><a href="#2-筛选过滤器：" class="headerlink" title="2.筛选过滤器："></a><strong>2.筛选过滤器：</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">list_filter = (<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>, <span class="hljs-string">&#x27;key_word&#x27;</span>, <span class="hljs-string">&#x27;status&#x27;</span>)  <span class="hljs-comment"># 过滤器</span><br></code></pre></td></tr></table></figure><h4 id="3-为不同字段结果添加不同的颜色"><a href="#3-为不同字段结果添加不同的颜色" class="headerlink" title="3.为不同字段结果添加不同的颜色"></a><strong>3.为不同字段结果添加不同的颜色</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 函数名为字段名，返回html，反正最后模型都会转为html显示</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">colored_status</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-keyword">global</span> color_code<br>        <span class="hljs-keyword">if</span> self.status == <span class="hljs-string">&#x27;p&#x27;</span>:<br>            color_code = <span class="hljs-string">&#x27;green&#x27;</span><br>        <span class="hljs-keyword">elif</span> self.status == <span class="hljs-string">&#x27;d&#x27;</span>:<br>            color_code = <span class="hljs-string">&#x27;red&#x27;</span><br>        <span class="hljs-keyword">return</span> format_html(<br>            <span class="hljs-string">&#x27;&lt;span style=&quot;color:&#123;&#125;;font-size:20px;font-weight:bolder;&quot;&gt;&#123;&#125;&lt;/span&gt;&#x27;</span>,<br>            color_code,<br>            self.status<br>        )<br>    <span class="hljs-comment"># 修改标题</span><br>    colored_status.short_description = <span class="hljs-string">&#x27;文章状态&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="4-根据不同的用户过滤不同的数据"><a href="#4-根据不同的用户过滤不同的数据" class="headerlink" title="4.根据不同的用户过滤不同的数据"></a><strong>4.根据不同的用户过滤不同的数据</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 重写get_querset方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_queryset</span>(<span class="hljs-params">self, request</span>):</span><br>        all_result = <span class="hljs-built_in">super</span>().get_queryset(request)<br>        <span class="hljs-keyword">if</span> request.user.is_superuser:<br>            <span class="hljs-keyword">return</span> all_result<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> all_result.<span class="hljs-built_in">filter</span>(ips_author=request.user)<br></code></pre></td></tr></table></figure><h4 id="5-删除一些动作权限"><a href="#5-删除一些动作权限" class="headerlink" title="5.删除一些动作权限"></a><strong>5.删除一些动作权限</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_actions</span>(<span class="hljs-params">self, request</span>):</span><br>    <span class="hljs-comment"># 在actions中去掉‘删除’操作</span><br>    actions = <span class="hljs-built_in">super</span>().get_actions(request)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> request.user.is_superuser:<br>        <span class="hljs-comment"># 根据权限删除</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;can delete information&#x27;</span> <span class="hljs-keyword">in</span> actions:<br>            <span class="hljs-keyword">del</span> actions[<span class="hljs-string">&#x27;can delete information&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;can add information&#x27;</span> <span class="hljs-keyword">in</span> actions:<br>            <span class="hljs-keyword">del</span> actions[<span class="hljs-string">&#x27;can add information&#x27;</span>]<br>    <span class="hljs-keyword">return</span> actions<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间序列</title>
    <link href="/2020/03/28/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/"/>
    <url>/2020/03/28/%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<p><hr /><h2 id="now">一、基本的now用法</h2><hr /><div class="codehilite"><pre><span></span><span class="n">In</span><span class="p">:</span><span class="kn">import</span> <span class="nn">datetime</span><span class="n">m</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>  <span class="c1"># 获取当前日期时间</span><span class="n">year</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">year</span>  <span class="c1"># 获取当前年份</span><span class="n">month</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">month</span>  <span class="c1"># 获取当前月份</span><span class="n">day</span><span class="o">=</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">day</span>      <span class="c1"># 获取当前天数</span><span class="n">m</span><span class="p">,</span><span class="n">year</span><span class="p">,</span><span class="n">month</span><span class="p">,</span><span class="n">day</span><span class="n">Out</span><span class="p">:</span><span class="p">(</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">371776</span><span class="p">),</span> <span class="mi">2020</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span> <span class="c1"># 类型为datetime</span></pre></div></p><p><hr /><h2 id="date">二、 date模块的用法</h2><div class="codehilite"><pre><span></span><span class="n">In</span><span class="p">:</span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span><span class="n">new_date</span> <span class="o">=</span> <span class="n">date</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="c1"># 显示特定的日期</span><span class="n">new_date</span><span class="n">Out</span><span class="p">:</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">new_date</span><span class="o">.</span><span class="n">today</span><span class="p">()</span>  <span class="c1"># 显示今天日期</span><span class="n">Out</span><span class="p">:</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">new_date</span><span class="o">.</span><span class="n">ctime</span><span class="p">()</span>  <span class="c1"># 返回字符串,与datetime.time.ctime()格式相同</span><span class="n">Out</span><span class="p">:</span><span class="s1">&#39;Mon Jan  1 00:00:00 2018&#39;</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">new_date</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="mi">1999</span><span class="p">,</span><span class="mi">12</span><span class="p">)</span> <span class="c1"># 替换年月日并返回新的日期</span><span class="n">Out</span><span class="p">:</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">1999</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">new_date</span><span class="o">.</span><span class="n">timetuple</span><span class="p">()</span> <span class="c1">#将date转换为time模块中的time.struct_time对象</span><span class="n">Out</span><span class="p">:</span><span class="n">time</span><span class="o">.</span><span class="n">struct_time</span><span class="p">(</span><span class="n">tm_year</span><span class="o">=</span><span class="mi">2018</span><span class="p">,</span> <span class="n">tm_mon</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">tm_mday</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">tm_hour</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tm_min</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tm_sec</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tm_wday</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tm_yday</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">tm_isdst</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">new_date</span><span class="o">.</span><span class="n">weekday</span><span class="p">()</span> <span class="c1">#返回一周内的星期 0-6</span><span class="n">Out</span><span class="p">:</span><span class="mi">0</span>     <span class="c1"># 从0开始，0代表星期一，而6就代表星期天</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">random</span><span class="o">.</span><span class="n">uniform</span><span class="p">(</span><span class="n">date</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="n">date</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">31</span><span class="p">))</span> <span class="c1">#随机返回日期，uniform是随机生成区间范围内的实数</span><span class="n">Out</span><span class="p">:</span><span class="n">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span></pre></div></p><p><hr /><h2 id="time">三、time模块用法</h2><div class="codehilite"><pre><span></span><span class="n">In</span><span class="p">:</span><span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="o">*</span><span class="n">new_time</span><span class="o">=</span><span class="n">mktime</span><span class="p">((</span><span class="mi">2018</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">30</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span> <span class="c1">#时间元组-&gt;秒,即转为时间戳</span><span class="n">new_time</span><span class="n">Out</span><span class="p">:</span><span class="mf">1541385000.0</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">localtime</span><span class="p">(</span><span class="n">new_time</span><span class="p">)</span>  <span class="c1">#秒-&gt;时间元组，与timetuple()不同，timetuple()是将date转为时间元祖</span><span class="n">Out</span><span class="p">:</span><span class="n">time</span><span class="o">.</span><span class="n">struct_time</span><span class="p">(</span><span class="n">tm_year</span><span class="o">=</span><span class="mi">2018</span><span class="p">,</span> <span class="n">tm_mon</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">tm_mday</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">tm_hour</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">tm_min</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">tm_sec</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tm_wday</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tm_yday</span><span class="o">=</span><span class="mi">309</span><span class="p">,</span> <span class="n">tm_isdst</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">asctime</span><span class="p">(</span><span class="n">localtime</span><span class="p">(</span><span class="n">new_time</span><span class="p">))</span> <span class="c1">#时间元组-&gt;字符串</span><span class="n">Out</span><span class="p">:</span><span class="s1">&#39;Sun May 20 10:30:00 2018&#39;</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">strptime</span><span class="p">(</span><span class="s1">&#39;Sun May 20 10:30:00 2018&#39;</span><span class="p">)</span> <span class="c1">#字符串-&gt;时间元组</span><span class="n">Out</span><span class="p">:</span><span class="n">time</span><span class="o">.</span><span class="n">struct_time</span><span class="p">(</span><span class="n">tm_year</span><span class="o">=</span><span class="mi">2018</span><span class="p">,</span> <span class="n">tm_mon</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">tm_mday</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">tm_hour</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">tm_min</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">tm_sec</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">tm_wday</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">tm_yday</span><span class="o">=</span><span class="mi">140</span><span class="p">,</span> <span class="n">tm_isdst</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">detestr</span> <span class="o">=</span> <span class="n">new_date</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-</span><span class="si">%d</span><span class="s1">&#39;</span><span class="p">)</span>  <span class="c1"># 将date类型转为 字符串</span><span class="n">datestr</span><span class="n">Out</span><span class="p">:</span><span class="s1">&#39;2018-01-01&#39;</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">time</span><span class="p">()</span>  <span class="c1">#当前秒数</span><span class="n">Out</span><span class="p">:</span><span class="mf">1577423336.532038</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">asctime</span><span class="p">(</span><span class="n">localtime</span><span class="p">(</span><span class="n">time</span><span class="p">()))</span>  <span class="c1">#当前时间字符串</span><span class="n">Out</span><span class="p">:</span><span class="s1">&#39;Mon Jan 20 10:48:19 2020&#39;</span></p><p><span class="n">In</span><span class="p">:</span><span class="n">NOW</span><span class="o">=</span><span class="n">localtime</span><span class="p">(</span><span class="n">time</span><span class="p">())</span> <span class="c1">#格式化显示当前时间</span><span class="s2">&quot;</span><span class="si">{}</span><span class="s2">-</span><span class="si">{}</span><span class="s2">-</span><span class="si">{}</span><span class="s2">-</span><span class="si">{}</span><span class="s2">-</span><span class="si">{}</span><span class="s2">-</span><span class="si">{}</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">NOW</span><span class="o">.</span><span class="n">tm_year</span><span class="p">,</span><span class="n">NOW</span><span class="o">.</span><span class="n">tm_mon</span><span class="p">,</span><span class="n">NOW</span><span class="o">.</span><span class="n">tm_mday</span><span class="p">,</span><span class="n">NOW</span><span class="o">.</span><span class="n">tm_hour</span><span class="p">,</span><span class="n">NOW</span><span class="o">.</span><span class="n">tm_min</span><span class="p">,</span><span class="n">NOW</span><span class="o">.</span><span class="n">tm_sec</span><span class="p">)</span><span class="n">Out</span><span class="p">:</span><span class="s1">&#39;2020-1-20-10-50-5&#39;</span></pre></div></p><p><hr /><p>1.将datetime类型转成str</p><div class="codehilite"><pre><span></span><span class="n">In</span><span class="p">:</span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span><span class="n">str_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&quot;%Y-%m-</span><span class="si">%d</span><span class="s2">&quot;</span><span class="p">)</span>  <span class="c1"># 将当前日期转为字符串</span><span class="n">str_date</span><span class="n">Out</span><span class="p">:</span><span class="s1">&#39;2020-01-20&#39;</span></pre></div></p><p>2.将str类型转成datetime</p><div class="codehilite"><pre><span></span><span class="n">In</span><span class="p">:</span><span class="n">form</span> <span class="n">datetime</span> <span class="kn">import</span> <span class="nn">datetime</span><span class="n">start_date</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">strptime</span><span class="p">(</span><span class="s2">&quot;2019-04-15&quot;</span><span class="p">,</span> <span class="s2">&quot;%Y-%m-</span><span class="si">%d</span><span class="s2">&quot;</span><span class="p">)</span>  <span class="c1"># 将固定字符串转为固定格式的日期类型</span><span class="n">Out</span><span class="p">:</span><span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span></pre></div><div class="codehilite"><pre><span></span><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">date</span><span class="n">date</span> <span class="c1"># 类是一个日期类，由年、月、日组成。由于Python也是面向对象编程语言，所以针对类，就会有构造函数，该类的构造函数如下： </span><p><span class="k">class</span> <span class="nc">datetime</span><span class="o">.</span><span class="n">date</span><span class="p">(</span><span class="n">year</span><span class="p">,</span> <span class="n">month</span><span class="p">,</span> <span class="n">day</span><span class="p">):</span><br><span class="n">year</span> <span class="p">:</span> <span class="c1"># 表示年,范围[MINYEAR, MAXYEAR]，即[1, 9999]</span><br><span class="n">month</span> <span class="p">:</span> <span class="c1"># 表示月，范围[1, 12]</span><br><span class="n">day</span> <span class="p">:</span> <span class="c1"># 一月中第几天，最大值根据给定的year，month参数来决定。例如闰年2月份有29天</span><br></pre></div></p><p><hr /><h2 id="date_1">四、date模块的十大用法</h2><p>一、date对象所能表示的最大最小日期，返回的是datetime.date类型的对象</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; import datetime&gt;&gt;&gt; datetime.date.max  <span class="c1"># 获取最大日期，调用__repr__内置方法</span>datetime.date<span class="o">(</span><span class="m">9999</span>, <span class="m">12</span>, <span class="m">31</span><span class="o">)</span>&gt;&gt;&gt; print datetime.date.min  <span class="c1"># 获取最小日期</span><span class="m">0001</span>-01-01&gt;&gt;&gt;</pre></div></p><p><hr /><p>二、date.today() 函数：返回一个当前本地日期的date类型的对象</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt;import datetime&gt;&gt;&gt; datetime.date.today<span class="o">()</span> <span class="c1"># 返回本地日期对象，调用__repr__内置方法</span>datetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">16</span><span class="o">)</span>&gt;&gt;&gt; print datetime.date.today<span class="o">()</span> <span class="c1">#</span><span class="m">2018</span>-01-16&gt;&gt;&gt;</pre></div></p><p><hr /><p>三、date.fromtimestamp()函数：根据给定的时间戳，返回一个date对象</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; import datetime&gt;&gt;&gt; import <span class="nb">time</span>&gt;&gt;&gt; <span class="nv">now</span><span class="o">=</span>time.time<span class="o">()</span>  <span class="c1"># 返回时间戳</span>&gt;&gt;&gt; print now<span class="m">1516110787</span>.69&gt;&gt;&gt; <span class="nv">s</span><span class="o">=</span>datetime.date.fromtimestamp<span class="o">(</span>now<span class="o">)</span> <span class="c1"># 根据给定的时间戳，返回date对象</span>&gt;&gt;&gt; sdatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">16</span><span class="o">)</span> <span class="c1"># 返回固定参数的date对象</span>&gt;&gt;&gt; print s<span class="m">2018</span>-01-16&gt;&gt;&gt;</pre></div></p><p><hr /><p>四、date.weekday()函数：参数必须是一个date类型的对象，返回该日期是一周中的第几天。返回值是一个整型。星期一，返回0；星期二，返回1。。。</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; <span class="nv">s</span><span class="o">=</span>datetime.date.today<span class="o">()</span>&gt;&gt;&gt; print s<span class="m">2018</span>-01-16&gt;&gt;&gt; sdatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">16</span><span class="o">)</span>&gt;&gt;&gt; type<span class="o">(</span>s<span class="o">)</span> <span class="c1"># 查看date返回的类型</span>&lt;<span class="nb">type</span> <span class="s1">&#39;datetime.date&#39;</span>&gt;&gt;&gt;&gt; <span class="nv">d</span><span class="o">=</span>datetime.date.weekday<span class="o">(</span>s<span class="o">)</span> <span class="c1"># 返回对应类型的</span>&gt;&gt;&gt; d<span class="m">0</span>&gt;&gt;&gt; print d<span class="m">0</span>&gt;&gt;&gt; type<span class="o">(</span>d<span class="o">)</span>&lt;<span class="nb">type</span> <span class="s1">&#39;int&#39;</span>&gt;&gt;&gt;&gt;</pre></div></p><p><hr /><p>五、date.isoweekday()函数：该函数需要一个datetime.date类型的参数。返回weekday中的星期几，星期一，返回1；星期二，返回2；以此类推。</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; <span class="nv">s</span><span class="o">=</span>datetime.date.today<span class="o">()</span>&gt;&gt;&gt; print s<span class="m">2018</span>-05-20&gt;&gt;&gt; sdatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">5</span>, <span class="m">20</span><span class="o">)</span>&gt;&gt;&gt; <span class="nv">d</span><span class="o">=</span>datetime.date.isoweekday<span class="o">(</span>s<span class="o">)</span>&gt;&gt;&gt; d<span class="m">1</span>&gt;&gt;&gt; type<span class="o">(</span>d<span class="o">)</span>&lt;<span class="nb">type</span> <span class="s1">&#39;int&#39;</span>&gt;&gt;&gt;&gt;</pre></div></p><p><hr /><p>六、date.isocalendar（）函数：该函数需要一个datetime.date类型的参数。返回date类型对象中的year（年），week（周），weekday（一周中的第几天），返回的是一个元祖类型</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; <span class="nv">s</span><span class="o">=</span>datetime.date.today<span class="o">()</span>&gt;&gt;&gt; print s<span class="m">2018</span>-5-20&gt;&gt;&gt; sdatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">5</span>, <span class="m">20</span><span class="o">)</span>&gt;&gt;&gt; <span class="nv">d</span><span class="o">=</span>datetime.date.isocalendar<span class="o">(</span>s<span class="o">)</span>&gt;&gt;&gt; d<span class="o">(</span><span class="m">2018</span>, <span class="m">20</span>, <span class="m">7</span><span class="o">)</span>&gt;&gt;&gt; print d<span class="o">(</span><span class="m">2018</span>, <span class="m">20</span>, <span class="m">7</span><span class="o">)</span>  <span class="c1"># 代表2018年中的第20周，第三周中的第7天,即5月20日</span>&gt;&gt;&gt; type<span class="o">(</span>d<span class="o">)</span>&lt;<span class="nb">type</span> <span class="s1">&#39;tuple&#39;</span>&gt;&gt;&gt;&gt;</pre></div></p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; <span class="nv">s</span><span class="o">=</span>datetime.date<span class="o">(</span><span class="m">2018</span>,1,14<span class="o">)</span>&gt;&gt;&gt; sdatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">14</span><span class="o">)</span>&gt;&gt;&gt; print s<span class="m">2018</span>-01-14&gt;&gt;&gt; d<span class="o">(</span><span class="m">2018</span>, <span class="m">3</span>, <span class="m">2</span><span class="o">)</span>&gt;&gt;&gt; <span class="nv">d</span><span class="o">=</span>datetime.date.isocalendar<span class="o">(</span>s<span class="o">)</span>&gt;&gt;&gt; d<span class="o">(</span><span class="m">2018</span>, <span class="m">2</span>, <span class="m">7</span><span class="o">)</span>     <span class="c1"># 代表2018年中的第3周，第三周中的第7天</span>&gt;&gt;&gt;</pre></div><p><hr /><p>七、date.strftime(fmt) 返回自定义格式的时间字符串。fmt是自定义的时间格式</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; <span class="nv">a</span><span class="o">=</span>datetime.date.today<span class="o">()</span>&gt;&gt;&gt; adatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">16</span><span class="o">)</span>&gt;&gt;&gt; <span class="nv">b</span><span class="o">=</span>a.strftime<span class="o">(</span><span class="s2">&quot;%Y-%m-%d %H:%M:%S&quot;</span><span class="o">)</span>&gt;&gt;&gt; b<span class="s1">&#39;2018-01-16 00:00:00&#39;</span>&gt;&gt;&gt; print b<span class="m">2018</span>-01-16 <span class="m">00</span>:00:00&gt;&gt;&gt; type<span class="o">(</span>b<span class="o">)</span>&lt;<span class="nb">type</span> <span class="s1">&#39;str&#39;</span>&gt;</pre></div></p><p><hr /><p>八、.replace(year, month, day)：生成一个新的日期对象  用参数指定的年，月，日代替原有对象中的属性。（原有对象仍保持不变）</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; date1datetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">16</span><span class="o">)</span>&gt;&gt;&gt; <span class="nv">date_new</span><span class="o">=</span>date1.replace<span class="o">(</span><span class="nv">year</span><span class="o">=</span><span class="m">2017</span><span class="o">)</span>  <span class="c1"># 将year替换为2017</span>&gt;&gt;&gt; date_newdatetime.date<span class="o">(</span><span class="m">2017</span>, <span class="m">1</span>, <span class="m">16</span><span class="o">)</span>&gt;&gt;&gt; <span class="nv">date_new</span><span class="o">=</span>date1.replace<span class="o">(</span><span class="nv">day</span><span class="o">=</span><span class="m">30</span><span class="o">)</span>&gt;&gt;&gt; date_newdatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">30</span><span class="o">)</span></pre></div></p><p><hr /><p>九、日期的其他操作&ndash;日期加上一个时间间隔（datetime.timedela类的对象)</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; <span class="nv">now</span><span class="o">=</span>datetime.date.today<span class="o">()</span>&gt;&gt;&gt; nowdatetime.date<span class="o">(</span><span class="m">2018</span>, <span class="m">1</span>, <span class="m">16</span><span class="o">)</span>&gt;&gt;&gt; print now<span class="m">2018</span>-01-16&gt;&gt;&gt; <span class="nv">b</span><span class="o">=</span>datetime.timedelta<span class="o">(</span><span class="nv">days</span><span class="o">=</span><span class="m">10</span><span class="o">)</span> <span class="c1"># 表示正向推移10天，如果day=-10，表示反向推移10天</span>&gt;&gt;&gt; bdatetime.timedelta<span class="o">(</span><span class="m">10</span><span class="o">)</span>&gt;&gt;&gt; type<span class="o">(</span>b<span class="o">)</span>&lt;<span class="nb">type</span> <span class="s1">&#39;datetime.timedelta&#39;</span>&gt;&gt;&gt;&gt; print b<span class="m">10</span> days, <span class="m">0</span>:00:00&gt;&gt;&gt; print now+b   <span class="c1"># 表示推迟10天之后的日期</span><span class="m">2018</span>-01-26&gt;&gt;&gt; print now-b  <span class="c1"># 表示提前10天之前的日期</span><span class="m">2018</span>-01-06&gt;&gt;&gt; print now-b-b   <span class="c1"># 表示提前20天之前的日期</span><span class="m">2017</span>-12-27&gt;&gt;&gt;</pre></div></p><p><hr /><p>十、日期的其他操作&ndash;两个date类型对象相减。返回两个日期的间隔对象，即：datetime.timedelta类型的对象</p><div class="codehilite"><pre><span></span>&gt;&gt;&gt; <span class="nv">date1</span><span class="o">=</span>datetime.date.today<span class="o">()</span>&gt;&gt;&gt; <span class="nv">date2</span><span class="o">=</span>date1.replace<span class="o">(</span><span class="nv">day</span><span class="o">=</span><span class="m">19</span><span class="o">)</span>&gt;&gt;&gt; print date1<span class="m">2018</span>-01-16&gt;&gt;&gt; print date2<span class="m">2018</span>-01-19&gt;&gt;&gt; print type<span class="o">(</span>date1<span class="o">)</span>,type<span class="o">(</span>date2<span class="o">)</span>&lt;<span class="nb">type</span> <span class="s1">&#39;datetime.date&#39;</span>&gt; &lt;<span class="nb">type</span> <span class="s1">&#39;datetime.date&#39;</span>&gt;   <span class="c1"># 两个都是为date类型</span>&gt;&gt;&gt; print date2-date1<span class="m">3</span> days, <span class="m">0</span>:00:00&gt;&gt;&gt; print date1-date2-3 days, <span class="m">0</span>:00:00&gt;&gt;&gt; print date2+datetime.timedelta<span class="o">(</span><span class="nv">days</span><span class="o">=</span><span class="m">35</span><span class="o">)</span><span class="m">2018</span>-02-23&gt;&gt;&gt; print type<span class="o">(</span>date2-date1<span class="o">)</span>&lt;<span class="nb">type</span> <span class="s1">&#39;datetime.timedelta&#39;</span>&gt;&gt;&gt;&gt;</pre></div></p><p>十一、dateutil模块</p><p>relativedelta模块弥补了timedelte函数推迟提前月，年级别的日期对象</p><p>具体用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> dateutil.relativedelta <span class="hljs-keyword">import</span> relativedelta<br><br>In [<span class="hljs-number">19</span>]: <span class="hljs-keyword">from</span> dateutil.relativedelta <span class="hljs-keyword">import</span> relativedelta<br><br>In [<span class="hljs-number">20</span>]: k = n-relativedelta(months=<span class="hljs-number">3</span>)<br><br>In [<span class="hljs-number">21</span>]: k<br>Out[<span class="hljs-number">21</span>]: datetime.datetime(<span class="hljs-number">2019</span>, <span class="hljs-number">12</span>, <span class="hljs-number">22</span>, <span class="hljs-number">18</span>, <span class="hljs-number">39</span>, <span class="hljs-number">47</span>, <span class="hljs-number">790734</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>时间类型</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django_admin详解（5）</title>
    <link href="/2020/03/28/django_admin%E8%AF%A6%E8%A7%A3%EF%BC%885%EF%BC%89/"/>
    <url>/2020/03/28/django_admin%E8%AF%A6%E8%A7%A3%EF%BC%885%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h4 id="自定义admin的filter筛选类"><a href="#自定义admin的filter筛选类" class="headerlink" title="自定义admin的filter筛选类"></a>自定义admin的filter筛选类</h4><p>框架的好处，在于具有强大的拓展性，可以重写自己想要的功能。接下来，我们就重写admin的filter自定义搜索项的类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">remark_time_filter</span>(<span class="hljs-params">admin.SimpleListFilter</span>):</span><br>    <span class="hljs-comment"># 思路：获取前端传来的查询字符串，自定义parameter_name，将查询字符串以键值赋给parameter_name，存储到字典中</span><br>    <span class="hljs-comment"># 然后自定义搜索项，针对搜索项，也就是所有的查询字符串，</span><br>    <span class="hljs-comment"># 匹配parameter_name的值，即查询字符串，根据其查询相应的查询集</span><br>    title = <span class="hljs-string">&#x27;根据时间段搜索用户评论&#x27;</span><br>    parameter_name = <span class="hljs-string">&#x27;reward_time&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">lookups</span>(<span class="hljs-params">self, request, model_admin</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;制定搜索项&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> [<br>            (<span class="hljs-string">&#x27;30_minutes&#x27;</span>, _(<span class="hljs-string">&#x27;三十分钟内&#x27;</span>)),<br>            (<span class="hljs-string">&#x27;half_day&#x27;</span>, _(<span class="hljs-string">&#x27;半天内&#x27;</span>)),<br>            (<span class="hljs-string">&#x27;1_hour&#x27;</span>, _(<span class="hljs-string">&#x27;一小时内&#x27;</span>)),<br>            (<span class="hljs-string">&#x27;1_day&#x27;</span>, _(<span class="hljs-string">&#x27;一天内&#x27;</span>)),<br>            (<span class="hljs-string">&#x27;7_day&#x27;</span>, _(<span class="hljs-string">&#x27;一周内&#x27;</span>)),<br>            (<span class="hljs-string">&#x27;30_day&#x27;</span>, _(<span class="hljs-string">&#x27;一个月内&#x27;</span>)),<br>        ]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">queryset</span>(<span class="hljs-params">self, request, queryset</span>):</span><br>        <span class="hljs-keyword">if</span> self.value() == <span class="hljs-string">&#x27;30_minutes&#x27;</span>:<br>            <span class="hljs-keyword">return</span> queryset.<span class="hljs-built_in">filter</span>(reward_time__gte=datetime.now() - timedelta(minutes=<span class="hljs-number">30</span>),<br>                                   reward_time__lte=datetime.now())<br>        <span class="hljs-keyword">elif</span> self.value() == <span class="hljs-string">&#x27;1_hour&#x27;</span>:<br>            <span class="hljs-keyword">return</span> queryset.<span class="hljs-built_in">filter</span>(reward_time__gte=datetime.now() - timedelta(hours=<span class="hljs-number">1</span>),<br>                                   reward_time__lte=datetime.now())<br>        <span class="hljs-keyword">elif</span> self.value() == <span class="hljs-string">&#x27;half_day&#x27;</span>:<br>            <span class="hljs-keyword">return</span> queryset.<span class="hljs-built_in">filter</span>(reward_time__gte=datetime.now() - timedelta(hours=<span class="hljs-number">12</span>),<br>                                   reward_time__lte=datetime.now())<br>        <span class="hljs-keyword">elif</span> self.value() == <span class="hljs-string">&#x27;1_day&#x27;</span>:<br>            <span class="hljs-keyword">return</span> queryset.<span class="hljs-built_in">filter</span>(reward_time__gte=datetime.now() - timedelta(days=<span class="hljs-number">1</span>),<br>                                   reward_time__lte=datetime.now())<br>        <span class="hljs-keyword">elif</span> self.value() == <span class="hljs-string">&#x27;7_day&#x27;</span>:<br>            <span class="hljs-keyword">return</span> queryset.<span class="hljs-built_in">filter</span>(reward_time__gte=datetime.now() - timedelta(days=<span class="hljs-number">7</span>),<br>                                   reward_time__lte=datetime.now())<br>        <span class="hljs-keyword">elif</span> self.value() == <span class="hljs-string">&#x27;30_day&#x27;</span>:<br>            <span class="hljs-keyword">return</span> queryset.<span class="hljs-built_in">filter</span>(reward_time__gte=datetime.now() - timedelta(days=<span class="hljs-number">30</span>),<br>                                   reward_time__lte=datetime.now())<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> queryset<br></code></pre></td></tr></table></figure><p>说明：子类化SimpleListFilter类，添加到list_filter中。</p><p>看了源码后归纳出来的思路：</p><p> <strong>思路：</strong><br> 获取前端传来的查询字符串，自定义<code>parameter_name</code>，将查询字符串以键值赋给parameter_name，存储到字典中然后自定义搜索项，针对搜索项调用<code>self.value()</code>,去除<code>parameter_name</code>所对应的值，也就是所有的查询字符串，根据其返回相应的查询集。</p><p><strong>注：</strong><br>通过<code>SimpleListFilter</code>类的源码可以了解到框架一般通过函数和类来封装一系列的数据对象，并会在需要的时候调用，这样拓展性更高，很容易自定义子类。<br>而不会在仅在一个函数里实现功能！</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>源码分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git使用详解（1）</title>
    <link href="/2020/03/27/git%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%EF%BC%881%EF%BC%89/"/>
    <url>/2020/03/27/git%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3%EF%BC%881%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>安装的话去官网下载就好了。</p><p>我们从安装完毕开始~</p><h4 id="1-首先设定git仓库的本地全局管理者"><a href="#1-首先设定git仓库的本地全局管理者" class="headerlink" title="1.首先设定git仓库的本地全局管理者"></a><strong>1.首先设定git仓库的本地全局管理者</strong></h4><p><code>git config --global user.nam &quot;syz&quot;</code></p><p><code>git config --global user.email &quot;247179876@qq.com&quot;</code></p><h4 id="2-初始化指定本地仓库"><a href="#2-初始化指定本地仓库" class="headerlink" title="2.初始化指定本地仓库"></a><strong>2.初始化指定本地仓库</strong></h4><p>打开bash命令行</p><p>cd 到仓库目录</p><p><code>git init</code></p><p>产生<code>.git</code>文件夹，是隐藏文件夹，主要作用是跟踪版本</p><h4 id="3-添加文件到暂存区"><a href="#3-添加文件到暂存区" class="headerlink" title="3.添加文件到暂存区"></a><strong>3.添加文件到暂存区</strong></h4><p><code>git add test1.txt</code></p><h4 id="4-文件提交到仓库-也就是你所在的分支上"><a href="#4-文件提交到仓库-也就是你所在的分支上" class="headerlink" title="4.文件提交到仓库(也就是你所在的分支上)"></a><strong>4.文件提交到仓库(也就是你所在的分支上)</strong></h4><p><code>git commit -m &quot;test1文件提交&quot;</code></p><p>注：和svn的区别，git一般提交在本地就可以了，而svn需要集中式管理</p><p><code>svn commit -m “LogMessage” [-N] [–no-unlock] PATH</code></p><p>后面需要加锁或者远程服务器路径</p><p>注：git会在初始化仓库的时候为我们创建一个分支，一般为master</p><h4 id="5-查看是否还有文件未提交"><a href="#5-查看是否还有文件未提交" class="headerlink" title="5.查看是否还有文件未提交"></a><strong>5.查看是否还有文件未提交</strong></h4><p><code>git status</code></p><h4 id="6-查看修改的文件的差异"><a href="#6-查看修改的文件的差异" class="headerlink" title="6.查看修改的文件的差异"></a><strong>6.查看修改的文件的差异</strong></h4><p><code>git diff test1.txt</code></p><h4 id="7-查看历史提交版本记录"><a href="#7-查看历史提交版本记录" class="headerlink" title="7.查看历史提交版本记录"></a><strong>7.查看历史提交版本记录</strong></h4><p><code>git log</code></p><p><code>git log –pretty=oneline </code>只显示版本密钥和版本注释</p><p><code>git reflog</code>获取带版本号的版本</p><h4 id="8-版本回退"><a href="#8-版本回退" class="headerlink" title="8.版本回退"></a><strong>8.版本回退</strong></h4><p><code>git reset --hard HEAD^</code><br>表示回退到上个版本</p><p><code>git reset --hard 版本号</code></p><p><code>git reset --hard HEAD~100</code><br>表示回退到前100个版本</p><h4 id="9-内容撤销"><a href="#9-内容撤销" class="headerlink" title="9.内容撤销"></a><strong>9.内容撤销</strong></h4><p>①当test1.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态。</p><p>②另外一种是test1.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态。</p><p><code>git checkout  --test1.txt</code></p><p><strong>注意：checkout后面如果没有–的命令的话，就会变成切换分支</strong></p><h4 id="10-删除文件"><a href="#10-删除文件" class="headerlink" title="10.删除文件"></a><strong>10.删除文件</strong></h4><p><code>rm test1.txt</code></p><p>直接删除文件即可，因为此时还没有提交到版本库，还需要<code>git commit</code>或者使用<code>git checkout --test1.txt</code>撤销删除，回复test1.txt文件。</p><p>好了今天就到这，明天继续~</p>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django编码错误</title>
    <link href="/2020/03/26/django%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/"/>
    <url>/2020/03/26/django%E7%BC%96%E7%A0%81%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<p>Django2.2 安装后，使用runserver进行开发，出错时错误信息只显示于控制台命令行，而在前端页面只显示一行</p><p><code>“A server error occurred. Please contact the administrator.”</code></p><p>排错很不方便，仔细查看控制台的错误信息，提示</p><p><code>UnicodeDecodeError: ‘gbk’ codec can’t decode byte 0xa6 in position 9737: ill…</code></p><p>判断这个版本django由于出错信息的代码有编码读取问题 造成无法正常显示。</p><p>根据提示找到 python安装路径<code>\Lib\site-packages\django\views\debug.py</code> ，打开后，修改约在 331 行处，将：</p><p>   <code> with Path(CURRENT_DIR, &#39;templates&#39;, &#39;technical_500.html&#39;).open() as fh:</code></p><p>修改为</p><p>   <code> with Path(CURRENT_DIR, &#39;templates&#39;, &#39;technical_500.html&#39;).open(encoding=&#39;utf-8&#39;) as fh:</code></p><p>也就是进行编码设置 ，然后再重新 启动runserver，出错信息即可正常显示在页面显示。</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>leetcode 409.最长回文串</title>
    <link href="/2020/03/25/leetcode%20409.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
    <url>/2020/03/25/leetcode%20409.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
    
    <content type="html"><![CDATA[<h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a><strong>原题：</strong></h4><p>给定一个包含大写字母和小写字母的字符串，找到通过这些字母构造成的最长的回文串。</p><p>在构造过程中，请注意区分大小写。比如 “Aa” 不能当做一个回文字符串。</p><h4 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h4><p>采用Counter计数器，观察回文串的规律</p><p>需要满足几个条件：</p><p>①偶数个数的一类相同字母完全满足条件</p><p>②奇数个数的一类相同字母去偶数个，剩下的一个需要进行条件判断，看是否需要+1，一旦max_nums mod 2 == 0 and value % 2 == 1 ，这说明之前已经<br>有一个奇数字母存在了，就需要max_nums + 1</p><p>注意：回文字符串中必须最多1个奇数的字母存在</p><h4 id="代码："><a href="#代码：" class="headerlink" title="** 代码：**"></a>** 代码：**</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">longestPalindrome</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> Counter<br>        result = Counter(s)<br>        <span class="hljs-comment"># 用来记录总长度</span><br>        max_nums = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 用来为长度大于2且长度为奇数，需要+1</span><br>        odd = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> result.values():<br>            max_nums += value//<span class="hljs-number">2</span>*<span class="hljs-number">2</span><br>            <span class="hljs-comment"># 利用0%2==0的一个特性，来使得包含只有一个字符的字母满足要求或长度大于2且长度为奇数的字母满足要求</span><br>            <span class="hljs-keyword">if</span> max_nums%<span class="hljs-number">2</span> ==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> value % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>                max_nums += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> max_nums<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式匹配大全</title>
    <link href="/2020/03/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%A4%A7%E5%85%A8/"/>
    <url>/2020/03/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E5%A4%A7%E5%85%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="python中的re模块："><a href="#python中的re模块：" class="headerlink" title="python中的re模块："></a><strong>python中的re模块：</strong></h3><h4 id="常用的语法"><a href="#常用的语法" class="headerlink" title="常用的语法"></a>常用的语法</h4><p>通配符 含义 正则示例 匹配结果</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`reg1 | reg2` 匹配正则表达式reg1或reg2 foo | bar foo<br><br>`.` 匹配任何字符(\n除外) a.a abc<br><br>`^ 匹配字符串起始部分 ^a ab....<br><br>`$` 匹配字符串终止部分 .txt$ a.txt<br><br>`*` 匹配<span class="hljs-number">0</span>次或者多次前面出现的正则表达式 a* aaaaa<br><br>`+` 匹配<span class="hljs-number">1</span>次或者多次前面出现的正则表达式 [a-z]+ aasx<br><br>`?` 匹配<span class="hljs-number">0</span>次或者<span class="hljs-number">1</span>次前面出现的正则表达式 first? first<br><br>`&#123;N&#125;` 匹配N次前面出现的正则表达式 *.c&#123;<span class="hljs-number">2</span>&#125; first.c abc.c<br><br>`&#123;M,N&#125;` 匹配M~N次前面出现的正则表达式 *.c&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&#125; one.c<br><br>`[...]` 匹配来自字符集的任意单个字符 [abc] b<br><br>`[...x-y...]` 匹配x~y范围中的任意单个字符 [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>] <span class="hljs-number">9</span><br><br>`[^...]` 不匹配次字符集中任意单个字符 [^<span class="hljs-number">0</span>-<span class="hljs-number">9</span>] a<br><br>`(*|+|?|&#123;&#125;)?` 匹配上面频繁出现符号的非贪婪版 (*|+|?|&#123;&#125;)? (&#123;&#125;)<br><br>`(...)` 匹配封闭的正则表达式，然后另存为子组 ([<span class="hljs-number">0</span>-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])? <span class="hljs-number">12</span><br><br>`\d` 匹配任何十进制数字 \d.txt <span class="hljs-number">1</span>.txt<br><br>`\w` 匹配任何字母数字字符 \w&#123;<span class="hljs-number">2</span>&#125;txt <span class="hljs-number">1</span>.txt<br><br>`\s` 匹配任何空格字符 a\sb a b<br><br>`\b` 匹配任何单词边界 The\bdog The dog<br><br>`\N` 匹配已保存的子组 ([<span class="hljs-number">0</span>-<span class="hljs-number">9</span>])\<span class="hljs-number">1</span> <span class="hljs-number">1</span><br><br>`\.` 匹配<span class="hljs-string">&quot;.&quot;</span>这个字符 a\.txt a.txt<br></code></pre></td></tr></table></figure><p>正则表达式 描述 匹配结果</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs inform7">`\d+(\.\d*)?` 任意整数和浮点数 0.004 2 75.<br><br>`\b<span class="hljs-comment">[^\Wa-z0-9_]</span><span class="hljs-comment">[^\WA-Z0-9_]</span>*\b `首字母只能大写 Boo Foo<br><br>`^http:\/\/(<span class="hljs-comment">[\w-]</span>+(\.<span class="hljs-comment">[\w-]</span>+)+(\/<span class="hljs-comment">[\w-.\/\?%&amp;=\u4e00-\u9fa5]</span>*)?)?$` 验证网址 http://www.baidu.com/?id=1<br><br>`^<span class="hljs-comment">[\u4e00-\u9fa5]</span>&#123;0,&#125;$` 验证汉字 汉字汉字<br><br>`\w+(<span class="hljs-comment">[-+.&#x27;]</span>\w+)*@\w+(<span class="hljs-comment">[-.]</span>\w+)*\.\w+(<span class="hljs-comment">[-.]</span>\w+)*`  验证电子邮件 example@163.com<br><br>`^<span class="hljs-comment">[1-9]</span>(<span class="hljs-comment">[0-9]</span>&#123;16&#125;|<span class="hljs-comment">[0-9]</span>&#123;13&#125;)<span class="hljs-comment">[xX0-9]</span>$` 验证身份证 14525419951215445X<br><br>`^13<span class="hljs-comment">[0-9]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;8&#125;|^15<span class="hljs-comment">[9]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;8&#125; `验证手机号 138459572***<br><br>`^(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;2&#125;|<span class="hljs-comment">[1-9]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;1&#125;|<span class="hljs-comment">[1-9]</span>)\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;2&#125;|<span class="hljs-comment">[1-9]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;1&#125;|<span class="hljs-comment">[1-9]</span>|0)\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;2&#125;|<span class="hljs-comment">[1-9]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;1&#125;|<span class="hljs-comment">[1-9]</span>|0)\.(25<span class="hljs-comment">[0-5]</span>|2<span class="hljs-comment">[0-4]</span><span class="hljs-comment">[0-9]</span>|<span class="hljs-comment">[0-1]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;2&#125;|<span class="hljs-comment">[1-9]</span>&#123;1&#125;<span class="hljs-comment">[0-9]</span>&#123;1&#125;|<span class="hljs-comment">[0-9]</span>)$ `验证IP 192.168.1.1<br><br>`^<span class="hljs-comment">[a-zA-Z0-9]</span>+(<span class="hljs-comment">[a-zA-Z0-9\-\.]</span>+)?\.s|)$` 验证域名 baidu.com<br><br>`^(<span class="hljs-comment">[a-zA-Z]</span>\:|\\)\\(<span class="hljs-comment">[^\\]</span>+\\)*<span class="hljs-comment">[^\/:*?&quot;&lt;&gt;|]</span>+\.txt(l)?$` 验证文件路径 C:\user\wo<br><br>`&lt;(.*)&gt;(.*)&lt;\/(.*)&gt;|&lt;(.*)\/&gt;` HTML标签匹配 xxxx<br><br></code></pre></td></tr></table></figure><h4 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`compile(pattern, flags = <span class="hljs-number">0</span>) 　　`　　　　 匹配任何可选的标记来编译正则表达式的模 式，然后返回一个正则表达式对象<br><br>`match(pattern, string, flags = <span class="hljs-number">0</span>)　　`　　 使用带有可选标记的正则表达式的模式来匹配字符串。如果匹配成功，返回匹配对象，否则返回None<br><br>`search(pattern, string ,flags = <span class="hljs-number">0</span>) 　`　　　使用可选标记搜索字符串中第一次出现的正则表达式模式。如果匹配成功，则返回匹配对象，否则返回None<br><br>`findall(pattern, string[,flags] ) 　`　　　     查找字符串中所有(非重复)出现的正则表达式模式，并返回一个匹配列表<br><br>`finditer(pattern, string[,flags] ) 　`　　　   与findall()相同，但返回的是一个迭代器。对于每一次匹配，迭代器都能返回一个匹配对象<br><br>`split(pattern, string, max = <span class="hljs-number">0</span>) 　　　`　    根据正则表达式的模式分隔符，split函数将字符串分割为列表，返回匹配列表，分割最多操作max次<br><br>`group(num = <span class="hljs-number">0</span>) 　　　　`　　　　  　　  返回整个匹配对象，或者编号为num的特定子组<br><br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br><br>`^` 匹配字符串的开头<br><br>`$ `匹配字符串的末尾。<br><br>`.` 匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。<br><br>`[...] `用来表示一组字符,单独列出：[amk] 匹配 &#x27;a&#x27;，&#x27;m&#x27;或&#x27;k&#x27;<br><br>`[^...]` 不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。<br><br>`re*` 匹配<span class="hljs-number">0</span>个或多个的表达式。<br><br>`re+` 匹配<span class="hljs-number">1</span>个或多个的表达式。<br><br><br>`re?` 匹配<span class="hljs-number">0</span>个或<span class="hljs-number">1</span>个由前面的正则表达式定义的片段，非贪婪方式<br><br>`re&#123; n&#125;` 匹配n个前面表达式。例如，<span class="hljs-string">&quot;o&#123;2&#125;&quot;</span>不能匹配<span class="hljs-string">&quot;Bob&quot;</span>中的<span class="hljs-string">&quot;o&quot;</span>，但是能匹配<span class="hljs-string">&quot;food&quot;</span>中的两个o。<br><br>`re&#123; n,&#125;` 精确匹配n个前面表达式。例如，<span class="hljs-string">&quot;o&#123;2,&#125;&quot;</span>不能匹配<span class="hljs-string">&quot;Bob&quot;</span>中的<span class="hljs-string">&quot;o&quot;</span>，但能匹配<span class="hljs-string">&quot;foooood&quot;</span>中的所有o。<span class="hljs-string">&quot;o&#123;1,&#125;&quot;</span>等价于<span class="hljs-string">&quot;o+&quot;</span>。<span class="hljs-string">&quot;o&#123;0,&#125;&quot;</span>则等价于<span class="hljs-string">&quot;o*&quot;</span>。<br><br>`re&#123; n, m&#125;` 匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式<br><br>`a| b` 匹配a或b<br><br>`(re)` 匹配括号内的表达式，也表示一个组<br><br>`(?imx)` 正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。<br><br>`(?-imx)` 正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。<br><br>`(?: re)` 类似 (...), 但是不表示一个组<br><br>`(?imx: re)` 在括号中使用i, m, 或 x 可选标志<br><br>`(?-imx: re)` 在括号中不使用i, m, 或 x 可选标志<br><br>`(?#...)` 注释.<br><br>`(?= re)` 前向肯定界定符。如果所含正则表达式，以 ... 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。<br><br>`(?! re)` 前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功。<br><br>`(?&gt; re)` 匹配的独立模式，省去回溯。<br><br>`\w` 匹配数字字母下划线<br><br>`\W` 匹配非数字字母下划线<br><br>`\s` 匹配任意空白字符，等价于 [\t\n\r\f]。<br><br>`\S` 匹配任意非空字符<br><br>`\d` 匹配任意数字，等价于 [<span class="hljs-number">0</span>-<span class="hljs-number">9</span>]。<br><br>`\D` 匹配任意非数字<br><br>`\A` 匹配字符串开始<br><br>`\Z` 匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。<br><br>`\z` 匹配字符串结束<br><br>`\G` 匹配最后匹配完成的位置。<br><br>`\b` 匹配一个单词边界，也就是指单词和空格间的位置。例如， &#x27;er\b&#x27; 可以匹配<span class="hljs-string">&quot;never&quot;</span> 中的 &#x27;er&#x27;，但不能匹配 <span class="hljs-string">&quot;verb&quot;</span> 中的 &#x27;er&#x27;。<br><br>`\B` 匹配非单词边界。&#x27;er\B&#x27; 能匹配 <span class="hljs-string">&quot;verb&quot;</span> 中的 &#x27;er&#x27;，但不能匹配 <span class="hljs-string">&quot;never&quot;</span> 中的 &#x27;er&#x27;。<br><br>`\n, \t,` 等。 匹配一个换行符。匹配一个制表符, 等<br><br>`\<span class="hljs-number">1</span>...\<span class="hljs-number">9</span>` 匹配第n个分组的内容。<br><br>`\<span class="hljs-number">10</span>` 匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。<br><br></code></pre></td></tr></table></figure><hr><h4 id="正则表达式实例"><a href="#正则表达式实例" class="headerlink" title="正则表达式实例"></a>正则表达式实例</h4><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-symbol">Pp</span>]ython 匹配 <span class="hljs-string">&quot;Python&quot;</span> 或 <span class="hljs-string">&quot;python&quot;</span><br><br>rub[ye] 匹配 <span class="hljs-string">&quot;ruby&quot;</span> 或 <span class="hljs-string">&quot;rube&quot;</span><br><br>[aeiou] 匹配中括号内的任意一个字母<br><br>[<span class="hljs-number">0</span><span class="hljs-number">-9</span>] 匹配任何数字。类似于 [<span class="hljs-number">0123456789</span>]<br><br>[a-z] 匹配任何小写字母<br><br>[<span class="hljs-symbol">A</span>-<span class="hljs-symbol">Z</span>] 匹配任何大写字母<br><br>[a-zA-<span class="hljs-symbol">Z0</span><span class="hljs-number">-9</span>] 匹配任何字母及数字<br><br>[^aeiou] 除了aeiou字母以外的所有字符<br><br>[^<span class="hljs-number">0</span><span class="hljs-number">-9</span>] 匹配除了数字外的字符<br><br>特殊字符类<br><br>实例 描述<br><br>. 匹配除 <span class="hljs-string">&quot;\n&quot;</span> 之外的任何单个字符。要匹配包括 <span class="hljs-string">&#x27;\n&#x27;</span> 在内的任何字符，请使用象 <span class="hljs-string">&#x27;[.\n]&#x27;</span> 的模式。<br><br>\d 匹配一个数字字符。等价于 [<span class="hljs-number">0</span><span class="hljs-number">-9</span>]。<br><br>\<span class="hljs-symbol">D</span> 匹配一个非数字字符。等价于 [^<span class="hljs-number">0</span><span class="hljs-number">-9</span>]。<br><br>\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。<br><br>\<span class="hljs-symbol">S</span> 匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。<br><br>\w 匹配包括下划线的任何单词字符。等价于<span class="hljs-string">&#x27;[A-Za-z0-9_]&#x27;</span>。<br><br>\<span class="hljs-symbol">W</span> 匹配任何非单词字符。等价于 <span class="hljs-string">&#x27;[^A-Za-z0-9_]&#x27;</span>。<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>572.另一个树的子树</title>
    <link href="/2020/03/22/572.%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91/"/>
    <url>/2020/03/22/572.%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%A0%91%E7%9A%84%E5%AD%90%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a><strong>原题：</strong></h4><p>给定两个非空二叉树 s 和 t，检验 s 中是否包含和 t 具有相同结构和节点值的子树。s 的一个子树包括 s 的一个节点和这个节点的所有子孙。s 也可以看做它自身的一棵子树。</p><h3 id="解题思路："><a href="#解题思路：" class="headerlink" title="解题思路："></a><strong>解题思路：</strong></h3><p>这道题主要考察递归思想，比较两棵树的节点。</p><p>有三种可能：</p><p>①两颗树完全相等，s.left,t.left和s.right,t.right同时进行递归<br>②t和s的左子树进行比较，s.left,t进行递归<br>③t和s的右子树进行比较，s.right,t进行递归</p><p>注意：这三个条件应该是相互独立的，采用or运算。</p><p>错误思想：不可把三个条件放在同一表达式中。</p><p>例如:</p><p><code>return (s.val == t.val and self.istree(s.left, t.left) and self.istree(s.right, t.right)) or self.isSubtree(s.left, t) or self.isSubtree(s.right, t)</code></p><p>这种情况下，会破坏他们之间的独立性。导致结果错误！！！</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isSubtree</span>(<span class="hljs-params">self, s: TreeNode, t: TreeNode</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> t:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> t:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> self.istree(s,t) <span class="hljs-keyword">or</span> self.isSubtree(s.left, t) <span class="hljs-keyword">or</span> self.isSubtree(s.right, t)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">istree</span>(<span class="hljs-params">self,s,t</span>):</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> t:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> s <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> t:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> s.val == t.val <span class="hljs-keyword">and</span> self.istree(s.left, t.left) <span class="hljs-keyword">and</span> self.istree(s.right, t.right)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>递归树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django搭配restful api</title>
    <link href="/2020/03/22/Django%E6%90%AD%E9%85%8Drestful%20api/"/>
    <url>/2020/03/22/Django%E6%90%AD%E9%85%8Drestful%20api/</url>
    
    <content type="html"><![CDATA[<h3 id="DRF认证源码分析图"><a href="#DRF认证源码分析图" class="headerlink" title="DRF认证源码分析图"></a>DRF认证源码分析图</h3><img src="/media/editor/restful_20200322112237602775.png" width = "100%" div align=right /><p><strong>安装步骤：</strong></p><p><code>pip install restfulframework</code></p><p><code>from rest_framework import serializers</code></p><p>导入serializers序列化包</p><p><code>from rest_framework.decorators import api_view</code></p><p>导入装饰器来装饰自定义的api视图</p><p><code> REST框架提供了两种编写API视图的封装。</code></p><p>① <code>@api_view</code>装饰器，基于方法的视图。</p><p>② 继承APIView类，基于类的视图。</p><p><strong>例子：获取留言板内容。</strong></p><p>注意视图函数运用restful接口应该通过Response返回，而不是HttpResponse</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">from</span> rest_framework.decorators <span class="hljs-keyword">import</span> api_view<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><br><span class="hljs-keyword">from</span> ..models.models <span class="hljs-keyword">import</span> Message<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> response<br><br><span class="hljs-comment"># 类似于ModelForm表单</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">msg_serializers</span>(<span class="hljs-params">serializers.ModelSerializer</span>):</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Message<br>        fields = (<span class="hljs-string">&#x27;message&#x27;</span>, <span class="hljs-string">&#x27;dates&#x27;</span>, <span class="hljs-string">&#x27;msg_author&#x27;</span>)<br><br><br><span class="hljs-meta">@api_view(<span class="hljs-params">[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">msg_api</span>(<span class="hljs-params">request</span>):</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;GET&#x27;</span>:<br>        msg = Message.message_.<span class="hljs-built_in">all</span>()<br>        serializer = msg_serializers(msg, many=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> Response(serializer.data)<br></code></pre></td></tr></table></figure><p><strong>dispatch源码：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">dispatch</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    `.dispatch()` is pretty much the same as Django&#x27;s regular dispatch,</span><br><span class="hljs-string">    but with extra hooks for startup, finalize, and exception handling.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    self.args = args<br>    self.kwargs = kwargs<br>    request = self.initialize_request(request, *args, **kwargs)  <span class="hljs-comment"># 实例化封装后的request对象</span><br>    self.request = request<br>    self.headers = self.default_response_headers  <span class="hljs-comment"># deprecate?</span><br><br>    <span class="hljs-keyword">try</span>:<br>        self.initial(request, *args, **kwargs)<br><br>        <span class="hljs-comment"># Get the appropriate handler method</span><br>        <span class="hljs-keyword">if</span> request.method.lower() <span class="hljs-keyword">in</span> self.http_method_names:<br>            handler = <span class="hljs-built_in">getattr</span>(self, request.method.lower(),  <span class="hljs-comment"># 反射机制，获取request.method.lower()的内存地址，如果在的话</span><br>                              self.http_method_not_allowed)<br>        <span class="hljs-keyword">else</span>:<br>            handler = self.http_method_not_allowed<br><br>        response = handler(request, *args, **kwargs)  <span class="hljs-comment"># 执行对应的handler方法，返回结果为HttpRespon对象，赋值给</span><br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:<br>        response = self.handle_exception(exc)<br><br>    self.response = self.finalize_response(request, response, *args, **kwargs)<br>    <span class="hljs-keyword">return</span> self.response<br></code></pre></td></tr></table></figure><p>其中比较重要的是handler处的反射机制，获取并执行类视图对应的HTTP方法！</p><p><code>Restful API Framework </code>框架英文文档<a href="https://www.django-rest-framework.org/api-guide/views/">https://www.django-rest-framework.org/api-guide/views/</a></p><p><strong>获取外键所在表内的属性</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">class Information_serializer(serializers.ModelSerializer):<br>    # 通过source获取user中的username属性<br>   <span class="hljs-built_in"> user </span>= serializers.CharField(<span class="hljs-attribute">source</span>=<span class="hljs-string">&#x27;user.username&#x27;</span>, <span class="hljs-attribute">read_only</span>=<span class="hljs-literal">True</span>)<br>    email = serializers.CharField(<span class="hljs-attribute">source</span>=<span class="hljs-string">&#x27;user.email&#x27;</span>, <span class="hljs-attribute">read_only</span>=<span class="hljs-literal">True</span>)<br><br>    class Meta:<br>        model = Information<br>        fields = (<span class="hljs-string">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;motto&#x27;</span>, <span class="hljs-string">&#x27;hobby&#x27;</span>, <span class="hljs-string">&#x27;head_image&#x27;</span>, <span class="hljs-string">&#x27;email&#x27;</span>)<br></code></pre></td></tr></table></figure><p><strong>注：通过source属性可以获取到关联表中的具体字段，一般来说，一对一，一对多，多对多，如果直接序列化，外键会被序列化为关联表的主键ID，通常不是我们想要的，因此我们可以使用source重新给关联表的属性赋值。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>restful</tag>
      
      <tag>drf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KD树搜索</title>
    <link href="/2020/03/21/KD%E6%A0%91%E6%90%9C%E7%B4%A2/"/>
    <url>/2020/03/21/KD%E6%A0%91%E6%90%9C%E7%B4%A2/</url>
    
    <content type="html"><![CDATA[<h3 id="KD树的创建和KD树的搜索实现："><a href="#KD树的创建和KD树的搜索实现：" class="headerlink" title="KD树的创建和KD树的搜索实现："></a><strong>KD树的创建和KD树的搜索实现：</strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createTree</span>(<span class="hljs-params">dataset,depth</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    dataset为数据集，depth为深度</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    treeNode=&#123;&#125;<br>    m=np.shape(dataset)[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> m==<span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">else</span>:<br>        m,n=np.shape(dataset)    <br>        split=(depth%n)<br>        dataset=<span class="hljs-built_in">sorted</span>(dataset,key=<span class="hljs-keyword">lambda</span> x:x[split])<br>        median=m//<span class="hljs-number">2</span>       <span class="hljs-comment">#获取中位数</span><br>        treeNode[<span class="hljs-string">&#x27;split&#x27;</span>]=split   <span class="hljs-comment">#设置按照哪一维度划分</span><br>        treeNode[<span class="hljs-string">&#x27;median&#x27;</span>]=dataset[median]  <span class="hljs-comment">#设置中位数组</span><br>        depth+=<span class="hljs-number">1</span><br>        treeNode[<span class="hljs-string">&#x27;left&#x27;</span>]=createTree(dataset[<span class="hljs-number">0</span>:median],depth)  <span class="hljs-comment">#创建左子树</span><br>        treeNode[<span class="hljs-string">&#x27;right&#x27;</span>]=createTree(dataset[median+<span class="hljs-number">1</span>:],depth) <span class="hljs-comment">#创建右子树</span><br>        <span class="hljs-keyword">return</span> treeNode<br><br>        <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">searchTree</span>(<span class="hljs-params">treeNode,data</span>):</span><br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    data为单独点测试集，为了搜索到最近邻</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment">#n=np.shape(data)[0]</span><br>    <span class="hljs-keyword">if</span> treeNode <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> [<span class="hljs-number">0</span>]*<span class="hljs-built_in">len</span>(data),<span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br>    split=treeNode[<span class="hljs-string">&#x27;split&#x27;</span>]<br>    median_point=treeNode[<span class="hljs-string">&#x27;median&#x27;</span>]<br>    <span class="hljs-keyword">if</span> data[split]&lt;=median_point[split]:   <span class="hljs-comment">#递归到叶子节点</span><br>        nearestPoint,nearestDistance=searchTree(treeNode[<span class="hljs-string">&#x27;left&#x27;</span>],data)<br>    <span class="hljs-keyword">else</span>:<br>        nearestPoint,nearestDistance=searchTree(treeNode[<span class="hljs-string">&#x27;right&#x27;</span>],data)<br>    nowDistance=np.linalg.norm(data-median_point)  <span class="hljs-comment">#计算第二范数的欧式距离</span><br>    <span class="hljs-keyword">if</span> nowDistance&lt;nearestDistance:<br>        nearestDistance=nowDistance<br>        nearestPoint=median_point.copy()<br>    splitDistance=<span class="hljs-built_in">abs</span>(data[split]-median_point[split]) <span class="hljs-comment">#计算维度之间的距离，判断是否与目标点与当前最近点所够成的圆内</span><br>    <span class="hljs-keyword">if</span> splitDistance&gt;nearestDistance:  <span class="hljs-comment">#维度距离大于最小点</span><br>        <span class="hljs-keyword">return</span> nearestPoint,nearestDistance<br>    <span class="hljs-keyword">else</span>:   <span class="hljs-comment">#回溯，寻找与圆相交的点，同时向结点分类相反方向搜索结点，计算两点的距离，获取距离最小值。</span><br>        <span class="hljs-keyword">if</span> data[split]&lt;=median_point[split]:<br>            nextTree=treeNode[<span class="hljs-string">&#x27;right&#x27;</span>]<br>            <span class="hljs-comment">#nearPoint,nearDistance=searchTree(treeNode[&#x27;right&#x27;],data)</span><br>        <span class="hljs-keyword">else</span>:<br>            nextTree=treeNode[<span class="hljs-string">&#x27;left&#x27;</span>]<br>        nearPoint,nearDistance=searchTree(nextTree,data)<br>        <span class="hljs-keyword">if</span> nearDistance&lt;nearestDistance:<br>            nearestDistance=nearDistance<br>            nearestPoint=nearPoint.copy()<br>        <span class="hljs-keyword">return</span> nearestPoint,nearestDistance<br><br><br>dataset=np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">7</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">6</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">8</span>,<span class="hljs-number">7</span>]])<br>tree=createTree(dataset,<span class="hljs-number">0</span>)<br>tree<br><span class="hljs-comment">#dataset[2]</span><br>m,n=searchTree(tree,[<span class="hljs-number">1</span>,<span class="hljs-number">5</span>])<br>m,n<br><br>Out[<span class="hljs-number">85</span>]:<br>(array([<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]), <span class="hljs-number">2.23606797749979</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>KD树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KNN算法</title>
    <link href="/2020/03/21/KNN%E7%AE%97%E6%B3%95/"/>
    <url>/2020/03/21/KNN%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>“””</p><p>author:syz</p><p>technique:k-近邻算法</p><p>优点：精度高，对异常识别不敏感，无数据输入假定</p><p>缺点：时间复杂度高，空间复杂度高</p><p>适用范围：数值型和标称型</p><p>“””</p><h3 id="主要思路："><a href="#主要思路：" class="headerlink" title="主要思路："></a>主要思路：</h3><p>采用欧拉距离运算，取前k个最短距离，然后在这k个距离个数内匹配相应类别的个数，最后取类别个数最高的一个！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy<br><span class="hljs-keyword">import</span> operator<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">createData</span>():</span><br>    group = numpy.array([[<span class="hljs-number">1.0</span>, <span class="hljs-number">1.1</span>], [<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>], [<span class="hljs-number">0</span>, <span class="hljs-number">0.1</span>]])<br>    labels = [<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br>    <span class="hljs-keyword">return</span> group, labels<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">classify_k</span>(<span class="hljs-params">inx, dataset, labels, k</span>):</span><br>    dataSetSize = <span class="hljs-built_in">len</span>(dataset)<br>    datasub = numpy.tile(inx, (dataSetSize, <span class="hljs-number">1</span>)) - dataSetSize  <span class="hljs-comment"># 向量相减</span><br>    dataradical = dataset ** <span class="hljs-number">2</span><br>    datatotal = dataradical.<span class="hljs-built_in">sum</span>(axis=<span class="hljs-number">1</span>)  <span class="hljs-comment"># 按列求量向量间的平方</span><br>    distance = numpy.sqrt(datatotal)  <span class="hljs-comment"># 求根号</span><br>    sort_distance = distance.argsort()  <span class="hljs-comment"># 依据从小到大，返回对应的索引</span><br>    classCount = &#123;&#125;<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):  <span class="hljs-comment"># 取k次</span><br>        votallabel = labels[sort_distance[i]]<br>        classCount[votallabel] = classCount.get(votallabel, <span class="hljs-number">0</span>) + <span class="hljs-number">1</span>  <span class="hljs-comment"># 计算出现目标标签的数量</span><br>    sortedclass = <span class="hljs-built_in">sorted</span>(classCount.items(), key=operator.itemgetter(<span class="hljs-number">1</span>), reverse=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 迭代倒序返回字典</span><br>    <span class="hljs-keyword">return</span> sortedclass[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">autoNum</span>(<span class="hljs-params">dataset</span>):</span><br>    minvals = dataset.<span class="hljs-built_in">min</span>(<span class="hljs-number">0</span>)<br>    maxvals = dataset.<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-built_in">range</span> = maxvals - minvals<br>    zerodata = numpy.zeros(shape=numpy.shape(dataset))<br>    m = dataset.shape(<span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># 利用当前数减去最小数，然后除以范围，进行归一</span><br>    zerodata = dataset - numpy.tile(minvals, (m, <span class="hljs-number">1</span>))<br>    zerodata = zerodata / numpy.tile(<span class="hljs-built_in">range</span>, (m, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> zerodata, <span class="hljs-built_in">range</span>, minvals<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>机器学习</tag>
      
      <tag>KNN</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx和Apache的区别</title>
    <link href="/2020/03/21/nginx%E5%92%8CApache%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/03/21/nginx%E5%92%8CApache%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="uwsgi-wsgi-nginx的区别和关系："><a href="#uwsgi-wsgi-nginx的区别和关系：" class="headerlink" title="uwsgi    wsgi  nginx的区别和关系："></a><strong>uwsgi    wsgi  nginx的区别和关系：</strong></h3><p>简单来说uwsgi是一个符合wsgi协议的服务器，可以搭配任意的框架，只要框架也满足wsgi协议。</p><p>而nginx相当于管家，实现分布式服务器，应对大量客户的请求，作用为反向代理服务器。</p><p>WSGI：PythonWeb服务器网关接口（Python Web Server Gateway Interface），这是一种协议规范，用于规范web server（比如uWSGI）和web application（Flask、Django等）之间的通信方式。这种协议其实是将我们和更加底层的HTTP、TCP等协议分隔开来，使我们在开发的时候可以不用自己去实现这些协议的处理，只关注于更高层次的逻辑处理，实现面向对象的编程。</p><p>uWSGI：uWSGI是一个Web服务器，它实现了WSGI协议、uwsgi、http等协议。它本身可以作为一个服务器单独使用，但是也可以和nginx组合使用。一般Django部署都是用的nginx+uWSGI，可以理解为这种组合性能更优。</p><p>nginx：这是一个高性能的web服务器/反向代理，类似Apache。什么叫反向代理，客户端通过一个代理去访问服务器，这样的代理叫正向代理；同样的服务器前加一个代理和客户端通信，这样的代理叫反向代理。nginx就是用来放在uWSGI前做反向代理。我们在本地开发的时候没有安装过以上服务器，但是也可以python manage.py  runserver运行项目，那是因为Django等框架自带了WSGI服务器，性能不强，可以用于调试。</p><h3 id="一、Nginx特点"><a href="#一、Nginx特点" class="headerlink" title="一、Nginx特点"></a><strong>一、Nginx特点</strong></h3><p>1、轻量级，采用 C 进行编写，同样的 web 服务，会占用更少的内存及资源</p><p>2、抗并发，nginx 以 epoll and kqueue 作为开发模型，处理请求是异步非阻塞的，负载能力比 apache 高很多，而 apache 则是阻塞型的。在高并发下 nginx 能保持低资源低消耗高性能 ，而 apache 在 PHP 处理慢或者前端压力很大的情况下，很容易出现进程数飙升，从而拒绝服务的现象。</p><p>3、服务器并发指的是多个用户同时访问数据库中的同一字段的行为。这样的用户行为对于服务器的性能是一种考验。我们经常能遇到由于并发用户过多而导致的系统缓慢甚至瘫痪现象。比方说，很多使用过那些在线考试报名系统的朋友都会发现，半夜登录系统报名比白天登录系统报名要容，网页反应速度也要快一些，这就是由于晚上的并发用户数比较小的原因。</p><p>4、nginx 处理静态文件好，静态处理性能比 apache 高三倍以上</p><p>5、nginx 的设计高度模块化，编写模块相对简单</p><p>6、nginx 配置简洁，正则配置让很多事情变得简单，而且改完配置能使用 -t 测试配置有没有问题，apache 配置复杂 ，重启的时候发现配置出错了，会很崩溃</p><p>7、nginx 作为负载均衡服务器，支持 7 层负载均衡</p><p>8、负载均衡分为四层和七层，四层模式下这些SYN攻击都会被转发到后端的服务器上；而七层模式下这些SYN攻击自然在负载均衡设备上就截止，不会影响后台服务器的正常运营。</p><p>9、nginx 本身就是一个反向代理服务器，而且可以作为非常优秀的邮件代理服务器</p><p>10、反向代理是代理服务器的一种。服务器根据客户端的请求，从其关系的一组或多组后端服务器（如Web服务器）上获取资源，然后再将这些资源返回给客户端，客户端只会得知反向代理的IP地址，而不知道在代理服务器后面的服务器簇的存在。</p><p>11、启动特别容易, 并且几乎可以做到 7*24 不间断运行，即使运行数个月也不需要重新启动，还能够不间断服务的情况下进行软件版本的升级社区活跃，各种高性能模块出品迅速</p><h3 id="二、Apache特点"><a href="#二、Apache特点" class="headerlink" title="二、Apache特点"></a><strong>二、Apache特点</strong></h3><p>1、select同步阻塞。</p><p>2、一个连接对应一个进程。</p><p>3、用进程处理用户请求，用MPM（多处理模块）来绑定到网络端口上，接受请求，调度子进程处理请求。</p><p>4、当用户请求过多时，开启的进程较多，占用内存大，每秒最多的并发连接请求最多不超过3000个。</p><p>5、一个进程死掉时，不会影响其他的用户</p><p>6、apache的rewrite比nginx强大，在rewrite频繁的情况下，用apache。 </p><p>7、apache发展到现在，模块超多，基本想到的都可以找到。 </p><p>8、apache更为成熟，少bug，nginx的bug相对较多。 </p><p>9、apache超稳定。 </p><p>10、apache对PHP支持比较简单，nginx需要配合其他后端用。 </p><p>11、apache在处理动态请求有优势，一般动态请求要apache去做，nginx适合静态和反向。</p><p>12、apache仍然是目前的主流，拥有丰富的特性，成熟的技术和开发社区。</p><p>原文链接：<a href="https://blog.csdn.net/sosemseo/article/details/91564589">https://blog.csdn.net/sosemseo/article/details/91564589</a></p>]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>中间件</tag>
      
      <tag>nginx</tag>
      
      <tag>Apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>django2.2版本的常见的基本问题</title>
    <link href="/2020/03/20/django2.2%E7%89%88%E6%9C%AC%E7%9A%84%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/"/>
    <url>/2020/03/20/django2.2%E7%89%88%E6%9C%AC%E7%9A%84%E5%B8%B8%E8%A7%81%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="Django2-2版本的常见问题"><a href="#Django2-2版本的常见问题" class="headerlink" title="Django2.2版本的常见问题"></a>Django2.2版本的常见问题</h2><p>1、错误：<br>raise ImproperlyConfigured(‘mysqlclient 1.3.13 or newer is required; you have %s.’ % Database.<strong>version</strong>)<br>django.core.exceptions.ImproperlyConfigured: mysqlclient 1.3.13 or newer is required; you have 0.9.3.</p><p><strong>解决办法：</strong></p><p><code>C:\Python37\Lib\site-packages\django\db\backends\mysql</code></p><p>（python安装目录）打开base.py，注释掉以下内容：</p><p><code>if version &lt; (1, 3, 13):</code></p><p><code>raise ImproperlyConfigured(&#39;mysqlclient 1.3.13 or newer is required; you have %s.&#39; % Database.__version__)</code></p><p>2.错误：</p><p>File “C:\Python37\lib\site-packages\django\db\backends\mysql\operations.py”, line 146, in last_executed_query<br>query = query.decode(errors=’replace’)</p><p>AttributeError: ‘str’ object has no attribute ‘decode’</p><p><strong>解决办法：</strong> 打开此文件把146行的decode修改为encode</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>215. 数组中的第K个最大元素 小顶堆解</title>
    <link href="/2020/03/20/215.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0%20%E5%B0%8F%E9%A1%B6%E5%A0%86%E8%A7%A3/"/>
    <url>/2020/03/20/215.%20%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0%20%E5%B0%8F%E9%A1%B6%E5%A0%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h4 id="原题："><a href="#原题：" class="headerlink" title="原题："></a>原题：</h4><p>Find the kth largest element in an unsorted array.<br>Note that it is the kth largest element in the sorted order,<br>not the kth distinct element.</p><p>大概意思：</p><p>在未排序的数组中找到第 k 个最大的元素。</p><p><strong>注：你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素</strong>。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这道题乍一看还是挺简单的，用sort()排序，然后切片，就行了。</p><p>不过仔细想想，时间复杂度是不是挺大的，尽管sort()采用了二分排序法，但时间复杂度依然为<br>O(n*logn)，还是挺高的。</p><p>这道题的典型做法是采用最小顶堆。也就是堆算法，python有一个库函数，heapq就封装了6种关于最小顶堆的方法。</p><p>这里来详细介绍一下三种方法：</p><p><strong>法一：</strong></p><p>首先很容易想到的是sort()的方法，但是难度为中等的题目应该不至于这样。</p><p>sort()方法的时间复杂度为O(N*logN),空间复杂度为O(1)，因为就地排序</p><p><strong>法二：</strong></p><p>这道题可以使用堆来优化，堆比较列表的优势在于，它可以在插入数据时自动调整位置，使之符合堆特征，即nums[i]总是大于nums[i//2]。这里顺便复习下heap的各个函数用法：</p><p>1.heappush(heap, x) 将x压入堆中</p><p>2.heappop(heap) 从堆中弹出最小的元素</p><p>3.heapify(heap) 让列表具备堆特征</p><p>4.heapreplace(heap, x) 弹出最小的元素，并将x压入堆中，返回弹出的元素</p><p>5.nlargest(n, iter) 返回iter中n个最大的元素</p><p>6.nsmallest(n, iter) 返回iter中n个最小的元素</p><p>其中法二就是采用nlargest直接获取答案</p><p><strong>法三：</strong></p><p>利用最大堆，存储前k个最大的数，最后返回堆底元素就行了。</p><p>主要思路：</p><p>①当<code>i&lt;k</code>,压数据进堆。</p><p>②当<code>i&gt;=k</code>，比较sums[i]和堆底元素，如果大于，则使用heapreplace进行替换，否则跳过。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a><strong>代码：</strong></h3><p><strong>法一：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findKthLargest</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> heappush,heapreplace<br>        <span class="hljs-comment"># 普通的sort()方法</span><br>        <span class="hljs-comment"># 时间复杂度O(N*logN),空间复杂度O(1)</span><br>        nums.sort()<br>        <span class="hljs-keyword">return</span> nums[-k]<br></code></pre></td></tr></table></figure><p><strong>法二</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findKthLargest</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> heappush,heapreplace<br>        <span class="hljs-comment"># 使用堆的nlargest(n,iter)返回前n个最大的数,倒序排练</span><br>        <span class="hljs-keyword">return</span> nlargest(k,nums)[-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p><strong>法三</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findKthLargest</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], k: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-keyword">from</span> heapq <span class="hljs-keyword">import</span> heappush,heapreplace<br>        <span class="hljs-comment"># 使用小顶堆</span><br>        heap = []<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)):<br>            <span class="hljs-keyword">if</span> i &lt; k:<br>                heappush(heap,nums[i])<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> nums[i] &gt; heap[<span class="hljs-number">0</span>]:<br>                    m = heapreplace(heap,nums[i])<br><span class="hljs-comment"># 返回顶部元素</span><br>        <span class="hljs-keyword">return</span> heap[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>题目来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array">https://leetcode-cn.com/problems/kth-largest-element-in-an-array</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>堆排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>25. K 个一组翻转链表</title>
    <link href="/2020/03/19/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
    <url>/2020/03/19/25.%20K%20%E4%B8%AA%E4%B8%80%E7%BB%84%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h4 id="原题"><a href="#原题" class="headerlink" title="原题"></a><strong>原题</strong></h4><p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。</p><p>k 是一个正整数，它的值小于或等于链表的长度。</p><p>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p><p>示例：</p><p>给你这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5</p><p>当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5</p><p>当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p><p><strong>要求</strong>：采用常数空间的复杂度</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="方法一：栈（只需要两个指针实现局部翻转）"><a href="#方法一：栈（只需要两个指针实现局部翻转）" class="headerlink" title="方法一：栈（只需要两个指针实现局部翻转）"></a><strong>方法一：栈</strong>（只需要两个指针实现局部翻转）</h4><p>时间复杂度为O(n),空间复杂度为O(k)。因为栈每次有需要开辟k个空间。</p><p>首先定义一个哨兵节点。</p><p>用栈的思路比较简单，后进先出，每次都可以实现翻转，不过注意的是，不满足k个元素的节点就无需翻转了，因此我们需要有一个<code>temp_head</code>，用来记录能够翻转的节点的最后一个节点的下一个节点，方便与之间翻转过后的节点连接起来。</p><h4 id="方法二：利用三个指针实现局部翻转"><a href="#方法二：利用三个指针实现局部翻转" class="headerlink" title="方法二：利用三个指针实现局部翻转"></a><strong>方法二：利用三个指针实现局部翻转</strong></h4><p>时间复杂度为O(n),空间复杂度为O(1),只需要开辟几个指针节点就ok。</p><p>首先定义</p><p>①一个哨兵节点。</p><p>②一个start节点，用来标记每轮（k次）翻转的头结点，因为一轮中的头结点，肯定会翻转到一轮中的最后去。所以用它来作为与之后所有节点连接的桥梁。所以一开始为head</p><p>③一个标志位flag，用来判断是否满足剩余的节点数量小于k</p><p>其实和法一的跳出判断思想是一样的，只不过法二的这个<code>temp_head</code>由start来代替了，</p><p>思路也是每次提取k个节点出来，将箭头反指，后面指向前面。</p><p>用pre来连接前一次翻转和这次翻转，start用来连接这次翻转后的正常节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Definition for singly-linked list.</span><br><span class="hljs-comment"># class ListNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.next = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseKGroup</span>(<span class="hljs-params">self, head: ListNode, k: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        <br>        self.stack = []<br>        p = ListNode(-<span class="hljs-number">1</span>)<br>        result = p<br>        <span class="hljs-comment"># 状态标志</span><br>        flag = <span class="hljs-literal">True</span><br>        temp_head = head<br>        <span class="hljs-keyword">while</span> head:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>                    flag = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">break</span><br>                self.stack.append(head)<br>                head = head.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-comment"># 更新翻转后的进行连接的节点</span><br>                temp_head = head<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>                cur = self.stack.pop()<br>                p.<span class="hljs-built_in">next</span> = cur<br>                p = cur<br>            <span class="hljs-comment"># 翻转后和后面的节点相连</span><br>            p.<span class="hljs-built_in">next</span> = temp_head<br>        <span class="hljs-keyword">return</span> result.<span class="hljs-built_in">next</span><br>        <br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverseKGroup</span>(<span class="hljs-params">self, head: ListNode, k: <span class="hljs-built_in">int</span></span>) -&gt; ListNode:</span><br>        <span class="hljs-comment"># 定义一个哨兵节点</span><br>        sentry = ListNode(<span class="hljs-number">0</span>)<br>        pre = sentry<br>        start = head<br>        flag = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">while</span> head:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> head:<br>                    <span class="hljs-comment"># 剩余节点数量小于k，跳出</span><br>                    flag = <span class="hljs-literal">False</span><br>                    <span class="hljs-keyword">break</span><br>                head = head.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> flag:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 上次翻转后的节点连接这次翻转后的节点</span><br>            pre.<span class="hljs-built_in">next</span> = self.reverse(start,head)<br>            <span class="hljs-comment"># 连接这次翻转以后的正常节点</span><br>            start.<span class="hljs-built_in">next</span> = head<br>            <span class="hljs-comment"># 更新位置</span><br>            pre = start<br>            <span class="hljs-comment"># 更新位置</span><br>            start = head<br>        <span class="hljs-keyword">return</span> sentry.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reverse</span>(<span class="hljs-params">self,start,end</span>):</span><br>        pre, cur, nexts = <span class="hljs-literal">None</span>, start, start<br>        <span class="hljs-comment"># 三个指针进行局部翻转</span><br>        <span class="hljs-keyword">while</span> cur != end:<br>            nexts = nexts.<span class="hljs-built_in">next</span><br>            <span class="hljs-comment"># 箭头反指</span><br>            cur.<span class="hljs-built_in">next</span> = pre<br>            <span class="hljs-comment"># 更新pre位置</span><br>            pre = cur <br>            <span class="hljs-comment"># 更新cur位置</span><br>            cur = nexts<br>        <span class="hljs-keyword">return</span> pre<br><br><br><br></code></pre></td></tr></table></figure><p>题目来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group">https://leetcode-cn.com/problems/reverse-nodes-in-k-group</a></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>window下修改redis密码</title>
    <link href="/2020/03/18/window%E4%B8%8B%E4%BF%AE%E6%94%B9redis%E5%AF%86%E7%A0%81/"/>
    <url>/2020/03/18/window%E4%B8%8B%E4%BF%AE%E6%94%B9redis%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p><strong>修改密码的两种方法：</strong></p><p>1、在Redis安装文件夹下面，例如‪<code>D:\Redis-x64-3.2.100\</code>，打开<code>redis.windows.conf</code>文件，</p><p>找到<code># requirepass foobared</code>行，</p><p>去掉#号，改为<code>requirepass 12345</code>，</p><p>即将密码改为<code>123456</code>。</p><p>2、在Redis安装文件夹下面，例如<code>‪D:\Redis-x64-3.2.100\</code>，以管理员身份打开CMD命令窗口，</p><p>输入<code>redis-server redis.windows.conf</code>，启动服务。</p><p>3.或者通过<code>redis-cli</code>来修改<br><code>redis-cli</code>进入客户端<br><code>config set requirepass password</code></p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>阿里云服务器部署发送邮件的问题</title>
    <link href="/2020/03/17/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/03/17/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><strong>django自带发邮件模块：</strong><br>from django.core.mail import send_mail</p><p>本地测试使用的是25端口，可以正常发送邮件，但是部署到阿里云服务器上却不能发送</p><p><strong>官方解释：</strong></p><p>因为服务器的25端口是默认关闭的，需要使用SSL加密端口（通常是465）来对外发送邮件，调用的邮件服务器需要支持SSL加密。</p><p><strong>解决方案：</strong></p><p>因此我们就需要将本地设置的25端口改为465端口，同时要注意：EMAIL_USE_SSL和EMAIL_USE_TLS不能同时为True。要将EMAIL_USE_SSL设置为True</p><p><strong>本地配置：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">EMAIL_HOST = <span class="hljs-string">&#x27;smtp.qq.com&#x27;</span>  <span class="hljs-comment"># 发送邮件的stmp服务器</span><br>EMAIL_PORT = <span class="hljs-number">25</span>  <span class="hljs-comment"># stmp协议的端口号</span><br>EMAIL_USE_TLS = <span class="hljs-literal">True</span>  <span class="hljs-comment"># 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)</span><br><span class="hljs-comment"># SSLError [SSL：UNKNOWN_PROTOCOL] unknow如果出现，就将EMAIL_USE_SSL置为False</span><br>EMAIL_USE_SSL = <span class="hljs-literal">False</span>  <span class="hljs-comment"># 使用安全ssl加密，qq企业邮箱要求使用</span><br></code></pre></td></tr></table></figure><p><strong>服务器部署：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">EMAIL_HOST = <span class="hljs-string">&#x27;smtp.qq.com&#x27;</span>  <span class="hljs-comment"># 发送邮件的stmp服务器</span><br>EMAIL_PORT = <span class="hljs-number">465</span>  <span class="hljs-comment"># 搭配SSL</span><br>EMAIL_USE_SSL = <span class="hljs-literal">True</span><span class="hljs-comment"># 使用安全ssl加密，qq企业邮箱要求使用</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>email</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jquery知识点</title>
    <link href="/2020/03/16/jquery%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2020/03/16/jquery%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h4 id="1-带var和不带var的声明的变量的区别："><a href="#1-带var和不带var的声明的变量的区别：" class="headerlink" title="1.带var和不带var的声明的变量的区别："></a>1.带var和不带var的声明的变量的区别：</h4><p>①带var：表示声明了一个全局变量，不可以delete删除；<br>    不带var：表示声明了一个全局属性（window属性），可以delete删除。<br>②当我们使用访问一个没有声明的变量时（不带var），JS会报错；而当我们给一个没有声明的变量赋值时，JS不会报错，相反它会认为我们是要隐式声明一个全局变量，这一点一定要注意。<br>③var name=1 -&gt;不可删除<br>    sex=”girl“ -&gt;可删除<br>     this.age=22 -&gt;可删除<br>④事实上是对属性赋值操作。首先，它会尝试在当前作用域链（如在方法中声明，则当前作用域链代表全局作用域和方法局部作用域）中解析 name； 如果在任何当前作用域链中找到name，则会执行对name属性赋值； 如果没有找到name，它才会在全局对象（即当前作用域链的最顶层对象，如window对象）中创造name属性并赋值。<br>注意！它并不是声明了一个全局变量，而是创建了一个全局对象的属性。<br>⑤在function内部，用var是局部变量，不用var是全局变量。</p><h4 id="2-方式1：用firstChild，lastChild进行元素遍历"><a href="#2-方式1：用firstChild，lastChild进行元素遍历" class="headerlink" title="2.方式1：用firstChild，lastChild进行元素遍历:"></a>2.方式1：用firstChild，lastChild进行元素遍历:</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;list&#x27;</span>);<br><span class="hljs-keyword">var</span> child = list.firstChild;<br><span class="hljs-built_in">console</span>.log(list.nextSibling)<br><span class="hljs-keyword">while</span>(child != list.lastChild)&#123;<br>    <span class="hljs-keyword">if</span>(child.nodeType == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">console</span>.log( child );<br>    &#125;<br>    child = child.nextSibling;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-方式2：使用firstElementChild，nextElementSibling"><a href="#3-方式2：使用firstElementChild，nextElementSibling" class="headerlink" title="3.方式2：使用firstElementChild，nextElementSibling"></a>3.方式2：使用firstElementChild，nextElementSibling</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> list = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;list&#x27;</span>);<br><span class="hljs-keyword">var</span> child = list.firstElementChild;<br><span class="hljs-keyword">while</span>(child)&#123;<br>    <span class="hljs-built_in">console</span>.log( child );<br>    child = child.nextElementSibling;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注：js中的字典可以不加’‘单引号，也可以加单引号不影响！！！因为js会自动转为字符串</strong></p><h4 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h4><p>$(“:button”) 表示匹配所有的按钮。<br>$(“input:checked”)表示匹配所有选中的被选中元素(复选框、单选框等，不包括select中的option)。 </p><p>$(“div.container”)中的‘.‘号表示class， $(“div #msg”)中的‘#‘表示id。那么$(“:button”) 中的‘：‘表示类型(type),如$(“:button”) 表示类型为button的控件，$(“input:checked”)表示所有类型为选中的复选框元素</p><h4 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h4><p>attr 是从页面搜索获得元素值，所以页面必须明确定义元素才能获取值，相对来说较慢。<br>prop是从属性对象中取值，属性对象中有多少属性，就能获取多少值，不需要在页面中显示定义。 </p><p>对于HTML元素本身就带有的固有属性，在处理时，使用prop方法。快速，准确。<br>对于HTML元素我们自己自定义的DOM属性，在处理时，使用attr方法。</p><p>attr和prop的使用场景：<br>1.添加属性名称该属性就会生效应该使用prop();<br>2.是有true,false两个属性使用prop();（如’checked’,’selected’,’disabled’等）<br>3.其他则使用attr();</p><p><strong>(1) 父页面取子页面的值：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript">top.moreFunLayer = top.layer.open(&#123;<br>               type: <span class="hljs-number">2</span>,<br>               title: <span class="hljs-string">&quot;常用功能&quot;</span>,<br>               area: [<span class="hljs-string">&quot;600pt&quot;</span>, <span class="hljs-string">&quot;150pt&quot;</span>],<br>               content: <span class="hljs-string">&#x27;./workbench/comUseFunc_add.html&#x27;</span>,<br>               success: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">layero, index</span>) </span>&#123;<br>                   <span class="hljs-comment">// console.log(index);</span><br>                   <span class="hljs-built_in">console</span>.log(layero);<br>                   <span class="hljs-built_in">console</span>.log(layero[<span class="hljs-number">0</span>]);<br>                   <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> layero[<span class="hljs-number">0</span>]);<br>                   <span class="hljs-built_in">console</span>.log( $(layero[<span class="hljs-number">0</span>]).find(<span class="hljs-string">&quot;#layui-layer-iframe&quot;</span>+index).contents().find(<span class="hljs-string">&quot;#btn&quot;</span>).val() );<br>                   <span class="hljs-built_in">console</span>.log(layero[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> jQuery);<br>                   <span class="hljs-built_in">console</span>.log(layero[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> HTMLElement);<br>               &#125;<br>           &#125;);<br></code></pre></td></tr></table></figure><p><strong>(2)子页面取父页面的值</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#btn&quot;</span>).click(<span class="hljs-function">()=&gt;</span>&#123;<br>           <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;子页面button触发&quot;</span>);<br>           $(parent.document.getElementsByClassName(<span class="hljs-string">&quot;J_iframe&quot;</span>)[<span class="hljs-number">0</span>]).attr(<span class="hljs-string">&quot;src&quot;</span>);<br>           <span class="hljs-built_in">console</span>.log( $(parent.document.getElementsByClassName(<span class="hljs-string">&quot;J_iframe&quot;</span>)[<span class="hljs-number">0</span>]).contents().find(<span class="hljs-string">&quot;#div&quot;</span>).html() );<br>       &#125;)<br></code></pre></td></tr></table></figure><p>1、子页面要是想取父页面中的js数据，可以在页面中设置一个display为none的div元素或者隐藏的输入框。然后把数据赋值给看不见的元素，然后子页面取父页面的元素值。<br>2、取元素值的时候，中间间隔的有 iframe 元素的话，必须先定位 iframe 元素，然后取 iframe 元素内容，再定位元素。</p>]]></content>
    
    
    <categories>
      
      <category>jquery</category>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 36 . 有效的数独</title>
    <link href="/2020/03/16/Leetcode%2036%20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/"/>
    <url>/2020/03/16/Leetcode%2036%20.%20%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>时间复杂度O（1），空间复杂度O（1）,因为复杂度固定在9*9宫格内</p><p>核心思想采用字典映射，存储每行，每列，每个小型9宫格的元素出现个数，总共有9行9列9块。</p><p>最后采用set，缩减遍历的次数，一旦出现不等于1的值，return False，其他情况下return True。</p><p><strong>注：通过list(dict.values())可以将字典的值转为列表形式。</strong></p><hr><br><br>### 代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isValidSudoku</span>(<span class="hljs-params">self, board: <span class="hljs-type">List</span>[<span class="hljs-type">List</span>[<span class="hljs-built_in">str</span>]]</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-comment"># 规定每9小格为一个box</span><br>        boxs = [&#123;&#125; <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br>        rows = [&#123;&#125; <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br>        columns = [&#123;&#125; <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>)]<br>        boxs_number = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            <span class="hljs-keyword">if</span> i%<span class="hljs-number">3</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> i != <span class="hljs-number">0</span>:<br>                boxs_number += <span class="hljs-number">3</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>                <span class="hljs-keyword">if</span> board[i][j] != <span class="hljs-string">&#x27;.&#x27;</span>:<br>                    rows[i][board[i][j]] = rows[i].setdefault(board[i][j],<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>                    columns[j][board[i][j]] = columns[j].setdefault(board[i][j],<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>                    boxs[boxs_number+j//<span class="hljs-number">3</span>][board[i][j]] = boxs[boxs_number+j//<span class="hljs-number">3</span>].setdefault(board[i][j],<span class="hljs-number">0</span>) + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">9</span>):<br>            b = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">list</span>(boxs[i].values()))<br>            r = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">list</span>(rows[i].values()))<br>            c = <span class="hljs-built_in">set</span>(<span class="hljs-built_in">list</span>(columns[i].values()))<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>                <span class="hljs-keyword">if</span> i != <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> r:<br>                <span class="hljs-keyword">if</span> i != <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> c:<br>                <span class="hljs-keyword">if</span> i != <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>字典映射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux上安装svn与使用</title>
    <link href="/2020/03/16/linux%E4%B8%8A%E5%AE%89%E8%A3%85svn/"/>
    <url>/2020/03/16/linux%E4%B8%8A%E5%AE%89%E8%A3%85svn/</url>
    
    <content type="html"><![CDATA[<h2 id="ubuntu上安装svn"><a href="#ubuntu上安装svn" class="headerlink" title="ubuntu上安装svn"></a><strong>ubuntu上安装svn</strong></h2><p>1.查看是否有旧版本的svn： <code>svn --version</code></p><p>2.如果没有，则安装：<code>sudo apt-get install subversion</code></p><p><strong>注：</strong></p><p><code>sudo apt-get install update</code> ,更新软件列表，会访问源列表里的每个网址，并读取软件列表</p><p><code>sudo aot-get install upgrade</code> ,更新软件包</p><p>3.在/opt目录下创建svn仓库。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-built_in">cd</span> /opt<br>sudo <span class="hljs-built_in">mkdir</span> svn<br><span class="hljs-built_in">cd</span> svn<br>sudo <span class="hljs-built_in">mkdir</span> repository<br></code></pre></td></tr></table></figure><p><strong>注： /opt目录用来安装附加软件包,是用户级的程序目录,可以理解为D:/Software。</strong></p><p>4.修改文件夹的权限（升级为最高权限）：</p><p><code>sudo chmod -R 777 /opt/svn/repository</code></p><p><strong>注：在linux系统中,文件或目录的权限可以分为3种:</strong></p><p>r:4 读<br>w:2 写<br>x:1  执行(运行)<br>－：对应数值0<br>数字 4 、2 和 1表示读、写、执行权限<br>rwx = 4 + 2 + 1 = 7 (可读写运行）<br>rw = 4 + 2 = 6 （可读写不可运行）<br>rx = 4 +1 = 5 （可读可运行不可写）  </p><p><strong>例子：</strong></p><p>最高权限777:(4+2+1) (4+2+1)  (4+2+1)<br>第一个7:表示当前文件的拥有者的权限,7=4+2+1 可读可写可执行权限<br>第二个7:表示当前文件的所属组（同组用户）权限,7=4+2+1 可读可写可执行权限<br>第三个7:表示当前文件的组外权限,7=4+2+1 可读可写可执行权限  </p><p>5.将刚才创建的目录 <code>/opt/svn/repository</code>，指定为版本库：</p><p><code>sudo svnadmin create /opt/svn/repository</code></p><p><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/linux_svn.png"></p><p>注：ll 指令查看详细文件</p><p>6.修改配置：</p><p>①首先修改db文件夹的权限，改为777。db文件夹是存储svn文件的地方</p><p><code>sudo chmod -R 777 /opt/svn/repository/db</code></p><p>②其次修改conf文件夹下面的svnserve.conf文件</p><p>匿名用户可读</p><p>anon-access = read（可改成none，即不可读）</p><p>权限用户可写</p><p>auth-access = write</p><p>密码文件为passwd</p><p>password-db = passwd</p><p>权限文件为authz</p><p>authz-db = authz</p><p>③ 增加用户名和密码</p><p> 修改con文件夹下面的passwd文件，增加用户和用户密码  </p><p>格式：用户名 = 密码  </p><p>sudo vim passwd（增加用户）  </p><p><img src="/media/editor/svn_password_20200316184601942639.png"></p><p>注：这里用户名为admin，密码为admin  </p><p> 修改con文件夹下面的authz文件，增加用户组，目录认证，组权限 </p><p>sudo vim authz（增加用户权限）  </p><p><img src="/media/editor/svn_group_20200316184648901389.png"></p><p><img src="/media/editor/svn_auth_20200316184855417984.png"></p><p><strong>注： 单库模式则设置为：[/] 本例子为单库模式</strong></p><p>如果组内有多个人可以逗号分隔如：组名owner，组员user1,user2则：owner=user1,user2</p><p>对组的访问权限设置：rw，r，w。组名前面加@</p><p><code>@owner=rw</code></p><p>如果单用户设置则一个用户一行:</p><p><code>user1=rw</code></p><p>7.配置防火墙</p><p><strong>关键划重点！！！要添加3690的规则，我当初在这步上卡了很久</strong></p><p>由于LInux原始的防火墙工具iptables过于繁琐，所以ubuntu默认提供了一个基于iptable之上的防火墙工具ufw。</p><p>①启用ufw:  <code>sudo ufw enable</code></p><p>②查看防火墙状态：<code>sudo ufw status</code></p><p>③开启/关闭防火墙 (默认设置是’disable’)：<code>sudo  ufw enable|disable</code></p><p>④转换日志状态：<code>sudo  ufw logging on|off</code></p><p>⑤允许 53 端口: <code>sudo ufw allow 53</code></p><p>禁用 53 端口: <code>sudo ufw delete allow 53</code></p><p>⑥删除以前定义的”允许/拒绝访问20端口”的规则：<code>sudo ufw delete allow/deny 20</code></p><p>8.启动svn仓库</p><p><code>svnserve -d -r /opt/svn/repository</code></p><p><strong>注：-d：表示在后台运行 ，-r：指定服务器的根目录</strong></p><p>8.查看是否安装启动成功</p><p><code>ps -ef|grep svnserve</code></p><p><code>sudo netstat -ntlp</code></p><p>查看端口号，svn的默认端口3690</p><p>9.访问：通过 svn://服务器ip/文件夹名字  从svn客户端访问服务器。默认svn协议。如果要配置http或者https则需要安装apache。</p><p>本例因为是设置的[/]单列模式，则svn://ip地址/  就可以访问</p><h4 id="总结：如果要从本地访问服务器的话，要在服务器端开放3690端口号，命令："><a href="#总结：如果要从本地访问服务器的话，要在服务器端开放3690端口号，命令：" class="headerlink" title="总结：如果要从本地访问服务器的话，要在服务器端开放3690端口号，命令："></a><strong>总结：</strong>如果要从本地访问服务器的话，要在服务器端开放3690端口号，命令：</h4><p><code>sudo ufw allow 3690</code></p><p><strong>注：为什么在目录中看不见自己的上传的项目，因为svn将项目处理成数据库文件，存入道数据版本库中了，只用通过Repo-browser检索式能够在/etc下找到</strong></p><p><strong>1．SVN优缺点</strong></p><p>优点：<br>1、 管理方便，逻辑明确，符合一般人思维习惯。<br>2、 易于管理，集中式服务器更能保证安全性。<br>3、 代码一致性非常高，会从服务器下载所有源码<br>4、 适合开发人数不多的项目开发。<br>缺点：<br>1、 服务器压力太大，数据库容量暴增。<br>2、 如果不能连接到服务器上，基本上不可以工作，看上面第二步，如果服务器不能连接上，就不能提交，还原，对比等等。<br>3、 不适合开源开发（开发人数非常非常多，但是Google app engine就是用svn的）。但是一般集中式管理的有非常明确的权限管理机制（例如分支访问限制），可以实现分层管理，从而很好的解决开发人数众多的问题。  </p><p><strong>2．Git优缺点</strong></p><p>优点：<br>1、适合分布式开发，强调个体。<br>2、公共服务器压力和数据量都不会太大。<br>3、速度快、灵活。<br>4、任意两个开发者之间可以很容易的解决冲突。<br>5、离线工作。<br>缺点：<br>1、学习周期相对而言比较长。<br>2、不符合常规思维。<br>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息。  </p><p><strong>一、SVN常用的命令行操作：</strong></p><p>把文件上传到SVN版本库后,上传的文件不再以文件原来的格式存储,而是被svn以它自定义的格式压缩成版本库数据,存放在版本库中。是不透明的，是原子提交</p><p>一、 SVN常用命令<br>1、将文件checkout到本地目录</p><p>svn co http://路径(目录或文件的全路径)　[本地目录全路径]  –username 用户名 –password 密码</p><p>例子：<code>svn co svn://192.168.0.3/测试工具 /home/testtools --username luke</code></p><p>简写：<code>svn co</code></p><p>2、往版本库中添加新的文件</p><p><code>svn add file</code></p><p>3、将改动的文件提交到版本库</p><p>svn commit -m “LogMessage” [-N] [–no-unlock] PATH(如果选择了保持锁，就使用–no-unlock开关)<br>简写：<code>svn ci</code></p><p>4、加锁/解锁</p><p><code>svn lock -m “LockMessage” [--force] PATH</code></p><p><code>svn unlock PATH</code></p><p>5、更新到某个版本</p><p><code>svn update -r m path</code></p><p>简写：<code>svn up</code></p><p>6、查看文件或者目录状态</p><p>1）<code>svn status path</code>（目录下的文件和子目录的状态，正常状态不显示）</p><p>2）<code>svn status -v path</code>(显示文件和子目录状态)</p><p>简写：<code>svn st</code></p><p>7、删除文件</p><p><code>svn delete path -m “delete test fle”</code></p><p>后面的引号内容为注释</p><p>简写：<code>svn (del, remove, rm)</code></p><p>8、查看日志</p><p><code>svn log path</code></p><p>9、查看文件详细信息</p><p><code>svn info path</code></p><p>10、比较差异</p><p><code>svn diff path</code>(将修改的文件与基础版本比较)</p><p><code>svn diff -r m:n path</code>(对版本m和版本n比较差异)</p><p>简写：<code>svn di</code></p><p>11、将两个版本之间的差异合并到当前文件</p><p><code>svn merge -r m:n path</code></p><p>12、SVN 帮助</p><p><code>svn help</code><br><code>svn help ci</code></p><p>13、创建纳入版本控制下的新目录</p><p><code>svn　mkdir</code>　目录名</p><p>svn　mkdir　-m　“新增目录备注文本注释”　http://目录全路径</p><p><strong>例子：</strong></p><p><code>svn mkdir newdir</code><br><code>svn mkdir -m &quot;Making a new dir.&quot;  svn://localhost/test/newdir</code></p><p><code>14.svn cleanup PATH</code></p><p>清理</p><p><strong>二、 SVN不常用命令</strong></p><p>1、版本库下的文件和目录列表</p><p>  <code>svn list path</code>    显示path目录下的所有属于版本库的文件和目录简写：``svn ls`</p><p>2、恢复本地修改</p><p><code>svn revert</code>: 恢复原始未改变的工作副本文件 (恢复大部份的本地修改)。</p><p>用法: revert PATH… 注意: 本子命令不会存取网络，并且会解除冲突的状况。但是它不会恢复被删除的目录</p><p>3、代码库URL变更</p><p><code>svn switch (sw)</code>: 更新工作副本至不同的URL。</p><p>**用法: **</p><p>(1)、switch URL [PATH]</p><p>更新你的工作副本，映射到一个新的URL，其行为跟“svn update”很像，也会将服务器上文件与本地文件合并。这是将工作副本对应到同一仓库中某个分支或者标记的方法。 </p><p>(2)、switch –relocate FROM TO [PATH…]</p><p>改写工作副本的URL元数据，以反映单纯的URL上的改变。当仓库的根URL变动 (比如方案名或是主机名称变动)，但是工作副本仍旧对映到同一仓库的同一目录时使用这个命令更新工作副本与仓库的对应关系。</p><p>4、解决冲突</p><p>svn resolved: 移除工作副本的目录或文件的“冲突”状态。</p><p>用法: resolved PATH… 注意: 本子命令不会依语法来解决冲突或是移除冲突标记；它只是移除冲突的相关文件，然后让 PATH 可以再次提交。</p><p>5、输出指定文件或URL的内容。</p><p>svn cat 目标[@版本]…如果指定了版本，将从指定的版本开始查找。 svn cat -r PREV filename &gt; filename (PREV 是上一版本,也可以写具体版本号,这样输出结果是可以提交的）</p><p>更详细的指令参考“：<a href="https://blog.csdn.net/gsg8709/article/details/79435741">https://blog.csdn.net/gsg8709/article/details/79435741</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>svn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 225.用队列实现栈</title>
    <link href="/2020/03/16/Leetcode%20225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <url>/2020/03/16/Leetcode%20225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>一句话后进先出</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyStack</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self</span>):</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Initialize your data structure here.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.stack = []<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">push</span>(<span class="hljs-params">self, x: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Push element x onto stack.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        self.stack.append(x)<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pop</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Removes the element on top of the stack and returns that element.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.stack.pop()<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">top</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Get the top element.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.stack[-<span class="hljs-number">1</span>]<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">empty</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">bool</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Returns whether the stack is empty.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.stack <span class="hljs-keyword">else</span> <span class="hljs-literal">False</span> <br><br><br><br><span class="hljs-comment"># Your MyStack object will be instantiated and called as such:</span><br><span class="hljs-comment"># obj = MyStack()</span><br><span class="hljs-comment"># obj.push(x)</span><br><span class="hljs-comment"># param_2 = obj.pop()</span><br><span class="hljs-comment"># param_3 = obj.top()</span><br><span class="hljs-comment"># param_4 = obj.empty()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>User模型与request.user的区别</title>
    <link href="/2020/03/15/User%E6%A8%A1%E5%9E%8B%20%E4%B8%8Erequest.user%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2020/03/15/User%E6%A8%A1%E5%9E%8B%20%E4%B8%8Erequest.user%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>request.user返回值对象为</p><p><code>&lt;class &#39;django.utils.functional.SimpleLazyObject&#39;&gt;</code></p><p>而<code>User.objects.get(username=request.user.username)</code>返回值对象为</p><p><code>&lt;class &#39;django.contrib.auth.models.User&#39;&gt;</code></p><p>这两个对象用法也不同，但是都可以都活属性.来获取其模型字段。</p><p>request.user是没有update，create等方法的，其一般用来对用户进行认证，然后返回一个user对象，等同于get查询的返回值</p><p>一般模型中存在外键约束的赋值用user模型对象，而不用request.user</p>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 38.外观数列</title>
    <link href="/2020/03/15/Leetcode%2038.%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/"/>
    <url>/2020/03/15/Leetcode%2038.%E5%A4%96%E8%A7%82%E6%95%B0%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>动态规划，正向循环，更新保留每次first_str，作为下一次迭代的字符串,遍历字符串数组，如果前一个和后一个相同则继续，记录相同的个数count + 1，不相同，则更新前面相同的临时temp以及重置count = 1。</p><p>最后一个数要分情况单独讨论更新temp，并初始化所有与之相关的参数。方便下一次迭代。</p><p>注意：注意数组的越界问题。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">countAndSay</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">str</span>:</span><br>        first_str=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-comment"># count记录了连续相同的数</span><br>        count=<span class="hljs-number">1</span><br>        temp=<span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span>(n&gt;<span class="hljs-number">0</span>):<br>            <span class="hljs-keyword">if</span> first_str==<span class="hljs-string">&#x27;&#x27;</span>:<br>                first_str=<span class="hljs-string">&#x27;1&#x27;</span><br>                n-=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">set</span>(first_str))==<span class="hljs-number">1</span>:<br>                first_str=<span class="hljs-built_in">str</span>(<span class="hljs-built_in">len</span>(first_str)*<span class="hljs-built_in">int</span>(first_str[<span class="hljs-number">0</span>]))+first_str[<span class="hljs-number">0</span>]<br>                n-=<span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-comment"># 这样写循环虽然很反锁，但是思路还是挺清晰的</span><br>            <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(first_str)):<br>                <span class="hljs-comment"># 如果两个相邻的数相等                 </span><br>                <span class="hljs-keyword">if</span> first_str[index+<span class="hljs-number">1</span>]==first_str[index]:<br>                    <span class="hljs-comment"># 如果为最后两个数，例如 1,1</span><br>                    <span class="hljs-keyword">if</span> (index+<span class="hljs-number">1</span>)==<span class="hljs-built_in">len</span>(first_str)-<span class="hljs-number">1</span>:<br>                        count+=<span class="hljs-number">1</span><br>                        temp+=<span class="hljs-built_in">str</span>(count)+first_str[index]<br>                        first_str=temp<br>                        n-=<span class="hljs-number">1</span><br>                        temp=<span class="hljs-string">&#x27;&#x27;</span><br>                        count=<span class="hljs-number">1</span><br>                        <span class="hljs-keyword">break</span><br>                    <span class="hljs-comment"># 不为最后两个数</span><br>                    <span class="hljs-keyword">else</span>:<br>                        count+=<span class="hljs-number">1</span><br>                 <span class="hljs-comment"># 如果两个相邻的数不相等</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-comment"># 如果最后两个数不相等，例如 2,1</span><br>                    <span class="hljs-keyword">if</span>(index+<span class="hljs-number">1</span>)==<span class="hljs-built_in">len</span>(first_str)-<span class="hljs-number">1</span>:<br>                        temp+=<span class="hljs-built_in">str</span>(count)+first_str[index]<br>                        <span class="hljs-comment"># 因为最后一个字符肯定为 1</span><br>                        first_str=temp+<span class="hljs-string">&#x27;11&#x27;</span><br>                        n-=<span class="hljs-number">1</span><br>                        temp=<span class="hljs-string">&#x27;&#x27;</span><br>                        count=<span class="hljs-number">1</span><br>                        <span class="hljs-keyword">break</span><br>                    <span class="hljs-comment"># 不是最后两个数，且相邻两个数不等，重新计数</span><br>                    <span class="hljs-keyword">else</span>:<br>                        temp+=<span class="hljs-built_in">str</span>(count)+first_str[index]<br>                        count=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> first_str<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 面试题67.字符串转换成整数</title>
    <link href="/2020/03/14/Leetcode%20%E9%9D%A2%E8%AF%95%E9%A2%9867.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/"/>
    <url>/2020/03/14/Leetcode%20%E9%9D%A2%E8%AF%95%E9%A2%9867.%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>法一：就是纯条件判断解法<br>法二：正则表达式匹配，用findall或者match</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strToInt</span>(<span class="hljs-params">self, <span class="hljs-built_in">str</span>: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-comment"># 法一</span><br>        start = <span class="hljs-number">0</span><br>        end = <span class="hljs-number">0</span><br>        result = <span class="hljs-string">&#x27;&#x27;</span><br>        symbol = <span class="hljs-string">&#x27;&#x27;</span><br>        max_ = <span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>-<span class="hljs-number">1</span><br>        min_ = <span class="hljs-number">1</span>&gt;&gt;<span class="hljs-number">31</span><br>        includezero = <span class="hljs-literal">True</span><br>        firstblank = <span class="hljs-number">0</span><br>        <span class="hljs-built_in">str</span> = <span class="hljs-built_in">str</span>.strip()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span> == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;+&#x27;</span>:<br>            symbol = <span class="hljs-string">&#x27;plus&#x27;</span><br>            start += <span class="hljs-number">1</span><br>            end += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            symbol = <span class="hljs-string">&#x27;minus&#x27;</span><br>            start += <span class="hljs-number">1</span><br>            end += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]) &lt; <span class="hljs-number">48</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[<span class="hljs-number">0</span>]) &gt; <span class="hljs-number">57</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(start,<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i])== <span class="hljs-number">48</span> <span class="hljs-keyword">and</span> includezero:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &gt;= <span class="hljs-number">48</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">str</span>[i]) &lt;= <span class="hljs-number">57</span>:<br>                includezero = <span class="hljs-literal">False</span><br>                result += <span class="hljs-built_in">str</span>[i]<br>                end += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">break</span><br>        result = <span class="hljs-built_in">int</span>(result) <span class="hljs-keyword">if</span> result != <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> symbol == <span class="hljs-string">&#x27;plus&#x27;</span> <span class="hljs-keyword">and</span> result &gt; (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)-<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> symbol == <span class="hljs-string">&#x27;plus&#x27;</span>:<br>            <span class="hljs-keyword">return</span> result<br>        <span class="hljs-keyword">if</span> symbol == <span class="hljs-string">&#x27;minus&#x27;</span> <span class="hljs-keyword">and</span> result*-<span class="hljs-number">1</span> &lt; -(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>):<br>            <span class="hljs-keyword">return</span> -(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)<br>        <span class="hljs-keyword">elif</span> symbol == <span class="hljs-string">&#x27;minus&#x27;</span>:<br>            <span class="hljs-keyword">return</span> result*-<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> symbol == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">if</span> result &lt; -(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>):<br>                <span class="hljs-keyword">return</span> -(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)<br>            <span class="hljs-keyword">if</span> result &gt; (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> result<br><br><br><br><br>        <span class="hljs-comment"># 法二</span><br>        <span class="hljs-comment"># int 可以直接去掉0</span><br>        <span class="hljs-keyword">import</span> re<br>        max_ = (<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)-<span class="hljs-number">1</span><br>        min_ = -(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">31</span>)<br>        <span class="hljs-keyword">try</span>:<br>            result = <span class="hljs-built_in">int</span>(re.match(<span class="hljs-string">&#x27;[\+\-]?\d+&#x27;</span>,<span class="hljs-built_in">str</span>.strip()).group(<span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">max</span>(<span class="hljs-built_in">min</span>(result,max_),min_)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 204.质数计算高级性能</title>
    <link href="/2020/03/13/Leetcode%20204.%E8%B4%A8%E6%95%B0%E8%AE%A1%E7%AE%97%E9%AB%98%E7%BA%A7%E6%80%A7%E8%83%BD/"/>
    <url>/2020/03/13/Leetcode%20204.%E8%B4%A8%E6%95%B0%E8%AE%A1%E7%AE%97%E9%AB%98%E7%BA%A7%E6%80%A7%E8%83%BD/</url>
    
    <content type="html"><![CDATA[<p>题目:<br>Count the number of prime numbers less than a non-negative number, n.</p><p>翻译一下：<br>求小于非负整数n个素数数量</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>乍一看是不是很简单，什么边界条件取到根号n就行了，其实它还不是最优的！！！</p><p>对于优化的算法，也就是<code>埃拉托色尼筛选法</code>，循环中置对应值的倍数为0，最后统计为1的个数，也就是质数的个数。</p><p>发现<code>i*2</code>可以优化成<code>i*i</code>,确实减少了循环次数，例如6,可以由2的倍数置为0，也可以由3的倍数置为0，因此<code>i*i</code>在面对较大的值时效率明显会高于<code>i*2</code>!</p><br>### 代码<h4 id="文文请看下面C-语言的"><a href="#文文请看下面C-语言的" class="headerlink" title="文文请看下面C++语言的"></a><strong>文文请看下面C++语言的</strong></h4><img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/u%3D2142033892%2C1299498349%26fm%3D26%26gp%3D0.jpg" width='30%'><h4 id="python"><a href="#python" class="headerlink" title="python"></a><code>python</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">countPrimes</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;超时算法，应对大量数据的时候会超时&#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># 时间复杂度O（n*sqrt(n)）,空间复杂度O（1）</span><br>        <span class="hljs-keyword">import</span> math<br>        nums = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n):<br>            <span class="hljs-keyword">if</span> i == <span class="hljs-number">2</span>:<br>                nums += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(i**<span class="hljs-number">0.5</span>)+<span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">if</span> i%j == <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-built_in">print</span>(i)<br>                nums += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> nums<br><br>        <span class="hljs-string">&#x27;&#x27;&#x27;优化算法&#x27;&#x27;&#x27;</span><br>        <span class="hljs-comment"># 时间复杂度O（sqrt(n)）,空间复杂度O（n）</span><br>        <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        results = [<span class="hljs-number">1</span>]*n<br>        results[<span class="hljs-number">0</span>],results[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,<span class="hljs-built_in">int</span>(n**<span class="hljs-number">0.5</span>)+<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> results[i] == <span class="hljs-number">1</span>:<br>                results[i*<span class="hljs-number">2</span>:n:i] = [<span class="hljs-number">0</span>]*<span class="hljs-built_in">len</span>(results[i*<span class="hljs-number">2</span>:n:i])<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(results)<br></code></pre></td></tr></table></figure><h4 id="C"><a href="#C" class="headerlink" title="C++"></a><code>C++</code></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countPrimes</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//初始默认所有数为质数</span><br>    <span class="hljs-function">vector&lt;<span class="hljs-keyword">bool</span>&gt; <span class="hljs-title">signs</span><span class="hljs-params">(n, <span class="hljs-literal">true</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (signs[i]) &#123;<br>            count++;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + i; j &lt; n; j += i) &#123;<br>                <span class="hljs-comment">//排除不是质数的数</span><br>                signs[j] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>埃拉托色尼筛选法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 12 . 整数转罗马数字</title>
    <link href="/2020/03/12/Leetcode%2012%20.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
    <url>/2020/03/12/Leetcode%2012%20.%20%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>贪心算法：即使得某个状态以前的过程不会影响以后的过程。从大范围逐渐缩小返回，获取局部的最优解。和动态规划不一样哦~动态规划是全局最优解</p><p>贪心算法基本思路：</p><p>建立数学模型来描述问题</p><p>把求解的问题分成若干个子问题</p><p>对每个子问题求解，得到子问题的局部最优解</p><p>把子问题的解局部最优解合成原来问题的一个解</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python3">class Solution:<br>    def intToRoman(self, num: int) -&gt; str:<br>        # 贪心算法<br>        rule &#x3D; (<br>            (&#39;M&#39;, 1000),<br>            (&#39;CM&#39;, 900), (&#39;D&#39;, 500), (&#39;CD&#39;, 400), (&#39;C&#39;, 100),<br>            (&#39;XC&#39;, 90), (&#39;L&#39;, 50), (&#39;XL&#39;, 40), (&#39;X&#39;, 10),<br>            (&#39;IX&#39;, 9), (&#39;V&#39;, 5), (&#39;IV&#39;, 4), (&#39;I&#39;, 1),<br>        )<br>        result &#x3D; &#39;&#39;<br><br><br>        # 法一<br>        <br>        for letter,number in rule:<br>            if num &gt;&#x3D; number:<br>                result +&#x3D; letter*(num&#x2F;&#x2F;number)<br>                num %&#x3D; number<br>        return result<br>       <br> <br>        # 法二<br>        i &#x3D; 0<br>        while i &lt; 13:<br>            while num &gt;&#x3D; rule[i][1]:<br>                # 等于号使得罗马字符尽可能少<br>                result +&#x3D; rule[i][0]<br>                num -&#x3D; rule[i][1]<br>            i +&#x3D; 1<br>        return result<br>        <br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>贪心思想</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 13.罗马数字转整数</title>
    <link href="/2020/03/12/Leetcode%2013.%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <url>/2020/03/12/Leetcode%2013.%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p><strong>原题是这样的：</strong></p><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><p>字符          数值<br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000</p><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><pre><code>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</code></pre><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>采用字典映射</p><p>对于前面的数小于后面的数，采用先减后加的方法，同时最后一位数恒为加</p><br><br>### 代码<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">romanToInt</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:</span><br>        <span class="hljs-comment"># 对于前面的数小于后面的数，采用先减后加的方法，同时最后一位数恒为加</span><br>        dict_ = &#123;<span class="hljs-string">&#x27;I&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;V&#x27;</span>:<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;X&#x27;</span>:<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;L&#x27;</span>:<span class="hljs-number">50</span>,<span class="hljs-string">&#x27;C&#x27;</span>:<span class="hljs-number">100</span>,<span class="hljs-string">&#x27;D&#x27;</span>:<span class="hljs-number">500</span>,<span class="hljs-string">&#x27;M&#x27;</span>:<span class="hljs-number">1000</span>&#125;<br>        sums = <span class="hljs-number">0</span><br>        m = <span class="hljs-built_in">len</span>(s)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>            <span class="hljs-keyword">if</span> i != m-<span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> dict_[s[i]]&lt;dict_[s[i+<span class="hljs-number">1</span>]]:<br>                    sums -= dict_[s[i]]<br>                <span class="hljs-keyword">else</span>:<br>                    sums += dict_[s[i]]<br>            <span class="hljs-keyword">else</span>:<br>                sums += dict_[s[i]]<br>        <span class="hljs-keyword">return</span> sums<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>先减后加</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Leetcode 88.合并两个有序数组</title>
    <link href="/2020/03/12/Leetcode%2088.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <url>/2020/03/12/Leetcode%2088.%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>题目是这样的：<br>Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.</p><p>Note:<br>The number of elements initialized in nums1 and nums2 are m and n respectively.You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.</p><p>稍微翻译一下：<br>给定两个整型数组nums1和nums2,将nums2就地连接到nums1上，并保持升序。</p><p>说明：给定了m作为nums1有效初始数组的大小，n作为nums2有效初始数组的大小。可以假设nums1有足够的空间容纳nums2的所有元素。</p><p>注：有效初始数组表示首位不为0</p><p>###解题思路：</p><h3 id="法一"><a href="#法一" class="headerlink" title="法一:"></a>法一:</h3><p>因为题目要求只能原地修改num1,因此可以使用sort方法()</p><h5 id="时间复杂度O-m-n-log-m-n"><a href="#时间复杂度O-m-n-log-m-n" class="headerlink" title="*时间复杂度O( (m+n) log(m+n))"></a>*<em>时间复杂度O( (m+n) <em>log(m+n))</em></em></h5><p>因为sorted和sort采用二分法排序</p><h5 id="空间复杂度O-1"><a href="#空间复杂度O-1" class="headerlink" title="空间复杂度O(1)"></a><strong>空间复杂度O(1)</strong></h5><p>sort()并没有开辟空间</p><h3 id="法二"><a href="#法二" class="headerlink" title="法二:"></a>法二:</h3><p>同样对于解决数组问题，可以使用双指针，一个指针控制nums1[:m]的移动，另一个指针控制nums2的移动。又因为len(nums1[:m])和</p><p>len(nums2)不一定相同，所以添加额外条件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 因为nums1和num2的数组不一样，当一方的数组遍历完，那么直接将对方数组添加到nums1后面</span><br> <span class="hljs-keyword">if</span> i == m <span class="hljs-keyword">or</span> j == n:<br>       <span class="hljs-keyword">if</span> i == m <span class="hljs-keyword">and</span> j != n:<br>           nums1[k] = nums2[j]<br>           j += <span class="hljs-number">1</span><br>           <span class="hljs-keyword">continue</span><br>       <span class="hljs-keyword">if</span> i != m <span class="hljs-keyword">and</span> j == n:<br>           nums1[k] = temp[i]<br>           i += <span class="hljs-number">1</span><br>           <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><br>#### **文文请看下面java语言的**<img src="https://django-blog-syz.oss-cn-shanghai.aliyuncs.com/u%3D2142033892%2C1299498349%26fm%3D26%26gp%3D0.jpg" width='30%'><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a><code>Python</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">        Do not return anything, modify nums1 in-place instead.</span><br><span class="hljs-string">        &quot;&quot;&quot;</span><br>        <span class="hljs-comment"># sort()方法实现</span><br>        <span class="hljs-keyword">if</span> nums1 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> nums2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> nums1<br>        nums1[m:m+n] = nums2<br>        <span class="hljs-keyword">return</span> nums1.sort()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span>(<span class="hljs-params">self, nums1: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], m: <span class="hljs-built_in">int</span>, nums2: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>], n: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:</span><br>        <span class="hljs-comment"># 双指针,牺牲空间换取时间</span><br>        temp = nums1[:m]<br>        i = <span class="hljs-number">0</span><br>        <span class="hljs-built_in">print</span>(temp)<br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+n):<br>            <span class="hljs-keyword">if</span> i == m <span class="hljs-keyword">or</span> j == n:<br>                <span class="hljs-keyword">if</span> i == m <span class="hljs-keyword">and</span> j != n:<br>                    nums1[k] = nums2[j]<br>                    j += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">continue</span><br>                <span class="hljs-keyword">if</span> i != m <span class="hljs-keyword">and</span> j == n:<br>                    nums1[k] = temp[i]<br>                    i += <span class="hljs-number">1</span><br>                    <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">if</span> temp[i] &lt; nums2[j]:<br>                nums1[k] = temp[i]<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                nums1[k] = nums2[j]<br>                j += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> nums1<br></code></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a><code>Java</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span>[] nums2, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    System.arraycopy(nums2, <span class="hljs-number">0</span>, nums1, m, n);<br>    Arrays.sort(nums1);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span>[] nums2, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-comment">//双指针</span><br>    <span class="hljs-comment">//为nums1创建一个副本</span><br>    <span class="hljs-keyword">int</span> [] nums1_copy = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m];<br>    System.arraycopy(nums1, <span class="hljs-number">0</span>, nums1_copy, <span class="hljs-number">0</span>, m);<br><br>    <span class="hljs-comment">// 指定两个指针初始值</span><br>    <span class="hljs-keyword">int</span> p1 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> p2 = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 为nums1设置一个指针</span><br>    <span class="hljs-keyword">int</span> p = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">//比较temp和nums2,将最小的添加到nums1中</span><br>    <span class="hljs-keyword">while</span> ((p1 &lt; m) &amp;&amp; (p2 &lt; n))<br>      nums1[p++] = (nums1_copy[p1] &lt; nums2[p2]) ? nums1_copy[p1++] : nums2[p2++];<br><br>    <span class="hljs-comment">//如果一方数组添加完毕，那么直接将另一方数组直接填到num1中</span><br>    <span class="hljs-keyword">if</span> (p1 &lt; m)<br>      System.arraycopy(nums1_copy, p1, nums1, p1 + p2, m + n - p1 - p2);<br>    <span class="hljs-keyword">if</span> (p2 &lt; n)<br>      System.arraycopy(nums2, p2, nums1, p1 + p2, m + n - p1 - p2);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>双指针</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的集合和字典</title>
    <link href="/2020/03/11/python%E7%9A%84%E9%9B%86%E5%90%88%E5%92%8C%E5%AD%97%E5%85%B8/"/>
    <url>/2020/03/11/python%E7%9A%84%E9%9B%86%E5%90%88%E5%92%8C%E5%AD%97%E5%85%B8/</url>
    
    <content type="html"><![CDATA[<h4 id="1-可散列的数据类型"><a href="#1-可散列的数据类型" class="headerlink" title="1.可散列的数据类型"></a><strong>1.可散列的数据类型</strong></h4><p>在对象的生命周期中，散列值不变，需要实现<strong>hash</strong>()方法，另外可散列对象还要满足<strong>eq</strong>()方法。如果这两个散列值对象是相等的，那么他们的散列值一定是一样的。</p><p><strong>hash</strong>()：找到进行两个对象比较的依据，返回唯一的可散列的哈希值，int类型</p><p><strong>eq</strong>():比较这两个对象，参照一定的依据比较（一般比较其hash值）</p><p>因此若果这两个对象相等，那么他们的hash值也会相等！</p><hr><h4 id="2。原子不可变类型"><a href="#2。原子不可变类型" class="headerlink" title="2。原子不可变类型"></a><strong>2。原子不可变类型</strong></h4><p>例如str,bytes和数值类型是可散列的。frozenset也是可散列的，元祖的话必须满足包含的元素都是可散列的，该元祖才是可散列的。</p><p>set本身不是可散列的,因为set的参数可以为可变序列，也可以为不可变序列,所以set并不满足原子不可变类型。</p><hr><p>3.字典推导：字典推导类似列表推到，形如{key：value for key,value in dict_.items()}</p><p>Python 3.x 里面，iteritems() 和 viewitems() 这两个方法都已经废除了，而 items() 得到的结果是和 2.x 里面 viewitems() 一致的。在3.x 里 用 items()替换iteritems() ，可以用于 for 来循环遍历。</p><p>python2.x 中 iteritems()返回字典推导后的迭代，不生成列表，不会占用额外内存。</p><hr><h4 id="4-字典的构造方式"><a href="#4-字典的构造方式" class="headerlink" title="4.字典的构造方式"></a><strong>4.字典的构造方式</strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dict_ = &#123;<span class="hljs-string">&#x27;test&#x27;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;name&#x27;</span>:syz&#125;<br>dict_2 = <span class="hljs-built_in">dict</span>(name=<span class="hljs-string">&#x27;syz&#x27;</span>,age=<span class="hljs-number">20</span>)<br>dict_3 = <span class="hljs-built_in">dict</span>(**dict_)<br>dict_4 = <span class="hljs-built_in">dict</span>([(<span class="hljs-string">&#x27;name&#x27;</span>,<span class="hljs-string">&#x27;syz&#x27;</span>),(<span class="hljs-string">&#x27;age&#x27;</span>,<span class="hljs-number">20</span>)])<br></code></pre></td></tr></table></figure><br><p><img src="http://q57iw6pzc.bkt.clouddn.com/creat_dict.png" alt="creat_dict"><br><br></p><hr><h4 id="dict和list比较"><a href="#dict和list比较" class="headerlink" title="dict和list比较"></a><strong>dict和list比较</strong></h4><p>和list比较，dict有以下几个特点：</p><p>（1）查找和插入的速度极快，不会随着key的增加而变慢；</p><p>（2）需要占用大量的内存，内存浪费多。</p><p>而list相反：</p><p>（1）查找和插入的时间随着元素的增加而增加；</p><p>（2）占用空间小，浪费内存很少。</p><hr><br>#### **6.常见的映射方法**<p>（1）dict：最普通的dict方法。setdefault(key,default)方法来处理找不到键的问题，popitem随机返回一个键值，并删除它。</p><p>（2）defaultdict:通过构造defaultdict字典，能够有效的处理找不到的键，具有核心方法<strong>miss</strong>()，调用default_factory。<br><br></p><p><img src="http://q57iw6pzc.bkt.clouddn.com/defaultdict.png" alt="defaultdict"><br><br></p><p>（3）orderedDict():将具名元祖转为orderedDict字典时用到。具有move_to_last(k,[last])将键为k的元素移动到开头会结尾，last为布尔类型，为True则移到末尾，反之移到开头。</p><p>具名元祖的_asdict()方法,转为orderedDict（）方法！<br><br></p><p><img src="http://q57iw6pzc.bkt.clouddn.com/setdefault.png" alt="setdefault"><br><br></p><p><img src="http://q57iw6pzc.bkt.clouddn.com/setdefault_result.png" alt="setdefault_result"><br><br></p><p><img src="http://q57iw6pzc.bkt.clouddn.com/defaultdict.png" alt="defaultdict"><br><br></p><p><img src="http://q57iw6pzc.bkt.clouddn.com/defaultdict_result.png" alt="defaultdict_result"><br><br></p><p><strong>分析：</strong><br>defaudict方法：当调用__getitem__的时候，如果查找不到字典，则会调用__missing__方法，然后调用defaudict创建dict实例,并传入的default_factory参数，将它作为键的默认值，如果没有default_factory则返回keyerror异常。__missing__方法只对__getitem__调用，对.get，in无影响。</p><hr><br><h4 id="6-字典的变种（多种形式）"><a href="#6-字典的变种（多种形式）" class="headerlink" title="**6.字典的变种（多种形式）:"></a>**6.字典的变种（多种形式）:</h4><p>（1）collections.OrderedDict 在添加键的时候总是会保持顺序，有特殊的popitem（last=True/last=False）方法,返回字典的最后一个元素/第一个元素。</p><p>会按照顺序排列键值对！使用跟普通字典类似</p><p>（2）collections.Counter<br>这个映射类型会给键准备一个整数计数器，每次更新一个键就会增加这个计数器，每次修改数值，Counter总会自动排序。<br><br></p><p><img src="http://q57iw6pzc.bkt.clouddn.com/Counter.png" alt="Counter"><br><br></p><p><strong>运行结果：</strong><br><br></p><p><img src="http://q57iw6pzc.bkt.clouddn.com/Counter_result.png" alt="Counter_result"><br><br><br><img src="http://q57iw6pzc.bkt.clouddn.com/dict_update.png" alt="dict_update"><br><br></p><p><strong>运行结果：</strong><br><br><br><img src="http://q57iw6pzc.bkt.clouddn.com/dict_update_result.png" alt="dict_update_result"><br><br></p><h5 id="分析"><a href="#分析" class="headerlink" title="分析:"></a><strong>分析:</strong></h5><p>①Counter的参数为迭代类型，主要用于计数，返回的类型为Counter类型</p><p>②dict的update和Counter的update方法效果不同，前者为覆盖，后者为追加</p><p>（3）collections.UserDict<br>把标准的dict用纯Python实现一遍。相比于dict，UserDict的子类方法更加简洁。多用于继承。</p><p><strong>注：字典的update方法与<code>__getitem__</code>方法有关系,继承dict会忽略掉<code>__getitem__</code>方法，因此继承多采用UserDict，UserString，UserList</strong></p><p><strong>结论：查找键值得时候，最好用字符格式查找！！！</strong></p><hr><h4 id="7-不可变类型："><a href="#7-不可变类型：" class="headerlink" title="7.不可变类型："></a><strong>7.不可变类型：</strong></h4><p>标准库中的所有映射类型都是可变的，通过from types import MappingProxyType<br>来实例化一个不可变的对象。实际上 MappingProxyType创建了dict的一个只读的视图，用户不能修改，而对原数据修改后，视图也会做相应的修改<br><br><br><img src="http://q57iw6pzc.bkt.clouddn.com/MappingProxyType.png" alt="MappingproxyType"><br><br><br><img src="http://q57iw6pzc.bkt.clouddn.com/MappingProxyType_result.png" alt="MappingproxyType"><br><br><br>#####<strong>分析：</strong><br>由上述代码可见经过MappingProxyType实例化的映射类型，只能读，不能修改。</p><p>后面会讲到@property只读特性和@属性.setter设置装饰器</p><hr><h4 id="8-集合论"><a href="#8-集合论" class="headerlink" title="8.集合论"></a><strong>8.集合论</strong></h4><p>（1）set本身是不可散列的，而frozenset可以散列(不可变序列)，set中可以使用&amp;，|等逻辑运算来实现求并集和交集。set添加和删除元素的</p><p>（2）set的方法中，存在反向操作，例如a&amp;b&amp;c&amp;d反向方法是b.intersection(a,c,d)，来求多个集合的交集其中a，c，d为迭代类型对象，而b必须为集合类型。同理b.union(a,c),b.difference(a,c)(差集)等等。s.isdisjoint(z)判断s和z是否不相交。集合多采用运算符来计算。</p><p>（3）对于set集合满足增删等方法，但对于frozenset不可变集合来说，没有add，clear，discard，pop（出栈顶元素，后进先出），remove等增减方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">m = <span class="hljs-built_in">frozenset</span>((<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>))<br>m.remove(<span class="hljs-number">2</span>)<br><br>&gt;&gt;&gt;AttributeError: <span class="hljs-string">&#x27;frozenset&#x27;</span> <span class="hljs-built_in">object</span> has no attribute <span class="hljs-string">&#x27;remove&#x27;</span>  <span class="hljs-comment"># 因为frozenset是不可变集合</span><br></code></pre></td></tr></table></figure><hr><h4 id="9-对set和dict探讨其背后的效率问题"><a href="#9-对set和dict探讨其背后的效率问题" class="headerlink" title="9.对set和dict探讨其背后的效率问题"></a><strong>9.对set和dict探讨其背后的效率问题</strong></h4><p>（1）set和dict的性能远远大于list的性能。dict在面对超大的数据集时，性能略高于set。</p><p>（2）散列表其实是一个稀疏数组，总存在空白元素，在数据结构中，散列表里的单元成为表元，表元由两部分组成，一是对键的引用，二是对值的引用。</p><p>（3）如果两个对象在比较时相等，那么它们的散列值必须相等。越是相似但不相等的对象，它们散列值的差别应该更大。以降低散列冲突的可能性。</p><p>（4）散列表算法：</p><p>1.首先计算散列值，使用散列值得一部分去定位散列表中的一个表元。</p><p>2.判断表元是否为空</p><p>3.如果表元为空，则抛出KeyError异常，否则判断两个键是否相等。</p><p>4.如果相等，则返回对应的键值，否则重新从散列值中选取另一段数字与散列表中另一行表元比较，从第二步再次开始。</p><p> 增大散列表的大小，能够减小发生散列冲突的概率。</p><hr><h4 id="10-一个散列的对象必须同时满足以下条件"><a href="#10-一个散列的对象必须同时满足以下条件" class="headerlink" title="10.一个散列的对象必须同时满足以下条件"></a><strong>10.一个散列的对象必须同时满足以下条件</strong></h4><p>（1）支持hash()函数，得到的散列值是不变的</p><p>（2）通过__eq__（）方法检测其相等性。</p><p>（3）若a==b，则hash(a)==hash(b)</p><p>注：所有用户自定义的对象都是可散列的，散列值有id()获取，它们都不相等。</p><h5 id="hash-函数的用途"><a href="#hash-函数的用途" class="headerlink" title="hash() 函数的用途:"></a><strong>hash() 函数的用途:</strong></h5><p>hash() 函数的对象字符不管有多长，返回的 hash 值都是固定长度的，也用于校验程序在传输过程中是否被第三方（木马）修改，如果程序（字符）在传输过程中被修改hash值即发生变化，如果没有被修改，则 hash 值和原始的 hash 值吻合，只要验证 hash 值是否匹配即可验证程序是否带木马（病毒）。</p><p><strong>注:</strong></p><p>①键的顺序取决于它的添加顺序</p><p>②往字典里添加新键可能会改变已有键的顺序。</p><p>③不要对字典同时进行迭代和修改。尽量在迭代完，再修改。否则会导致字典的键值错位</p><p>id与hash的区别：</p><p>（1）hash函数返回一个整数，两个对象的值相同，则哈希值相同，可以用来判断传输过程中文件是否被破坏。</p><p>（2）id函数同样返回一个整数，他代表一个对象在程序中的唯一身份，其实是这个对象的地址。两个不同的对象即使拥有相同的值，他的id也不相同。python中判断两个对象是否相等，就是看这两个对象的id是否相同。</p><p>散列查找其实通过的是索引查找，效率很高，但是避免不了散列冲突的问题，会导致被保存的元素的位置替换。</p><p>字典中的函数大全</p><p>D为字典实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">D.clear()                         <span class="hljs-comment">#移除D中的所有项</span><br>D.copy()                          <span class="hljs-comment">#返回D的副本</span><br>D.fromkeys(seq[,val])             <span class="hljs-comment">#返回从seq中获得的键和被设置为val的值的字典。可做类方法调用</span><br>D.get(key[,default])              <span class="hljs-comment">#如果D[key]存在，将其返回；否则返回给定的默认值None</span><br>D.has_key(key)                    <span class="hljs-comment">#检查D是否有给定键key</span><br>D.items()                         <span class="hljs-comment">#返回表示D项的(键，值)对列表</span><br>D.iteritems()                     <span class="hljs-comment">#从D.items()返回的(键，值)对中返回一个可迭代的对象</span><br>D.iterkeys()                      <span class="hljs-comment">#从D的键中返回一个可迭代对象</span><br>D.itervalues()                    <span class="hljs-comment">#从D的值中返回一个可迭代对象</span><br>D.keys()                          <span class="hljs-comment">#返回D键的列表</span><br>D.pop(key[,d])                    <span class="hljs-comment">#移除并且返回对应给定键key或给定的默认值D的值</span><br>D.popitem()                       <span class="hljs-comment">#从D中移除任意一项，并将其作为(键，值)对返回</span><br>D.setdefault(key[,default])       <span class="hljs-comment">#如果D[key]存在则将其返回；否则返回默认值None</span><br>D.update(other)                   <span class="hljs-comment">#将other中的每一项加入到D中。</span><br>D.values()                        <span class="hljs-comment">#返回D中值的列表</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 举个栗子</span><br>k = <span class="hljs-built_in">dict</span>.fromkeys([<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>],<span class="hljs-string">&#x27;me&#x27;</span>)<br>k<br>&gt;&gt;&gt;&#123;<span class="hljs-string">&#x27;n&#x27;</span>: <span class="hljs-string">&#x27;me&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-string">&#x27;me&#x27;</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>分析：</strong></p><p>fromkeys作为类方法，生成一个新的字典，第一个参数为迭代类型变量，作为键值，去掉重复的；第二个参数为每个键值的初始值</p><hr><h4 id="11-异常处理KeyError"><a href="#11-异常处理KeyError" class="headerlink" title="11.异常处理KeyError"></a><strong>11.异常处理KeyError</strong></h4><p>在不同地方寻找一个（而不是遍历）键值对，通过try  except，如果再一个字典中找不到该键，则抛出keyerror，进去其他键中取寻找。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>           <span class="hljs-comment"># Check if present in user settings</span><br>           val = self.user_settings[attr]<br><span class="hljs-keyword">except</span> KeyError:<br>           <span class="hljs-comment"># Fall back to defaults</span><br>           val = self.defaults[attr]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
